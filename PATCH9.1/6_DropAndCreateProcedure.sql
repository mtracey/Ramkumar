GO
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_Workers_Assigned' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Workers_Assigned
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_emppay_addAll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emppay_addAll
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_emp_yearearn' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emp_yearearn
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getpivotclaimsadditions' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getpivotclaimsadditions
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_insertstockoutdetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_insertstockoutdetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_UnAssignNitemBarcodeProject' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_UnAssignNitemBarcodeProject
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_unassignnitembarcode' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_unassignnitembarcode
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_ItemHistory' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_ItemHistory
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_inserttransactionmaster' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_inserttransactionmaster
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_InsertStockReturnDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_InsertStockReturnDetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_InsertBarcodeDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_InsertBarcodeDetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_getTransactionMaster' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getTransactionMaster
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_getSupplierdetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getSupplierdetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_getStoredetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getStoredetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getstockquantity' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getstockquantity
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getstockindetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getstockindetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getstockdetailsorder' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getstockdetailsorder
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getprojectlist' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getprojectlist
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getitemissuequantity' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getitemissuequantity
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getitemissueprojectquantity' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getitemissueprojectquantity
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getitemdetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getitemdetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_getallemployees' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getallemployees
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_deletestockoutdetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_deletestockoutdetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_deleteitemsfromstockreturn' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_deleteitemsfromstockreturn
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_DeleteItemsFromStockOut' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_DeleteItemsFromStockOut
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_DeleteItemsFromOrder' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_DeleteItemsFromOrder
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_ValidateStockDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_ValidateStockDetails
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_updatenitembarcode' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_updatenitembarcode



IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_yos_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_yos_update
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_yos_trans_leave' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_yos_trans_leave
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_GetImportedEmployee' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetImportedEmployee
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_YOSEmployeeAutoRec' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_YOSEmployeeAutoRec
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   name = N'sp_YOSLeavesAllowed' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_YOSLeavesAllowed
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetComputeAMCDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetComputeAMCDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_getIDAMCDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getIDAMCDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_AMCAssigned' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_AMCAssigned
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_bulkinsert' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_bulkinsert
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_BulkEmployeeValidate' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_BulkEmployeeValidate
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_CastingVariables' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_CastingVariables
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_GETYOS' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_GETYOS
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Sp_ApplyLeave' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_ApplyLeave
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_GetEmployeeRemarks' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_GetEmployeeRemarks
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_AccomadationDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_AccomadationDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_DelteEmpCheckInCheckOutDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_DelteEmpCheckInCheckOutDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EmpAccomadationDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EmpAccomadationDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetAccomadationDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetAccomadationDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetEmpCheckInCheckOutDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetEmpCheckInCheckOutDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Sp_InsertAccomadationDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_InsertAccomadationDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_InsertEmpCheckInCheckOutDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_InsertEmpCheckInCheckOutDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Sp_UpdateAccomadationDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_UpdateAccomadationDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_UpdateEmpCheckInCheckOutDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_UpdateEmpCheckInCheckOutDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_UpdatePayslipRemarks' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_UpdatePayslipRemarks
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetPayrollProcessOn' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetPayrollProcessOn
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EMP_IR8A_MonthReports' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EMP_IR8A_MonthReports
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetPayrollMonth' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetPayrollMonth
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GeneratePayRollAdvFullMonth' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GeneratePayRollAdvFullMonth
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Sp_IR8A_AppendixB_New' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_IR8A_AppendixB_New
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GeneratePayRollAdv' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GeneratePayRollAdv
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EMP_IR8A_AppendixA_DETAILS' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EMP_IR8A_AppendixA_DETAILS
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_CalculateCPFAW' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_CalculateCPFAW
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'InsertGenerator' AND
                    xtype = 'P' ) 
   DROP PROCEDURE InsertGenerator
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_UserRightsAll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_UserRightsAll
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetLeaveSumDet' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetLeaveSumDet
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_password_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_password_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_CLAIM_CAPING' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_CLAIM_CAPING
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_CLAIM_CAPING_New' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_CLAIM_CAPING_New
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EMP_IR8A_DETAILS_All' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EMP_IR8A_DETAILS_All
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EMP_IR8A_DETAILS' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EMP_IR8A_DETAILS
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetEmployees' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetEmployees
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Sp_RightsMenuHeader' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_RightsMenuHeader
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_PayrollWorkflow_Assignment' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_PayrollWorkflow_Assignment
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_LeaveSupervisor_Assignment' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_LeaveSupervisor_Assignment
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Department_Assigned' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Department_Assigned
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'SP_ClaimSupervisor_Assignment' AND
                    xtype = 'P' ) 
   DROP PROCEDURE SP_ClaimSupervisor_Assignment
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetRosterLockedDate' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetRosterLockedDate
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_ProcessTimesheet' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_ProcessTimesheet
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_passport_expiry' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_passport_expiry
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Roster_Assigned' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Roster_Assigned
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_fund_monthly_report_summary' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_fund_monthly_report_summary
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Group_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Group_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_password_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_password_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_trans_detail' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_trans_detail
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_passport1_expiry' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_passport1_expiry
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_calbday_details' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_calbday_details
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_paySlip' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_paySlip
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emp_get1' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emp_get1
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'insurance_expiry_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE insurance_expiry_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_NRIC_Check' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_NRIC_Check
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'wp_expiry_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE wp_expiry_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'CSOC_expiry_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE CSOC_expiry_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_payslip_email' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_payslip_email
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_IR8A' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_IR8A
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_carry_forward_leaves' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_carry_forward_leaves
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leavereport1' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leavereport1
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leavereport2' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leavereport2
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leavereport3' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leavereport3
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leavereport4' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leavereport4
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_payroll_details_rpt' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_payroll_details_rpt
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_online_giro' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_online_giro
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_cpf_select' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_cpf_select
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EmpSalHistory' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EmpSalHistory
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_payroll_details' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_payroll_details
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_SDL_monthly_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_SDL_monthly_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_cpf_monthly_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_cpf_monthly_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_submit_email' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_submit_email
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EmpSalSummary' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EmpSalSummary
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_email_payroll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_email_payroll
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_CPF1' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_CPF1
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_cpf_detail' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_cpf_detail
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_unlock_payroll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_unlock_payroll
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_payroll_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_payroll_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_paydetailreport2' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_paydetailreport2
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_paydetailreport3' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_paydetailreport3
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_SDL_monthly_report_summary' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_SDL_monthly_report_summary
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_payroll_Update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_payroll_Update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetLockLeaves' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetLockLeaves
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emp_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emp_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emp_overtime' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emp_overtime
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetEmpCPF_Amount' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetEmpCPF_Amount
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetEmployeeCPF_Amount' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetEmployeeCPF_Amount
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_rtptrans' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_rtptrans
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_report2' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_report2
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_report4' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_report4
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_report_monthly' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_report_monthly
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_pending_approval' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_pending_approval
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_allowed_leaves' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_allowed_leaves
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emp_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emp_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_employee_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_employee_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emppayclaim_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emppayclaim_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Hitachi_OT_Report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Hitachi_OT_Report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Hitachi_OT' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Hitachi_OT
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emppendingclaim_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emppendingclaim_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empadd_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empadd_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empclaim_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empclaim_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_email_claim' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_email_claim
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empadd_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empadd_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empclaim_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empclaim_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_new_payslip_emp' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_new_payslip_emp
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_new_payslip_all2' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_new_payslip_all2
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emppay_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emppay_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_payroll_detail_addition' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_payroll_detail_addition
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_getLockAddition' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getLockAddition
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emppay_netpay' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emppay_netpay
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Add_TS_FileUpload' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Add_TS_FileUpload
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_rpt_attachment_schedule' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_rpt_attachment_schedule
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_rpt_emp_get' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_rpt_emp_get
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_comp_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_comp_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_trans_leave' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_trans_leave
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_send_email' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_send_email
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_send_email_status' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_send_email_status
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_get_leavedetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_get_leavedetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_sendclaim_email' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_sendclaim_email
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emppay_deduc' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emppay_deduc
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_payroll_detail_deduction' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_payroll_detail_deduction
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empdeduc_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empdeduc_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_getLockDeduction' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getLockDeduction
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empdeduc_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empdeduc_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empgroup_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empgroup_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_submit_email1' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_submit_email1
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_comp_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_comp_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetEmployeeLeavePolicy' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetEmployeeLeavePolicy
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_addtype_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_addtype_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetEmployeeLeavePolicyByMonthly' AND
                    xtype = 'P' )
   DROP PROCEDURE sp_GetEmployeeLeavePolicyByMonthly
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetDaysInMonth' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetDaysInMonth
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_comp_delete' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_comp_delete
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_addRights_Customize' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_addRights_Customize
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Group_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Group_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Usp_DelGroupRights' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Usp_DelGroupRights
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Usp_InsGroupRights' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Usp_InsGroupRights
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_getAppliedLeaveCount' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getAppliedLeaveCount
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_report3' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_report3
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_report5' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_report5
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'Sp_Leave_Report4_Revised' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_Leave_Report4_Revised
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_IR8ADetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_IR8ADetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_new_payslip_all1' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_new_payslip_all1
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_new_payslip' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_new_payslip
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_new_payslip_all' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_new_payslip_all
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_PayrollGroup_Assigned' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_PayrollGroup_Assigned
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_IR8ADetails_print' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_IR8ADetails_print
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empleave_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empleave_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_new_payslip1' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_new_payslip1
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_getLeftLeaves' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_getLeftLeaves
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_report1' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_report1
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_leave_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_leave_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emp_leaves_adddeduc' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emp_leaves_adddeduc
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_emp_leaves_adddeduc_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_emp_leaves_adddeduc_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_TimeSheet' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_TimeSheet
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_EmployeeWorkflowLevel' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_EmployeeWorkflowLevel
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_LeaveGeneration' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_LeaveGeneration
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_IR8ADetails_all' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_IR8ADetails_all
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_empall_details' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_empall_details
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_ApprovePayRoll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_ApprovePayRoll
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetEmployeePayDetails' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetEmployeePayDetails
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_CheckSuperAdminCount' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_CheckSuperAdminCount
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GenLevyReport' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GenLevyReport
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_DBMaintenance' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_DBMaintenance
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_checkValidLeaveRequest' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_checkValidLeaveRequest
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GeneratePayRoll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GeneratePayRoll
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetManualTimeSheetRec' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetManualTimeSheetRec
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetManualTimeSheetRecCompare' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetManualTimeSheetRecCompare
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_Project_Assigned' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Project_Assigned
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_addtype_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_addtype_update
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_fund_monthly_report' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_fund_monthly_report
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_User_add' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_User_add
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_user_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_user_update
GO
IF EXISTS ( SELECT  name
            FROM    sysobjects
            WHERE   name = N'sp_GetROLLBackLeaves' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_GetROLLBackLeaves
GO
IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_id = OBJECT_ID(N'sp_GetLastDatbaseLogDay'))
   DROP PROCEDURE sp_GetLastDatbaseLogDay
GO
IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_id = OBJECT_ID(N'sp_BulkInsert_Holidays'))
   DROP PROCEDURE sp_BulkInsert_Holidays
GO
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_genledger' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_genledger
GO
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_processtimesheetflexadv' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_processtimesheetflexadv
GO
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_userrighttopayroll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_userrighttopayroll
GO
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_processtimesheetadv' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_processtimesheetadv
GO
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_Workers_Summary_Print' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_Workers_Summary_Print
GO
IF EXISTS ( SELECT  Name
			FROM    sysobjects
		    WHERE   Name = N'sp_Workers_Summary' AND
              xtype = 'P' ) 
	DROP PROCEDURE sp_Workers_Summary
GO

IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_bulkdedtranspose' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_bulkdedtranspose

IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_bulkaddtranspose' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_bulkaddtranspose

IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'Sp_approvemypayroll' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_approvemypayroll

IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_get_giro_emp' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_get_giro_emp

IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_getleavesumdetcomp' AND
                    xtype = 'P' ) 
   DROP PROCEDURE Sp_getleavesumdetcomp
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_dedtype_update' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_dedtype_update
IF EXISTS ( SELECT  Name
           FROM    sysobjects
            WHERE   Name = N'Sp_dedtype_add' AND
                   xtype = 'P' ) 
   DROP PROCEDURE Sp_dedtype_add
IF EXISTS ( SELECT  Name
            FROM    sysobjects
            WHERE   Name = N'sp_processtimesheetforcomp' AND
                    xtype = 'P' ) 
   DROP PROCEDURE sp_processtimesheetforcomp
IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_id = OBJECT_ID(N'sp_InsertDataBaseBackupLog'))
   DROP PROCEDURE sp_InsertDataBaseBackupLog
IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_id = OBJECT_ID(N'sp_EmployeeEarning'))
   DROP PROCEDURE sp_EmployeeEarning
   
   
IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_id = OBJECT_ID(N'sp_Save_Data_ACTATEK_LOGS'))
   DROP PROCEDURE sp_Save_Data_ACTATEK_LOGS
   
   
IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_id = OBJECT_ID(N'sp_BulkInsert_ValidTimeSheet_Data'))
   DROP PROCEDURE sp_BulkInsert_ValidTimeSheet_Data
   
IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_id = OBJECT_ID(N'sp_BulkInsert_TimeSheet'))
   DROP PROCEDURE sp_BulkInsert_TimeSheet   

/****** Object:  StoredProcedure [dbo].[sp_Roster_Assigned]    Script Date: 09/02/2009 11:58:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_Roster_Assigned]
       (
        @RosterID INT ,
        @EmpID VARCHAR(8000) ,
        @Action INT ,
        @retval INT OUTPUT          
       )
AS 
       DECLARE @select VARCHAR(8000)          
       DECLARE @where VARCHAR(8000)           
     
       SET @where = ''
       SET @select = ''
     
       BEGIN      

             IF LEN(@EmpID) > 0 
                BEGIN                                                                                      
                      IF (@Action = 0) 
                         BEGIN  
                               SELECT   @where = 'Where Emp_Code In (' + @EmpID + ')'                                                                                
                         END  
                      IF (@Action = 1) 
                         BEGIN  
                               SELECT   @where = 'Where ID In (' + @EmpID + ')'  
                         END  
                END        
          
 

             IF (@Action = 0) 
                BEGIN  
                      SELECT    @select = 'Insert Into EmployeeAssignedToRoster (Roster_ID, Emp_ID) Select ' +
                                CAST(@RosterID AS VARCHAR(5)) + ',Emp_Code Emp_ID From Employee ' + @where 
                END  
  
             IF (@Action = 1 AND
                 LEN(@EmpID) > 0
                ) 
                BEGIN  
                      SELECT    @select = 'Delete From EmployeeAssignedToRoster ' + @where 
                END  
             EXEC (@select) 
             RETURN          
       END 
GO
/****** Object:  StoredProcedure [dbo].[sp_fund_monthly_report_summary]    Script Date: 09/02/2009 11:57:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_fund_monthly_report_summary]
       (
        @companyid AS INT ,
        @yr AS INT
       )
AS -- sp_fund_monthly_report_summary 17,2010
                     
                    
       CREATE TABLE #tempfundtype
              (
               fundtype VARCHAR(20) COLLATE DATABASE_DEFAULT
              )                      
       INSERT   INTO #tempfundtype
       VALUES   ('SINDA')                      
       INSERT   INTO #tempfundtype
       VALUES   ('MBMF')                      
       INSERT   INTO #tempfundtype
       VALUES   ('CDAC')                      
       INSERT   INTO #tempfundtype
       VALUES   ('ECF')                      
       INSERT   INTO #tempfundtype
       VALUES   ('CCHEST');                 
                        
       WITH PAYROLL(EMP_CODE, EMP_NAME, MONTHNAME, Fundamount, fundtype, company_name)
              AS (SELECT E.EMP_CODE, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) 'EMP_NAME',
					UPPER(SUBSTRING(DATENAME(MM, P.START_PERIOD), 1, 3)) + ' ' + CONVERT(CHAR(4), YEAR(P.START_PERIOD)) [MON],
					ISNULL(Q.fund_amount, 0) Fundamount, Q.fund_type, C.Company_Name
					FROM   prepare_payroll_hdr P 
					Inner Join prepare_payroll_detail	Q On P.trx_id = Q.Trx_ID
					Inner JOin Employee					E On Q.Emp_ID = E.Emp_Code
					Inner Join Company					C On E.Company_ID = C.Company_ID
					Where Q.status = 'G' And E.emp_type IN ('SC', 'SPR', 'SDPR') And C.COMPANY_ID = @companyid AND Year(P.START_PERIOD) = @yr
                 )
            SELECT  b.fundtype, @YR YR, (SELECT Company_name FROM company WHERE company_id = @companyid
                                        ) 'company_name', SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                WHEN 'JAN' THEN Fundamount
                                                                ELSE 0
                                                              END) AS JAN, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                                 WHEN 'FEB' THEN Fundamount
                                                                                 ELSE 0
                                                                               END) AS FEB,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'MAR' THEN Fundamount
                          ELSE 0
                        END) AS MAR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'APR' THEN Fundamount
                                           ELSE 0
                                         END) AS APR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'MAY' THEN Fundamount
                                                            ELSE 0
                                                          END) AS MAY, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'JUN' THEN Fundamount
                                                                             ELSE 0
                                                                           END) AS JUN,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'JUL' THEN Fundamount
                          ELSE 0
                        END) AS JUL, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'AUG' THEN Fundamount
                                           ELSE 0
                                         END) AS AUG, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'SEP' THEN Fundamount
                                                            ELSE 0
                                                          END) AS SEP, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'OCT' THEN Fundamount
                                                                             ELSE 0
                                                                           END) AS OCT,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'NOV' THEN Fundamount
                          ELSE 0
                        END) AS NOV, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'DEC' THEN Fundamount
                                           ELSE 0
                                         END) AS DEC
            FROM    PAYROLL a 
			Inner Join #tempfundtype b On a.fundtype=b.fundtype
            WHERE   a.fundtype IS NOT NULL
            GROUP BY b.fundtype, company_name
GO
/****** Object:  StoredProcedure [dbo].[sp_leave_trans_detail]    Script Date: 09/02/2009 11:58:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_leave_trans_detail] --71,2008,1  
       @Groupid INT ,
       @year INT ,
       @compid INT
AS 
       DECLARE @s FLOAT
       CREATE TABLE #temp1
              (
               empname VARCHAR(50) ,
               LastyrLeaves FLOAT ,
               comppolicy INT ,
               totalleaves FLOAT ,
               currentyrleaves FLOAT ,
               CurrentTotalleaves FLOAT
              )
       INSERT   INTO #temp1
                SELECT  e.emp_id,
                        (SELECT CASE WHEN ISNULL(leaves_allowed, 0) < 0 THEN 0
                                     ELSE ISNULL(leaves_allowed, 0)
                                END
                         FROM   leaves_allowed
                         WHERE  leave_year = 2007 AND
                                leave_type = 8
                        ) -
                        (SELECT ISNULL (SUM (paid_leaves), 0) FROM emp_leaves
                                WHERE YEAR (start_date)= @year - 1 AND leave_type= 8
                        ) AS LaseYearLeaves, (SELECT leaves_years FROM company WHERE company_id= 1
                                             ) 'Company Policy',
                        (SELECT ISNULL (leaves_allowed, 0) FROM leaves_allowed WHERE leave_year= 2007 AND leave_type= 8
                        ) -
                        (SELECT ISNULL (SUM (paid_leaves), 0) FROM emp_leaves
                                WHERE YEAR (start_date)= @year - 1 AND leave_type= 8
                        ) - (SELECT leaves_years FROM company WHERE company_id= 1
                            ) 'TotalLeaves', ISNULL(l.leaves_allowed, 0) CurrentYearLeaves,
                        ((SELECT ISNULL (leaves_allowed, 0) FROM leaves_allowed
                                    WHERE leave_year= @year - 1 AND leave_type= 8
                         ) -
                         (SELECT ISNULL (SUM (paid_leaves), 0) FROM emp_leaves
                                    WHERE YEAR (start_date)= @year - 1 AND leave_type= 8
                         ) - (SELECT leaves_years FROM company WHERE company_id= 1
                             )) + ISNULL(l.leaves_allowed, 0) AS TotalCurrentLeaves
                FROM    emp_leaves e
                LEFT OUTER JOIN leaves_allowed l ON l.leave_type = e.leave_type AND
                                                    l.leave_type = (SELECT id FROM leave_types
                                                                            WHERE type= 'Annual Leave'
                                                                   ) AND
                                                    leave_year = @year AND
                                                    l.group_id = @Groupid
                GROUP BY e.emp_id, l.leaves_allowed

       SELECT   *
       FROM     #temp1
GO
/****** Object:  StoredProcedure [dbo].[sp]    Script Date: 09/02/2009 11:56:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp] @spname NVARCHAR(80)
AS 
       EXEC sp_helptext @spname
GO
/****** Object:  StoredProcedure [dbo].[sp_calbday_details]    Script Date: 09/02/2009 11:56:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_calbday_details]
       @company_id INT ,
       @no_ofDays INT
AS 
       BEGIN              
             CREATE TABLE #temp1 (bdays DATETIME)              
             DECLARE @i INT ,
                     @d DATETIME              
             SELECT @d = GETDATE()              
--SELECT  @d=cast(year(@d) as varchar)              
--+'/'+cast(month(@d) as varchar)              
--+'/'+cast(day(@d) as varchar)              
              
             SET @i = 0              
             WHILE @i <= @no_ofDays 
                   BEGIN              
                         INSERT INTO #temp1
                                SELECT  bdays = DATEADD(day, @i, @d)              
                         SET @i = @i + 1 
                   END              
             SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') AS [Name],
                    DATENAME(month, a.date_of_birth) + ' ' + CONVERT(VARCHAR(15), DAY(a.date_of_birth), 103) 'Date Of Birth'
             FROM   employee AS a
             JOIN   #temp1 AS b ON MONTH(a.date_of_birth) = MONTH(b.bdays) AND
                                   DAY(a.date_of_birth) = DAY(b.bdays) AND
                                   a.termination_date IS NULL AND
                                   a.company_id = @company_id
             ORDER BY b.bdays             
       END

GO
/****** Object:  StoredProcedure [dbo].[sp_NRIC_Check]    Script Date: 09/02/2009 11:58:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_NRIC_Check] @sname VARCHAR(100)
AS --declare @sname varchar(100)    
       DECLARE @firstName VARCHAR    
       DECLARE @lastName VARCHAR    
       DECLARE @totalNumber INT    
       DECLARE @i INT    
       DECLARE @strLength INT    
       DECLARE @result INT    
       DECLARE @lastResult VARCHAR    
    
--set @sname = 'G0634661N'    
       SET @i = 0    
       SET @strLength = LEN(@sname)    
       SET @firstName = UPPER((SUBSTRING(@sname, 1, 1)))    
       SET @lastName = UPPER((SUBSTRING(@sname, @strLength, 1)))    

       SET @totalNumber = 0    
       IF @strLength = 9 
          BEGIN    
                IF (@firstName = 'S' OR
                    @firstName = 'T' OR
                    @firstName = 'F' OR
                    @firstName = 'G'
                   ) 
                   BEGIN    
                         WHILE @i < 7 
                               BEGIN    
                                     DECLARE @temp1 VARCHAR    
                                     DECLARE @temp INT  
                                     SET @temp1 = SUBSTRING(@sname, 2 + @i, 1)    
                                     IF (@temp1 = '0' OR
                                         @temp1 = '1' OR
                                         @temp1 = '2' OR
                                         @temp1 = '3' OR
                                         @temp1 = '4' OR
                                         @temp1 = '5' OR
                                         @temp1 = '6' OR
                                         @temp1 = '7' OR
                                         @temp1 = '8' OR
                                         @temp1 = '9'
                                        ) 
                                        BEGIN    
                                              SET @temp = CAST(@temp1 AS INT)  
                                              IF (@i = 0) 
                                                 SET @totalNumber = @totalNumber + ((ISNULL(@temp, 0)) * 2)      
                                              IF (@i = 1) 
                                                 SET @totalNumber = @totalNumber + ((ISNULL(@temp, 0)) * 7)      
                                              IF (@i = 2) 
                                                 SET @totalNumber = @totalNumber + ((ISNULL(@temp, 0)) * 6)      
                                              IF (@i = 3) 
                                                 SET @totalNumber = @totalNumber + ((ISNULL(@temp, 0)) * 5)      
                                              IF (@i = 4) 
                                                 SET @totalNumber = @totalNumber + ((ISNULL(@temp, 0)) * 4)      
                                              IF (@i = 5) 
                                                 SET @totalNumber = @totalNumber + ((ISNULL(@temp, 0)) * 3)      
                                              IF (@i = 6) 
                                                 SET @totalNumber = @totalNumber + ((ISNULL(@temp, 0)) * 2)      
                                        END    
                                     ELSE 
                                        BEGIN    
                                              SELECT    'no'    
                                              RETURN     
                                        END    
                                     SET @i = @i + 1    
                               END    
                         IF (@firstName = 'S' OR
                             @firstName = 'F'
                            ) 
                            SET @result = @totalNumber % 11    
	
                         IF (@firstName = 'T' OR
                             @firstName = 'G'
                            ) 
                            SET @result = (@totalNumber + 4) % 11        
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 0
                            ) 
                            SET @lastResult = 'J'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 1
                            ) 
                            SET @lastResult = 'Z'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 2
                            ) 
                            SET @lastResult = 'I'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 3
                            ) 
                            SET @lastResult = 'H'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 4
                            ) 
                            SET @lastResult = 'G'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 5
                            ) 
                            SET @lastResult = 'F'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 6
                            ) 
                            SET @lastResult = 'E'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 7
                            ) 
                            SET @lastResult = 'D'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 8
                            ) 
                            SET @lastResult = 'C'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 9
                            ) 
                            SET @lastResult = 'B'    
                         IF ((@firstName = 'S' OR
                              @firstName = 'T'
                             ) AND
                             @result = 10
                            ) 
                            SET @lastResult = 'A'    
    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 0
                            ) 
                            SET @lastResult = 'X'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 1
                            ) 
                            SET @lastResult = 'W'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 2
                            ) 
                            SET @lastResult = 'U'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 3
                            ) 
                            SET @lastResult = 'T'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 4
                            ) 
                            SET @lastResult = 'R'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 5
                            ) 
                            SET @lastResult = 'Q'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 6
                            ) 
                            SET @lastResult = 'P'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 7
                            ) 
                            SET @lastResult = 'N'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 8
                            ) 
                            SET @lastResult = 'M'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 9
                            ) 
                            SET @lastResult = 'L'    
                         IF ((@firstName = 'F' OR
                              @firstName = 'G'
                             ) AND
                             @result = 10
                            ) 
                            SET @lastResult = 'K'    
                         IF (@lastResult = @lastName) 
                            BEGIN    
                                  SELECT    'yes'    
                                  RETURN    
                            END    
                         ELSE 
                            BEGIN    
                                  SELECT    'no'    
                                  RETURN    
                            END        
     
                   END    
                ELSE 
                   BEGIN    
                         SELECT 'no'    
                         RETURN        
                   END    
          END    
       ELSE 
          BEGIN    
                SELECT  'no'    
                RETURN    
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_PayrollGroup_Assigned]    Script Date: 09/02/2009 11:58:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_PayrollGroup_Assigned]    
       (    
        @Company_ID INT ,    
        @PayrollGroupID INT ,    
        @Remarks VARCHAR(50) ,    
        @EmpID VARCHAR(8000) ,    
        @Action INT ,    
        @retval INT OUTPUT          
       )    
AS     
       DECLARE @setpayroll VARCHAR(8000)          
       DECLARE @setwhere VARCHAR(8000)           
       DECLARE @select VARCHAR(8000)          
  Declare @payid int  
       DECLARE @where VARCHAR(8000)           
          
       BEGIN      
  
  Select @payid=ID From EmployeeWorkFlowLevel Where PayrollGroupID = @PayrollGroupID  
  SELECT   @setwhere = ' Where Emp_Code In (' + @EmpID + ')'                                                                                    
             IF LEN(@EmpID) > 0     
                BEGIN                                                                                          
                      IF (@Action = 0)     
                         BEGIN      
                               SELECT   @where = ' Where Emp_Code In (' + @EmpID + ')'                                                                                    
        Select @setpayroll = ' Update Employee Set Pay_Supervisor = ' + CAST(@payid AS VARCHAR(5)) + @setwhere    
                         END      
                      IF (@Action = 1)     
                         BEGIN      
       SELECT   @where = ' Where Emp_ID In (' + @EmpID + ') And PayrollGroupID=' +  CAST(@PayrollGroupID AS VARCHAR(5))  
       Select @setpayroll = ' Update Employee Set Pay_Supervisor = null '  + @setwhere    
                         END      
                END  
             IF (@Action = 0)     
                BEGIN         
                      SELECT    @select = ' Insert Into EmployeeAssignedToPayrollGroup (PayrollGroupID, Emp_ID) Select ' +    
                                CAST(@PayrollGroupID AS VARCHAR(5)) + ',Emp_Code Emp_ID From Employee ' + @where     
                END               
        
             IF (@Action = 1 AND    
                 LEN(@EmpID) > 0    
                )     
                BEGIN      
                      SELECT    @select = ' Delete From EmployeeAssignedToPayrollGroup ' + @where     
                END        
             --EXEC (@setpayroll)     
             EXEC (@select)     
             RETURN          
       END 
GO
/****** Object:  StoredProcedure [dbo].[sp_DBMaintenance]    Script Date: 09/02/2009 11:56:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_DBMaintenance]
AS 
       DECLARE @MyTable VARCHAR(255)
       DECLARE myCursor
       CURSOR FOR
       SELECT table_name
       FROM information_schema.tables
       WHERE table_type = 'base table'
       OPEN myCursor
       FETCH NEXT
FROM myCursor INTO @MyTable
       WHILE @@FETCH_STATUS = 0 
             BEGIN
                   PRINT 'Reindexing Table:  ' + @MyTable
                   DBCC DBREINDEX(@MyTable, '', 80)
                   FETCH NEXT
FROM myCursor INTO @MyTable
             END
       CLOSE myCursor
       DEALLOCATE myCursor
       EXEC sp_updatestats
GO
/****** Object:  StoredProcedure [dbo].[sp_Project_Assigned]    Script Date: 09/02/2009 11:58:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_Project_Assigned]
       (
        @Company_ID INT ,
        @Sub_Project_ID INT ,
        @Remarks VARCHAR(50) ,
        @EmpID VARCHAR(8000) ,
        @Action INT ,
        @retval INT OUTPUT        
       )
AS 
       DECLARE @select VARCHAR(8000)        
       DECLARE @where VARCHAR(8000)         
      
       SET @where = ''
       SET @select = ''
  
       BEGIN    
        
             IF LEN(@EmpID) > 0 
                BEGIN                                                                                      
                      IF (@Action = 0) 
                         BEGIN  
                               SELECT   @where = 'Where Emp_Code In (' + @EmpID + ')'                                                                                
                         END  
                      IF (@Action = 1) 
                         BEGIN  
                               SELECT   @where = 'Where ID In (' + @EmpID + ')'  
                         END  
                END        
  
             IF (@Action = 0) 
                BEGIN  
                      SELECT    @select = 'Insert Into EmployeeAssignedToProject (Sub_Project_ID, Emp_ID) Select ' +
                                CAST(@Sub_Project_ID AS VARCHAR(5)) + ',Emp_Code Emp_ID From Employee ' + @where   
                END  
  
             IF (@Action = 1 AND
                 LEN(@EmpID) > 0
                ) 
                BEGIN  
                      SELECT    @select = 'Delete From EmployeeAssignedToProject ' + @where 
                END  
  
             EXEC (@select)             
        
             RETURN        
       END 
GO
/****** Object:  StoredProcedure [dbo].[sp_fund_monthly_report]    Script Date: 09/02/2009 11:57:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_fund_monthly_report]
       (
        @companyid AS INT ,
        @yr AS INT
       )
AS -- sp_fund_monthly_report 17,2010          
    
       CREATE TABLE #tempfundtype
              (
               fundtype VARCHAR(20) COLLATE DATABASE_DEFAULT
              )                  
       INSERT   INTO #tempfundtype
       VALUES   ('SINDA')                  
       INSERT   INTO #tempfundtype
       VALUES   ('MBMF')                  
       INSERT   INTO #tempfundtype
       VALUES   ('CDAC')                  
       INSERT   INTO #tempfundtype
       VALUES   ('ECF')                  
       INSERT   INTO #tempfundtype
       VALUES   ('CCHEST');
              
                    
       WITH PAYROLL(EMP_CODE, EMP_NAME, MONTHNAME, Fundamount, fundtype, SDL, FWL, COMPANY_NAME)
              AS (SELECT E.EMP_CODE, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) 'EMP_NAME',
					UPPER(SUBSTRING(DATENAME(MM, P.START_PERIOD), 1, 3)) + ' ' + CONVERT(CHAR(4), YEAR(P.START_PERIOD)) [MON],
					ISNULL(Q.fund_amount, 0) 'Fundamount', Q.fund_type 'fundtype', Q.SDL, Q.FWL, C.Company_Name
					FROM   prepare_payroll_hdr P 
					Inner Join prepare_payroll_detail	Q On P.trx_id = Q.Trx_ID
					Inner JOin Employee					E On Q.Emp_ID = E.Emp_Code
					Inner Join Company					C On E.Company_ID = C.Company_ID
					Where Q.status = 'G' And E.emp_type IN ('SC', 'SPR', 'SDPR') And C.COMPANY_ID = @companyid AND Year(P.START_PERIOD) = @yr
                 )
            SELECT  EMP_CODE, isnull(emp_name,'')  EMP_NAME, b.fundtype, SDL, FWL,
                    (SELECT Company_name FROM company WHERE company_id = @companyid
                    ) 'COMPANY_NAME', SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                            WHEN 'JAN' THEN Fundamount
                                            ELSE 0
                                          END) AS JAN, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                             WHEN 'FEB' THEN Fundamount
                                                             ELSE 0
                                                           END) AS FEB, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                              WHEN 'MAR' THEN Fundamount
                                                                              ELSE 0
                                                                            END) AS MAR,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'APR' THEN Fundamount
                          ELSE 0
                        END) AS APR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'MAY' THEN Fundamount
                                           ELSE 0
                                         END) AS MAY, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'JUN' THEN Fundamount
                                                            ELSE 0
                                                          END) AS JUN, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'JUL' THEN Fundamount
                                                                             ELSE 0
                                                                           END) AS JUL,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'AUG' THEN Fundamount
                          ELSE 0
                        END) AS AUG, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'SEP' THEN Fundamount
                                           ELSE 0
                                         END) AS SEP, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'OCT' THEN Fundamount
                                                            ELSE 0
                                                          END) AS OCT, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'NOV' THEN Fundamount
                                                                             ELSE 0
                                                                           END) AS NOV,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'DEC' THEN Fundamount
                          ELSE 0
                        END) AS DEC
            FROM    PAYROLL a 
			Inner Join #tempfundtype b On a.fundtype=b.fundtype
            --WHERE   a.fundtype=*b.fundtype
            GROUP BY b.fundtype, emp_code, emp_name, COMPANY_NAME, SDL, FWL
GO
/****** Object:  StoredProcedure [dbo].[sp_ApprovePayRoll]    Script Date: 09/02/2009 11:56:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_ApprovePayRoll 2,131,2009,2,'P'  
--sp_ApprovePayRoll 2,41,2010,2,'G'    
CREATE PROC [dbo].[Sp_approvepayroll] @company_id INT,
                                     @month      INT,
                                     @year       INT,
                                     @UserID     INT,
                                     @Status     VARCHAR(1)
AS
  DECLARE @ID AS INT
  DECLARE @WorkFlowID AS INT
  DECLARE @RowID AS INT
  DECLARE @DATEINYEAR TABLE (
      ROWID           INT,
      Emp_Code        INT,
      [Year]          INT,
      [Month]         INT,
      [MonthName]     VARCHAR(100),
      PayStartDate    DATETIME,
      PayEndDate      DATETIME,
      PaySubStartDate DATETIME,
      PaySubEndDate   DATETIME,
      PayStartDay     INT,
      PayEndDay       INT,
      PaySubStartDay  INT,
      PaySubEndDay    INT,
      ISEOM           VARCHAR(3))
  
  CREATE TABLE #Temp1
      (
           ID             INT,
           WORKFLOWID     INT,
           ROWID          INT,
           PAYROLLGROUPID INT
      )
  
  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID
  INTO   #Temp
  FROM   Employee EM
         INNER JOIN (SELECT WL.*
                     FROM   EmployeeWorkFlowLevel WL
                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID
  
  DECLARE curse CURSOR FOR
      SELECT *
      FROM   #Temp
  
  OPEN curse
  
  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
  
  WHILE @@FETCH_STATUS = 0
      BEGIN
          --PRINT @RowID                
          INSERT INTO #Temp1
          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID
          FROM   EmployeeWorkFlowLevel
          WHERE  WorkFLowID = @WorkFLowID
             AND RowID <= @RowID
  
          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
      END
  
  SELECT DISTINCT Te.ID,EG.Emp_ID
  INTO   #Temp2
  FROM   #Temp1 Te
         INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID
  WHERE  EG.Emp_ID = @UserID
  
  CLOSE curse
  
  DEALLOCATE curse
  
  INSERT @DATEINYEAR
         (ROWID,Emp_Code,[Year],[Month],[MonthName],PayStartDate,PayEndDate,PaySubStartDate,PaySubEndDate,PayStartDay,PayEndDay,PaySubStartDay,PaySubEndDay,ISEOM)
  EXEC Sp_getpayrollmonth @month,0,0
  
  --SELECT trx_id,emp_id,(SELECT Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') 'emp_name'  
  --FROM   employee  
  --WHERE  emp_code = de.emp_id) emp_name,(SELECT DeptName  
  --FROM   Department  
  --WHERE  company_id = @company_id  
  --AND id = (SELECT dept_id  
  --FROM   employee  
  --WHERE  emp_code = de.emp_id)) DeptName,  
  --CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,AdditionsWONH = CASE  
  --WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0  
  --ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))  
  --END,(CONVERT(NUMERIC(18, 2), total_additions)) Additions,CONVERT(NUMERIC(18, 2), total_deductions) Deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay,OT1Rate,OT2Rate,OT1_wh,OT2_wh,CONVERT(NUMERIC(18, 2), Ot1_e) Ot1_e,CONVERT(NUMERIC(18, 2), OT2_e) OT2_e,wdays,OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount,
  --Isnull((SELECT Pay_supervisor FROM   employee WHERE  emp_code = de.emp_id), 0) Pay_supervisor,  
  --(SELECT Isnull(email, '') FROM   employee WHERE  emp_code = de.emp_id) email,  
  --CONVERT(NUMERIC(18, 2), NH_e) NH_e   
  --INTO   #EmployeeTemp  
  --FROM   prepare_payroll_detail de  
  --WHERE  emp_id IN (SELECT emp_code  
  --                FROM   employee  
  --                WHERE  company_id = @company_id)  
  -- AND [status] = @Status  
  -- AND trx_id IN (SELECT trx_id  
  --                FROM   prepare_payroll_hdr  
  --                WHERE  (start_period >= (SELECT PaySubStartDate  
  --                                         FROM   @DATEINYEAR)  
  --                        AND end_period <= (SELECT PaySubEndDate  
  --                                           FROM   @DATEINYEAR))  
  --                   AND YEAR(start_period) = @year)  
  --ORDER  BY emp_name  
  
SELECT pd.trx_id,pd.emp_id,REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '') emp_name,de.deptname,em.Pay_supervisor,em.password,em.email,em.email_payslip,
CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,
AdditionsWONH = CASE
 WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0
 ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))
 END,
CONVERT(NUMERIC(18, 2), NH_e) NH_e,
CONVERT(NUMERIC(18, 2), pd.Ot1_e) Ot1_e,
CONVERT(NUMERIC(18, 2), pd.OT2_e) OT2_e,
(CONVERT(NUMERIC(18, 2), total_additions)) Additions,
CONVERT(NUMERIC(18, 2), total_deductions) Deductions,
CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay, Time_Card_No
--,pd.OT1Rate,pd.OT2Rate,pd.OT1_wh,pd.OT2_wh,  
--wdays,pd.OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,  
--pd.empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount  
  INTO   #EmployeeTemp
  FROM   prepare_payroll_hdr ph
         INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id
         INNER JOIN Employee em ON pd.emp_id = em.emp_code
         LEFT OUTER JOIN Department de ON em.dept_id = de.id
  WHERE  pd.status = @Status
     AND (CONVERT(DATETIME, ph.start_period, 103) >= (SELECT PaySubStartDate
                                                      FROM   @DATEINYEAR)
          AND CONVERT(DATETIME, ph.end_period, 103) <= (SELECT PaySubEndDate
                                                        FROM   @DATEINYEAR))
     AND em.company_id = @company_id
  ORDER  BY REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '')
  
  DELETE FROM #EmployeeTemp
  WHERE  Pay_supervisor NOT IN (SELECT ID
                                FROM   #Temp2)
     AND (Pay_supervisor > 0)
  
  SELECT *
  FROM   #EmployeeTemp
  
  SELECT COUNT(*) Cnt
  FROM   #EmployeeTemp
  
  DROP TABLE #Temp
  
  DROP TABLE #Temp1
  
  DROP TABLE #Temp2
  
  DROP TABLE #EmployeeTemp
GO

/****** Object:  StoredProcedure [dbo].[sp_paySlip]    Script Date: 09/02/2009 11:58:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_paySlip]
AS 
       SELECT   emp_id, (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name FROM employee WHERE emp_code = de.emp_id
                        ) 'EmpName', (SELECT ic_pp_number FROM employee WHERE emp_code = de.emp_id
                                     ) 'IcNumber',
                CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay)) AS basic_pay, OT1_e, OT2_e,
                CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay)) AS netpay, total_additions,
                total_deductions, empCPF, employerCPF, fund_type, fund_amount
       FROM     prepare_payroll_detail de
       WHERE    status = 'G'
GO
/****** Object:  StoredProcedure [dbo].[sp_payroll_details_rpt]    Script Date: 09/02/2009 11:58:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_payroll_details_rpt] --12,2008,102,1                    
       @month INT ,
       @year INT ,
       @empcode INT ,
       @compid INT
AS 
       BEGIN                    
                    
             DECLARE @month1 AS INT                    
             DECLARE @year1 AS INT                   
                  
             SET @month1 = @month                    
             SET @year1 = @year                     
                  
                  
             IF (@empcode <> -1) 
                BEGIN                    
                      SELECT    @month1 'month', @year1 'year', b.emp_name + ' ' + b.emp_lname 'emp_name', wdays,
                                d.company_name,
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     basic_pay))), 0) AS basic_pay,
                                ot1_e, ot2_e, ISNULL(ISNULL(ot1_e, 0) + ISNULL(ot2_e, 0), 0) 'OT',
                                ISNULL(total_deductions, 0) total_deductions, ISNULL(b.fw_levy, 0) fw_levy,
                                ISNULL(ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                        basic_pay))), 0) +
                                       ISNULL(CONVERT(NUMERIC(18, 2), total_additions), 0), 0) + ISNULL(ot1_e, 0) +
                                ISNULL(ot2_e, 0) 'Gross Pay', ISNULL(total_additions, 0) total_additions,
                                ISNULL(empCPF, 0) empCPF, ISNULL(employerCPF, 0) employerCPF, fund_type,
                                ISNULL(fund_amount, 0) fund_amount, CASE WHEN fund_type = 'SINDA' THEN FUND_AMOUNT
                                                                         ELSE 0
                                                                    END sinda_fund,
                                CASE WHEN fund_type = 'MBMF' THEN FUND_AMOUNT
                                     ELSE 0
                                END mbmf_fund, CASE WHEN fund_type = 'CDAC' THEN FUND_AMOUNT
                                                    ELSE 0
                                               END cdac_fund, CASE WHEN fund_type = 'ECF' THEN FUND_AMOUNT
                                                                   ELSE 0
                                                              END ecf_fund,
--case when fund_type='MRMF' THEN FUND_AMOUNT ELSE  0 END MBMF_FUND, 
--case when fund_type='MRMF' THEN FUND_AMOUNT ELSE  0 END MBMF_FUND, 
--case when fund_type='MRMF' THEN FUND_AMOUNT ELSE  0 END MBMF_FUND, 
                     
--   case when isnull(b.sinda_fund,0)<0 then 0 else abs(isnull(b.sinda_fund,0)) end sinda_fund,                  
--   case when isnull(b.mbmf_fund,0)<0 then 0 else abs(isnull(b.mbmf_fund,0)) end mbmf_fund,                  
--   case when isnull(b.cdac_fund,0)<0 then 0 else abs(isnull(b.cdac_fund,0)) end cdac_fund,                  
--   case when isnull(b.ecf_fund,0)<0 then 0 else abs(isnull(b.ecf_fund,0)) end ecf_fund,                  
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     netpay))), 0) AS netpay
                      FROM      prepare_payroll_detail a ,
                                employee b ,
                                prepare_payroll_hdr c ,
                                company d
                      WHERE     b.emp_code = a.emp_id AND
                                b.company_id = d.company_id AND
                                a.trx_id = c.trx_id AND
                                MONTH(c.start_period) = @month AND
                                YEAR(c.start_period) = @year AND
                                b.emp_code = @empcode AND
                                a.status = 'G'                 
                END                  
                  
             IF (@empcode = -1) 
                BEGIN                    
                      SELECT    @month1 'month', @year1 'year', b.emp_name + ' ' + b.emp_lname 'emp_name', wdays,
                                d.company_name,
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     basic_pay))), 0) AS basic_pay,
                                ot1_e, ot2_e, ISNULL(ISNULL(ot1_e, 0) + ISNULL(ot2_e, 0), 0) 'OT',
                                ISNULL(total_deductions, 0) total_deductions, ISNULL(b.fw_levy, 0) fw_levy,
                                ISNULL(ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                        basic_pay))), 0) +
                                       ISNULL(CONVERT(NUMERIC(18, 2), total_additions), 0), 0) + ISNULL(ot1_e, 0) +
                                ISNULL(ot2_e, 0) 'Gross Pay', ISNULL(total_additions, 0) total_additions,
                                ISNULL(empCPF, 0) empCPF, ISNULL(employerCPF, 0) employerCPF, fund_type,
                                ISNULL(fund_amount, 0) fund_amount, CASE WHEN fund_type = 'SINDA' THEN FUND_AMOUNT
                                                                         ELSE 0
                                                                    END sinda_fund,
                                CASE WHEN fund_type = 'MBMF' THEN FUND_AMOUNT
                                     ELSE 0
                                END mbmf_fund, CASE WHEN fund_type = 'CDAC' THEN FUND_AMOUNT
                                                    ELSE 0
                                               END cdac_fund, CASE WHEN fund_type = 'ECF' THEN FUND_AMOUNT
                                                                   ELSE 0
                                                              END ecf_fund,                   
--   case when isnull(b.sinda_fund,0)<0 then 0 else abs(isnull(b.sinda_fund,0)) end sinda_fund,                  
--   case when isnull(b.mbmf_fund,0)<0 then 0 else abs(isnull(b.mbmf_fund,0)) end mbmf_fund,                  
--   case when isnull(b.cdac_fund,0)<0 then 0 else abs(isnull(b.cdac_fund,0)) end cdac_fund,                  
--   case when isnull(b.ecf_fund,0)<0 then 0 else abs(isnull(b.ecf_fund,0)) end ecf_fund,                  
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     netpay))), 0) AS netpay
                      FROM      prepare_payroll_detail a ,
                                employee b ,
                                prepare_payroll_hdr c ,
                                company d
                      WHERE     b.emp_code = a.emp_id AND
                                b.company_id = d.company_id AND
                                a.status = 'G' AND
                                a.trx_id = c.trx_id AND
                                MONTH(c.start_period) = @month AND
                                YEAR(c.start_period) = @year AND
                                b.company_id = @compid                  
                END                  
                  
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_online_giro]    Script Date: 09/02/2009 11:58:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_online_giro] --1,12,2008,9,'12345678901'      
@company_id INT,  
@month      INT,  
@year       INT,  
@bank       INT,  
@bankaccno  VARCHAR(150),  
@emp_list   VARCHAR(3000) = NULL,
@valuedate INT  
AS  
  SET NOCOUNT ON  
    
--  DECLARE @startdtsub DATETIME  
--  DECLARE @enddtsub DATETIME  
--    
--  SELECT @startdtsub = CONVERT(DATETIME, PaySubStartDate, 103),@enddtsub = CONVERT(DATETIME, PaySubEndDate, 103)  
--  FROM   PayrollMonthlyDetail  
--  WHERE  ROWID = @month  
--    
--  IF @emp_list IS NULL  
--      OR @emp_list = ''  
--      BEGIN  
--          SELECT d.emp_id,Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') emp_name,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.basic_pay))) payrate,d.total_additions total_additions,d.total_deductions total_deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.netpay))) netpay,e.giro_bank giro_bank,e.giro_acct_number giro_acct_number,(SELECT giro_branch  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                            FROM   employee  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                            WHERE  emp_code = d.emp_id) branch_number,(SELECT value_date  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                       FROM   girobanks  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                       WHERE  [id] = d.pay_mode) value_date,(SELECT bank_accountno  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             FROM   girobanks  
--        WHERE  [id] = d.pay_mode) bank_accountno,(SELECT [desc]  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                 
--                                        FROM   bank  
--                                                                                                                                                                                                                                                            
     
--                                                                                                                                                                                                                                                             
    
--                                        WHERE  bank_code = (SELECT ed.giro_bank  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                                            FROM   employee ed  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                                            WHERE  ed.emp_code = e.emp_code)) bank_name,(SELECT giro_acc_name  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                                                                                         FROM   employee  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                                                                                         WHERE  emp_code = d.emp_id) account_name,(SELECT giro_acc_name  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                               FROM   girobanks  
--                                                                            
--                                                                                                                                                                                                                                                            
     
--                                                                                                                                                   WHERE  [id] = d.pay_mode) payeebankname  
--          FROM   prepare_payroll_hdr h,prepare_payroll_detail d,employee e  
--          WHERE  h.trx_id = d.trx_id  
--             AND d.emp_id = e.emp_code  
--             --AND MONTH(start_period) = @month    
--             AND (h.start_period >= @startdtsub  
--                  AND h.end_period <= @enddtsub)  
--             AND YEAR(start_period) = @year  
--             AND d.status = 'G'  
--             AND e.payment_mode = (SELECT [id]  
--                                   FROM   girobanks  
--                                   WHERE  bank_id = (SELECT id  
--                                                     FROM   bank  
--                                                     WHERE  id = @bank)  
--                                      AND bank_accountno = @bankaccno  
--                                      AND company_id = @company_id)  
--             AND e.company_id = @company_id  
--      END  
--  ELSE  
--      BEGIN  
--          DECLARE @pointer INT  
--          DECLARE @coma_loc INT  
--          DECLARE @emp_id INT  
--    
--          SET @pointer = 1  
--          SET @coma_loc = Charindex(',', @emp_list, @pointer)  
--    
--          CREATE TABLE #temp  
--              (  
--                   emp_id INT  
--              )  
--    
--          WHILE @coma_loc > 0  
--              BEGIN  
--                  SET @emp_id = Substring(@emp_list, @pointer, (@coma_loc - @pointer))  
--                  SET @pointer = @coma_loc + 1  
--    
--                  INSERT INTO #temp  
--                  VALUES      (@emp_id)  
--    
--                  SET @coma_loc = Charindex(',', @emp_list, @pointer)  
--              END  
--    
--          SELECT d.emp_id,Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') emp_name,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.basic_pay))) payrate,d.total_additions total_additions,d.total_deductions total_deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.netpay))) netpay,e.giro_bank giro_bank,e.giro_acct_number giro_acct_number,(SELECT giro_branch  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                            FROM   employee  
--       WHERE  emp_code = d.emp_id) branch_number,(SELECT value_date  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                       FROM   girobanks  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                  WHERE  [id] = d.pay_mode) value_date,(SELECT bank_accountno  
--                                                                                                                                                                                                                                                            
     
--                                                                                                                                                                                                                                                             FROM   girobanks  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             WHERE  [id] = d.pay_mode) bank_accountno,(SELECT giro_acc_name  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                        FROM   employee  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                        WHERE  emp_code = d.emp_id) account_name,(SELECT giro_acc_name  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                                                                  FROM   girobanks  
--                                                                                                                                                                                                                                                             
    
--                                                                                                                                                                                                                                                             
    
--                                                           WHERE  [id] = d.pay_mode) payeebankname  
--          FROM   prepare_payroll_hdr h,prepare_payroll_detail d,employee e  
--          WHERE  h.trx_id = d.trx_id  
--             AND d.emp_id = e.emp_code  
--             --AND MONTH(start_period) = @month    
--             AND (h.start_period >= @startdtsub  
--          AND h.end_period <= @enddtsub)  
--             AND YEAR(start_period) = @year  
--             AND d.status = 'G'  
--             AND e.payment_mode = (SELECT [id]  
--                                   FROM   girobanks  
--                                   WHERE  bank_id = (SELECT id  
--                                                     FROM   bank  
--                                                     WHERE  id = @bank)  
--                                      AND bank_accountno = @bankaccno  
--                                      AND company_id = @company_id)  
--             AND e.company_id = @company_id  
--             AND d.emp_id IN (SELECT emp_id  
--                              FROM   #temp)  
--  
--      END  
--  
  
 Exec [sp_get_giro_emp]  @company_id, @year, @month, @bank, @bankaccno,@valuedate, @emp_list  
GO

/****** Object:  StoredProcedure [dbo].[sp_EmpSalHistory]    Script Date: 09/02/2009 11:57:39 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_EmpSalHistory] --1022,2008,1,9                                 
       @emp_code INT ,
       @year INT ,
       @month1 INT ,
       @month2 INT
AS 
       DECLARE @YEAR1 AS INT                             
       SET @YEAR1 = @YEAR                           
                        
       SELECT   emp_id, (SELECT emp_name+ ' '+ emp_lname 'name' FROM employee WHERE emp_code = de.emp_id
                        ) EMPNAME, (SELECT ic_pp_number FROM employee WHERE emp_code = de.emp_id
                                   ) ICNumber,
                CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay))) netpay,
                ISNULL(CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay)), 0) basicpay,          
--+isnull(total_additions,0)                  
--+isnull(total_additions,0)+isnull(OT1_e,0)+isnull(OT2_e,0) 'Gross',                                                
                total_additions, total_deductions, OT1_e, OT2_e, CASE MONTH(hdr.start_period)
                                                                   WHEN '1' THEN (SELECT 'January'
                                                                                 )
                                                                   WHEN '2' THEN (SELECT 'February'
                                                                                 )
                                                                   WHEN '3' THEN (SELECT 'March'
                                                                                 )
                                                                   WHEN '4' THEN (SELECT 'April'
                                                                                 )
                                                                   WHEN '5' THEN (SELECT 'May'
                                                                                 )
                                                                   WHEN '6' THEN (SELECT 'June'
                                                                                 )
                                                                   WHEN '7' THEN (SELECT 'July'
                                                                                 )
                                                                   WHEN '8' THEN (SELECT 'August'
                                                                                 )
                                                                   WHEN '9' THEN (SELECT 'September'
                                                                                 )
                                                                   WHEN '10' THEN (SELECT 'October'
                                                                                  )
                                                                   WHEN '11' THEN (SELECT 'November'
                                                                                  )
                                                                   WHEN '12' THEN (SELECT 'December'
                                                                                  )
                                                                 END 'PayDate'                
       
--convert(varchar(20),hdr.trx_date,103)PayDate                                      
                , hdr.start_period, @YEAR1 'YEAR', (SELECT  company_name
                                                    FROM    employee a ,
                                                            company b
                                                    WHERE   a.company_id = b.company_id AND
                                                            a.emp_code = @emp_code
                                                   ) compname
       FROM     prepare_payroll_detail de ,
                prepare_payroll_hdr hdr
       WHERE    status = 'G' AND
                emp_id = @emp_code AND
                de.trx_id IN (SELECT    trx_id
                              FROM      prepare_payroll_hdr
                              WHERE     YEAR(start_period) = @year AND
                                        MONTH(start_period) >= @month1 AND
                                        MONTH(start_period) <= @month2) AND
                de.trx_id = hdr.trx_id
       ORDER BY hdr.start_period   
GO
/****** Object:  StoredProcedure [dbo].[sp_payroll_details]    Script Date: 09/02/2009 11:58:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_payroll_details] --1,12,2008,-1,1                                
       @month INT ,
       @monthto INT ,
       @year INT ,
       @empcode INT ,
       @compid INT
AS 
       BEGIN                                
                               
             DECLARE @month1 AS INT         
             DECLARE @month2 AS INT                               
             DECLARE @year1 AS INT                               
                              
             SET @month2 = @monthto        
             SET @month1 = @month                                
             SET @year1 = @year                                 
                              
                              
             IF (@empcode <> -1) 
                BEGIN                                
                      SELECT    CASE MONTH(c.start_period)
                                  WHEN '1' THEN (SELECT 'January'
                                                )
                                  WHEN '2' THEN (SELECT 'February'
                                                )
                                  WHEN '3' THEN (SELECT 'March'
                                                )
                                  WHEN '4' THEN (SELECT 'April'
                                                )
                                  WHEN '5' THEN (SELECT 'May'
                                                )
                                  WHEN '6' THEN (SELECT 'June'
                                                )
                                  WHEN '7' THEN (SELECT 'July'
                                                )
                                  WHEN '8' THEN (SELECT 'August'
                                                )
                                  WHEN '9' THEN (SELECT 'September'
                                                )
                                  WHEN '10' THEN (SELECT 'October'
                                                 )
                                  WHEN '11' THEN (SELECT 'November'
                                                 )
                                  WHEN '12' THEN (SELECT 'December'
                                                 )
                                END 'PayMonth', @month1 'month', @month2 'monthto', @year1 'year',
                                b.emp_name + ' ' + b.emp_lname 'emp_name', wdays, d.company_name,
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     basic_pay))), 0) AS basic_pay,
                                ot1_e, ot2_e, ISNULL(ISNULL(ot1_e, 0) + ISNULL(ot2_e, 0), 0) 'OT',
                                ISNULL(total_deductions, 0) total_deductions, ISNULL(b.fw_levy, 0) fw_levy,
                                ISNULL(ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                        basic_pay))), 0) +
                                       ISNULL(CONVERT(NUMERIC(18, 2), total_additions), 0), 0) + ISNULL(ot1_e, 0) +
                                ISNULL(ot2_e, 0) 'Gross Pay', ISNULL(total_additions, 0) total_additions,
                                ISNULL(empCPF, 0) empCPF, ISNULL(employerCPF, 0) employerCPF, fund_type,
                                ISNULL(fund_amount, 0) fund_amount, CASE WHEN fund_type = 'SINDA' THEN FUND_AMOUNT
                                                                         ELSE 0
                                                                    END sinda_fund,
                                CASE WHEN fund_type = 'MBMF' THEN FUND_AMOUNT
                                     ELSE 0
                                END mbmf_fund, CASE WHEN fund_type = 'CDAC' THEN FUND_AMOUNT
                                                    ELSE 0
                                               END cdac_fund, CASE WHEN fund_type = 'ECF' THEN FUND_AMOUNT
                                                                   ELSE 0
                                                              END ecf_fund,                               
--   case when isnull(b.sinda_fund,0)<0 then 0 else abs(isnull(b.sinda_fund,0)) end sinda_fund,                              
--   case when isnull(b.mbmf_fund,0)<0 then 0 else abs(isnull(b.mbmf_fund,0)) end mbmf_fund,                              
--   case when isnull(b.cdac_fund,0)<0 then 0 else abs(isnull(b.cdac_fund,0)) end cdac_fund,                              
--   case when isnull(b.ecf_fund,0)<0 then 0 else abs(isnull(b.ecf_fund,0)) end ecf_fund,                              
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     netpay))), 0) AS netpay
                      FROM      prepare_payroll_detail a ,
                                employee b ,
                                prepare_payroll_hdr c ,
                                company d
                      WHERE     b.emp_code = a.emp_id AND
                                b.company_id = d.company_id AND
                                a.trx_id = c.trx_id AND
                                MONTH(c.start_period) >= @month AND
                                MONTH(c.start_period) <= @monthto AND
                                YEAR(c.start_period) = @year        
--and month(c.start_period)<=@month and year(c.start_period)=@year                                
                                AND
                                b.emp_code = @empcode AND
                                a.status = 'G'
                      ORDER BY  MONTH(c.start_period)                           
                END                              
                              
             IF (@empcode = -1) 
                BEGIN                                
                      SELECT    CASE MONTH(c.start_period)
                                  WHEN '1' THEN (SELECT 'January'
                                                )
                                  WHEN '2' THEN (SELECT 'February'
                                                )
                                  WHEN '3' THEN (SELECT 'March'
                                                )
                                  WHEN '4' THEN (SELECT 'April'
                                                )
                                  WHEN '5' THEN (SELECT 'May'
                                                )
                                  WHEN '6' THEN (SELECT 'June'
                                                )
                                  WHEN '7' THEN (SELECT 'July'
                                                )
                                  WHEN '8' THEN (SELECT 'August'
                                                )
                                  WHEN '9' THEN (SELECT 'September'
                                                )
                                  WHEN '10' THEN (SELECT 'October'
                                                 )
                                  WHEN '11' THEN (SELECT 'November'
                                                 )
                                  WHEN '12' THEN (SELECT 'December'
                                                 )
                                END 'PayMonth', @month1 'month', @year1 'year',
                                b.emp_name + ' ' + b.emp_lname 'emp_name', wdays, d.company_name,
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     basic_pay))), 0) AS basic_pay,
                                ot1_e, ot2_e, ISNULL(ISNULL(ot1_e, 0) + ISNULL(ot2_e, 0), 0) 'OT',
                                ISNULL(total_deductions, 0) total_deductions, ISNULL(b.fw_levy, 0) fw_levy,
                                ISNULL(ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                        basic_pay))), 0) +
                                       ISNULL(CONVERT(NUMERIC(18, 2), total_additions), 0), 0) + ISNULL(ot1_e, 0) +
                                ISNULL(ot2_e, 0) 'Gross Pay', ISNULL(total_additions, 0) total_additions,
                                ISNULL(empCPF, 0) empCPF, ISNULL(employerCPF, 0) employerCPF, fund_type,
                                ISNULL(fund_amount, 0) fund_amount, CASE WHEN fund_type = 'SINDA' THEN FUND_AMOUNT
                                                                         ELSE 0
                                                                    END sinda_fund,
                                CASE WHEN fund_type = 'MBMF' THEN FUND_AMOUNT
                                     ELSE 0
                                END mbmf_fund, CASE WHEN fund_type = 'CDAC' THEN FUND_AMOUNT
                                                    ELSE 0
                                               END cdac_fund, CASE WHEN fund_type = 'ECF' THEN FUND_AMOUNT
                                                                   ELSE 0
                                                              END ecf_fund,                               
--   case when isnull(b.sinda_fund,0)<0 then 0 else abs(isnull(b.sinda_fund,0)) end sinda_fund,                              
--   case when isnull(b.mbmf_fund,0)<0 then 0 else abs(isnull(b.mbmf_fund,0)) end mbmf_fund,                              
--   case when isnull(b.cdac_fund,0)<0 then 0 else abs(isnull(b.cdac_fund,0)) end cdac_fund,                              
--   case when isnull(b.ecf_fund,0)<0 then 0 else abs(isnull(b.ecf_fund,0)) end ecf_fund,                              
                                ISNULL(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                     netpay))), 0) AS netpay
                      FROM      prepare_payroll_detail a ,
                                employee b ,
                                prepare_payroll_hdr c ,
                                company d
                      WHERE     b.emp_code = a.emp_id AND
                                b.company_id = d.company_id AND
                                a.status = 'G' AND
                                a.trx_id = c.trx_id AND
                                MONTH(c.start_period) >= @month AND
                                MONTH(c.start_period) <= @monthto AND
                                YEAR(c.start_period) = @year AND
                                b.company_id = @compid
                      ORDER BY  MONTH(c.start_period)                         
                END                              
                              
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_SDL_monthly_report]    Script Date: 09/02/2009 11:58:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Developed By Raja              
CREATE PROC [dbo].[sp_SDL_monthly_report]
       (
        @companyid AS INT ,
        @yr AS INT
       )
AS -- sp_SDL_monthly_report 17,2010                      
       WITH PAYROLL(EMP_CODE, EMP_NAME, MONTHNAME, fundtype, SDL, COMPANY_NAME)
              AS (SELECT E.EMP_CODE, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) 'EMP_NAME',
					UPPER(SUBSTRING(DATENAME(MM, P.START_PERIOD), 1, 3)) + ' ' + CONVERT(CHAR(4), YEAR(P.START_PERIOD)) [MON],
					Q.fund_type 'fundtype', Q.SDL, C.Company_Name
					FROM   prepare_payroll_hdr P 
					Inner Join prepare_payroll_detail	Q On P.trx_id = Q.Trx_ID
					Inner JOin Employee					E On Q.Emp_ID = E.Emp_Code
					Inner Join Company					C On E.Company_ID = C.Company_ID
					Where Q.status = 'G' And E.emp_type IN ('SC', 'SPR', 'SDPR') And C.COMPANY_ID = @companyid AND Year(P.START_PERIOD) = @yr
                 )
            SELECT  EMP_CODE, isnull(emp_name,'') EMP_NAME, (SELECT Company_name FROM company WHERE company_id = @companyid
                                        ) 'COMPANY_NAME', SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                WHEN 'JAN' THEN SDL
                                                                ELSE 0
                                                              END) AS JAN, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                                 WHEN 'FEB' THEN SDL
                                                                                 ELSE 0
                                                                               END) AS FEB,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'MAR' THEN SDL
                          ELSE 0
                        END) AS MAR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'APR' THEN SDL
                                           ELSE 0
                                         END) AS APR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'MAY' THEN SDL
                                                            ELSE 0
                                                          END) AS MAY, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'JUN' THEN SDL
                                                                             ELSE 0
                                                                           END) AS JUN,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'JUL' THEN SDL
                          ELSE 0
                        END) AS JUL, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'AUG' THEN SDL
                                           ELSE 0
                                         END) AS AUG, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'SEP' THEN SDL
                                                            ELSE 0
                                                          END) AS SEP, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'OCT' THEN SDL
                                                                             ELSE 0
                                                                           END) AS OCT,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'NOV' THEN SDL
                          ELSE 0
                        END) AS NOV, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'DEC' THEN SDL
                                           ELSE 0
                                         END) AS DEC
            FROM    PAYROLL a -- where sdl is not null                        
GROUP BY            emp_code, emp_name, COMPANY_NAME
            ORDER BY emp_name
GO
/****** Object:  StoredProcedure [dbo].[sp_cpf_monthly_report]    Script Date: 09/02/2009 11:56:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_cpf_monthly_report]
       (
        @companyid AS INT ,
        @yr AS INT
       )
AS --sp_cpf_monthly_report 17,2010
                      
       WITH PAYROLL(EMP_CODE, EMP_NAME, MONTHNAME, EMPLOYERCPF, company_name)
              AS (
					SELECT E.EMP_CODE, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) 'EMP_NAME',
					UPPER(SUBSTRING(DATENAME(MM, P.START_PERIOD), 1, 3)) + ' ' + CONVERT(CHAR(4), YEAR(P.START_PERIOD)) [MON],
					ISNULL(Q.EMPLOYERCPF, 0) EMPLOYERCPF, C.Company_Name
					FROM   prepare_payroll_hdr P 
					Inner Join prepare_payroll_detail	Q On P.trx_id = Q.Trx_ID
					Inner JOin Employee					E On Q.Emp_ID = E.Emp_Code
					Inner Join Company					C On E.Company_ID = C.Company_ID
					Where Q.status = 'G' And E.emp_type IN ('SC', 'SPR', 'SDPR') And C.COMPANY_ID = @companyid AND Year(P.START_PERIOD) = @yr
                 )
            SELECT  EMP_CODE, isnull(emp_name,'')  EMP_NAME, company_name, @yr yr, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                    WHEN 'JAN' THEN EMPLOYERCPF
                                                                    ELSE 0
                                                                  END) AS JAN, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                                     WHEN 'FEB' THEN EMPLOYERCPF
                                                                                     ELSE 0
                                                                                   END) AS FEB,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'MAR' THEN EMPLOYERCPF
                          ELSE 0
                        END) AS MAR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'APR' THEN EMPLOYERCPF
                                           ELSE 0
                                         END) AS APR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'MAY' THEN EMPLOYERCPF
                                                            ELSE 0
                                                          END) AS MAY, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'JUN' THEN EMPLOYERCPF
                                                                             ELSE 0
                                                                           END) AS JUN,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'JUL' THEN EMPLOYERCPF
                          ELSE 0
                        END) AS JUL, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'AUG' THEN EMPLOYERCPF
                                           ELSE 0
                                         END) AS AUG, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'SEP' THEN EMPLOYERCPF
                                                            ELSE 0
                                                          END) AS SEP, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'OCT' THEN EMPLOYERCPF
                                                                             ELSE 0
                                                                           END) AS OCT,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'NOV' THEN EMPLOYERCPF
                          ELSE 0
                        END) AS NOV, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'DEC' THEN EMPLOYERCPF
                                           ELSE 0
                                         END) AS DEC
            FROM    PAYROLL
            GROUP BY EMP_CODE, EMP_NAME, company_name

GO
/****** Object:  StoredProcedure [dbo].[sp_cpf_select]    Script Date: 09/02/2009 11:56:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Sp_cpf_select 4,2010,3,'T08SS0160C-PTE-01'
CREATE PROCEDURE [dbo].[Sp_cpf_select] --1,2009,17                                        
@month     INT,
@year      INT,
@companyid INT,
@csnno     VARCHAR(36)
AS
    BEGIN
        SELECT Emp_Code,Emp_Name,Employee_Cpf_Acct,SUM(Gross) Gross,SUM(CpfAmount) CpfAmount,SUM(EmpCPF) EmpCPF,SUM(EmployerCPF) EmployerCPF,Fund_Type,SUM(Fund_Amount) Fund_Amount,SUM(SDL) SDL
        Into #Temp1 FROM   (SELECT b.emp_code,Isnull(b.emp_name, '') + ' ' + Isnull(b.emp_lname, '') 'emp_name',b.employee_cpf_acct,TOTAL_GROSS 'Gross',CONVERT(NUMERIC(18, 2), cpfamount) cpfamount,CONVERT(NUMERIC(18, 2), empcpf) empcpf,CONVERT(NUMERIC(18, 2), employercpf) employercpf,fund_type,CONVERT(NUMERIC(18, 2), fund_amount) fund_amount,sdl
                FROM   prepare_payroll_detail a,employee b,prepare_payroll_hdr c
                WHERE  a.emp_id = b.emp_code
                   AND a.status = 'G'
                   AND MONTH(c.start_period) = @month
                   AND YEAR(c.start_period) = @year
                   AND a.trx_id = c.trx_id
                   AND a.status = 'G'
                   AND a.emp_id IN (SELECT emp_code
                                    FROM   employee
                                    WHERE  company_id = @companyid
                                       AND employer_cpf_acct = @csnno)) R
        GROUP  BY Emp_Code,Emp_Name,Employee_Cpf_Acct,Fund_Type
        ORDER  BY EMP_NAME,Fund_type DESC

--			Select D.Emp_Code,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')) 'emp_name',D.FundType,Em.Employee_Cpf_Acct,Sum(Trx_Amount) Trx_Amount
--			Into #Temp2 From (
--				Select ED.Emp_Code,ED.Trx_Amount,
--				FundType = Case
--						When (ED.FundType=1 OR ED.FundType=5) Then 'CDAC'  
--						When (ED.FundType=2 OR ED.FundType=6) Then 'ECF'  
--						When (ED.FundType=3 OR ED.FundType=7) Then 'MBMF'  
--						When (ED.FundType=4 OR ED.FundType=8) Then 'SINDA'  
--						END
--				From Emp_Deductions ED Where
--				ED.status = 'L'
--				AND MONTH(ED.trx_period) = @month
--				AND YEAR(ED.trx_period) = @year
--			) D Inner Join Employee Em On D.Emp_Code = Em.Emp_Code Group By D.Emp_Code,D.FundType,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')),Em.Employee_Cpf_Acct

Select Emp_Name,Employee_Cpf_Acct,Gross,CpfAmount,EmpCPF,EmployerCPF,Fund_Type,Fund_Amount,SDL From #Temp1
Drop Table #Temp1
END 
GO
/****** Object:  StoredProcedure [dbo].[sp_submit_email]    Script Date: 09/02/2009 11:58:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_submit_email  102        
CREATE PROCEDURE [dbo].[sp_submit_email]  --192        
       @empid INT
AS 
       BEGIN        
        
             SELECT emp_id, c.email, b.email_SMTP_server, b.email_username, b.email_password, b.email_sender_domain,
                    b.email_sender_name, b.email_reply_address, b.email_reply_name, b.email_smtp_port, b.email,
                    b.email_payalert, b.email_sender
             FROM   prepare_payroll_detail a ,
                    employee c ,
                    company b
             WHERE  a.emp_id = c.emp_code AND
                    c.company_id = b.company_id AND
                    a.emp_id = @empid      
        
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_paydetailreport2]    Script Date: 09/02/2009 11:58:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_paydetailreport2] --2,2008,1         
       @month INT ,  
       @year INT ,  
       @compid INT  
AS   
Declare @stdt as datetime      
Declare @endt as datetime      
       BEGIN          


		Select @stdt=PaySubStartDate,@endt=PaySubEndDate From PayrollMonthlyDetail Where ROWID =  @month

             SELECT emp_id, isnull(b.emp_name,'')+' '+isnull(b.emp_lname,'') emp_name,  
                    CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay))) AS basicpay,  
                    CONVERT(NUMERIC(18, 2), total_additions) Additions,  
                    CONVERT(NUMERIC(18, 2), total_deductions) Deductions,  
                    ISNULL(CONVERT(NUMERIC(18, 2), OT1_e), 0) 'OT1', ISNULL(CONVERT(NUMERIC(18, 2), OT2_e), 0) 'OT2',  
                    CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), Netpay))) AS Netpay,  
                    a.ot_entitlement, ISNULL(CONVERT(NUMERIC(18, 2), empCPF), 0) 'employeecpf',  
                    ISNULL(CONVERT(NUMERIC(18, 2), employerCPF), 0) 'employercpf', cpf_entitlement, fund_type,  
                    ISNULL(CONVERT(NUMERIC(18, 2), fund_amount), 0) 'fundamt', CONVERT(NUMERIC(18, 2), cpfnet) 'cpfnet',  
                    CONVERT(NUMERIC(18, 2), total_gross) total_gross  
             FROM   prepare_payroll_detail a ,  
                    employee b ,  
                    prepare_payroll_hdr hd  
             WHERE  a.emp_id = b.emp_code AND  
                    b.company_id = @compid AND  
                    a.status = 'P' AND  
                    emp_id IN (SELECT   emp_id  
                               FROM     prepare_payroll_detail de ,  
                                        prepare_payroll_hdr hd  
                               WHERE    --MONTH(hd.start_period) = @month AND  
										(hd.start_period >= @stdt And hd.end_period <= @endt) And
                                        YEAR(hd.start_period) = @year AND  
                                        de.trx_id = hd.trx_id AND  
                                        de.status = 'P') AND  
                    --MONTH(hd.start_period) = @month AND  
					(hd.start_period >= @stdt And hd.end_period <= @endt) And
                    YEAR(hd.start_period) = @year AND  
                    a.trx_id = hd.trx_id  
             ORDER BY b.emp_name          
   
       END  



GO
/****** Object:  StoredProcedure [dbo].[sp_GetLockLeaves]    Script Date: 09/02/2009 11:57:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[sp_GetLockLeaves1] '15/10/2008','17/10/2008',1031  
CREATE PROC [dbo].[sp_GetLockLeaves]
       @dtStDate VARCHAR(10) ,
       @dtEndDate VARCHAR(10) ,
       @emp_code INT
AS 
       DECLARE @from_date DATETIME      
       DECLARE @to_date DATETIME      
      
       SET @from_date = CONVERT(DATETIME, @dtStDate, 103)      
       SET @to_date = CONVERT(DATETIME, @dtEndDate, 103)      
  
       SELECT   ISNULL(COUNT(trx_id), 0)
       FROM     prepare_payroll_hdr
       WHERE    created_by = @emp_code AND
                ((MONTH(start_period) = MONTH(@from_date) AND
                  YEAR(start_period) = YEAR(@from_date)
                 ) OR
                 (MONTH(start_period) = MONTH(@to_date) AND
                  YEAR(start_period) = YEAR(@to_date)
                 )
                ) AND
                trx_id IN (SELECT   trx_id
                           FROM     prepare_payroll_detail
                           WHERE    emp_id = @emp_code AND
                                    (status = 'P' OR
                                     status = 'G' OR
                                     status = 'A'
                                    ) AND
                                    trx_id IN (SELECT   trx_id
                                               FROM     prepare_payroll_hdr
                                               WHERE    created_by = @emp_code AND
                                                        ((MONTH(start_period) = MONTH(@from_date) AND
                                                          YEAR(start_period) = YEAR(@from_date)
                                                         ) OR
                                                         (MONTH(start_period) = MONTH(@to_date) AND
                                                          YEAR(start_period) = YEAR(@to_date)
                                                         )
                                                        )))  
  
      
  
        
--select isnull(count(trx_id),0) from emp_leaves where emp_id = @emp_code AND (        
--(month(start_date) = month(@from_date) AND year(start_date) = year(@from_date)) OR (        
--month(start_date) = month(@to_date) AND year(start_date) = year(@to_date)) OR         
--(month(end_date) = month(@from_date) AND year(end_date) = year(@from_date)) OR (        
--month(end_date) = month(@to_date) AND year(end_date) = year(@to_date))        
--)        
--AND payrollstatus = 'L'
GO
/****** Object:  StoredProcedure [dbo].[sp_payroll_Update]    Script Date: 09/02/2009 11:58:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_payroll_Update]-- 1114,'2009-03-17 11:14:39.000','G'                                  
       (  
        @trx_id VARCHAR(50) ,  
        @trxdate VARCHAR(50) ,  
        @status VARCHAR(5)  
       )  
AS   
       BEGIN                         
             DECLARE @fwl FLOAT                          
             DECLARE @emp_code INT                          
             DECLARE @gross FLOAT                          
             DECLARE @emp_type VARCHAR(50)


			DECLARE @startst DATETIME
			DECLARE @enddt DATETIME
			DECLARE @startdtsub DATETIME
			DECLARE @enddtsub DATETIME
			Declare @fundgross as float
			Declare @empcode as int
			Declare @CalcFundFH as varchar(1)
			Declare @INTendatesubmonth as int


             IF (@status = 'G')
			BEGIN
				Select @startst=Convert(Datetime,Start_Period,103),@enddt=Convert(Datetime,End_Period,103) From Prepare_Payroll_hdr Where trx_id = @trx_id         

				SELECT @startdtsub = CONVERT(DATETIME, PaySubStartDate, 103),@enddtsub = CONVERT(DATETIME, PaySubEndDate, 103),@INTendatesubmonth=PayEndDay
				FROM   payrollmonthlydetail Where CONVERT(DATETIME, PaySubStartDate, 103)=@startst And  CONVERT(DATETIME, PaySubEndDate, 103)=@enddt

				Select @CalcFundFH=CASE
				WHEN @INTendatesubmonth = 15 AND ComputeFundFH = 1 THEN 'Y'
				WHEN @INTendatesubmonth = 15 AND ComputeFundFH = 0 THEN 'N'
				ELSE 'Y'
				END
				From Employee 

				Select @fundgross=isnull(Total_Gross,0),@empcode=emp_id From prepare_payroll_detail Where Trx_ID = @trx_id

				SELECT ED.Trx_ID,FundType = Case
				When ED.FundType=1 Then 'CDAC'  
				When ED.FundType=2 Then 'ECF'  
				When ED.FundType=3 Then 'MBMF'  
				When ED.FundType=4 Then 'SINDA'  
				END
				INTO   #FundPerc  
				FROM   Emp_Deductions ED  
				INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
				INNER JOIN Employee EM On EM.Emp_Code = ED.Emp_Code
				WHERE  ((trx_period >= @startdtsub  
				AND trx_period <= @enddtsub)  
				AND YEAR(trx_period) = Year(@startdtsub))  
				And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))  
				And EM.Emp_Code=@empcode
				AND @CalcFundFH = 'Y'  
				GROUP  BY ED.Emp_Code, ED.trx_id, ED.FundType 


				UPDATE ED  
				SET    ED.trx_amount = cast (dbo.Getempfundcontribution(@fundgross, Isnull(EM.FundType, '')) AS DECIMAL(9, 2))
				FROM   Emp_Deductions ED
				INNER JOIN #FundPerc EM ON ED.Trx_ID = EM.Trx_ID  

				Drop Table #FundPerc

			END
                          
             SELECT @emp_code = emp_id, @gross = ISNULL(total_gross, 0)  
             FROM   prepare_payroll_detail  
             WHERE  trx_id = @trx_id                          
  
                      
             SELECT @fwl = ISNULL(fw_levy, 0), @emp_type = emp_type  
             FROM   employee  
             WHERE  emp_code = @emp_code          
  
                                               
             IF (@emp_type = 'WP') OR  
                (@emp_type = 'SP') --FWL is only for work permit and spass                          
                SET @fwl = @fwl                          
             ELSE   
                SET @fwl = 0                          
                              
             UPDATE prepare_payroll_detail  
             SET    status = @status, FWL = @fwl  
             WHERE  trx_id = @trx_id                              
             UPDATE prepare_payroll_hdr  
             SET    trx_date = @trxdate  
             WHERE  trx_id = @trx_id                    
                  
/* UNLOCKING AGAIN WHEN PAYROLL IS REJECTED. */                  
             IF @status = 'R'   
                BEGIN                  
                      DECLARE @month INT                  
                      DECLARE @year INT                  
                      SELECT    @month = MONTH(start_period), @year = YEAR(start_period)  
                      FROM      prepare_payroll_hdr  
                      WHERE     trx_id = @trx_id                    
                      UPDATE    emp_additions  
                      SET       status = 'U'  
                      WHERE     emp_code = @emp_code AND  
                                MONTH(trx_period) = @month AND  
                                YEAR(trx_period) = @year                                            
                                             
                      UPDATE    emp_deductions  
                      SET       status = 'U'  
                      WHERE     emp_code = @emp_code AND  
                                MONTH(trx_period) = @month AND  
                                YEAR(trx_period) = @year                                            
                      UPDATE    emp_leaves  
                      SET       payrollStatus = 'U'  
                      WHERE     ((MONTH(start_date) = @month AND  
                                  YEAR(start_date) = @year  
                                 ) OR  
                                 (MONTH(end_date) = @month AND  
                                  YEAR(end_date) = @year  
                                 )  
                                ) AND  
                                emp_id = @emp_code                                          
                                         
                      UPDATE    timesheet  
                      SET       payrollstatus = 'U'  
                      WHERE     MONTH(timesheet_date) = @month AND  
                                YEAR(timesheet_date) = @year AND  
                                emp_id = @emp_code                         
                END                  
       END  
GO
/****** Object:  StoredProcedure [dbo].[sp_SDL_monthly_report_summary]    Script Date: 09/02/2009 11:58:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_SDL_monthly_report_summary]
       (
        @companyid AS INT ,
        @yr AS INT
       )
AS 
       WITH PAYROLL(EMP_CODE, EMP_NAME, MONTHNAME, fundtype, sdl, company_name)
              AS (SELECT E.EMP_CODE, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) 'EMP_NAME',
					UPPER(SUBSTRING(DATENAME(MM, P.START_PERIOD), 1, 3)) + ' ' + CONVERT(CHAR(4), YEAR(P.START_PERIOD)) [MON],
					Q.fund_type 'fundtype', Q.SDL, C.Company_Name
					FROM   prepare_payroll_hdr P 
					Inner Join prepare_payroll_detail	Q On P.trx_id = Q.Trx_ID
					Inner JOin Employee					E On Q.Emp_ID = E.Emp_Code
					Inner Join Company					C On E.Company_ID = C.Company_ID
					Where Q.status = 'G' And E.emp_type IN ('SC', 'SPR', 'SDPR') And C.COMPANY_ID = @companyid AND Year(P.START_PERIOD) = @yr
                 )
            SELECT  (SELECT Company_name FROM company WHERE company_id = @companyid
                    ) 'company_name', @YR YR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                    WHEN 'JAN' THEN SDL
                                                    ELSE 0
                                                  END) AS JAN, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                     WHEN 'FEB' THEN SDL
                                                                     ELSE 0
                                                                   END) AS FEB, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                                      WHEN 'MAR' THEN SDL
                                                                                      ELSE 0
                                                                                    END) AS MAR,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'APR' THEN SDL
                          ELSE 0
                        END) AS APR, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'MAY' THEN SDL
                                           ELSE 0
                                         END) AS MAY, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'JUN' THEN SDL
                                                            ELSE 0
                                                          END) AS JUN, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'JUL' THEN SDL
                                                                             ELSE 0
                                                                           END) AS JUL,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'AUG' THEN SDL
                          ELSE 0
                        END) AS AUG, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                           WHEN 'SEP' THEN SDL
                                           ELSE 0
                                         END) AS SEP, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                            WHEN 'OCT' THEN SDL
                                                            ELSE 0
                                                          END) AS OCT, SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                                                                             WHEN 'NOV' THEN SDL
                                                                             ELSE 0
                                                                           END) AS NOV,
                    SUM(CASE SUBSTRING(MONTHNAME, 1, 3)
                          WHEN 'DEC' THEN SDL
                          ELSE 0
                        END) AS DEC
            FROM    PAYROLL a
            WHERE   sdl IS NOT NULL
            GROUP BY company_name
GO
/****** Object:  StoredProcedure [dbo].[sp_paydetailreport3]    Script Date: 09/02/2009 11:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_paydetailreport3]  
       @month INT ,  
       @year INT ,  
       @compid INT  
AS
Declare @stdt as datetime      
Declare @endt as datetime      
       BEGIN          
			 Select @stdt=PaySubStartDate,@endt=PaySubEndDate From PayrollMonthlyDetail Where ROWID =  @month
             SELECT emp_id, isnull(b.emp_name,'')+' '+isnull(b.emp_lname,'') emp_name,  
                    CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay))) AS basicpay,  
                    CONVERT(NUMERIC(18, 2), total_additions) Additions,  
                    CONVERT(NUMERIC(18, 2), total_deductions) Deductions,  
                    ISNULL(CONVERT(NUMERIC(18, 2), OT1_e), 0) 'OT1', ISNULL(CONVERT(NUMERIC(18, 2), OT2_e), 0) 'OT2',  
                    CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), Netpay))) AS Netpay,  
                    a.ot_entitlement, ISNULL(CONVERT(NUMERIC(18, 2), empCPF), 0) 'employeecpf',  
                    ISNULL(CONVERT(NUMERIC(18, 2), employerCPF), 0) 'employercpf', cpf_entitlement, fund_type,  
                    ISNULL(CONVERT(NUMERIC(18, 2), fund_amount), 0) 'fundamt', CONVERT(NUMERIC(18, 2), cpfnet) 'cpfnet',  
                    CONVERT(NUMERIC(18, 2), total_gross) total_gross  
             FROM   prepare_payroll_detail a ,  
                    employee b ,  
                    prepare_payroll_hdr hd  
             WHERE  a.emp_id = b.emp_code AND  
                    b.company_id = @compid AND  
                    a.status = 'A' AND  
                    emp_id IN (SELECT   emp_id  
                               FROM     prepare_payroll_detail de ,  
                                        prepare_payroll_hdr hd  
                               WHERE    --MONTH(hd.start_period) = @month AND  
										(hd.start_period >= @stdt And hd.end_period <= @endt) And
                                        YEAR(hd.start_period) = @year AND  
                                        de.trx_id = hd.trx_id AND  
                                        de.status = 'A') AND  
                    --MONTH(hd.start_period) = @month AND  
					(hd.start_period >= @stdt And hd.end_period <= @endt) And
                    YEAR(hd.start_period) = @year AND  
                    a.trx_id = hd.trx_id  
             ORDER BY b.emp_name             
       END  
GO
/****** Object:  StoredProcedure [dbo].[sp_payroll_add]    Script Date: 09/02/2009 11:58:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Sp_payroll_add] (@emp_id               BIGINT,      
                                   @basic_pay            NUMERIC(18, 2),      
                                   @NHRate               NUMERIC(18, 2),      
                                   @OT1Rate              NUMERIC(18, 2),      
                                   @OT2Rate              NUMERIC(18, 2),      
                                   @NH_wh                NUMERIC(18, 2),      
                                   @OT1_wh               NUMERIC(18, 2),      
                                   @OT2_wh               NUMERIC(18, 2),      
                                   @NH_e                 NUMERIC(18, 2),      
                                   @OT1_e                NUMERIC(18, 2),      
                                   @OT2_e                NUMERIC(18, 2),      
                                   @Wdays                FLOAT,      
                                   @NetPay               VARCHAR(20),      
                                   @total_additions      NUMERIC(18, 2),      
                                   @total_deductions     NUMERIC(18, 2),      
                                   @ot_entitlement       VARCHAR(10),      
                                   @cpfadd_ord           NUMERIC(18, 2),      
                                   @cpfadd_additional    NUMERIC(18, 2),      
                                   @cpf_net              NUMERIC(18, 2),      
                                   @empCPF               NUMERIC(18, 2),      
                                   @employerCPF          NUMERIC(18, 2),      
                                   @cpfAmount            NUMERIC(18, 2),      
                                   @cpfEntitlement       VARCHAR(10),      
                                   @empCpfType           INT,      
                                   @pr_years             FLOAT,      
                                   @cpf_ceiling          FLOAT,      
                                   @fund_type            VARCHAR(20),      
                                   @fund_amount          FLOAT,      
                                   @status               VARCHAR(5),      
                                   @month                INT,      
                                   @year                 INT,      
                                   @unpaid_leaves        FLOAT,      
                                   @unpaid_leaves_amount FLOAT,      
                                   @total_gross          FLOAT,      
                                   @pay_mode             VARCHAR(50),      
                                   @employee_giroacc     VARCHAR(50),      
                                   @employer_giroacc     VARCHAR(50),      
                                   @giro_bank            VARCHAR(50),      
                                   @submitted_by         INT,      
                                   @fundgrossamount      FLOAT,      
                                   @sdlfundgrossamount   FLOAT,      
                                   @CMOW                 FLOAT,      
                                   @LYOW                 FLOAT,      
                                   @CYOW                 FLOAT,      
                                   @CPFAWCIL             FLOAT,      
                                   @EST_AWCIL            FLOAT,      
                                   @ACTCIL               FLOAT,      
                                   @AWCM                 FLOAT,      
                                   @AWB4CM               FLOAT,      
                                   @AWCM_AWB4CM          FLOAT,      
                                   @AWCPF                FLOAT,      
                                   @sdfrequired    int,  
           @dailyrate    FLOAT,  
           @daysworkedrate   FLOAT  
)      
AS      
  DECLARE @trx_id INT      
  DECLARE @sdlamt AS FLOAT      
  DECLARE @stdt AS DATETIME      
  DECLARE @endt AS DATETIME      
  DECLARE @startsubday int    
  Set @sdlamt = 0    
  --       DECLARE @DATEINYEAR TABLE                          
  --           (                          
  --    ROWID   Int,                
  --    Emp_Code  Int ,                
  --    [Year]   Int ,                
  --    [Month]   Int ,                
  --    [MonthName]  varchar(100) ,                
  --    PayStartDate datetime,                
  --    PayEndDate  datetime,                
  --    PaySubStartDate datetime,                
  --    PaySubEndDate datetime,                
  --    PayStartDay  Int ,                
  --    PayEndDay  Int ,                
  --    PaySubStartDay Int ,                
  --    PaySubEndDay Int ,                
  --    ISEOM   varchar(3)                
  --   )                  
  --                
  --   Insert @DATEINYEAR                 
  --  (                
  --    ROWID,                
  --    Emp_Code,                
  --    [Year],                
  --    [Month],                
  --    [MonthName],                
  --    PayStartDate,                
  --    PayEndDate,                
  --    PaySubStartDate,                
  --    PaySubEndDate,                
  --    PayStartDay,                
  --    PayEndDay,                
  --    PaySubStartDay,                
  --    PaySubEndDay,                
  --    ISEOM                
  --  )           
  --Exec sp_GetPayrollMonth @month,0,0                        
  --Select @stdt=PaySubStartDate,@endt=PaySubEndDate From @DATEINYEAR                
  SELECT @stdt = PaySubStartDate,@endt = PaySubEndDate, @startsubday  = PaySubStartDay    
  FROM   PayrollMonthlyDetail      
  WHERE  ROWID = @month      
      
    
      
 IF (@sdfrequired = 2)      
 BEGIN      
  IF (@sdlfundgrossamount > 0)      
      BEGIN      
          SELECT @sdlamt = dbo.Fn_getsdlamount(@sdlfundgrossamount)      
      END      
  ELSE      
      BEGIN      
          SELECT @sdlamt = dbo.Fn_getsdlamount(@fundgrossamount)      
      END      
 END      
    
  if (@sdlamt > 0 And @startsubday > 1)    
 BEGIN    
  Declare @dedsdlamt as float    
  Select @dedsdlamt=isnull(sum(SDL),0) From prepare_payroll_detail pd Inner Join prepare_payroll_hdr ph on pd.trx_id = ph.trx_id Where ([Status]='P' Or [Status]='G' Or [Status]='A') And 

Emp_ID=@emp_id And ph.end_period=(SELECT PaySubEndDate FROM   PayrollMonthlyDetail  WHERE  ROWID = (@month-1))    
  Set @sdlamt = @sdlamt - @dedsdlamt    
 END    
      
  INSERT INTO prepare_payroll_hdr      
              (trx_date,start_period,end_period,created_on,created_by)      
  VALUES      (Getdate(),      
               --CAST(@year AS VARCHAR) + '/' + CAST(@month AS VARCHAR) + '/01',                
               --DATEADD(m,DATEDIFF(m, 0, DATEADD(m, 1, (CAST(@year AS VARCHAR) + '/' + CAST(@month AS VARCHAR) + '/01'))),-1),                
               @stdt,@endt,Getdate(),@emp_id)      
      
  SELECT @trx_id = @@IDENTITY      
      
  INSERT INTO prepare_payroll_detail      
              ([trx_id],[emp_id],[basic_pay],[NHRate],[OT1Rate],[OT2Rate],[NH_wh],[OT1_wh],[OT2_wh],[NH_e],[OT1_e],[OT2_e],[Wdays],[NetPay],[total_additions],[total_deductions],

[OT_entitlement],[cpfAdd_Ordinary],[cpfAdd_Additional],[cpfNet],[empCPF],[employerCPF],[cpfAmount],[cpfEntitlement],[empCpfType],[pr_years],[cpf_ceiling],[fund_type],

[fund_amount],[status],[unpaid_leaves],[unpaid_leaves_amount],[total_gross],[pay_mode],[employee_giro_acc],[employer_giro_acc],[bank_code],[submitted_by],sdl,DHRate,DH_e)      
  VALUES      (@trx_id,@emp_id,Encryptbyasymkey(Asymkey_id('AsymKey'), CAST(@basic_pay AS VARCHAR

(50))),@NHRate,@OT1Rate,@OT2Rate,@NH_wh,@OT1_wh,@OT2_wh,@NH_e,@OT1_e,@OT2_e,@Wdays,Encryptbyasymkey(Asymkey_id('AsymKey'), CAST(@netpay AS VARCHAR

(50))),@total_additions,@total_deductions,@ot_entitlement,@cpfadd_ord,@cpfadd_additional,@cpf_net,(Round(@empCPF, 0)),@employerCPF,(Round(@cpfAmount, 

0)),@cpfEntitlement,@empCpfType,@pr_years,@cpf_ceiling,@fund_type,@fund_amount,@status,@unpaid_leaves,@unpaid_leaves_amount,@total_gross,@pay_mode,@employee_giroacc,

@employer_giroacc,@giro_bank,@submitted_by,@sdlamt,@dailyrate,@daysworkedrate)      
      
  INSERT INTO AWAudit      
              (trx_id,emp_id,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF)      
  VALUES      (@trx_id,@emp_id,@CMOW,@LYOW,@CYOW,@CPFAWCIL,@EST_AWCIL,@ACTCIL,@AWCM,@AWB4CM,@AWCM_AWB4CM,@AWCPF)      
     
  UPDATE emp_additions      
  SET    status = 'L'      
  WHERE  (emp_code = @emp_id      
      AND (MONTH(trx_period) = @month      
           AND YEAR(trx_period) = @year))      
      OR (emp_code = @emp_id      
          AND      
          --MONTH(trx_period) = @month AND                  
          (trx_period >= @stdt      
           AND trx_period <= @endt)      
         --ANd additionsforyear = @year                  
         )      
      
  UPDATE emp_deductions      
  SET    status = 'L'      
  WHERE  emp_code = @emp_id      
     AND      
     --MONTH(trx_period) = @month AND                  
     (trx_period >= @stdt      
      AND trx_period <= @endt)      
     AND YEAR(trx_period) = @year      
      
  UPDATE emp_leaves      
  SET    payrollStatus = 'L'      
  WHERE  ((MONTH(start_date) = @month      
           AND YEAR(start_date) = @year)      
           OR (--MONTH(end_date) = @month AND                  
              (end_date >= @stdt      
               AND end_date <= @endt)      
              AND YEAR(end_date) = @year))      
     AND Emp_id = @emp_id      
GO
/****** Object:  StoredProcedure [dbo].[sp_CPF1]    Script Date: 09/02/2009 11:56:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_CPF1 4,2010,3,'T08SS0160C-PTE-01'
CREATE PROC [dbo].[Sp_cpf1] 
@month     INT,
@year      INT,
@companyid INT,
@csnno     VARCHAR(36)
AS
  BEGIN
      DECLARE @month1 AS INT
      DECLARE @year1 AS INT

      /* Added for SDF & FWL calculation */
      CREATE TABLE #EmpList
        (
           SDL FLOAT NULL,
           FWL FLOAT NULL
        )

      INSERT INTO #EmpList
      SELECT Isnull(SDL, 0),
             Isnull(FWL, 0)
      FROM   prepare_payroll_detail
      WHERE  trx_id IN (SELECT trx_id
                        FROM   prepare_payroll_hdr
                        WHERE  MONTH(start_period) = @month
                               AND YEAR(start_period) = @year)
             AND status = 'G'
             AND emp_id IN (SELECT emp_code
                            FROM   employee
                            WHERE  company_id = @companyid
                                   AND employer_cpf_acct = @csnno) --and termination_date is null)    

      /* SDF END */
      SET @month1 = @month
      SET @year1 = @year

      SELECT cpfAmount,
             fund_amount,
             fund_type
      INTO   #temp
      FROM   prepare_payroll_detail a,
             prepare_payroll_hdr b
      WHERE  MONTH(b.start_period) = @month
             AND YEAR(b.start_period) = @year
             AND a.trx_id = b.trx_id
             AND a.status = 'G'
             AND a.emp_id IN (SELECT emp_code
                              FROM   employee
                              WHERE  company_id = @companyid
                                     AND cpf_entitlement = 'Y'
                                     AND employer_cpf_acct = @csnno)

      SELECT Isnull(SUM(cpfAmount), 0)                                                                                                          CPF,
             (SELECT Isnull (SUM (fund_amount), 0)
              FROM   #temp
              WHERE  fund_type = 'SINDA')                                                                                                       SINDA,
             (SELECT COUNT (*)
              FROM   #temp
              WHERE  fund_type = 'SINDA')                                                                                                       SINDADONER,
             (SELECT Isnull (SUM (fund_amount), 0)
              FROM   #temp
              WHERE  fund_type = 'CDAC')                                                                                                        CDAC,
             (SELECT COUNT (*)
              FROM   #temp
              WHERE  fund_type = 'CDAC')                                                                                                        CDACDONER,
             (SELECT Isnull (SUM (fund_amount), 0)
              FROM   #temp
              WHERE  fund_type = 'MBMF')                                                                                                        MBMF,
             (SELECT COUNT (*)
              FROM   #temp
              WHERE  fund_type = 'MBMF' AND fund_amount>0)																						MBMFDONER,
             (SELECT Isnull (SUM (fund_amount), 0)
              FROM   #temp
              WHERE  fund_type = 'ECF')                                                                                                         ECF,
             (SELECT COUNT (*)
              FROM   #temp
              WHERE  fund_type = 'ECF')                                                                                                         ECFDONER,
             (SELECT Isnull (SUM (fund_amount), 0)
              FROM   #temp
              WHERE  fund_type = 'CCHEST')                                                                                                      CCHEST,
             (SELECT COUNT (*)
              FROM   #temp
              WHERE  fund_type = 'CCHEST')                                                                                                      CCHESTDONER,
             (SELECT ( Isnull(SUM(cpfAmount), 0) + Isnull(SUM(fund_amount), 0) + Isnull((SELECT Floor (SUM (SDL))
                                                                                         FROM   #EmpList), 0) + Isnull((SELECT Round (( SUM (FWL) ), 0)
                                                                                                                        FROM   #EmpList), 0) )) total,
             @month                                                                                                                             'month',
             @year                                                                                                                              'year',
             (SELECT Floor (SUM (SDL))
              FROM   #EmpList)                                                                                                                  'SDL',
             (SELECT Round (( SUM (FWL) ), 0)
              FROM   #EmpList)                                                                                                                  'FWL'
      FROM   #temp
  END 
GO
/****** Object:  StoredProcedure [dbo].[sp_EmpSalSummary]    Script Date: 09/02/2009 11:57:39 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_EmpSalSummary]  --2008,1 ,1,9                          
       @year INT ,
       @company_id INT ,
       @month1 INT ,
       @month2 INT
AS 
       SELECT   emp_id, (SELECT emp_name+ ' '+ emp_lname 'name' FROM employee WHERE emp_code = de.emp_id
                        ) EmpName, (SELECT company_id FROM employee WHERE emp_code= de.emp_id
                                   ) compid, (SELECT ic_pp_number FROM employee WHERE emp_code = de.emp_id
                                             ) ICNumber,
                CONVERT(VARCHAR(20), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay)) netpay, total_additions,
                total_deductions, OT1_e, OT2_e,
                ISNULL(CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay)), 0) 'BasicPay',                
--+isnull(total_additions,0)+isnull(OT1_e,0)+isnull(OT2_e,0) 'Gross',                                    
                CONVERT(VARCHAR(20), hdr.start_period, 106) PayDate, hdr.start_period,
                (SELECT company_name FROM company WHERE company_id= @COMPANY_ID
                ) compname
       INTO     #temp
       FROM     prepare_payroll_detail de ,
                prepare_payroll_hdr hdr
       WHERE    status = 'G' AND
                de.trx_id IN (SELECT    trx_id
                              FROM      prepare_payroll_hdr
                              WHERE     YEAR(start_period) = @year AND
                                        MONTH(start_period) >= @month1 AND
                                        MONTH(start_period) <= @month2) AND
                de.trx_id = hdr.trx_id
       ORDER BY hdr.start_period                               
                              
       SELECT   emp_id, EmpName, compname, @year yr, SUM(CONVERT(NUMERIC(18, 2), netpay)) netpay,
                SUM(total_additions) totalAdditions, SUM(OT1_e) totalot1, SUM(OT2_e) totalot2,
                SUM(total_deductions) totalDeduction, SUM(CONVERT(NUMERIC(18, 2), BasicPay)) BasicPay
       FROM     #temp
       WHERE    compid = @company_id
       GROUP BY emp_id, EmpName, compname
GO
/****** Object:  StoredProcedure [dbo].[sp_email_payroll]    Script Date: 09/02/2009 11:56:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_email_payroll] --192      
       @trx_id INT
AS 
       BEGIN      
      
             DECLARE @email VARCHAR(50)  
             SELECT @email = email
             FROM   employee
             WHERE  emp_code = (SELECT submitted_by FROM prepare_payroll_detail WHERE trx_id = @trx_id
                               )  
  
             SELECT emp_id, @email, --c.email,      
                    b.email_SMTP_server, b.email_username, b.email_password, status, b.email_sender_domain,
                    b.email_sender_name, b.email_reply_address, b.email_reply_name, b.email_smtp_port, b.email,
                    b.email_payalert, b.email_sender, b.ccmail
             FROM   prepare_payroll_detail a ,
                    employee c ,
                    company b
             WHERE  trx_id = @trx_id AND
                    a.emp_id = c.emp_code AND
                    c.company_id = b.company_id      
      
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_cpf_detail]    Script Date: 09/02/2009 11:56:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_cpf_detail 4,2010,3,'T08SS0160C-PTE-01'
CREATE PROC [dbo].[sp_cpf_detail]    
       @month INT ,    
       @year INT ,    
       @companyid INT ,    
       @csnno VARCHAR(50)    
AS     
       BEGIN              
             SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name, employee_cpf_acct, b.cpfAmount, cdac_fund, sinda_fund, mbmf_fund, ecf_fund, b.fund_type,    
                    b.fund_amount, YEAR(a.joining_date) yjoining_date, MONTH(a.joining_date) mjoining_date,    
                    YEAR(a.termination_date) ytermination_date, MONTH(a.termination_date) mtermination_date    
             INTO   #temp    
             FROM   employee a ,    
                    prepare_payroll_detail b ,    
                    prepare_payroll_hdr c    
             WHERE  a.emp_code = b.emp_id AND    
                    b.trx_id = c.trx_id AND    
                    MONTH(c.start_period) = @month AND    
                    YEAR(c.start_period) = @year AND    
                    b.status = 'G' AND    
                    b.emp_id IN (SELECT emp_code    
                                 FROM   employee    
                                 WHERE  company_id = @companyid AND    
                                        cpf_entitlement = 'Y' AND    
                                        employer_cpf_acct = @csnno)         
								And b.cpfAmount > 0       
        
             UPDATE #temp    
             SET    cdac_fund = fund_amount    
             WHERE  fund_type = 'CDAC'        
             UPDATE #temp    
             SET    sinda_fund = fund_amount    
             WHERE  fund_type = 'SINDA'        
             UPDATE #temp    
             SET    mbmf_fund = fund_amount    
             WHERE  fund_type = 'MBMF'        
             UPDATE #temp    
             SET    ecf_fund = fund_amount    
             WHERE  fund_type = 'ECF'        

--			Select D.Emp_Code,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')) 'emp_name',D.FundType,Em.Employee_Cpf_Acct,Sum(Trx_Amount) Trx_Amount
--			Into #Temp2 From (
--				Select ED.Emp_Code,ED.Trx_Amount,
--				FundType = Case
--						When (ED.FundType=1 OR ED.FundType=5) Then 'CDAC'  
--						When (ED.FundType=2 OR ED.FundType=6) Then 'ECF'  
--						When (ED.FundType=3 OR ED.FundType=7) Then 'MBMF'  
--						When (ED.FundType=4 OR ED.FundType=8) Then 'SINDA'  
--						END
--				From Emp_Deductions ED Where
--				ED.status = 'L'
--				AND MONTH(ED.trx_period) = @month
--				AND YEAR(ED.trx_period) = @year
--			) D Inner Join Employee Em On D.Emp_Code = Em.Emp_Code 
--		Group By D.Emp_Code,D.FundType,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')),Em.Employee_Cpf_Acct

		Select Emp_Name,Employee_Cpf_Acct,CPFAmount,CDAC_Fund,SINDA_Fund,MBMF_Fund,ECF_Fund,Fund_Type,Fund_Amount,yJoining_Date,mJoining_Date,yTermination_Date,mTermination_Date From #temp
       END      
GO
/****** Object:  StoredProcedure [dbo].[sp_unlock_payroll]    Script Date: 09/02/2009 11:58:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_unlock_payroll] --668,997,11      
       (  
        @trxid INT ,  
        @empcode INT ,  
        @trxperiod INT  
       )  
AS

Declare @stdt as datetime        
Declare @endt as datetime        
Select @stdt=PaySubStartDate,@endt=PaySubEndDate From PayrollMonthlyDetail Where ROWID =  @trxperiod  
                    
       BEGIN      
             UPDATE PREPARE_PAYROLL_DETAIL  
             SET    STATUS = 'R'  
             WHERE  trx_id = @trxid    
  
             UPDATE emp_additions  
             SET    status = 'U'  
             WHERE  emp_code = @empcode AND  
				(trx_period >= @stdt AND trx_period <= @endt)
                    --MONTH(trx_period) = @trxperiod      

             UPDATE emp_deductions  
             SET    status = 'U'  
             WHERE  emp_code = @empcode AND  
				(trx_period >= @stdt AND trx_period <= @endt)
                    --MONTH(trx_period) = @trxperiod    

             UPDATE emp_leaves  
             SET    payrollStatus = 'U'  
             WHERE  emp_id = @empcode AND  
				(end_date >= @stdt AND end_date <= @endt) 
                    --MONTH(start_date) = @trxperiod AND  
                    --MONTH(end_date) = @trxperiod    
       END  
GO
/****** Object:  StoredProcedure [dbo].[sp_emp_overtime]    Script Date: 09/02/2009 11:57:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[sp_emp_overtime] 3,11,2010
--[sp_emp_overtime] 3,45,2010  
CREATE PROCEDURE [dbo].[sp_emp_overtime] --3,8,2010  
       @company_id INT ,    
       @month INT ,    
       @year INT    
AS     
       BEGIN                                 
       
       Select * Into #Employee  From Employee Where Company_ID = @company_id
--             SELECT id, a.emp_code, ISNULL(b.emp_name, '') + ' ' + ISNULL(b.emp_lname, '') 'emp_name',    
--                    b.emp_code 'empid', b.time_card_no, overtime1, overtime2, trx_date, status, days_work, v1, v2, v3,    
--                    v4, pay_frequency,    
--                    (SELECT DeptName FROM Department WHERE id = b.dept_id AND Company_id = @company_id    
--                    ) 'department', b.termination_date, b.v1rate, b.v2rate, b.v3rate, b.v4rate, b.ot_entitlement,    
--                    a.NH_Work    
--             INTO   #temp    
--             FROM   emp_overtime a,Employee b   
--             WHERE  a.emp_code=*b.emp_code AND    
--                    b.company_id = @company_id                                  
--                    AND    
--                    trx_month = @month AND    
--                    trx_year = @year    
--             ORDER BY emp_name          
  
 Select * Into #TempNew From   
 (  
  Select o.id, e.emp_code, ISNULL(e.emp_name, '') + ' ' + ISNULL(e.emp_lname, '') 'emp_name',   
  e.emp_code 'empid', e.time_card_no, o.overtime1, o.overtime2, o.trx_date, o.status, o.days_work, o.v1, o.v2, o.v3, o.v4, e.pay_frequency,  
  DeptName Department, e.termination_date, e.v1rate, e.v2rate, e.v3rate, e.v4rate, e.ot_entitlement,o.NH_Work  
  FROM   emp_overtime o  
  Inner Join #Employee e On o.Emp_code = e.emp_code  
  Left Outer Join Department d On e.Dept_ID = d.id  
  WHERE  o.trx_month = @month AND o.trx_year = @year And e.Company_ID=@company_id  
 )  D   
  
  
/* DELETION FOR TERMINATED EMPLOYEES*/                    
                  
  
  Select *   Into #Temp From  
  (  
   Select * From #TempNew  
   Union  
   Select null id, null emp_code, ISNULL(e.emp_name, '') + ' ' + ISNULL(e.emp_lname, '') 'emp_name',   
   e.emp_code 'empid', e.time_card_no, null overtime1, null overtime2, null trx_date, null [status], null days_work, null v1,   
   null v2, null v3, null v4, e.pay_frequency,  
   DeptName Department, e.termination_date, e.v1rate, e.v2rate, e.v3rate, e.v4rate, e.ot_entitlement,null NH_Work  
   FROM   #Employee e  
   Left Outer Join Department d On e.Dept_ID = d.id  
   Where e.Emp_Code not in( Select Emp_Code from #TempNew)  
  ) E Order By Emp_name  
  
             DELETE FROM #Temp    
             WHERE  MONTH(termination_date) < @month AND    
                    YEAR(termination_date) = @year              
             DELETE FROM #Temp    
             WHERE  YEAR(termination_date) < @year                   
  
  
   Select * From #Temp  
  
   Drop Table #TempNew          
   Drop table #Temp  
   Drop Table #Employee
  
       END    
GO
/****** Object:  StoredProcedure [dbo].[sp_GetEmployeeCPF_Amount]    Script Date: 09/02/2009 11:57:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_GetEmployeeCPF_Amount]
       (
        @pr_years INT ,
        @sal FLOAT ,
        @emp_group INT ,
        @age_group INT ,
        @rez FLOAT OUTPUT  
       )
AS 
       IF @sal > 500 AND
          @sal < 501 
          SET @sal = 501  
       IF @sal > 750 AND
          @sal < 751 
          SET @sal = 751  
       IF @sal > 1200 AND
          @sal < 1201 
          SET @sal = 1201  
  
       DECLARE @rowID INT  
       SELECT   @rowID = row_id
       FROM     CPFAmount_hdr
       WHERE    pr_years = @pr_years AND
                emp_group = @emp_group AND
                @sal BETWEEN sal_from AND sal_to  
  
       DECLARE @comp NVARCHAR(50)  
       DECLARE @param NVARCHAR(50)  
 --DECLARE @rez FLOAT  
       SELECT   @comp = employee_cpf
       FROM     CPFAmount_detail
       WHERE    hdr_id = @rowID AND
                age_group = @age_group   
       SET @comp = N'set @rez= ' + @comp  
       SET @param = N'@rez float output, @SAL float'  
       EXEC sp_executesql @comp, @param, @rez OUTPUT, @sal  
-- RETURN @rez  
       SELECT   @rez
GO
/****** Object:  StoredProcedure [dbo].[sp_GetEmpCPF_Amount]    Script Date: 09/02/2009 11:57:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_GetEmpCPF_Amount]
       (
        @pr_years INT ,
        @sal FLOAT ,
        @emp_group INT ,
        @age_group INT ,
        @rez FLOAT OUTPUT
       )
AS 
       IF @sal > 500 AND
          @sal < 501 
          SET @sal = 501
       IF @sal > 750 AND
          @sal < 751 
          SET @sal = 751
       IF @sal > 1200 AND
          @sal < 1201 
          SET @sal = 1201

       DECLARE @rowID INT
       SELECT   @rowID = row_id
       FROM     CPFAmount_hdr
       WHERE    pr_years = @pr_years AND
                emp_group = @emp_group AND
                @sal BETWEEN sal_from AND sal_to

       DECLARE @comp NVARCHAR(50)
       DECLARE @param NVARCHAR(50)
	--DECLARE @rez FLOAT
       SELECT   @comp = employer_cpf
       FROM     CPFAmount_detail
       WHERE    hdr_id = @rowID AND
                age_group = @age_group	
       SET @comp = N'set @rez= ' + @comp
       SET @param = N'@rez float output, @SAL float'
       EXEC sp_executesql @comp, @param, @rez OUTPUT, @sal
--	RETURN @rez
       SELECT   @rez
GO
/****** Object:  StoredProcedure [dbo].[sp_Add_TS_FileUpload]    Script Date: 09/02/2009 11:56:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Add_TS_FileUpload]  
       @Company_ID INT ,  
       @Month INT ,  
       @Year INT ,  
       @TranID VARCHAR(20) ,  
       @FileName VARCHAR(100) ,  
       @OriFileName VARCHAR(200) ,  
       @TypeNum INT,
       @FileType VARCHAR(20)
AS   
       BEGIN      
             INSERT INTO [TS_FileUploaded] ([Company_ID], [Month], [Year], [TranID], [FileName], [OriFileName],  
                                            [TypeNum],[FileType])  
             VALUES (@Company_ID, @Month, @Year, @TranID, @FileName, @OriFileName, @TypeNum,@FileType)      
  
             SELECT TranID  
             FROM   [TS_FileUploaded]  
             WHERE  ID = SCOPE_IDENTITY()  
       END
GO

/****** Object:  StoredProcedure [dbo].[sp_GetEmployeeLeavePolicyByMonthly]    Script Date: 09/02/2009 11:57:46 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Sp_getemployeeleavepolicybymonthly] @empid              INT,
                                                      @year               VARCHAR(4),
                                                      @leavetype          INT,
                                                      @compolicyleave     FLOAT,
                                                      @currentleaveearned FLOAT
AS
  DECLARE @RndMonth INT
  DECLARE @MonthInNumber INT
  DECLARE @startdtsub DATETIME
  DECLARE @enddtsub DATETIME
  DECLARE @RowID FLOAT
  DECLARE @YearID INT
  DECLARE @MONTHID INT
  DECLARE @PaidLeave FLOAT
  DECLARE @UnPaidLeave FLOAT
  DECLARE @LeaveAvailable FLOAT
  DECLARE @DateofJoiningMth INT
  DECLARE @DateofTerminate INT
  DECLARE @CompanyLeaveAllowedDec FLOAT
  DECLARE @CurrentLeaveEarnedDec FLOAT
  DECLARE @LeaveAvailableTot FLOAT
  DECLARE @LEAVEMODEL INT
  DECLARE @LOCK INT
  DECLARE @LASTPALE DECIMAL(8, 2)
  DECLARE @LASTCLE FLOAT
  DECLARE @TOTCURLE DECIMAL(8, 2)
  DECLARE @LYL FLOAT
  DECLARE @CMLE DECIMAL(8, 2)

  SET @TOTCURLE = 0
  SET @LASTPALE = 0
  SET @LASTCLE = 0
  SET @LOCK = 0
  SET @LeaveAvailableTot = @currentleaveearned

  SELECT @LEAVEMODEL = leave_model
  FROM   company
  WHERE  company_id = (SELECT company_id
                       FROM   employee
                       WHERE  emp_code = @empid)

  SELECT @DateofJoiningMth = MONTH(joining_date),@YearID = YEAR(joining_date),@DateofTerminate = MONTH(termination_date)
  FROM   employee
  WHERE  emp_code = @empid

  IF (@DateofTerminate IS NULL)
      BEGIN
          SET @DateofTerminate = 13
      END

  CREATE TABLE #emltemp
      (
           emp_id         INT,
           leave_type     INT,
           LY_Leaves_Bal  FLOAT,
           leaves_allowed FLOAT,
           leave_year     INT
      )

  INSERT INTO #emltemp
  SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
  FROM   employeeleavesallowed
  WHERE  LEave_Type != 8

  IF (@leavemodel = 1
       OR @leavemodel = 2
       OR @leavemodel = 5
       OR @leavemodel = 7)
      BEGIN
          INSERT INTO #emltemp
          SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
          FROM   employeeleavesallowed
          WHERE  LEave_Type = 8
      END

  IF (@leavemodel = 4
       OR @leavemodel = 6
       OR @leavemodel = 8
       OR @leavemodel = 3)
      BEGIN
          INSERT INTO #emltemp
          SELECT emp_id,8,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leavesallowed),@year
          FROM   YOSLeavesAllowed
          WHERE  Emp_ID = @empid
             AND LeavesAllowed > 0
      END

  IF (@LEAVEMODEL = 1
       OR @LEAVEMODEL = 2
       OR @LEAVEMODEL = 5
       OR @LEAVEMODEL = 7)
      BEGIN
          SET @startdtsub = CONVERT(DATETIME, '01/01/' + @year, 103)
          SET @enddtsub = CONVERT(DATETIME, '31/12/' + @year, 103)
      END
  ELSE
      BEGIN
          SET @startdtsub = CONVERT(DATETIME, '01/'+ CAST(@DateofJoiningMth AS VARCHAR) + '/' + @year, 103)

          IF (@DateofJoiningMth = 1)
              BEGIN
                  SET @enddtsub = CONVERT(DATETIME, '31/12/' + @year, 103)
              END
          ELSE
              BEGIN
                  SELECT @RndMonth = DAY(MAX(DateInYear))
                  FROM   DateInYear
                  WHERE  YEAR(DateInYear) = (CAST(@year AS INT) + 1)
                     AND MONTH(DateInYear) = (@DateofJoiningMth - 1)

                  SET @enddtsub = CONVERT(DATETIME, CAST(@RndMonth AS VARCHAR) + '/'+ CAST((@DateofJoiningMth-1) AS VARCHAR) + '/' + CAST((CAST(@year AS INT)+1) AS VARCHAR), 103)
              END
      END

  SELECT CAST(0 AS FLOAT) rowid,d.mth,@compolicyleave companyleaveallowed,CONVERT(DECIMAL(8, 2), @currentleaveearned) currentleaveearned,paidleaves = CASE
                                                                                                                                                        WHEN e.paidleaves IS NULL THEN CONVERT(FLOAT, 0)
                                                                                                                                                        ELSE CONVERT(FLOAT, e.paidleaves)
                                                                                                                                                      END,unpaidleaves = CASE
                                                                                                                                                                           WHEN f.unpaidleaves IS NULL THEN CONVERT(FLOAT, 0)
                                                                                                                                                                           ELSE CONVERT(FLOAT, f.unpaidleaves)
                                                                                                                                                                         END,CONVERT(DECIMAL(8, 2), 0) leaveavailable
  INTO   #templeavestart
  FROM   (SELECT DISTINCT (MONTH(dateinyear)) mth,l.id,l.TYPE
          FROM   dateinyear
                 CROSS JOIN leave_types l
          WHERE  l.companyid = -1) d
         LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(paidleaves) paidleaves
                          FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(eld.halfday_leave)) / 2) paidleaves
                                  FROM   emp_leaves el
                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                  WHERE  el.emp_id = @empid
                                     AND (eld.leave_date >= @startdtsub
                                          AND eld.leave_date <= @enddtsub)
                                     AND (eld.unpaid_leave = 0
                                          AND eld.halfday_leave = 1)
                                     AND el.status = 'Approved'
                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
                                  UNION ALL
                                  SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,COUNT(eld.unpaid_leave) paidleaves
                                  FROM   emp_leaves el
                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                  WHERE  el.emp_id = @empid
                                     AND (eld.leave_date >= @startdtsub
                                          AND eld.leave_date <= @enddtsub)
                                     AND (eld.unpaid_leave = 0
                                          AND eld.halfday_leave = 0)
                                     AND el.status = 'Approved'
                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
                          GROUP  BY d.emp_id,d.leave_type,d.mth) e ON d.mth = e.mth
                                                                      AND e.leave_type = d.id
         LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(unpaidleaves) unpaidleaves
                          FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,SUM(eld.unpaid_leave) / 2 unpaidleaves
                                  FROM   emp_leaves el
                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                  WHERE  el.emp_id = @empid
                                     AND (eld.leave_date >= @startdtsub
                                          AND eld.leave_date <= @enddtsub)
                                     AND (eld.unpaid_leave = 1
                                          AND eld.halfday_leave = 1)
                                     AND el.status = 'Approved'
                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
                                  UNION ALL
                                  SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,SUM(eld.unpaid_leave) unpaidleaves
                                  FROM   emp_leaves el
                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                  WHERE  el.emp_id = @empid
                                     AND (eld.leave_date >= @startdtsub
                                          AND eld.leave_date <= @enddtsub)
                                     AND (eld.unpaid_leave = 1
                                          AND eld.halfday_leave = 0)
                                     AND el.status = 'Approved'
                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
                          GROUP  BY d.emp_id,d.leave_type,d.mth) f ON d.mth = f.mth
                                                                      AND f.leave_type = d.id
  WHERE  d.id = @leavetype
  ORDER  BY d.id,d.mth

  DECLARE @lylsum AS FLOAT

  SELECT @lylsum = Isnull(LY_Leaves_Bal, 0)
  FROM   #emltemp
  WHERE  emp_id = @empid
     AND Leave_Type = @leavetype
     AND leave_year = @year

  SELECT rowid,mth,companyleaveallowed,
         --         lyl = CASE           
         --                 WHEN @currentleaveearned >= @compolicyleave          
         --                 THEN @currentleaveearned - @compolicyleave          
         --                 ELSE 0          
         --               END,          
         @lylsum AS lyl,cyl = CASE
                                WHEN @currentleaveearned >= @compolicyleave THEN @currentleaveearned --@currentleaveearned - ( @currentleaveearned - @compolicyleave )    
                                ELSE @currentleaveearned
                              END,currentleaveearned,paidleaves,unpaidleaves,leaveavailable,Datename(MONTH, '1900/' + CAST(mth AS VARCHAR(2)) + '/01') mthname,CONVERT(DECIMAL(8, 2), 0) cmle
  INTO   #templeavebalancepre
  FROM   #templeavestart


  IF (@YearID != YEAR(@year))
      BEGIN
          SET @MonthInNumber = 12
      END
  ELSE
      BEGIN
		  IF (@LEAVEMODEL = 3 OR @LEAVEMODEL = 8 OR @LEAVEMODEL = 4 OR @LEAVEMODEL = 6) 
			BEGIN
				SET @MonthInNumber = 12 --- (@DateofJoiningMth - 1) On August 13th this code is commented for the issue with respect to click on detail for the employees joining current year in the mid.. like Feb or July.
			END
			ELSE
			BEGIN
				SET @MonthInNumber = 12 - (@DateofJoiningMth - 1) --On August 13th this code is commented for the issue with respect to click on detail for the employees joining current year in the mid.. like Feb or July.
			END
      END

  IF (@LEAVEMODEL = 2
       OR @LEAVEMODEL = 5
       OR @LEAVEMODEL = 7)
      OR (@LEAVEMODEL = 4
           OR @LEAVEMODEL = 6
           OR @LEAVEMODEL = 8)
      BEGIN
          IF (@LEAVEMODEL != 1
              AND @LEAVEMODEL != 2
              AND @LEAVEMODEL != 5
              AND @LEAVEMODEL != 7)
              BEGIN

                  UPDATE #TempLeaveBalancePre
                  SET    Mth = (Mth - @DateofJoiningMth) + 1,
                         RowID = 1
                  WHERE  Mth >= @DateofJoiningMth

                  IF (@DateofJoiningMth != 1)
                      BEGIN
                          UPDATE #TempLeaveBalancePre
                          SET    Mth = Mth + (SELECT MAX(Mth)
                                              FROM   #TempLeaveBalancePre
                                              WHERE  RowID = 1)
                          WHERE  RowID = 0
                      END
              END

          IF (@YearID != YEAR(@year))
              BEGIN
                  UPDATE #templeavebalancepre
                  SET    rowid = 0
                  WHERE  mth = 1

                  UPDATE #templeavebalancepre
                  SET    rowid = Round((cyl / @MonthInNumber), 2)
                  WHERE  mth != 1
                     AND mth != 12
              END
          ELSE
              BEGIN
					IF (@LEAVEMODEL = 3 OR @LEAVEMODEL = 8 OR @LEAVEMODEL = 4 OR @LEAVEMODEL = 6) 
					BEGIN
						  UPDATE #templeavebalancepre
						  SET    rowid = 0
						  WHERE  mth = 1

						  UPDATE #templeavebalancepre
						  SET    rowid = Round((cyl / @MonthInNumber), 2)
						  WHERE  mth != 1
							 AND mth != 12
					END
					ELSE
					BEGIN
						  UPDATE #templeavebalancepre  
						  SET    rowid = 0  
						  WHERE  mth <= @DateofJoiningMth  
			  
						  UPDATE #templeavebalancepre  
						  SET    rowid = Round(( cyl / @MonthInNumber ), 2)  
						  WHERE  mth > @DateofJoiningMth  
								 AND mth != 12  
					END
              END

          UPDATE #templeavebalancepre
          SET    rowid = cyl - (SELECT Round(SUM(rowid), 2)
                                FROM   #templeavebalancepre
                                WHERE  mth < 12)
          WHERE  mth = 12
      END
  ELSE
      BEGIN
          IF (@compolicyleave < @currentleaveearned)
              BEGIN
                  --              UPDATE #templeavebalancepre    
                  --              SET    rowid = companyleaveallowed    
                  UPDATE #templeavebalancepre
                  SET    rowid = @currentleaveearned
              END
          ELSE
              BEGIN
                  UPDATE #templeavebalancepre
                  SET    rowid = @currentleaveearned
              END
      END

  UPDATE #templeavebalancepre
  SET    currentleaveearned = lyl + rowid

  DECLARE changecursor CURSOR FOR
      SELECT rowid,mth,companyleaveallowed,currentleaveearned,paidleaves,unpaidleaves,leaveavailable
      FROM   #templeavebalancepre
      FOR UPDATE OF leaveavailable

  OPEN changecursor

  FETCH NEXT FROM changecursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable

  WHILE @@FETCH_STATUS = 0
      BEGIN
          SET @LeaveAvailableTot = @CurrentLeaveEarnedDec - @PaidLeave

          UPDATE #templeavebalancepre
          SET    leaveavailable = @LeaveAvailableTot
          WHERE  CURRENT OF changecursor

          IF (@LEAVEMODEL = 1
               OR @LEAVEMODEL = 3)
              BEGIN
                  IF ((@MONTHID > @DateofTerminate
                       AND @YearID = @year)
                       OR (@MONTHID < @DateofJoiningMth
                           AND @YearID = @year))
                      BEGIN
                          UPDATE #templeavebalancepre
                          SET    companyleaveallowed = 0,
                                 cmle = 0,
                                 lyl = 0,
                                 currentleaveearned = 0,
                                 paidleaves = 0,
                                 unpaidleaves = 0,
                                 leaveavailable = 0
                          WHERE  CURRENT OF changecursor
                      END
              END

          FETCH NEXT FROM changecursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
      END

  CLOSE changecursor

  DEALLOCATE changecursor

  SELECT cyl,mth,rowid,mth monthid,Round(companyleaveallowed, 2) companyleaveallowed,
         --         lyl = CASE    
         --                 WHEN @currentleaveearned >= @compolicyleave THEN Round(@currentleaveearned - @compolicyleave, 2)    
         --                 ELSE 0    
         --               END,    
         @lylsum AS lyl,rowid cmle,currentleaveearned,Round(paidleaves, 2) paidleaves,Round(unpaidleaves, 2) unpaidleaves,Round(leaveavailable, 2) leaveavailable,mthname
  INTO   #templeavebalance
  FROM   #templeavebalancepre
  ORDER  BY mth

  DECLARE changecursor CURSOR FOR
      SELECT lyl,cmle,rowid,mth,companyleaveallowed,currentleaveearned,paidleaves,unpaidleaves,leaveavailable
      FROM   #templeavebalance
      FOR UPDATE OF currentleaveearned

  OPEN changecursor

  FETCH NEXT FROM changecursor INTO @LYL, @CMLE, @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable

  WHILE @@FETCH_STATUS = 0
      BEGIN
          IF @LOCK > 0
              BEGIN
                  UPDATE #templeavebalance
                  SET    currentleaveearned = @TOTCURLE
                  WHERE  mth = @MONTHID
              --WHERE CURRENT OF changecursor          
              END

          SET @LOCK = @LOCK + 1
          SET @LASTCLE = @CurrentLeaveEarnedDec

          IF @LEAVEMODEL = 1
              OR @LEAVEMODEL = 3
              BEGIN
                  SET @LASTPALE = @LASTPALE + @PaidLeave
              END
          ELSE
              BEGIN
                  SET @LASTPALE = @PaidLeave
              END

          FETCH NEXT FROM changecursor INTO @LYL, @CMLE, @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable

          IF @LEAVEMODEL = 1
              OR @LEAVEMODEL = 3
              BEGIN
                  SET @TOTCURLE = (@LYL + @CMLE) - @LASTPALE
              END

          IF (@LEAVEMODEL = 2
               OR @LEAVEMODEL = 5
               OR @LEAVEMODEL = 7)
              OR (@LEAVEMODEL = 4
                   OR @LEAVEMODEL = 6
                   OR @LEAVEMODEL = 8)
              BEGIN
                  IF (@LOCK = 1)
                      BEGIN
                          SET @TOTCURLE = (@LYL + @CMLE + @TOTCURLE) - @LASTPALE
                      --Select @LYL, @CMLE,@LASTPALE          
                      END
                  ELSE
                      BEGIN
                          SET @TOTCURLE = (@CMLE + @TOTCURLE) - @LASTPALE
                      --Select @LYL, @CMLE,@LASTPALE          
                      END
              END
      --  if @TOTCURLE < 0               
      --  BEGIN            
      --   Set @TOTCURLE = 0              
      --  END          
      END

  CLOSE changecursor

  DEALLOCATE changecursor

  --PRORATED          
  IF (@LEAVEMODEL = 1
       OR @LEAVEMODEL = 7
       OR @LEAVEMODEL = 2
       OR @LEAVEMODEL = 5)
      OR (@LEAVEMODEL = 3
           OR @LEAVEMODEL = 4
           OR @LEAVEMODEL = 6
           OR @LEAVEMODEL = 8)
      BEGIN
          DECLARE changesubcursor CURSOR FOR
              SELECT rowid,mth,companyleaveallowed,currentleaveearned,paidleaves,unpaidleaves,leaveavailable
              FROM   #templeavebalance
              FOR UPDATE OF leaveavailable

          OPEN changesubcursor

          FETCH NEXT FROM changesubcursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable

          WHILE @@FETCH_STATUS = 0
              BEGIN
                  SET @LeaveAvailableTot = @CurrentLeaveEarnedDec - @PaidLeave

                  UPDATE #templeavebalance
                  SET    leaveavailable = @LeaveAvailableTot
                  WHERE  CURRENT OF changesubcursor

                  IF (@LEAVEMODEL = 1
                       OR @LEAVEMODEL = 3)
                      BEGIN
                          --Select @MONTHID, @DateofTerminate, @YearID, @year, @DateofJoiningMth          
                          IF ((@MONTHID > @DateofTerminate
                               AND @YearID = @year)
                               OR (@MONTHID < @DateofJoiningMth
                                   AND @YearID = @year))
                              BEGIN
                                  UPDATE #templeavebalance
                                  SET    companyleaveallowed = 0,
                                         cmle = 0,
                                         lyl = 0,
                                         currentleaveearned = 0,
                                         paidleaves = 0,
                                         unpaidleaves = 0,
                                         leaveavailable = 0
                                  WHERE  CURRENT OF changesubcursor
                              END
                      END

                  FETCH NEXT FROM changesubcursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
              END

          CLOSE changesubcursor

          DEALLOCATE changesubcursor
      END

  IF (@LEAVEMODEL = 2
       OR @LEAVEMODEL = 4)
      BEGIN
          UPDATE #templeavebalance
          SET    leaveavailable = Floor(leaveavailable)
          WHERE  Mth != 12
      END

  IF (@LEAVEMODEL = 5
       OR @LEAVEMODEL = 6)
      BEGIN
          UPDATE #templeavebalance
          SET    leaveavailable = Ceiling(leaveavailable)
          WHERE  Mth != 12
      END

  SELECT rowid,cyl,mth,monthid,companyleaveallowed,mthname,lyl,cmle,currentleaveearned,paidleaves,unpaidleaves,leaveavailable= CASE
                                                                                                                                 WHEN leaveavailable < 0 THEN 0
                                                                                                                                 ELSE CAST(Round(leaveavailable, 1) AS DECIMAL(9, 1))
                                                                                                                               END
  FROM   #templeavebalance

  DROP TABLE #templeavestart

  DROP TABLE #templeavebalancepre

  DROP TABLE #templeavebalance

  DROP TABLE #emltemp 

GO
/****** Object:  StoredProcedure [dbo].[sp_GetEmployeeLeavePolicy]    Script Date: 09/02/2009 11:57:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Exec Sp_getemployeeleavepolicy 
--Exec Sp_getemployeeleavepolicy 53, 2010, '12/20/2010' , 0
CREATE PROC [dbo].[Sp_getemployeeleavepolicy] @empid       INT,
                                              @year        VARCHAR(4),
                                              @applydateon DATETIME,
                                              @filter      INT = 0
AS
  DECLARE @yearofchild INT
  DECLARE @DateofJoiningMth INT
  DECLARE @RndMonth INT
  DECLARE @year_of_service INT
  DECLARE @months_of_service INT
  DECLARE @yearleaveallowed FLOAT
  DECLARE @startdtsub_AN DATETIME
  DECLARE @enddtsub_AN DATETIME
  DECLARE @startdtsub_NONAN DATETIME
  DECLARE @enddtsub_NONAN DATETIME
  DECLARE @emptype VARCHAR(10)
  DECLARE @username VARCHAR(20)
  DECLARE @gid VARCHAR(4)
  DECLARE @status VARCHAR(4)
  DECLARE @leaveid INT
  DECLARE @leavemodel INT
  DECLARE @leavesum INT
  DECLARE @monthdiff INT
  DECLARE @joiningdate DATETIME
  DECLARE @monthcount INT
  DECLARE @companyid INT
  DECLARE @childmonth INT
  --DECLARE  @countsr INT                      
  DECLARE @futuredate DATETIME

  SET @months_of_service = 0
  SET @year_of_service = 1

  SELECT @username = username,@companyid = company_id,@emptype = emp_type,@joiningdate = joining_date,@futuredate = confirmation_date,@DateofJoiningMth = MONTH(joining_date)
  FROM   dbo.employee AS e
  WHERE  e.emp_code = @empid

  SELECT @leavemodel = leave_model
  FROM   dbo.company AS c
  WHERE  company_id = @companyid

  CREATE TABLE #yostemp
      (
           yos     INT,
           STARTDT DATETIME,
           ENDDT   DATETIME
      )

  CREATE TABLE #emltemp
      (
           emp_id         INT,
           leave_type     INT,
           LY_Leaves_Bal  FLOAT,
           leaves_allowed FLOAT,
           leave_year     INT
      )


  INSERT INTO #emltemp
  SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
  FROM   employeeleavesallowed
  WHERE  LEave_Type != 8


  IF (@leavemodel = 1
       OR @leavemodel = 2
       OR @leavemodel = 5
       OR @leavemodel = 7)
      BEGIN
          INSERT INTO #emltemp
          SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
          FROM   employeeleavesallowed
          WHERE  LEave_Type = 8
      END

  IF (@leavemodel = 4
       OR @leavemodel = 6
       OR @leavemodel = 8
       OR @leavemodel = 3)
      BEGIN
          INSERT INTO #emltemp
          SELECT emp_id,8,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leavesallowed),@year
          FROM   YOSLeavesAllowed
          WHERE  Emp_ID = @empid
             AND LeavesAllowed > 0
      END

  --Select @startdtsub_AN, @enddtsub_AN                      
  SELECT @leaveid = (SELECT id
                     FROM   dbo.leave_types AS lt
                     WHERE  lt.code = '0005')

  EXEC @gid = dbo.[Get_empgroupid] @empid

  --SET @months_of_service = Datediff(m,@joiningdate,@applydateon)                      
  IF @year_of_service = 0
      SET @year_of_service = 1

  IF (@leavemodel = 4
       OR @leavemodel = 6
       OR @leavemodel = 8
       OR @leavemodel = 3)
      BEGIN
          --SET @year_of_service = Abs(Datediff(yy,@joiningdate,@applydateon)) + 1                      
          --SET @year_of_service = Ceiling(@months_of_service / 12) + 1              
          DECLARE @startdtsub_AN_TEMP DATETIME
          DECLARE @enddtsub_AN_TEMP DATETIME

          SELECT @joiningdate = joining_date
          FROM   dbo.employee AS e
          WHERE  e.emp_code = @empid

          SET @months_of_service = Datediff(m, @joiningdate, @applydateon)
          SET @year_of_service = Ceiling(@months_of_service / 12) + 1

          --  Insert Into #yostemp                  
          --  EXEC SP_GETYOS @empid, @applydateon            
          --            
          SELECT @startdtsub_AN_TEMP = y.startdate,@enddtsub_AN_TEMP = y.enddate
          FROM   YOSLeavesAllowed y
          WHERE  y.emp_id = @empid
             AND actual_yos = @year_of_service

          INSERT INTO #yostemp
          SELECT @year_of_service,CONVERT(VARCHAR(11), @startdtsub_AN_TEMP, 106) StartDate,CONVERT(VARCHAR(11), @enddtsub_AN_TEMP, 106) EndDate
      END

  IF (@LEAVEMODEL = 1
       OR @LEAVEMODEL = 2
       OR @LEAVEMODEL = 5
       OR @LEAVEMODEL = 7)
      BEGIN
          SET @startdtsub_AN = CONVERT(DATETIME, '01/01/' + @year, 103)
          SET @enddtsub_AN = CONVERT(DATETIME, '31/12/' + @year, 103)
          SET @startdtsub_NONAN = CONVERT(DATETIME, '01/01/' + @year, 103)
          SET @enddtsub_NONAN = CONVERT(DATETIME, '31/12/' + @year, 103)
      END
  ELSE
      BEGIN
          SET @startdtsub_NONAN = CONVERT(DATETIME, '01/01/' + @year, 103)
          SET @enddtsub_NONAN = CONVERT(DATETIME, '31/12/' + @year, 103)

          SELECT @startdtsub_AN = y.startdate,@enddtsub_AN = y.enddate
          FROM   YOSLeavesAllowed y
          WHERE  y.emp_id = @empid
             AND actual_yos = @year_of_service
      --      SET @startdtsub_AN = Convert(DATETIME,'01/' + Cast(@DateofJoiningMth AS VARCHAR) + '/' + @year,103)                      
      --                            
      --      IF (@DateofJoiningMth = 1)                      
      --        BEGIN                      
      --          SET @enddtsub_AN = Convert(DATETIME,'31/12/' + @year,103)                      
      --        END              
      --      ELSE              
      --        BEGIN                      
      --          SELECT @RndMonth = Day(Max(dateinyear))                      
      --          FROM   dateinyear                      
      --          WHERE  Year(dateinyear) = (Cast(@year AS INT) + 1) AND Month(dateinyear) = (@DateofJoiningMth - 1)                      
      --                                
      --          SET @enddtsub_AN = Convert(DATETIME,Cast(@RndMonth AS VARCHAR) + '/' + Cast((@DateofJoiningMth - 1) AS VARCHAR) + '/' + Cast((Cast(@year AS INT) + 1) AS VARCHAR),              
      --                                     103)                      
      --        END                   
      END

  SELECT @yearleaveallowed = Isnull(leaves_allowed, 0)
  FROM   prorated_leaves
  WHERE  group_id = @gid
     AND comp_id = @companyid
     AND year_of_service = @year_of_service

  IF (@year_of_service > 10)
      BEGIN
          SELECT @yearleaveallowed = Isnull(leaves_allowed, 0)
          FROM   prorated_leaves
          WHERE  group_id = @gid
             AND comp_id = @companyid
             AND year_of_service = 10
      END

  CREATE TABLE #latemp
      (
           group_id       INT,
           leave_type     INT,
           leaves_allowed FLOAT,
           leave_year     INT
      )

  IF (@leavemodel = 4
       OR @leavemodel = 6
       OR @leavemodel = 8
       OR @leavemodel = 3)
      BEGIN
          INSERT INTO #latemp
          SELECT @gid,8,@yearleaveallowed,@year

          INSERT INTO #latemp
          SELECT group_id,leave_type,CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
          FROM   leaves_allowed
          WHERE  leave_year = @year
             AND leave_type != 8
      END
  ELSE
      BEGIN
          INSERT INTO #latemp
          SELECT group_id,leave_type,CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
          FROM   leaves_allowed
      END

  SELECT *,(CONVERT(DECIMAL(8, 2), (LY_Leaves_Bal)+(leavesallowed) - (paidleaves + pendingleaves))) leavesavailable,CONVERT(DECIMAL(8, 2), CAST(0 AS FLOAT)) actualleavesavailable
  INTO   #leavetemp
  FROM   (SELECT re.id,re.emp_id,re.leave_year,re.TYPE,companyleaveallowed = CASE
                                                                               WHEN la.leaves_allowed IS NULL THEN 0.0
                                                                               ELSE la.leaves_allowed
                                                                             END,LY_Leaves_Bal = CASE
                                                                                                   WHEN el.LY_Leaves_Bal IS NULL THEN 0
                                                                                                   ELSE CONVERT(DECIMAL(8, 1), el.LY_Leaves_Bal)
                                                                                                 END,leavesallowed = CASE
                                                                                                                       WHEN el.leaves_allowed IS NULL THEN -100
                                                                                                                       ELSE CONVERT(DECIMAL(8, 1), el.leaves_allowed)
                                                                                                                     END,CONVERT(DECIMAL(8, 2), CAST(0 AS FLOAT)) leavesearned,paidleaves = CASE
                                                                                                                                                                                              WHEN re.paidleaves IS NULL THEN 0.0
                                                                                                                                                                                              ELSE re.paidleaves
                                                                                                                                                                                            END,unpaidleaves = CASE
                                                                                                                                                                                                                 WHEN re.unpaidleaves IS NULL THEN 0.0
                                                                                                                                                                                                                 ELSE CONVERT(DECIMAL(8, 1), re.unpaidleaves)
                                                                                                                                                                                                               END,pendingleaves = CASE
                                                                                                                                                                                                                                     WHEN re.pendingleaves IS NULL THEN 0.0
                                                                                                                                                                                                                                     ELSE CONVERT(DECIMAL(8, 1), re.pendingleaves)
                                                                                                                                                                                                                                   END
          FROM   (SELECT @empid emp_id,@year leave_year,d.id,d.TYPE,CONVERT(DECIMAL(8, 1), SUM(paidleaves)) paidleaves,CONVERT(DECIMAL(8, 1), SUM(unpaidleaves)) unpaidleaves,CONVERT(DECIMAL(8, 1), SUM(pendingleaves)) pendingleaves
                  FROM   (SELECT d.id,Datename(MONTH, '1900/' + CAST(d.mth AS VARCHAR(2)) + '/01') mthname,d.TYPE,e.paidleaves,f.unpaidleaves,g.pendingleaves
                          FROM   (SELECT DISTINCT (MONTH(dateinyear)) mth,l.id,l.TYPE
                                  FROM   dateinyear
                                         CROSS JOIN leave_types l
                                  WHERE  l.companyid = -1
                                      OR l.companyid = @companyid) d
                                 LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(paidleaves) paidleaves
                                                  FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(eld.halfday_leave)) / 2) paidleaves
                                                          FROM   emp_leaves el
                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                                          WHERE  el.emp_id = @empid
                                                             AND ((el.leave_type = 8
                                                                   AND eld.leave_date >= @startdtsub_AN
                                                                   AND eld.leave_date <= @enddtsub_AN)
                                                                   OR (el.leave_type != 8
                                                                       AND eld.leave_date >= @startdtsub_NONAN
                                                                       AND eld.leave_date <= @enddtsub_NONAN))
                                                             AND (eld.unpaid_leave = 0
                                                                  AND eld.halfday_leave = 1)
                                                             AND el.status = 'Approved'
                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
                                                          UNION ALL
                                                          SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,COUNT(eld.unpaid_leave) paidleaves
                                                          FROM   emp_leaves el
                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                                          WHERE  el.emp_id = @empid
                                                             AND ((el.leave_type = 8
                                                                   AND eld.leave_date >= @startdtsub_AN
                                                                   AND eld.leave_date <= @enddtsub_AN)
                                                                   OR (el.leave_type != 8
                                                                       AND eld.leave_date >= @startdtsub_NONAN
                                                                       AND eld.leave_date <= @enddtsub_NONAN))
                                                             AND (eld.unpaid_leave = 0
                                                                  AND eld.halfday_leave = 0)
                                                             AND el.status = 'Approved'
                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
                                                  GROUP  BY d.emp_id,d.leave_type,d.mth) e ON d.mth = e.mth
                                                                                              AND e.leave_type = d.id
                                 LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(unpaidleaves) unpaidleaves
                                                  FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), SUM(eld.unpaid_leave)) / 2) unpaidleaves
                                                          FROM   emp_leaves el
                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                                          WHERE  el.emp_id = @empid
                                                             AND ((el.leave_type = 8
                                                                   AND eld.leave_date >= @startdtsub_AN
                                                                   AND eld.leave_date <= @enddtsub_AN)
                                                                   OR (el.leave_type != 8
                                                                       AND eld.leave_date >= @startdtsub_NONAN
                                                                       AND eld.leave_date <= @enddtsub_NONAN))
                                                             AND (eld.unpaid_leave = 1
                                                                  AND eld.halfday_leave = 1)
                                                             AND el.status = 'Approved'
                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
                                                          UNION ALL
                                                          SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), SUM(eld.unpaid_leave))) unpaidleaves
                                                          FROM   emp_leaves el
                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
                                                          WHERE  el.emp_id = @empid
                                                             AND ((el.leave_type = 8
                                                                   AND eld.leave_date >= @startdtsub_AN
                                                                   AND eld.leave_date <= @enddtsub_AN)
                                                                   OR (el.leave_type != 8
                                                                       AND eld.leave_date >= @startdtsub_NONAN
                                                                       AND eld.leave_date <= @enddtsub_NONAN))
                                                             AND (eld.unpaid_leave = 1
                                                                  AND eld.halfday_leave = 0)
                                                             AND el.status = 'Approved'
                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
                                                  GROUP  BY d.emp_id,d.leave_type,d.mth) f ON d.mth = f.mth
                                                                                              AND f.leave_type = d.id
                                 LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(pl) pendingleaves
                                                  FROM   (SELECT el.emp_id,el.leave_type,MONTH(ed.leave_date) mth,CAST(COUNT(halfday_leave) AS FLOAT) pl
                                                          FROM   emp_leaves_detail ed
                                                                 INNER JOIN emp_leaves el ON ed.trx_id = el.trx_id
                                                          WHERE  el.emp_id = @empid
                                                             AND el.status = 'Open'
                                                             AND ((el.leave_type = 8
                                                                   AND ed.leave_date >= @startdtsub_AN
                                                                   AND ed.leave_date <= @enddtsub_AN)
                                                                   OR (el.leave_type != 8
                                                                       AND ed.leave_date >= @startdtsub_NONAN
                                                                       AND ed.leave_date <= @enddtsub_NONAN))
                                                             AND ed.unpaid_leave = 0
                                                             AND ed.halfday_leave = 0
                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(ed.leave_date)
                                                          UNION ALL
                                                          SELECT el.emp_id,el.leave_type,MONTH(ed.leave_date) mth,CAST(COUNT(halfday_leave) AS FLOAT) / 2 pl
                                                          FROM   emp_leaves_detail ed
                                                                 INNER JOIN emp_leaves el ON ed.trx_id = el.trx_id
                                                          WHERE  el.emp_id = @empid
                                                             AND el.status = 'Open'
                                                             AND ((el.leave_type = 8
                                                                   AND ed.leave_date >= @startdtsub_AN
                                                                   AND ed.leave_date <= @enddtsub_AN)
                                                                   OR (el.leave_type != 8
                                                                       AND ed.leave_date >= @startdtsub_NONAN
                                                                       AND ed.leave_date <= @enddtsub_NONAN))
                                                             AND ed.unpaid_leave = 0
                                                             AND ed.halfday_leave = 1
                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(ed.leave_date)) s
                                                  GROUP  BY emp_id,leave_type,mth) g ON d.mth = g.mth
                                                                                        AND g.leave_type = d.id) d
                  GROUP  BY d.id,d.TYPE) re
                 LEFT OUTER JOIN #emltemp el ON re.emp_id = el.emp_id
                                                AND re.id = el.leave_type
                                                AND re.leave_year = el.leave_year
                 LEFT OUTER JOIN (SELECT la.group_id,la.leave_type,CONVERT(DECIMAL(8, 1), la.leaves_allowed) leaves_allowed,la.leave_year
                                  FROM   #latemp la
                                  UNION
                                  SELECT @gid,@leaveid,0.0,@year) la ON re.id = la.leave_type
                                                                        AND la.leave_year = @year
                 INNER JOIN dbo.emp_group eg ON eg.id = la.group_id
          WHERE  la.group_id = @gid) f

  SELECT TOP 1 @status = family.status,@childmonth = Datediff(MONTH, dateofbirth, Getdate()), @yearofchild=year(dateofbirth)
  FROM   family
  WHERE  emp_id = @empid
     AND Relation = 2
  ORDER  BY dateofbirth DESC

  --  IF @leavemodel = 1                      
  --      OR @leavemodel = 3                      
  --    BEGIN                      
  --      UPDATE #leavetemp                      
  --      SET    leavesearned = Isnull((SELECT Sum(Isnull(leaves_allowed,0))                      
  --                                    FROM   employeeleavesallowed                      
  --                                    WHERE  emp_id = @empid                      
  --                AND leave_year <= @year                      
  --                                           AND leave_type = 8),0)                      
  --      WHERE  id = 8                      
  --    END                      
  IF @leavemodel = 1
      OR @leavemodel = 3
      BEGIN
          UPDATE #leavetemp
          SET    leavesearned = Isnull((SELECT SUM(Isnull(leaves_allowed, 0))
                                        FROM   #emltemp
                                        WHERE  emp_id = @empid
                                           AND leave_year <= @year
                                           AND leave_type = 8), 0)
          WHERE  id = 8
      END

  IF @leavemodel = 2
      OR @leavemodel = 5
      OR @leavemodel = 7
      BEGIN
          UPDATE #leavetemp
          SET    leavesearned = Isnull((SELECT dbo.Get_available_leaves_prorated1(CONVERT(VARCHAR(10), @applydateon, 103), @companyid, @username)), 0)
          WHERE  id = 8
      END

  IF @leavemodel = 4
      OR @leavemodel = 6
      OR @leavemodel = 8
      BEGIN
          UPDATE #leavetemp
          SET    leavesearned = Isnull((SELECT dbo.Get_available_leaves_prorated2(CONVERT(VARCHAR(10), @applydateon, 103), @companyid, @username)), 0)
          WHERE  id = 8
      END

  UPDATE #leavetemp
  SET    actualleavesavailable = (LY_Leaves_Bal) + (leavesearned - (paidleaves + pendingleaves))

  ---                      

  --IF (YEAR(@joiningdate) != YEAR(Getdate()))
	IF (YEAR(@joiningdate) != Cast(@year as int))
      BEGIN
          SET @monthcount = 1
      END
  ELSE
      BEGIN
          SET @monthcount = MONTH(@joiningdate)
      END

	--START-SANTY-20thDec2010-For 3 Month issue and Confirmation Date.
   --IF (Getdate() < @futuredate OR  ((Cast(@year as int)-7) > @yearofchild) OR ( year(GetDate())=year(@joiningdate) And Month(@joiningdate) >=10  )  )  
	IF (((Cast(@year as int)-7) > @yearofchild) And getdate() > DATEADD(m, 3, @joiningdate))  
	--END-SANTY-20thDec2010-For 3 Month issue and Confirmation Date.
      BEGIN
          DELETE FROM #leavetemp
          WHERE  id = @leaveid
      END
  ELSE
      BEGIN
          IF (@status = 'S')
              BEGIN
                  IF (@leavemodel = 1)
                      BEGIN
                          SET @leavesum = 6
                      END
                  ELSE
                      BEGIN
                          IF (@monthcount = 1)
                              BEGIN
                                  SET @leavesum = 6
                              END

                          IF (@monthcount = 2)
                              BEGIN
                                  SET @leavesum = 6
                              END

                          IF (@monthcount = 3)
                              BEGIN
                                  SET @leavesum = 5
                              END

                          IF (@monthcount = 4)
                              BEGIN
                                  SET @leavesum = 5
                              END

                          IF (@monthcount = 5)
                              BEGIN
                                  SET @leavesum = 4
                              END

                          IF (@monthcount = 6)
                              BEGIN
                                  SET @leavesum = 4
                              END

                          IF (@monthcount = 7)
                              BEGIN
                                  SET @leavesum = 3
                              END

                          IF (@monthcount = 8)
                              BEGIN
                                  SET @leavesum = 3
                              END

                          IF (@monthcount = 9)
                              BEGIN
                                  SET @leavesum = 2
                              END

                          IF (@monthcount = 10)
                              BEGIN
                                  SET @leavesum = 0
                              END

                          IF (@monthcount = 11)
                              BEGIN
                                  SET @leavesum = 0
                              END

                          IF (@monthcount = 12)
                              BEGIN
                                  SET @leavesum = 0
                              END
                      END
              END

          IF (@status = 'N')
              BEGIN
                  SET @leavesum = 2
              END



          UPDATE #leavetemp
          SET    companyleaveallowed = @leavesum,
                 leavesallowed = @leavesum,
                 leavesavailable = @leavesum - (paidleaves + unpaidleaves)
          WHERE  id = @leaveid

          UPDATE #leavetemp
          SET    leavesavailable = (LY_Leaves_Bal) + leavesearned - (paidleaves + unpaidleaves)
          WHERE  id = 8

          UPDATE #leavetemp
          SET    leavesavailable = 0.0
          WHERE  leavesavailable < 0
      END

  IF (@status IS NULL)
      BEGIN
          DELETE FROM #leavetemp
          WHERE  id = @leaveid
      END

  IF (@filter = 0)
      BEGIN
          UPDATE #leavetemp
          SET    leavesallowed = NULL,
                 leavesavailable = (LY_Leaves_Bal) + 0.0,
                 actualleavesavailable = 0.00
          WHERE  leavesallowed = -100

          DELETE FROM #leavetemp
          WHERE  (leavesavailable IS NULL)
      END
  ELSE
      IF (@filter = -1)
          BEGIN
              DELETE FROM #leavetemp
              WHERE  (leavesallowed = 0
                       OR (leavesavailable IS NULL))
                 AND id = 8
                 AND emp_id NOT IN (SELECT emp_id
                                    FROM   #emltemp
                                    WHERE  leave_type = 8)

              DELETE FROM #leavetemp
              WHERE  leavesallowed = -100
          END
      ELSE
          BEGIN
              DELETE FROM #leavetemp
              WHERE  id != @filter
          END

  UPDATE #leavetemp
  SET    leavesearned = Isnull(leavesallowed, 0)
  WHERE  id != 8

  UPDATE #leavetemp
  SET    actualleavesavailable = (leavesearned - (paidleaves + pendingleaves))
  WHERE  id != 8

  UPDATE #leavetemp
  SET    actualleavesavailable = 0
  WHERE  actualleavesavailable < 0

  SELECT DISTINCT *,(paidleaves + unpaidleaves) totalleavestaken,ShowLeaveAllowed=CASE
                                                                                    WHEN (ID = 8
                                                                                          AND (@leavemodel = 3
                                                                                                OR @leavemodel = 4
                                                                                                OR @leavemodel = 6
                                                                                                OR @leavemodel = 8)) THEN 1
                                                                                    WHEN (ID = 12) THEN 1
                                                                                    ELSE 0
                                                                                  END
  FROM   #leavetemp
  ORDER  BY [TYPE]

  DROP TABLE #leavetemp

  DROP TABLE #latemp

  DROP TABLE #emltemp

  DROP TABLE #yostemp 
GO
/****** Object:  StoredProcedure [dbo].[sp_allowed_leaves]    Script Date: 09/02/2009 11:56:39 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_allowed_leaves 2, 1, 2010  
--sp_allowed_leaves 13, 175, 2010  
CREATE PROCEDURE [dbo].[sp_allowed_leaves] --1,71,2008        
							   @compid INT ,    
							   @groupid INT ,    
							   @leave_year INT    
AS     
DECLARE @leavemodel int  

Select @leavemodel = Leave_Model From Company Where Company_ID = @compid  


   BEGIN        
		 SELECT *  Into #LeaveTemp  
		 FROM   (--SELECT b.id 'typeid', a.id, b.[type], a.group_id, leaves_allowed, b.code    
--                     FROM   leaves_allowed a 
--                            ,leave_types b    
--                     WHERE  b.id*=a.leave_type AND    
--                            (b.companyid = -1 OR    
--                             b.companyid = @compid    
--                            ) AND    
--                            a.group_id = @groupid AND    
--                            a.leave_year = @leave_year    
						Select la.leave_type typeid,la.id,lt.[type], la.group_id,la.leaves_allowed,lt.code  From leaves_allowed la
						Inner Join Leave_Types lt on la.leave_type = lt.id Where la.group_id = @groupid And la.leave_year=@leave_year and (lt.companyid = -1 OR lt.companyid = @compid)
						Union
						Select lt.id typeid, null id,lt.[type],null group_id, null leaves_allowed,lt.code From leave_types lt
						Where lt.id not in
						(
							Select la.leave_type From leaves_allowed la
							Inner Join Leave_Types lt on la.leave_type = lt.id Where la.group_id = @groupid And la.leave_year=@leave_year and (lt.companyid = -1 OR lt.companyid = @compid)
						)AND  (lt.companyid = -1 OR lt.companyid = @compid)
				) AS result    
		 WHERE  (result.code != '0005' OR    
				 result.code IS NULL    
				)  
   END      

IF (@leavemodel  = 3 Or @leavemodel  = 4 Or @leavemodel  = 6 Or @leavemodel  = 8)  
BEGIN  
Delete From #LeaveTemp Where code = '0001'  
END  

Select * From #LeaveTemp Order By [Type]  

Drop Table #LeaveTemp   

GO
/****** Object:  StoredProcedure [dbo].[sp_emp_add]    Script Date: 09/02/2009 11:57:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_emp_add] 
			(@emp_name            	[VARCHAR](50),
                                     @emp_alias           		[VARCHAR](50),          
                                     @nationality         		[INT],          
                                     @emp_type            	[VARCHAR](50),          
                                     @emp_lname           	[VARCHAR](50),          
                                     @empcpftype          	[INT],          
                                     @Insurance_number    	VARCHAR(50),          
                                     @Insurance_expiry    VARCHAR(20),          
                                     @CSOC_number         VARCHAR(50),          
                                     @CSOC_expiry         VARCHAR(20),          
                                     @passport            VARCHAR(50),          
                                     @passport_expiry     VARCHAR(20),          
                                     @ic_pp_number        [VARCHAR](50),          
                                     @wp_exp_date         VARCHAR(20),          
                                     @pr_date             VARCHAR(20),          
                                     @address             [VARCHAR](50),          
                                     @country             [INT],          
                                     @postal_code         [VARCHAR](50),          
                                     @phone               [VARCHAR](50),          
                                     @hand_phone          [VARCHAR](50),          
                                     @email               [VARCHAR](50),          
                                     @sex                 [VARCHAR](50),          
                                     @religion            [INT],          
                                     @race                [INT],          
                                     @marital_status      [VARCHAR](50),          
                                     @place_of_birth      [VARCHAR](50),          
                                     @date_of_birth       VARCHAR(20),          
                                     @income_taxid        [VARCHAR](50),          
                                     @employee_cpf_acct   [VARCHAR](50),          
                                     @employer_cpf_acct   [VARCHAR](50),          
                                     @giro_bank           [VARCHAR](50),          
                                     @giro_code           [VARCHAR](50),          
                                     @giro_branch         [VARCHAR](50),          
                                     @giro_acct_number    [VARCHAR](50),          
                                     @cpf_entitlement     [CHAR](10),          
                                     @cpf_employer        [MONEY],          
                                     @department          [INT],          
                                     @cpf_employee        [MONEY],          
                                     @designation         [INT],    
                                     @trade               [INT],    
                                     @emp_supervisor      [INT],    
                                     @emp_clsupervisor    [INT],    
                                     @education           [VARCHAR](50),    
                                     @joining_date        VARCHAR(20),    
                                     @probation_period    [INT],    
                                     @confirmation_date   VARCHAR(20),    
                                     @empgroup            [INT],    
                                     @ot_entitlement      [CHAR](10),    
                                     @termination_date    VARCHAR(20),    
                                     @termination_reason  [VARCHAR](50),    
                                     @pay_frequency       [VARCHAR](50),    
   			@payrate             [VARCHAR](100),    
                                     @hourlyRate          FLOAT,    
		          @hourlyRateMode      VARCHAR(3),    
                                     @dailyRateMode       VARCHAR(3),          
                                     @dailyRate           FLOAT,          
		          @wday_per_week       FLOAT,          
                                     @payment_mode        [VARCHAR](50),          
                                     @email_payslip       VARCHAR(10),          
                                     @fw_code             [VARCHAR](50),          
                                     @fw_levy             [MONEY],          
                                     @wh_tax_pct          [FLOAT],          
                                     @wh_tax_amt          [MONEY],          
                                     @sdf_required        [CHAR](10),          
                                     @cdac_fund           [MONEY],          
                                     @mbmf_fund           [MONEY],          
                                     @sinda_fund          [MONEY],          
                                     @ecf_fund            [MONEY],          
                                     @cchest_fund         [MONEY],          
                                     @remarks             VARCHAR(MAX),          
                                     @images              [VARCHAR](250),          
                                     @Company_Id          [INT],          
                                     @compcode            [VARCHAR](50),          
                                     @leaveCarryForward   FLOAT,          
                                     @giro_acc_name       VARCHAR(100),          
                                     @groupid             INT,          
                                     @localaddress2       VARCHAR(50),          
                                     @foreignaddress1     VARCHAR(50),          
                                     @foreignaddress2     VARCHAR(50),          
                                     @time_card_no        VARCHAR(50),          
                                     @foreignpostalcode   VARCHAR(50),          
                                     @pp_issue_date       VARCHAR(20),          
                                     @worker_levy         VARCHAR(50),          
                                     @wp_application_date VARCHAR(20),          
                                     @emp_ref_type        INT,          
                                     @fund_optout         INT,          
                                     @emp_category        INT,          
                                     @v1rate              FLOAT,          
                                     @v2rate              FLOAT,          
                                     @v3rate              FLOAT,          
                                     @v4rate              FLOAT,          
                                     @batch_no            INT,          
                                     @wp_issue_date       VARCHAR(20),          
                                     @photo_no            INT,          
                                     @wp_number           VARCHAR(50),          
                                     @shipyard_quota      VARCHAR(50),          
                                     @block_no            VARCHAR(50),          
                                     @street_name         VARCHAR(100),          
                                     @unit_no             VARCHAR(50),          
                                     @level_no            VARCHAR(50),          
                                     @ot1rate             FLOAT,          
                                     @ot2rate             FLOAT,          
                                     @EmeConPer           VARCHAR(50),          
                                     @EmeConPerRel        VARCHAR(50),          
                                     @EmeConPerPh1        VARCHAR(50),          
                                     @EmeConPerPh2        VARCHAR(50),          
                                     @EmeConPerAdd       VARCHAR(100),          
                                     @EmeConPerRem        VARCHAR(200),          
                                     @bloodgroup          VARCHAR(50),          
                                     @agent_id            INT,          
                                     @mye_cert_id         INT,          
                                     @wp_arrival_date     VARCHAR(20),          
                                     @pay_supervisor      [INT],          
                                     @safetypass_id     [INT],          
                                     @safetypass_sno      VARCHAR(50),          
                                     @safetypass_expiry   VARCHAR(20),          
          @empstatid     [INT],          
          @payrolltype    [INT],          
          @compcpffh [INT],        
                                     @tssupervisor      [INT],          
          @compfundfh [INT], 
          @Leave_supervisor[INT],
          @halfsalary [INT],        
                                     @UCode               INT OUTPUT)          
AS          
  DECLARE @leavemodel INT          
  --DECLARE @statusid [INT]          
  DECLARE @username VARCHAR(50)          
  DECLARE @password VARCHAR(50)          
  DECLARE @prorated_leaves INT          
  DECLARE @year_of_service INT          
  DECLARE @isEmployeeAliasExist INT          
          
  SELECT @isEmployeeAliasExist = COUNT(*)          
  FROM   Employee          
  WHERE  Company_Id = @Company_Id          
     AND Upper(emp_alias) = Upper(Ltrim(Rtrim(@emp_alias)))          
     AND Len(Ltrim(Rtrim(emp_alias))) > 0          
          
  SELECT @leavemodel = leave_model          
  FROM   dbo.company AS c          
  WHERE  company_id = @Company_Id          
          
  IF (@isEmployeeAliasExist = 0)          
      BEGIN          
          -- get Year of Service                                                                                            
          SELECT @year_of_service = Datediff(YEAR, CONVERT(DATETIME, @joining_date, 103), Getdate())          
          
          IF @year_of_service = 0          
              SET @year_of_service = 1          
          
          SELECT @prorated_leaves = prorated_leaves          
          FROM   company          
          WHERE  company_id = @Company_Id          
          
          IF @prorated_leaves IS NULL          
              SET @prorated_leaves = 3          
          
          IF @wp_exp_date = '01/01/1900'          
              OR @wp_exp_date = ''          
              SELECT @wp_exp_date = NULL          
          
          IF @Insurance_expiry = '01/01/1900'          
              OR @Insurance_expiry = ''          
              SELECT @Insurance_expiry = NULL          
          
          IF @CSOC_expiry = '01/01/1900'          
              OR @CSOC_expiry = ''          
              SELECT @CSOC_expiry = NULL          
          
          IF @passport_expiry = '01/01/1900'          
              OR @passport_expiry = ''          
              SELECT @passport_expiry = NULL          
          
          IF @pr_date = '01/01/1900'          
              OR @pr_date = ''          
              SELECT @pr_date = NULL          
          
          IF @date_of_birth = '01/01/1900'          
              OR @date_of_birth = ''          
              SELECT @date_of_birth = NULL          
          
          IF @joining_date = '01/01/1900'          
              OR @joining_date = ''          
              SELECT @joining_date = NULL          
          
          IF @confirmation_date = '01/01/1900'          
              OR @confirmation_date = ''          
              SELECT @confirmation_date = NULL          
          
          IF @termination_date = '01/01/1900'          
              OR @termination_date = ''    
              SELECT @termination_date = NULL          
          
          IF @pp_issue_date = '01/01/1900'          
              OR @pp_issue_date = ''          
              SELECT @pp_issue_date = NULL          
          
          IF @wp_application_date = '01/01/1900'          
              OR @wp_application_date = ''          
              SELECT @wp_application_date = NULL          
          
          IF @wp_issue_date = '01/01/1900'          
 OR @wp_issue_date = ''          
              SELECT @wp_issue_date = NULL          
          
          IF @wp_arrival_date = '01/01/1900'          
              OR @wp_arrival_date = ''          
              SELECT @wp_arrival_date = NULL          
          
          -- TIMECARD NO VALIDATION START                                                                          
         IF @time_card_no <> ''          
              BEGIN          
                  DECLARE @timeCardCount INT          
          
                  SET @timeCardCount = 0          
          
                  SELECT @timeCardCount = COUNT(time_card_no)          
                  FROM   employee          
                  WHERE  company_id = @Company_Id          
                     AND time_card_no = @time_card_no          
          
                  IF @timeCardCount > 0          
                      BEGIN          
                          RETURN 'TIMECARD ALREADY IN USE'          
                      END          
              END          
          
          -- TIMECARD VALIDATION END                                                                                           
--          SELECT @statusid = StatusId          
--          FROM   UserStatus          
--          WHERE  Status = 'Active'          
          
          DECLARE @leaves_remaining FLOAT          
          
          IF @prorated_leaves IN (1, 2)          
              SELECT @leaves_remaining = leaves_allowed          
              FROM   prorated_leaves          
              WHERE  comp_id = @Company_Id          
                 AND group_id = @empgroup          
                 AND year_of_service = @year_of_service          
          ELSE          
              SELECT @leaves_remaining = leaves_allowed          
              FROM   leaves_allowed          
              WHERE  leave_type = (SELECT [id]          
                                   FROM   leave_types          
                                   WHERE  TYPE = 'Annual Leave')          
                 AND group_id = @empgroup          
          
          INSERT INTO [employee]          
                      ([emp_name],[emp_alias],[nationality_id],[emp_type],emp_lname,empcpftype,Insurance_number,Insurance_expiry,CSOC_number,CSOC_expiry,[passport],passport_expiry,[ic_pp_number],[wp_exp_date],[pr_date],[address],[country_id],[postal_code],[phone],[hand_phone],[email],[sex],[religion_id],[race_id],[marital_status],[place_of_birth],[date_of_birth],[income_taxid],[employee_cpf_acct],[employer_cpf_acct],[giro_bank],[giro_code],[giro_branch],[giro_acct_number],[cpf_entitlement],[cpf_employer]
						,[dept_id],[cpf_employee],[desig_id],[trade_id],[emp_supervisor],[emp_clsupervisor],[education],[joining_date],[probation_period],[confirmation_date],[emp_group_id],[ot_entitlement],[termination_date],[termination_reason],[pay_frequency],[payrate],[payment_mode],[email_payslip],[fw_code],[fw_levy],[wh_tax_pct],[wh_tax_amt],[sdf_required],[cdac_fund],[mbmf_fund],[sinda_fund],[ecf_fund],[cchest_fund],[remarks],[images],[Company_Id],[StatusId],[GroupID],[leave_carry_forward],[giro_acc_name],[localaddress2], 
				[foreignaddress1],[foreignaddress2],[time_card_no],[foreignpostalcode],[pp_issue_date],[leaves_remaining],[worker_levy],[wp_application_date],[hourly_rate_mode],[hourly_rate],[daily_rate_mode],[daily_rate],[wdays_per_week],[emp_ref_no],[fund_optout],[emp_category],[v1rate],[v2rate],[v3rate],[v4rate],[batch_no],[wp_issue_date],[wp_arrival_date],[photo_no],[wp_number],[shipyard_quota],[block_no],[street_name],[unit_no],[level_no],[ot1rate],[ot2rate],[eme_cont_per],[eme_cont_per_rel],[eme_cont_per_ph1],[eme_cont_per_ph2],[eme_cont_per_add],[eme_cont_per_rem],[bloodgroup],[agent_id],[mye_cert_id],[pay_supervisor],payrolltype,ComputeCPFFH, ComputeFundFH, timesupervisor, halfsalary,Leave_supervisor)          
          VALUES      (@emp_name,@emp_alias,@nationality,@emp_type,@emp_lname,@empcpftype,@Insurance_number,CONVERT(DATETIME, @Insurance_expiry, 103),@CSOC_number,CONVERT(DATETIME, @CSOC_expiry, 103),@passport,CONVERT(DATETIME, @passport_expiry, 103),@ic_pp_number,CONVERT(DATETIME, @wp_exp_date, 103),CONVERT(DATETIME, @pr_date, 103),@address,@country,@postal_code,@phone,@hand_phone,@email,@sex,@religion,@race,@marital_status,@place_of_birth,CONVERT(DATETIME, @date_of_birth, 103),@income_taxid,@employee_cpf_acct,@employer_cpf_acct,@giro_bank,@giro_code,@giro_branch,@giro_acct_number,@cpf_entitlement,@cpf_employer,@department,@cpf_employee,@designation,@trade,@emp_supervisor,@emp_clsupervisor,@education,CONVERT(DATETIME, @joining_date, 103),@probation_period,CONVERT(DATETIME, @confirmation_date, 103),@empgroup,@ot_entitlement,CONVERT(DATETIME, @termination_date, 103),@termination_reason,Rtrim(@pay_frequency),Encryptbyasymkey(Asymkey_id('AsymKey'), @payrate),@payment_mode,@email_payslip,@fw_code,@fw_levy,@wh_tax_pct,
          @wh_tax_amt,@sdf_required,@cdac_fund,@mbmf_fund,@sinda_fund,@ecf_fund,@cchest_fund,@remarks,@images,@Company_Id,@empstatid,@groupid,@leaveCarryForward,@giro_acc_name,@localaddress2,@foreignaddress1,@foreignaddress2,@time_card_no,@foreignpostalcode,CONVERT(DATETIME, @pp_issue_date, 103),@leaves_remaining,@worker_levy,CONVERT(DATETIME, @wp_application_date, 103),@hourlyRateMode,@hourlyRate,@dailyRateMode,@dailyRate,@wday_per_week,@emp_ref_type,@fund_optout,@emp_category,@v1rate,@v2rate,@v3rate,@v4rate,@batch_no,CONVERT(DATETIME, @wp_issue_date, 103),CONVERT(DATETIME, @wp_arrival_date, 103),@photo_no,@wp_number,@shipyard_quota,@block_no,@street_name,@unit_no,@level_no,@ot1rate,@ot2rate,@EmeConPer,@EmeConPerRel,@EmeConPerPh1,@EmeConPerPh2,@EmeConPerAdd,@EmeConPerRem,@bloodgroup,@agent_id,@mye_cert_id,@pay_supervisor,@payrolltype,@compcpffh, @compfundfh, @tssupervisor, @halfsalary,@Leave_supervisor)            
          SELECT @UCode = @@IDENTITY          
          
          SELECT @username = @compcode + CONVERT(VARCHAR(50), @@IDENTITY)          
          
          UPDATE employee          
          SET    username = @username          
          WHERE  emp_code = @@IDENTITY          
          
          UPDATE EmployeeBulkImport          
          SET    Status = 'Imported',          
                 Deleted = 4          
          WHERE  Deleted = 3          
             AND (Upper(Ltrim(Rtrim(NRIC))) = Upper(Ltrim(Rtrim(@ic_pp_number)))          
                   OR Upper(Ltrim(Rtrim(FIN))) = Upper(Ltrim(Rtrim(@ic_pp_number))))          
          
          IF (Isnull(@safetypass_id, 0) > 0)          
              BEGIN          
                  INSERT INTO [Safetypass_details]          
                              (empid,safetypass_id,safetypass_sno,safetypass_expiry)          
                  VALUES      (@UCode,@safetypass_id,@safetypass_sno,CONVERT(DATETIME, @safetypass_expiry, 103))          
              END          
          
          IF (@leavemodel = 3          
               OR @leavemodel = 4          
               OR @leavemodel = 6          
               OR @leavemodel = 8)    
              BEGIN    
                  --Insert Into EmployeeLeavesAllowed values(@@identity, 8, null, Year(GetDate()))    
                  EXEC Sp_yosleavesallowed @@IDENTITY,0          
              END          
	END 
GO
/****** Object:  StoredProcedure [dbo].[sp_pending_approval]    Script Date: 09/02/2009 11:58:22 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[sp_pending_approval]    
       @txt VARCHAR(50) ,    
       @company_id INT ,    
       @approver VARCHAR(50)    
AS     
       BEGIN                  
             IF (@txt = 'approver')     
                BEGIN                  
  
                      SELECT    ISNULL(c.emp_name, '') + ' ' + ISNULL(c.emp_lname, '') 'emp_name', [emp_id],    
                                [leave_type], b.type, CONVERT(VARCHAR(15), [start_date], 103) 'start_date',    
                                CONVERT(VARCHAR(15), [end_date], 103) 'end_date', [status],    
                                CONVERT(VARCHAR(15), [Application Date], 103) 'ApplicationDate', a.[remarks],    
                                [attachment], [status], [approver], [trx_id], paid_leaves, unpaid_leaves,    
                                (paid_leaves + unpaid_leaves) 'sumLeaves', a.timesession ,c.emp_code  
                      FROM      [emp_leaves] a ,    
                                leave_types b ,    
                                employee c    
                      WHERE     a.emp_id = c.emp_code AND    
                                leave_type = b.id AND    
                                [status] NOT IN ('Rejected','Approved',' ') AND    
                                company_id = @company_id AND    
                                approver = @approver                  
                END                  
             IF (@txt = 'noapprover')     
                BEGIN                  
                      SELECT    ISNULL(c.emp_name, '') + ' ' + ISNULL(c.emp_lname, '') 'emp_name', [emp_id],    
                                [leave_type], b.type, CONVERT(VARCHAR(15), [start_date], 103) 'start_date',    
                                CONVERT(VARCHAR(15), [end_date], 103) 'end_date', [status],    
                                CONVERT(VARCHAR(15), [Application Date], 103) 'ApplicationDate', a.[remarks],    
                                [attachment], [approver], [trx_id], [status], paid_leaves, unpaid_leaves,    
                                (paid_leaves + unpaid_leaves) 'sumLeaves', a.timesession,c.emp_code    
                      FROM      [emp_leaves] a ,    
                                leave_types b ,    
                                employee c    
                      WHERE     a.emp_id = c.emp_code AND    
                                leave_type = b.id AND    
                                [status] NOT IN ('Rejected','Approved',' ') AND    
                                company_id = @company_id                  
                END               
       END           
GO
/****** Object:  StoredProcedure [dbo].[sp_carry_forward_leaves]    Script Date: 09/02/2009 11:56:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_carry_forward_leaves] @company_id INT
AS 
       DECLARE @leaves_carry VARCHAR(10)
       DECLARE @leaves_years INT
       DECLARE @emp_group_id INT
       DECLARE @emp_code INT
       DECLARE @leaves_allowed INT
       DECLARE @leaves_remaining INT
       DECLARE @leaves_to_carry_forward INT

       SELECT   @leaves_carry = leaves_carry, @leaves_years = leaves_years
       FROM     company
       WHERE    company_id = @company_id

       IF @leaves_carry <> 1 
          RETURN

       SELECT   emp_code, emp_group_id, leaves_remaining
       INTO     #temp_emp
       FROM     employee
       WHERE    company_id = @company_id

       WHILE EXISTS ( SELECT    *
                      FROM      #temp_emp ) 
             BEGIN
                   SELECT TOP 1
                            @emp_code = emp_code, @emp_group_id = emp_group_id, @leaves_remaining = leaves_remaining
                   FROM     #temp_emp

                   SELECT   @leaves_allowed = leaves_allowed
                   FROM     leaves_allowed
                   WHERE    leave_type = (SELECT [id] FROM leave_types WHERE [type] = 'Annual Leave'
                                         ) AND
                            group_id = (SELECT emp_group_id FROM employee WHERE emp_code = @emp_code
                                       )

                   IF @leaves_remaining < @leaves_years 
                      SET @leaves_to_carry_forward = @leaves_remaining
                   ELSE 
                      SET @leaves_to_carry_forward = @leaves_years	

                   UPDATE   employee
                   SET      leaves_remaining = @leaves_to_carry_forward + @leaves_allowed
                   WHERE    emp_code = @emp_code

                   DELETE   FROM #temp_emp
                   WHERE    emp_code = @emp_code
             END
GO
/****** Object:  StoredProcedure [dbo].[sp_IR8A]    Script Date: 09/02/2009 11:57:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_IR8A] @emp_id INT
AS 
       SELECT   isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name, ic_pp_number, sex, marital_status, address,
                (SELECT Company_name FROM Company WHERE Company_Id = emp.Company_Id
                ) 'EmployerName', (SELECT Address FROM Company WHERE Company_Id = emp.Company_Id
                                  ) 'EmployerAddress', (SELECT Designation FROM designation WHERE id = emp.desig_id
                                                       ) 'Designation', CONVERT(VARCHAR(20), date_of_birth, 103) 'DOB',
                CONVERT(VARCHAR(20), joining_date, 103) 'DateOfCommencement',
                CONVERT(VARCHAR(20), termination_date, 103) 'DateOfCessation'
       FROM     employee emp
       WHERE    emp_code = @emp_id
GO

/****** Object:  StoredProcedure [dbo].[sp_empall_details]    Script Date: 09/02/2009 11:57:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_empall_details] @companyid INT
AS 
       BEGIN    
             SELECT e.emp_code EmployeeCode, e.emp_name + ' ' + e.emp_lname EmployeeName,
                    (SELECT nationality FROM nationality WHERE id= e.nationality_id
                    ) Nationality, CASE e.emp_type
                                     WHEN 'SC' THEN (SELECT 'Singapore Citizen'
                                                    )
                                     WHEN 'SPR' THEN (SELECT 'Singapore PR'
                                                     )
                                     WHEN 'SDPR' THEN (SELECT 'Dependant PR'
                                                      )
                                     WHEN 'WP' THEN (SELECT 'Work Permit'
                                                    )
                                     WHEN 'DP' THEN (SELECT 'Dependant Pass'
                                                    )
                                     WHEN 'EP' THEN (SELECT 'Employment Pass'
                                                    )
                                     WHEN 'SP' THEN (SELECT 'S Pass'
                                                    )
                                   END 'EmpType', e.ic_pp_number IcNumber,
                    CONVERT(VARCHAR(15), e.wp_exp_date, 103) WPExpiryDate, CONVERT(VARCHAR(15), e.pr_date, 103) PRDate,
                    (SELECT country FROM country WHERE id= e.country_id
                    ) CountryOfResidence, e.Phone, e.hand_phone HandPhone, e.email, e.time_card_no,
                    CASE e.sex
                      WHEN 'M' THEN (SELECT 'MALE'
                                    )
                      WHEN 'F' THEN (SELECT 'FEMALE'
                                    )
                    END 'Sex', (SELECT religion FROM religion WHERE id= e.religion_id
                               ) Religion, (SELECT race FROM race WHERE id= e.race_id
                                           ) Race, CASE e.marital_status
                                                     WHEN 'S' THEN (SELECT 'Single'
                                                                   )
                                                     WHEN 'M' THEN (SELECT 'Married'
                                                                   )
                                                     WHEN 'D' THEN (SELECT 'Divorced'
                                                                   )
                                                     WHEN 'W' THEN (SELECT 'Widower'
                                                                   )
                                                     WHEN 'WE' THEN (SELECT 'Widowee'
                                                                    )
                                                   END 'MaritalStatus', e.place_of_birth PlaceOfBirth,
                    CONVERT(VARCHAR(15), e.date_of_birth, 103) DateOfBirth,
                    (SELECT designation FROM designation WHERE id= e.desig_id
                    ) Designation, (SELECT deptname FROM department WHERE id= e.dept_id
                                   ) Department, CONVERT(VARCHAR(15), e.Joining_date, 103) JoiningDate,
                    CASE e.probation_period
                      WHEN '-1' THEN (SELECT '0'
                                     )
                      ELSE e.probation_period
                    END 'ProbationPeriod', CONVERT(VARCHAR(15), e.confirmation_date, 103) ConfirmationDate,
                    CONVERT(VARCHAR(15), e.termination_date, 103) TerminationDate, CASE e.cpf_entitlement
                                                                                     WHEN 'Y' THEN (SELECT 'YES'
                                                                                                   )
                                                                                     WHEN 'N' THEN (SELECT 'NO'
                                                                                                   )
                                                                                   END 'Cpf Entitlement',
                    (SELECT empgroupname FROM emp_group WHERE id= e.emp_group_id
                    ) EmployeeGroup, e.cpf_employer, e.cpf_employee, e1.emp_name EmployeeSupervisor,
                    CASE e.ot_entitlement
                      WHEN 'Y' THEN (SELECT 'YES'
                                    )
                      WHEN 'N' THEN (SELECT 'NO'
                                    )
                    END 'OT Entilement', CASE e.payment_mode
                                           WHEN '-1' THEN (SELECT 'Cash'
                                                          )
                                           WHEN '-2' THEN (SELECT 'Cheque'
                                                          )
                                           ELSE (SELECT 'Giro'
                                                )
                                         END 'PaymentMode', CASE WHEN e.cpf_entitlement = 'Y' AND
                                                                      e.race_id = '1' THEN (SELECT 'CDAC'
                                                                                           )
                                                                 WHEN e.cpf_entitlement = 'Y' AND
                                                                      e.race_id = '2' THEN (SELECT 'SINDA'
                                                                                           )
                                                                 WHEN e.cpf_entitlement = 'Y' AND
                                                                      e.race_id = '3' THEN (SELECT 'MBMF'
                                                                                           )
                                                                 WHEN e.cpf_entitlement = 'Y' AND
                                                                      e.race_id = '4' THEN (SELECT 'ECF'
                                                                                           )
                                                            END FundName, e.termination_reason TerminationReason,
                    CASE e.pay_frequency
                      WHEN 'M' THEN (SELECT 'MONTHLY'
                                    )
                      WHEN 'H' THEN (SELECT 'HOURLY'
                                    )
                    END 'PayFrequency', e.Remarks, e.UserName, CASE e.statusid
                                                                 WHEN '1' THEN (SELECT 'Active'
                                                                               )
                                                                 WHEN '2' THEN (SELECT 'Inactive'
                                                                               )
                                                               END [status], c.company_name,
                    e.insurance_number InsuraceNumber, CONVERT(VARCHAR(15), e.insurance_expiry, 103) InsuranceExpiry,
                    e.csoc_number csocnumber, CONVERT(VARCHAR(15), e.csoc_expiry, 103) CSOCExpiry,
                    CONVERT(VARCHAR(15), e.passport_expiry, 103) PassportExpiry, e.giro_acc_name, e.foreignaddress1,
                    e.foreignaddress2, e.foreignpostalcode, CONVERT(VARCHAR(15), e.pp_issue_date, 103) PPIssueDate,
                    e.leaves_remaining LeavesRemaining, e.wp_application_date, e.worker_levy WorkerLevy,
                    e.block_no BlockNo, e.street_name streetname, e.level_no LevelNo, e.unit_no UnitNo,
                    e.postal_code Postalcode, e.wdays_per_week DaysPerWeek, e.emp_ref_no, e.v1rate, e.v2rate, e.v3rate,
                    e.v4rate, CONVERT(VARCHAR(15), e.wp_issue_date, 103) WPIssueDate, e.wp_number, e.batch_no,
                    e.photo_no, e.shipyard_quota
             FROM   employee e
             LEFT JOIN employee e1 ON e.emp_supervisor = e1.emp_code
             JOIN   company c ON c.company_id = e.company_id
             WHERE  e.company_id = @companyid    
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_GenLevyReport]    Script Date: 09/02/2009 11:57:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_GenLevyReport] --59,1,2009    
       (
        @compid AS INT ,
        @month INT ,
        @year INT
       )
AS 
 SELECT   (ROW_NUMBER() OVER (ORDER BY a.emp_group_id)) AS MyRowNumber, emp_code, b.company_name, c.deptname,
                CONVERT(VARCHAR(10), A.wp_exp_date, 105) 'WP_EXP_DATE', d.country, (emp_name + ' ' + emp_lname) emp_name,
                ic_pp_number, fw_levy, termination_date, (SELECT empgroupname FROM emp_group WHERE [id] = a.emp_group_id
                                                         ) emp_group
       INTO     #temp
       FROM     employee a 
Inner Join Company b	On a.Company_ID=b.Company_ID
Inner Join department c On a.dept_id=c.id
Inner Join country d	On a.country_id=d.id
       WHERE    a.company_id = @compid AND
                (a.termination_date IS NULL OR
                 MONTH(a.termination_date) = @month
                )    
       ORDER BY emp_name
       UPDATE   #temp
       SET      fw_levy = 0
       WHERE    emp_code NOT  IN (SELECT    emp_id
                                  FROM      prepare_payroll_hdr h ,
                                            prepare_payroll_detail d
                                  WHERE     h.trx_id = d.trx_id AND
                                            emp_id = #temp.emp_code AND
                                            MONTH(start_period) = @month AND
                                            YEAR(start_period) = @year)       
       SELECT   *
       FROM     #temp
       ORDER BY emp_name
GO
/****** Object:  StoredProcedure [dbo].[sp_emp_leaves_adddeduc]    Script Date: 09/02/2009 11:57:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[sp_emp_leaves_adddeduc] 4, 2010, 8, 0
CREATE PROCEDURE [dbo].[Sp_emp_leaves_adddeduc] --1,2008                                       
@company_id INT,
@year       INT,
@leaveType  INT,
@status     INT
AS
  BEGIN
      SELECT  DISTINCT '1'                                                row_id,
                      E.EMP_CODE                                         [emp_code],
                      Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') emp_name,
                      DeptName                                           department,
                      Leave_Type,
                      Leaves_allowed                                     AS leave_remaining,
                      EL.leave_year,
                      'N/A'                                              calcleaverem,
                      Isnull('', '')                            AS remarks,
					  [STATUS]
	  Into #Temp
      FROM   EmployeeLeavesAllowed EL
             INNER JOIN EMPLOYEE E
               ON E.emp_code = EL.emp_id
             LEFT OUTER JOIN department ED
               ON E.dept_id = ED.Id
             LEFT OUTER JOIN LEAVES_FOREFITED ELF
               ON E.EMP_CODE = ELF.EMP_ID
      WHERE  E.company_id = @company_id
             AND EL.leave_year = @year
             AND leave_type = @leaveType --and [status] = @status  



	Delete From #Temp Where [Status] is not null And ([Status] != @status)
	Select  * From #Temp
	Drop Table #Temp
  END 

--select * from LEAVES_FOREFITED
--delete from LEAVES_FOREFITED
GO
/****** Object:  StoredProcedure [dbo].[sp_emppayclaim_add]    Script Date: 09/02/2009 11:57:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--[sp_emppayclaim_add] 102,1,2010 
create PROCEDURE [dbo].[sp_emppayclaim_add]                          
       (      
        @empcode INT ,      
        @empmonth INT ,      
        @empyear VARCHAR(50)      
       )      
AS       
       BEGIN                            
             IF (@empmonth <> 13)       
                BEGIN                            
                      SELECT    e.[trx_id], a.[id], a.[desc], a.[cpf], e.[trx_amount],      
                                CONVERT(CHAR(2), DATEPART(dd, e.[trx_period])) + '/' + CONVERT(CHAR(2), DATEPART(mm, e.[trx_period])) + '/' + CONVERT(CHAR(4), DATEPART(yy,e.[trx_period])) trx_period,    
                                e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name',      
                                (SELECT DeptName FROM department WHERE id= b.dept_id      
                                ) Department, ISNULL(e.recpath, '') recpath, e.approver ,e.Remarks     
                      FROM      [emp_additions] e ,      
                                additions_types a ,      
                                employee b      
                      WHERE     e.[emp_code] = @empcode AND      
                                e.trx_type = a.id AND      
                                e.emp_code = b.emp_code AND      
                                (e.claimstatus = 'Open') AND      
                                DATEPART(mm, trx_period) = @empmonth AND      
                                CONVERT(CHAR(4), DATEPART(yyyy, trx_period)) = @empyear      
                      ORDER BY  b.emp_name                           
                END                            
             ELSE       
                BEGIN                            
                      SELECT    e.[trx_id], a.[id], a.[desc], a.[cpf], e.[trx_amount],      
                                CONVERT(CHAR(2), DATEPART(dd, e.[trx_period])) + '/' + CONVERT(CHAR(2), DATEPART(mm, e.[trx_period])) + '/' + CONVERT(CHAR(4), DATEPART(yy,      
                                                                                                        e.[trx_period])) trx_period,      
                                e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name',      
                                (SELECT DeptName FROM department WHERE id= b.dept_id      
                                ) Department, ISNULL(e.recpath, '') recpath, e.approver,e.Remarks      
                      FROM      [emp_additions] e ,      
                                additions_types a ,      
                                employee b      
                      WHERE     e.[emp_code] = @empcode AND      
                                e.trx_type = a.id AND      
                                e.emp_code = b.emp_code AND      
                                (e.claimstatus = 'Open') AND      
                                CONVERT(CHAR(4), DATEPART(yyyy, trx_period)) = @empyear      
                      ORDER BY  b.emp_name                           
                            
                END                            
                            
       END   
  
GO
/****** Object:  StoredProcedure [dbo].[sp_emppendingclaim_add]    Script Date: 09/02/2009 11:57:38 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_emppendingclaim_add]    
   @txt VARCHAR(50) ,    
   @company_id INT ,    
   @approver VARCHAR(50)    
AS     
   BEGIN     
 IF (@txt = 'approverAll')     
            BEGIN                    
                  SELECT    e.[trx_id], a.[id], a.[desc], e.[trx_amount],    
                            CONVERT(CHAR(2), DATEPART(mm, e.[trx_period])) + '/' + CONVERT(CHAR(4), DATEPART(yy,    
                                                                                                    e.[trx_period])) trx_period,    
                            e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name', ISNULL(e.recpath, '') recpath,    
                            (SELECT DeptName FROM department WHERE id= b.dept_id    
                            ) Department,e.remarks    
                  FROM      [emp_additions] e ,    
                            additions_types a ,    
                            employee b    
                  WHERE     e.trx_type = a.id AND    
                            e.emp_code = b.emp_code AND    
                             e.claimstatus IN( 'Pending','Open') AND    
                            b.company_id = @company_id   
                  ORDER BY  b.emp_name            
            END               
        
         IF (@txt = 'approver')     
            BEGIN                    
                  SELECT    e.[trx_id], a.[id], a.[desc], e.[trx_amount],    
                            CONVERT(CHAR(2), DATEPART(mm, e.[trx_period])) + '/' + CONVERT(CHAR(4), DATEPART(yy,    
                                                                                                    e.[trx_period])) trx_period,    
                            e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name', ISNULL(e.recpath, '') recpath,    
                            (SELECT DeptName FROM department WHERE id= b.dept_id    
                            ) Department,e.remarks    
                  FROM      [emp_additions] e ,    
                            additions_types a ,    
                            employee b    
                  WHERE     e.trx_type = a.id AND    
                            e.emp_code = b.emp_code AND    
                             e.claimstatus IN( 'Pending','Open') AND    
                            b.company_id = @company_id   
AND                           e.approver = @approver   
                  ORDER BY  b.emp_name            
            END      
         IF (@txt = 'noapprover')     
            BEGIN       
                  SELECT    e.[trx_id], a.[id], a.[desc], e.[trx_amount],    
                            CONVERT(CHAR(2), DATEPART(mm, e.[trx_period])) + '/' + CONVERT(CHAR(4), DATEPART(yy,    
                                                                                                    e.[trx_period])) trx_period,    
                            e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name', ISNULL(e.recpath, '') recpath,    
                            (SELECT DeptName FROM department WHERE id= b.dept_id    
                            ) Department,e.remarks    
                  FROM      [emp_additions] e ,    
                            additions_types a ,    
                            employee b    
                  WHERE     e.trx_type = a.id AND    
                            e.emp_code = b.emp_code AND    
                            e.claimstatus IN( 'Pending','Open') AND    
                            b.company_id = @company_id   
AND         e.approver = @approver    
                  ORDER BY  b.emp_name            
            END        
   END    
GO
/****** Object:  StoredProcedure [dbo].[sp_emppay_netpay]    Script Date: 09/02/2009 11:57:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_emppay_netpay] (@empcode VARCHAR(50))
AS 
       BEGIN  

             SELECT a.emp_code, isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name, b.DeptName,
                    CONVERT(VARCHAR(5), DecryptByAsymKey(AsymKey_ID('AsymKey'), a.payrate)) payrate,
                    (SELECT SUM(trx_amount)
                     FROM   emp_additions
                     WHERE  emp_code = a.emp_code AND
                            DATEPART(mm, trx_period) = DATEPART(mm, GETDATE())
                    ) 'Additions', ISNULL((SELECT   SUM(trx_amount)
                                           FROM     emp_deductions
                                           WHERE    emp_code = a.emp_code AND
                                                    DATEPART(mm, trx_period) = DATEPART(mm, GETDATE())
                                          ), 0) 'Deductions',
                    (CONVERT(VARCHAR(5), DecryptByAsymKey(AsymKey_ID('AsymKey'), payrate)) +
                     (SELECT    SUM(trx_amount)
                      FROM      emp_additions
                      WHERE     emp_code = @empcode AND
                                DATEPART(mm, trx_period) = DATEPART(mm, GETDATE())
                     ) - (SELECT    ISNULL(SUM(trx_amount), 0)
                          FROM      emp_deductions
                          WHERE     emp_code = @empcode AND
                                    DATEPART(mm, trx_period) = DATEPART(mm, GETDATE())
                         )) 'Netpay'
             FROM   employee a ,
                    department b
             WHERE  a.dept_id = b.id AND
                    a.emp_code = @empcode
  
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_emp_update]    Script Date: 09/02/2009 11:57:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_emp_update] (@emp_code                             INT,    
                                       @emp_name                             [VARCHAR](50),    
                                       @emp_alias                            [VARCHAR](50),    
                                       @nationality                          [INT],    
                                       @emp_type                             [VARCHAR](50),    
                                       @emp_lname                            [VARCHAR](50),    
                                       @empcpftype                           [INT],    
                                       @Insurance_number                     [VARCHAR](50),    
                                       @Insurance_expiry                     VARCHAR(20),    
                                       @CSOC_number                          [VARCHAR](50),    
                                       @CSOC_expiry                          VARCHAR(20),    
                                       @passport                             [VARCHAR](50),    
                                       @passport_expiry                      VARCHAR(20),    
                                       @ic_pp_number                         [VARCHAR](50),    
                                       @wp_exp_date                          VARCHAR(20),    
                                       @pr_date                              VARCHAR(20),    
                                       @address                              [VARCHAR](50),    
                                       @country                              [INT],    
                                       @postal_code                          [VARCHAR](50),    
                                       @phone                                [VARCHAR](50),    
                                       @hand_phone                           [VARCHAR](50),    
                                       @email                                [VARCHAR](50),    
                                       @sex                                  [VARCHAR](50),    
                                       @religion                             [INT],    
                                       @race                                 [INT],    
                                       @marital_status                       [VARCHAR](50),    
                                       @place_of_birth                       [VARCHAR](50),    
                                       @date_of_birth                        VARCHAR(20),    
                                       @income_taxid                         [VARCHAR](50),    
                                       @employee_cpf_acct                    [VARCHAR](50),    
                                       @employer_cpf_acct                    [VARCHAR](50),    
                                       @giro_bank                            [VARCHAR](50),    
                                       @giro_code                            [VARCHAR](50),    
                                       @giro_branch                          [VARCHAR](50),    
                                       @giro_acct_number                     [VARCHAR](50),    
                                       @cpf_entitlement                      [CHAR](10),    
                                       @cpf_employer                         [MONEY],    
                                       @department                           [INT],    
                                       @cpf_employee                         [MONEY],    
                                       @designation                          [INT],    
                                       @trade                                [INT],    
                                       @emp_supervisor                       [INT],    
                                       @emp_clsupervisor                     [INT],    
									   @education                            [VARCHAR](50),    
									   @joining_date                         VARCHAR(20),    
                                       @probation_period                     [INT],    
                                       @confirmation_date                    VARCHAR(20),    
                                       @empgroup                             [INT],    
                                       @ot_entitlement                       [CHAR](10),    
                                       @termination_date                     VARCHAR(20),    
                                       @termination_reason                   [VARCHAR](50),    
                                       @pay_frequency                        [VARCHAR](50),    
                                       @payrate                              [VARCHAR](100),    
                                       @hourlyRate                           FLOAT,    
                                       @hourlyRateMode                       VARCHAR(3),    
                                       @dailyRateMode                        VARCHAR(3),    
                                       @dailyRate                            FLOAT,    
                                       @wday_per_week                        FLOAT,    
                                       @payment_mode                         [VARCHAR](50),    
                                       @email_payslip                        [VARCHAR](50),    
                                       @fw_code                              [VARCHAR](50),    
                                       @fw_levy                              [MONEY],    
                                       @sdf_required                         [CHAR](10),    
                                       @wh_tax_pct                           [FLOAT],    
                                       @wh_tax_amt                           [MONEY],    
                                       @cdac_fund                            [MONEY],    
                                       @mbmf_fund                            [MONEY],    
                                       @sinda_fund                           [MONEY],    
                                       @ecf_fund                             [MONEY],    
                                       @cchest_fund                          [MONEY],    
                                       @remarks                              VARCHAR(MAX),    
                                       @images                               [VARCHAR](250),    
                                       @leaveCarryForward                    FLOAT,    
                                       @giro_acc_name                        VARCHAR(100),    
                                       @groupid                              VARCHAR(128),    
                                       @localaddress2                        VARCHAR(50),    
                                       @block_no                             VARCHAR(50),    
                                       @street_name                          VARCHAR(100),    
                                       @unit_no                              VARCHAR(50),    
                                       @level_no                             VARCHAR(50),    
                                       @foreignaddress1                      VARCHAR(50),    
                                       @foreignaddress2                      VARCHAR(50),    
                                       @time_card_no                         VARCHAR(50),    
                                       @foreignpostalcode                    VARCHAR(50),    
                                       @pp_issue_date                        VARCHAR(20),    
                                       @leaves_remaining                     FLOAT,    
                                       @worker_levy                          VARCHAR(50),    
                    @wp_application_date                  VARCHAR(20),    
                                       @emp_ref_type                         INT,    
                                       @fund_optout                          INT,    
                                       @emp_category                         INT,    
                                       @v1rate                               FLOAT,    
                                       @v2rate                               FLOAT,    
                                       @v3rate                               FLOAT,    
                                       @v4rate                               FLOAT,    
                                       @batch_no                             INT,    
                                       @wp_issue_date                        VARCHAR(20),    
                                       @photo_no                             INT,    
                                       @wp_number                            VARCHAR(50),    
                                       @shipyard_quota                       VARCHAR(50),    
                                       @tax_borne_employer                   VARCHAR(50),    
                                       @tax_borne_employer_options           VARCHAR(50),    
                                       @tax_borne_employer_amount            VARCHAR(50),    
                                       @pension_out_singapore                VARCHAR(50),    
                                       @pension_out_singapore_amount         VARCHAR(50),    
                                       @excess_voluntary_cpf_employer        VARCHAR(50),    
                                       @excess_voluntary_cpf_employer_amount VARCHAR(50),    
                                       @stock_options                        VARCHAR(50),    
                                       @stock_options_amount                 VARCHAR(50),    
                                       @benefits_in_kind                     VARCHAR(50),    
                                       @benefits_in_kind_amount              VARCHAR(50),    
                                       @retirement_benefits                  VARCHAR(50),    
                                       @retirement_benefits_fundName         VARCHAR(200),    
                                       @retirement_benefits_amount           VARCHAR(50),    
                                       @s45_tax_on_directorFee               VARCHAR(50),    
                                       @cessation_provision                  VARCHAR(50),    
                                       @addr_type                            VARCHAR(50),    
                                       @dateofcessationconv                  VARCHAR(50),    
                                       @dateofcommencementconv               VARCHAR(50),    
                                       @ir8a_year                            VARCHAR(10),    
                                       @ot1rate                              FLOAT,    
                                       @ot2rate                              FLOAT,    
                                       @EmeConPer                            VARCHAR(50),    
                                       @EmeConPerRel                         VARCHAR(50),    
                                       @EmeConPerPh1                         VARCHAR(50),    
                                       @EmeConPerPh2                         VARCHAR(50),    
                                       @EmeConPerAdd                         VARCHAR(100),    
                                       @EmeConPerRem                         VARCHAR(200),    
                                       @bloodgroup                           VARCHAR(50),    
                                       @agent_id                             INT,    
                                       @mye_cert_id                          INT,    
                       @wp_arrival_date                      VARCHAR(20),    
                                       @pay_supervisor                       [INT],    
                                       @payrolltype                          [INT],    
                                       @compcpffh                            [INT],    
                                       @tssupervisor                         [INT],  
                                       @compfundfh                            [INT],  
										@halfsalary [INT],@Leave_supervisor[INT] )    
AS    
    BEGIN    
        DECLARE @iCountJoinUpdate INT    
    
        SET @iCountJoinUpdate = 0    
    
        DECLARE @isEmployeeAliasExist INT    
        DECLARE @compid INT    
        DECLARE @statusid INT    
    
        IF Len(Rtrim(@termination_date)) <= 0    
            BEGIN    
                SELECT @statusid = StatusId    
                FROM   UserStatus  
                WHERE  Upper(Status) = Upper('Active')  
            END  
        ELSE  
            BEGIN  
                SELECT @statusid = StatusId  
                FROM   UserStatus  
                WHERE  Upper(Status) = Upper('Inactive')  
            END    
    
        SELECT @compid = company_id    
        FROM   employee    
        WHERE  emp_code = @emp_code    
    
        SELECT @isEmployeeAliasExist = COUNT(*)    
        FROM   Employee    
        WHERE  Company_Id = @compid    
           AND Upper(emp_alias) = Upper(Ltrim(Rtrim(@emp_alias)))    
           AND emp_code != @emp_code    
           AND Len(Ltrim(Rtrim(emp_alias))) > 0    
    
        IF (@isEmployeeAliasExist = 0)    
            BEGIN    
                IF @wp_exp_date = '01/01/1900'    
                    OR @wp_exp_date = ''    
                    SELECT @wp_exp_date = NULL    
    
                IF @Insurance_expiry = '01/01/1900'    
                    OR @Insurance_expiry = ''    
                    SELECT @Insurance_expiry = NULL    
    
                IF @CSOC_expiry = '01/01/1900'    
                    OR @CSOC_expiry = ''    
                    SELECT @CSOC_expiry = NULL    
    
                IF @passport_expiry = '01/01/1900'    
                    OR @passport_expiry = ''    
                    SELECT @passport_expiry = NULL    
    
                IF @pr_date = '01/01/1900'    
                    OR @pr_date = ''    
                    SELECT @pr_date = NULL    
    
                IF @date_of_birth = '01/01/1900'    
                    OR @date_of_birth = ''    
                    SELECT @date_of_birth = NULL    
    
                IF @joining_date = '01/01/1900'    
                    OR @joining_date = ''    
                    SELECT @joining_date = NULL    
    
                IF @confirmation_date = '01/01/1900'    
                    OR @confirmation_date = ''    
                    SELECT @confirmation_date = NULL    
    
                IF @termination_date = '01/01/1900'    
                    OR @termination_date = ''    
                    SELECT @termination_date = NULL    
    
                IF @pp_issue_date = '01/01/1900'    
                    OR @pp_issue_date = ''    
                    SELECT @pp_issue_date = NULL    
    
                IF @wp_application_date = '01/01/1900'    
                    OR @wp_application_date = ''    
                    SELECT @wp_application_date = NULL    
    
                IF @wp_issue_date = '01/01/1900'    
                    OR @wp_issue_date = ''    
                    SELECT @wp_issue_date = NULL    
    
                IF @wp_arrival_date = '01/01/1900'    
                    OR @wp_arrival_date = ''    
                    SELECT @wp_arrival_date = NULL    
    
                -- TIMECARD NO VALIDATION START                                                                  
                IF @time_card_no <> ''    
                    BEGIN    
                        DECLARE @timeCardCount INT    
    
                        SET @timeCardCount = 0    
    
                        SELECT @timeCardCount = COUNT(time_card_no)    
                        FROM   employee    
                        WHERE  company_id = @compid    
                           AND emp_code <> @emp_code    
                           AND time_card_no = @time_card_no    
    
                        IF @timeCardCount > 0    
                            BEGIN    
                                RETURN 'TIMECARD ALREADY IN USE'    
                            END    
                    END    
    
                -- TIMECARD VALIDATION END                                      
--santy                 
                SELECT @iCountJoinUpdate = Isnull(COUNT(Emp_Code), 0)    
                FROM   Employee    
                WHERE  Emp_Code = @emp_code    
                   AND CONVERT(DATETIME, Joining_Date, 103) = CONVERT(DATETIME, @joining_date, 103)    
    
                UPDATE employee    
                SET    [payrate] = Encryptbyasymkey(Asymkey_id('AsymKey'), @payrate),    
                       [statusid] = @statusid,    
                       [emp_name] = @emp_name,    
                       [emp_alias] = @emp_alias,    
                       [nationality_id] = @nationality,    
                       [emp_type] = @emp_type,    
                       [ic_pp_number] = @ic_pp_number,    
                       [wp_exp_date] = CONVERT(DATETIME, @wp_exp_date, 103),    
                       -- [wp_exp_date]=@wp_exp_date ,                                                                                                  
                       [pr_date] = CONVERT(DATETIME, @pr_date, 103),    
                       --[pr_date]= @pr_date,                                                                                                     
                       [address] = @address,    
                       [country_id] = @country,    
                       [postal_code] = @postal_code,    
                       [phone] = @phone,    
                       [hand_phone] = @hand_phone,    
                       [email] = @email,    
                       emp_lname = @emp_lname,    
                       empcpftype = @empcpftype,    
                       Insurance_number = @Insurance_number,    
                       Insurance_expiry = CONVERT(DATETIME, @Insurance_expiry, 103),    
                       --Insurance_expiry=@Insurance_expiry,                                                                                                 
                       CSOC_number = @CSOC_number,    
                       --CSOC_expiry=@CSOC_expiry,                                        
                       CSOC_expiry = CONVERT(DATETIME, @CSOC_expiry, 103),    
                       passport = @passport,    
                       passport_expiry = CONVERT(DATETIME, @passport_expiry, 103),    
                       --passport_expiry=@passport_expiry,                                                                                                   
                       [sex] = @sex,    
                       [religion_id] = @religion,    
                       [race_id] = @race,    
                       [marital_status] = @marital_status,    
                       [place_of_birth] = @place_of_birth,    
                       [date_of_birth] = CONVERT(DATETIME, @date_of_birth, 103),    
                       --[date_of_birth]=@date_of_birth,                                                                                                  
                       [income_taxid] = @income_taxid,    
                       --@cpf_acct_number  [varchar](50),                                                                                                     
                       [employee_cpf_acct] = @employee_cpf_acct,    
                       [employer_cpf_acct] = @employer_cpf_acct,    
                       [giro_bank] = @giro_bank,    
                       [giro_code] = @giro_code,    
                       --[cpf_acct_number],                                                   
                       [giro_branch] = @giro_branch,    
                       [giro_acct_number] = @giro_acct_number,    
                       [cpf_entitlement] = @cpf_entitlement,    
                       [cpf_employer] = @cpf_employer,    
                       [dept_id] = @department,    
                       [cpf_employee] = @cpf_employee,    
                       [desig_id] = @designation,    
                       [trade_id] = @trade,    
                       [emp_supervisor] = @emp_supervisor,    
                       [education] = @education,    
                       [joining_date] = CONVERT(DATETIME, @joining_date, 103),    
                       --[joining_date]=@joining_date,                                                                                                     
                       --[title],                                                                                                    
                       [probation_period] = @probation_period,    
                       [confirmation_date] = CONVERT(DATETIME, @confirmation_date, 103),    
                       --[confirmation_date]=@confirmation_date,                                                                                                    
                       [emp_group_id] = @empgroup,    
                       [ot_entitlement] = @ot_entitlement,    
                       [termination_date] = CONVERT(DATETIME, @termination_date, 103),    
                       --[termination_date]=@termination_date,                                                                                     
                       [termination_reason] = @termination_reason,    
                       [pay_frequency] = Rtrim(@pay_frequency),    
                       [payment_mode] = @payment_mode,    
                       [email_payslip] = @email_payslip,    
                       [fw_code] = @fw_code,    
                       [fw_levy] = @fw_levy,    
                       [sdf_required] = @sdf_required,    
                       [cdac_fund] = @cdac_fund,    
                       [mbmf_fund] = @mbmf_fund,    
                       [sinda_fund] = @sinda_fund,    
                       [ecf_fund] = @ecf_fund,    
                       [cchest_fund] = @cchest_fund,    
                       [remarks] = @remarks,    
                       [images] = @images,    
                       [leave_carry_forward] = @leaveCarryForward,    
                       [giro_acc_name] = @giro_acc_name,    
                       [groupid] = @groupid,    
                       [localaddress2] = @localaddress2,    
                       [foreignaddress1] = @foreignaddress1,    
                       [foreignaddress2] = @foreignaddress2,    
                       [time_card_no] = @time_card_no,    
                       [foreignpostalcode] = @foreignpostalcode,    
                       [wh_tax_pct] = @wh_tax_pct,    
                       [wh_tax_amt] = @wh_tax_amt,    
                       --[pp_issue_date]= @pp_issue_date,                                                                                    
                       [pp_issue_date] = CONVERT(DATETIME, @pp_issue_date, 103),    
                       [leaves_remaining] = @leaves_remaining,    
                       [worker_levy] = @worker_levy,    
                       [wp_application_date] = CONVERT(DATETIME, @wp_application_date, 103),    
                       [hourly_rate_mode] = @hourlyRateMode,    
                       [hourly_rate] = @hourlyRate,    
                       [daily_rate_mode] = @dailyRateMode,    
                       [daily_rate] = @dailyRate,    
                       [wdays_per_week] = @wday_per_week,    
                       [emp_ref_no] = @emp_ref_type,    
                       [fund_optout] = @fund_optout,    
                       [emp_category] = @emp_category,    
                       [emp_clsupervisor] = @emp_clsupervisor,    
                       [v1rate] = @v1rate,    
                       [v2rate] = @v2rate,    
                       [v3rate] = @v3rate,    
                       [v4rate] = @v4rate,    
                       [batch_no] = @batch_no,    
                       [wp_issue_date] = CONVERT(DATETIME, @wp_issue_date, 103),    
                       [wp_arrival_date] = CONVERT(DATETIME, @wp_arrival_date, 103),    
                       [photo_no] = @photo_no,    
                       [wp_number] = @wp_number,    
                       [shipyard_quota] = @shipyard_quota,    
                       [block_no] = @block_no,    
                       [street_name] = @street_name,    
                       [level_no] = @level_no,    
                       [unit_no] = @unit_no,    
        [ot1rate] = @ot1rate,    
                       [ot2rate] = @ot2rate,    
                       [eme_cont_per] = @EmeConPer,    
                       [eme_cont_per_rel] = @EmeConPerRel,    
                       [eme_cont_per_ph1] = @EmeConPerPh1,    
                       [eme_cont_per_ph2] = @EmeConPerPh2,    
                       [eme_cont_per_add] = @EmeConPerAdd,    
                       [eme_cont_per_rem] = @EmeConPerRem,    
                       [bloodgroup] = @bloodgroup,    
                       [agent_id] = @agent_id,    
                       [mye_cert_id] = @mye_cert_id,    
                       [pay_supervisor] = @pay_supervisor,    
                       [payrolltype] = @payrolltype,    
                       [ComputeCPFFH] = @compcpffh,    
        [timesupervisor] = @tssupervisor,   
        [ComputeFundFH] = @compfundfh,  
        [Halfsalary] = @halfsalary,
        [Leave_supervisor]=@Leave_supervisor  
                WHERE  [emp_code] = @emp_code    
    
                DECLARE @leavemodel INT    
    
                SELECT @leavemodel = c.leave_model    
                FROM   dbo.company AS c    
                       INNER JOIN Employee e ON c.Company_ID = e.Company_ID    
                WHERE  e.emp_code = @emp_code    
    
                IF (@iCountJoinUpdate <= 0    
                    AND (@leavemodel = 4    
                          OR @leavemodel = 6    
                          OR @leavemodel = 8    
                          OR @leavemodel = 3))    
                    BEGIN    
                        EXEC Sp_yosleavesallowed @emp_code,0,1    
                    END    
    
                --            IF ( @payrate != '-999999999' )              
                --              BEGIN              
                --                  UPDATE employee              
                --                  SET    [payrate] = Encryptbyasymkey(Asymkey_id('AsymKey'), @payrate)              
                --                  WHERE  [emp_code] = @emp_code              
                --              END              
                DECLARE @row_id BIGINT    
    
                SET @row_id = 0    
    
                SELECT @row_id = Isnull(row_id, 0)    
                FROM   leaves_annual    
                WHERE  emp_id = @emp_code    
                   AND leave_year = Datepart(yyyy, Getdate())    
    
                IF @row_id < 0    
                    -- BEGIN                                                            
                    --  update leaves_annual set leave_remaining = @leaves_remaining where row_id = @row_id                                                            
                    -- END                                                              
                    --ELSE                                                            
                    BEGIN    
                        INSERT INTO leaves_annual    
                                    (emp_id,leave_year,leave_remaining)    
                        VALUES      (@emp_code,Datepart(yyyy, Getdate()),@leaves_remaining)    
                    END    
    
                DECLARE @rowid BIGINT    
    
                SET @rowid = 0    
    
                SELECT @rowid = Isnull(row_id, 0)    
                FROM   employee_ir8a    
                WHERE  emp_id = @emp_code    
                   AND ir8a_year = @ir8a_year    
    
                IF @rowid > 0    
                    BEGIN    
                        UPDATE employee_ir8a    
                        SET    tax_borne_employer = @tax_borne_employer,    
                               tax_borne_employer_options = @tax_borne_employer_options,    
                               tax_borne_employer_amount = CASE    
                                                             WHEN Len(@tax_borne_employer_amount) > 0 THEN CAST(@tax_borne_employer_amount AS FLOAT)    
                                                             ELSE 0    
                                                           END,    
                               pension_out_singapore = @pension_out_singapore,    
                               pension_out_singapore_amount = CASE    
                                                                WHEN Len(@pension_out_singapore_amount) > 0 THEN CAST(@pension_out_singapore_amount AS FLOAT)    
                                                                ELSE 0    
                                                              END,    
                               excess_voluntary_cpf_employer = @excess_voluntary_cpf_employer,    
                               excess_voluntary_cpf_employer_amount = CASE    
                                                                        WHEN Len(@excess_voluntary_cpf_employer_amount) > 0 THEN CAST(@excess_voluntary_cpf_employer_amount AS FLOAT)    
                                                                        ELSE 0    
                                                                      END,    
                               stock_options = @stock_options,    
                               stock_options_amount = CASE    
                                                        WHEN Len(@stock_options_amount) > 0 THEN CAST(@stock_options_amount AS FLOAT)    
                                                        ELSE 0    
                                                      END,    
                               benefits_in_kind = @benefits_in_kind,    
                               benefits_in_kind_amount = CASE    
                                                           WHEN Len(@benefits_in_kind_amount) > 0 THEN CAST(@benefits_in_kind_amount AS FLOAT)    
                                                           ELSE 0    
                                                         END,    
                               retirement_benefits = @retirement_benefits,    
                               retirement_benefits_fundName = @retirement_benefits_fundName,    
                               retirement_benefits_amount = CASE    
                                                              WHEN Len(@retirement_benefits_amount) > 0 THEN CAST(@retirement_benefits_amount AS FLOAT)    
                                                              ELSE 0    
                                                            END,    
                               s45_tax_on_directorFee = @s45_tax_on_directorFee,    
                               cessation_provision = @cessation_provision,    
                               addr_type = @addr_type,    
                               dateofcessation = CASE    
                                                   WHEN Len(@dateofcessationconv) > 0 THEN CONVERT(DATETIME, @dateofcessationconv, 103)    
                                                   ELSE NULL    
                                                 END,    
                               dateofcommencement = CASE    
                                                      WHEN Len(@dateofcommencementconv) > 0 THEN CONVERT(DATETIME, @dateofcommencementconv, 103)    
                                                      ELSE NULL    
                                                    END    
                        WHERE  Emp_id = @emp_code                               AND ir8a_year = @ir8a_year    
                    END    
                ELSE    
                    BEGIN    
                        INSERT INTO employee_ir8a    
                                    (emp_id,ir8a_year,tax_borne_employer,tax_borne_employer_options,tax_borne_employer_amount,pension_out_singapore,pension_out_singapore_amount,excess_voluntary_cpf_employer,excess_voluntary_cpf_employer_amount,stock_options,stock_options_amount,benefits_in_kind,benefits_in_kind_amount,retirement_benefits,retirement_benefits_fundName,retirement_benefits_amount,s45_tax_on_directorFee,cessation_provision,addr_type,dateofcessation,dateofcommencement)    
                        VALUES      (@emp_code,@ir8a_year,@tax_borne_employer,@tax_borne_employer_options,CASE    
                                                                                                            WHEN Len(@tax_borne_employer_amount) > 0 THEN CAST(@tax_borne_employer_amount AS FLOAT)    
 ELSE 0    
                                                                                                          END,@pension_out_singapore,CASE    
                                                                                                                                       WHEN Len(@pension_out_singapore_amount) > 0 THEN CAST(@pension_out_singapore_amount AS FLOAT)    
                                                                                                                                       ELSE 0    
                                                                                                                                     END,@excess_voluntary_cpf_employer,CASE    
                                                                                                                                                                          WHEN Len(@excess_voluntary_cpf_employer_amount) > 0 THEN CAST(@excess_voluntary_cpf_employer_amount AS FLOAT)    
                                                                                                                                                                          ELSE 0    
                                                                                                                                                                        END,@stock_options,CASE    
                                                                                                                                                                                             WHEN Len(@stock_options_amount) > 0 THEN CAST(@stock_options_amount AS FLOAT)    
                                                                                                                                                                                             ELSE 0    
                                                                                                                                                                                           END,@benefits_in_kind,CASE    
                                                                                                                                                                                                                   WHEN Len(@benefits_in_kind_amount) > 0 THEN 
  
CAST(@benefits_in_kind_amount AS FLOAT)    
                                                                                                                                                                                                                   ELSE 0    
                                                                                                                                                                                                                 END,@retirement_benefits,@retirement_benefits_fundName,CASE    
                                                                                           
           WHEN Len(@retirement_benefits_amount) > 0 THEN CAST(@retirement_benefits_amount AS FLOAT)    
                                                                                                                                                                                                                                                               
  
           ELSE 0    
                                                                                                                                                                                                                                                               
  
         END,@s45_tax_on_directorFee,@cessation_provision,@addr_type,CASE    
                                                                                                   WHEN Len(@dateofcessationconv) > 0 THEN CONVERT(DATETIME, @dateofcessationconv, 103)    
                                                                                                                                                                                                                                                               
  
                                                                       ELSE NULL    
                                                                                                                                                                                                                                                               
  
                                                                     END,CASE    
                                                                                                                                                                                                                                                               
  
                                                                           WHEN Len(@dateofcommencementconv) > 0 THEN CONVERT(DATETIME, @dateofcommencementconv, 103)    
                                                                                                                                                                                                                                                               
  
                                                                           ELSE NULL    
                                                                                                                                                                                                                                                               
  
                                                                         END)    
                    END    
            END    
    END     

GO
/****** Object:  StoredProcedure [dbo].[sp_emppay_add]    Script Date: 09/02/2009 11:57:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_emppay_add] (@empcode  INT,
                                        @empmonth INT,
                                        @empyear  VARCHAR(50))
AS
    BEGIN
        IF (@empmonth <> 13)
            BEGIN
                SELECT e.[trx_id],a.[id],a.[desc],a.[cpf],e.[trx_amount],CONVERT(VARCHAR(10), trx_period, 103) trx_period,e.[emp_code],b.emp_name + ' ' + b.emp_lname 'emp_name',Isnull(e.recpath, '') recpath,e.basis_arriving_payment,e.service_length,e.iras_approval,CONVERT(VARCHAR(10), CONVERT(DATETIME, e.iras_approval_date, 105), 103) [iras_approval_date],additionsforyear,a.optionselection,RecStatus = CASE
                                                                                                                                                                                                                                                                                                                                                                                                                       WHEN e.status = 'L' THEN 'Locked'
                                                                                                                                                                                                                                                                                                                                                                                                                       ELSE ''
                                                                                                                                                                                                                                                                                                                                                                                                                     END,CONVERT(VARCHAR(10), CONVERT(DATETIME, trx_period, 105), 103) trx_period_copy
                FROM   [emp_additions] e,additions_types a,employee b
                WHERE  e.[emp_code] = @empcode
                   AND e.trx_type = a.id
                   AND e.emp_code = b.emp_code
                   AND Datepart(mm, trx_period) = @empmonth
                   AND (e.claimstatus = 'Approved'
                         OR e.claimstatus IS NULL)
                   AND CONVERT(CHAR(4), Datepart(yyyy, trx_period)) = @empyear
                ORDER  BY b.emp_name
            END
        ELSE
            BEGIN
                SELECT e.[trx_id],a.[id],a.[desc],a.[cpf],e.[trx_amount],CONVERT(VARCHAR(10), trx_period, 103) trx_period,e.[emp_code],b.emp_name + ' ' + b.emp_lname 'emp_name',e.basis_arriving_payment,e.service_length,e.iras_approval,CONVERT(VARCHAR(10), CONVERT(DATETIME, e.iras_approval_date, 105), 103) [iras_approval_date],additionsforyear,a.optionselection,RecStatus = CASE
                                                                                                                                                                                                                                                                                                                                                                                         WHEN e.status = 'L' THEN 'Locked'
                                                                                                                                                                                                                                                                                                                                                                                         ELSE ''
                                                                                                                                                                                                                                                                                                                                                                                       END,CONVERT(VARCHAR(10), CONVERT(DATETIME, trx_period, 105), 103) trx_period_copy
                FROM   [emp_additions] e,additions_types a,employee b
                WHERE  e.[emp_code] = @empcode
                   AND e.trx_type = a.id
                   AND e.emp_code = b.emp_code
                   AND (e.claimstatus = 'Approved'
                         OR e.claimstatus IS NULL)
                   AND CONVERT(CHAR(4), Datepart(yyyy, trx_period)) = @empyear
                ORDER  BY b.emp_name,CONVERT(DATETIME, e.trx_period, 103),a.optionselection,a.[desc]
            END
    END 
GO
/****** Object:  StoredProcedure [dbo].[sp_payroll_detail_addition]    Script Date: 09/02/2009 11:58:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_payroll_detail_addition]  --102,1,2009  
       @emp_code INT ,
       @month INT ,
       @year INT
AS 
       BEGIN  
             SELECT isnull(a.emp_name,'')+' '+isnull(a.emp_lname,'') emp_name, b.trx_amount, b.trx_type, c.[desc]
             FROM   employee a ,
                    emp_additions b ,
                    additions_types c
             WHERE  b.emp_code = a.emp_code AND
                    b.trx_type = c.id AND
                    a.emp_code = @emp_code AND
                    DATEPART(yy, trx_period) = @year AND
                    DATEPART(mm, trx_period) = @month AND
                    (b.claimstatus IS NULL OR
                     b.claimstatus = 'Approved'
                    )  
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_comp_add]    Script Date: 09/02/2009 11:56:48 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_comp_add]              
       (              
        @Company_name [varchar](50) ,              
        @Company_Code [varchar](50) ,              
        @phone [int] ,              
        @email [varchar](50) ,              
        @website [varchar](50) ,              
        @city [varchar](50) ,              
        @Fax [varchar](50) ,              
        @country [int] ,              
        @auth_person [varchar](50) ,              
        @designation [varchar](50) ,              
        @company_roc [varchar](100) ,              
        @company_type [varchar](3) ,              
        @Address [varchar](350) ,              
        @Auth_email [varchar](50) ,              
        @monthly_cpf_ceil [int] ,              
        @annual_cpf_ceil [int] ,              
        @payslip_format [varchar](50) ,              
        @Payroll_Approval INT ,              
        @no_work_days FLOAT ,              
        @day_hours FLOAT ,              
        @day_min FLOAT ,              
        @email_sender [varchar](50) ,              
        @email_SMTP_server [varchar](50) ,              
        @email_username [varchar](50) ,              
        @email_password [varchar](50) ,              
        @email_sender_domain [varchar](50) ,              
        @email_sender_name VARCHAR(MAX) ,              
        @email_reply_address VARCHAR(MAX) ,              
        @email_reply_name   VARCHAR(MAX) ,              
        @email_leavedel  VARCHAR(MAX) ,              
        @email_SMTP_port [varchar](50) ,              
        @timesheet_approve [int] ,              
        @SessionID [varchar](50) ,              
        @state VARCHAR(100) ,              
        @password VARCHAR(128) ,              
        @address2 VARCHAR(250) ,              
        @postal_code VARCHAR(50) ,              
        @email_leavealert VARCHAR(50) ,              
        @email_payalert VARCHAR(50) ,              
        @epayslip VARCHAR(50) ,              
        @leave_model INT ,              
        @email_claim_sender_name VARCHAR(MAX) ,              
        @email_claim_reply_name VARCHAR(MAX) ,              
        @email_claimalert VARCHAR(50) ,              
        @sslrequired VARCHAR(10) ,              
        @pwdrequired VARCHAR(10) ,              
        @ccmail VARCHAR(50) ,              
        @ccclaimalert VARCHAR(50) ,              
        @ccleavealert VARCHAR(50) ,              
        @leaveroundoff VARCHAR(50) ,              
        @additionsroundoff VARCHAR(50) ,              
        @deductionsroundoff VARCHAR(50) ,              
        @netpayroundoff VARCHAR(50),            
		  @payrolltype INT,    
		  @tsremarks       [INT],    
		  @projectassign INT,  
		  @SalaryGLCode VARCHAR(20),  
		  @EmployeeCPFGLCode VARCHAR(20),  
		  @EmployerCPFGLCode VARCHAR(20),  
		  @FundAmtGLCode VARCHAR(20),  
		  @SDLAmtGLCode VARCHAR(20),  
		  @AccountGLCode   VARCHAR(20),
		  @UnpaidLeaGLCode varchar(20)
       )              
AS               
       DECLARE @Iden AS INT                                                              
       BEGIN TRANSACTION                                                                
       INSERT   INTO [Company] ([Company_Code], [Company_name], [phone], [email], [website], [city], [Fax], [country],              
                                [auth_person], [designation], [company_roc], [company_type], [Address], [Auth_email],              
                                [monthly_cpf_ceil], [annual_cpf_ceil], [payslip_format], Payroll_Approval, no_work_days,              
                                day_hours, day_minute, email_sender, email_SMTP_server, email_username, email_password,              
                                email_sender_domain, email_sender_name, email_reply_address, email_reply_name,              
                                email_SMTP_port, timesheet_approve, [state], address2, postal_code, email_leavealert,              
                                email_payalert, epayslip, leave_model, email_claim_sender_name, email_claim_reply_name,              
                                email_claimalert, sslrequired, pwdrequired, ccmail, ccalert_claims, ccalert_leaves, basicrnd,              
                                additionsrnd, deductionsrnd, netpayrnd, payrolltype, email_leave_delete, isTSRemarks, projectassign,SalaryGLCode,EmployeeCPFGLCode,EmployerCPFGLCode,FundAmtGLCode,SDLAmtGLCode,AccountGLCode, UnpaidLeaGLCode)  
       VALUES   (@Company_Code, @Company_name, @phone, @email, @website, @city, @Fax, @country, @auth_person,  
                 @designation, @company_roc, @company_type, @Address, @Auth_email, @monthly_cpf_ceil, @annual_cpf_ceil,              
                 @payslip_format, @Payroll_Approval, @no_work_days, @day_hours, @day_min, @email_sender,              
                 @email_SMTP_server, @email_username, @email_password, @email_sender_domain, @email_sender_name,              
                 @email_reply_address, @email_reply_name, @email_SMTP_port, @timesheet_approve, @state, @address2,                       @postal_code, @email_leavealert, @email_payalert, @epayslip, @leave_model, @email_claim_sender_name,              
                 @email_claim_reply_name, @email_claimalert, @sslrequired, @pwdrequired, @ccmail, @ccclaimalert, @ccleavealert,              
                 @leaveroundoff, @additionsroundoff, @deductionsroundoff, @netpayroundoff, @payrolltype, @email_leavedel, @tsremarks, @projectassign,  
     @SalaryGLCode, @EmployeeCPFGLCode, @EmployerCPFGLCode, @FundAmtGLCode, @SDLAmtGLCode,@AccountGLCode, @UnpaidLeaGLCode  
    )                                                              
                                                              
       DECLARE @groupID INT                                                            
       DECLARE @companyid INT                                             
       DECLARE @Usergrp_Emp INT                                                            
       DECLARE @Usergrp_HR INT                                                            
       DECLARE @Usergrp_Admin INT                                                
       DECLARE @workingdays_week FLOAT                                               
       SET @workingdays_week = 5.5                                                         
                                                            
       SELECT   @companyid = ISNULL(MAX(company_id), 0)              
       FROM     company                                                            
                                                               
       INSERT   INTO emp_group (EmpGroupName, Company_Id)              
       VALUES   ('Staff', @companyid)                                                            
                                                               
       INSERT   INTO usergroups (GroupName, company_id)              
       VALUES   ('Employee', @companyid)                                                            
       INSERT   INTO usergroups (GroupName, company_id)              
       VALUES   ('HR', @companyid)                                                            
       INSERT   INTO usergroups (GroupName, company_id)              
       VALUES   ('Super Admin', @companyid)                                                            
                                                               
       SELECT   @groupID = ISNULL(MAX(id), 0)              
       FROM     emp_group              
       WHERE    company_id = @companyid                                                           
       SELECT   @Usergrp_Emp = ISNULL(MAX(groupid), 0)              
       FROM     usergroups              
       WHERE    GroupName = 'Employee' AND              
                company_id = @companyid                                                            
       SELECT   @Usergrp_HR = ISNULL(MAX(groupid), 0)              
       FROM     usergroups              
       WHERE    GroupName = 'HR' AND              
                company_id = @companyid                                                            
       SELECT   @Usergrp_Admin = ISNULL(MAX(groupid), 0)              
       FROM     usergroups              
       WHERE    GroupName = 'Super Admin' AND              
                company_id = @companyid                                                
                                              
       SELECT   @workingdays_week = ISNULL(no_work_days, 5.5)              
       FROM     Company              
       WHERE    Company_id = @companyid                                                           
                                                      
       INSERT   INTO Employee (ot_entitlement, ic_pp_number, Company_Id, UserName, Password, emp_group_id, GroupId,              
                               StatusId, wdays_per_week)              
       VALUES   ('N', 's000000', @companyid, RTRIM(@Company_Code) + 'Admin', @password, @groupID, @Usergrp_Admin, 1,              
                 @workingdays_week)                                                            
                                             
       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)              
       VALUES   ('V1', 'No', @companyid, 'O', 'Variable', 'V1', 1)                                
       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)              
       VALUES   ('V2', 'No', @companyid, 'O', 'Variable', 'V2', 1)                                
       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)              
       VALUES   ('V3', 'No', @companyid, 'O', 'Variable', 'V3', 1)                                
       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)             
       VALUES   ('V4', 'No', @companyid, 'O', 'Variable', 'V4', 1)                                
                                               
                    
       INSERT   INTO Grouprights (groupid, rightid)              
                SELECT  @Usergrp_Emp groupid, rightid              
                FROM    GroupRightsAllocated              
                WHERE   groupid = 1 --Employee                    
                    
       INSERT   INTO Grouprights (groupid, rightid)              
                SELECT  @Usergrp_HR, rightid              
                FROM    GroupRightsAllocated              
                WHERE   groupid = 2  --HR                    
                    
       INSERT   INTO grouprights (groupid, rightid)              
                SELECT  @Usergrp_Admin groupid, rightid              
                FROM    GroupRightsAllocated              
                WHERE   groupid = 3 --Super Admin                    
                                                
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 1, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 2, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 3, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 4, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 5, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 6, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 7, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 8, 0)                                                  
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 9, 0)                            
       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
       VALUES   (@companyid, @groupID, 10, 0)                                                           
                                
                                
                                                  
       UPDATE   girobanks              
       SET      company_id = @companyid, temp = ''              
       WHERE    temp = @SessionID                  
       IF @@ERROR <> 0               
          BEGIN                                       
                ROLLBACK TRANSACTION                                                  
                RETURN -1                                                  
          END                                                  
                                                
       COMMIT TRANSACTION 
GO

/****** Object:  StoredProcedure [dbo].[sp_addtype_add]    Script Date: 09/02/2009 11:56:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_addtype_add] @desc                VARCHAR(100),  
                                       @cpf                 VARCHAR(10),  
                                       @company_id          INT,  
                                       @type_of_wage        VARCHAR(3),  
                                       @optionselection     VARCHAR(20),  
                                       @tax_payable         VARCHAR(3),  
                                       @tax_payable_options VARCHAR(5),  
                                       @typeshared VARCHAR(3),
                                       @accountcode VARCHAR(20)
AS  
    BEGIN  
        INSERT INTO [additions_types]  
                    ([desc],cpf,company_id,type_of_wage,optionselection,tax_payable,tax_payable_options, isShared,AccountCode)  
        VALUES      (@desc,@cpf,@company_id,@type_of_wage,@optionselection,@tax_payable,CASE  
                                                                                          WHEN Len(@tax_payable_options) > 0 THEN @tax_payable_options  
                                                                                          ELSE 0  
                                                                                        END, @typeshared,@accountcode)  
    END  
GO
/****** Object:  StoredProcedure [dbo].[sp_addtype_update]    Script Date: 09/02/2009 11:56:39 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_addtype_update]    
       @desc VARCHAR(100) ,    
       @cpf VARCHAR(10) ,    
       @id INT ,    
       @type_of_wage VARCHAR(3) ,    
       @optionselection VARCHAR(20) ,    
       @formulatype INT ,    
       @formulacalc VARCHAR(50) ,    
       @tax_payable VARCHAR(3) ,    
       @tax_payable_options VARCHAR(5) ,  
       @typeshared VARCHAR(3),
       @accountcode VARCHAR(20)
AS     
       BEGIN        
    
             UPDATE [additions_types]    
             SET    [desc] = @desc, cpf = @cpf, type_of_wage = @type_of_wage, optionselection = @optionselection,    
                    formulatype = @formulatype, formulacalc = @formulacalc, tax_payable = @tax_payable,    
                    tax_payable_options = CASE WHEN LEN(@tax_payable_options) > 0 THEN @tax_payable_options    
                                               ELSE 0    
                                          END, isShared=@typeshared,AccountCode=@accountcode
             WHERE  [id] = @id    
       END    
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----sp_GetEmployeePayDetails  18, 2010, 11, '' , '0.00', '0.00', '181.818181818182', '0.00', '0.00', '31.47', '41.96', '106', '2120', '','5', 'SINDA', '5', '1500', '1', '15', '20.98', '0.0', '0.0'
CREATE PROCEDURE [dbo].[Sp_getemployeepaydetails] @emp_code        VARCHAR(256),        
                                                 @Year            VARCHAR(256),        
                                                 @Month           VARCHAR(256),        
                                                 @Day_Work        VARCHAR(256),        
                                                 @OT1             VARCHAR(256),        
                                                 @OT2             VARCHAR(256),        
                                                 @BasicDayRate    VARCHAR(256),        
                                                 @OT1Hrs          VARCHAR(256),        
                                                 @OT2Hrs          VARCHAR(256),        
                                                 @OT1Rate         VARCHAR(256),        
                                                 @OT2Rate         VARCHAR(256),        
                                                 @empcpfamount    VARCHAR(10),        
                                                 @ordwages        VARCHAR(10),        
                                                 @addwages        VARCHAR(10),        
                                                 @cpfrate         VARCHAR(200),        
                                                 @fundname        VARCHAR(10),        
                                                 @fundamount      VARCHAR(10),        
                                                 @fundgrossamount VARCHAR(10),        
                                                 @stdatesubmonth  VARCHAR(2),        
                                                 @endatesubmonth  VARCHAR(2),        
                                                 @hourlyrate      VARCHAR(10),        
                                                 @nhhrs           VARCHAR(10),        
                                                 @daysworkedrate  VARCHAR(10)        
AS        
  DECLARE @startsubpay VARCHAR(10)        
  DECLARE @endsubpay VARCHAR(10)        
  DECLARE @startdtsub DATETIME        
  DECLARE @enddtsub DATETIME        
  Declare @CalcFundFH Varchar(1)    
        
    BEGIN    
        SET @startsubpay = @stdatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)        
        SET @endsubpay = @endatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)        
        SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)        
        SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)        
    
    
      
    
    
    
----Added on Dec 6 for Auto And Manual Funds- Start    
Select @CalcFundFH=CASE    
WHEN @endatesubmonth = '15' AND ComputeFundFH = 1 THEN 'Y'    
WHEN @endatesubmonth = '15' AND ComputeFundFH = 0 THEN 'N'    
ELSE 'Y' End From Employee Where Emp_Code = @emp_code    
  
   
  Select *,Sum(dbo.Getempfundcontribution(@fundgrossamount, Isnull(FundType, ''))) DedAmt Into #Deduction From    
  (    
  SELECT ED.Emp_Code,FundType = Case     
        When ED.FundType=1 Then 'CDAC'    
        When ED.FundType=2 Then 'ECF'    
        When ED.FundType=3 Then 'MBMF'    
        When ED.FundType=4 Then 'SINDA'    
        END    
  FROM   Emp_Deductions ED    
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID    
  WHERE  ((trx_period >= @startdtsub    
          AND trx_period <= @enddtsub)    
         AND YEAR(trx_period) = YEAR(@startdtsub))    
   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))    
  AND  CONVERT(INT, @endatesubmonth) >=1 And @CalcFundFH = 'Y' And ED.Emp_Code = @emp_code    
  GROUP  BY ED.Emp_Code,ED.Trx_ID, ED.FundType    
  ) D Group By Emp_Code, FundType    
  Union All
  SELECT Emp_Code,FundType = Case     
        When ED.FundType=5 Then 'CDAC'    
       When ED.FundType=6 Then 'ECF'    
        When ED.FundType=7 Then 'MBMF'    
        When ED.FundType=8 Then 'SINDA'    
        END,    
  SUM(trx_amount) DedAmt    
  FROM   Emp_Deductions ED    
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID    
  WHERE  ((trx_period >= @startdtsub    
          AND trx_period <= @enddtsub)    
         AND YEAR(trx_period) = YEAR(@startdtsub))    
   And ((ED.FundType >=5 And ED.FundType <=8))
  AND  CONVERT(INT, @endatesubmonth) >=1 And @CalcFundFH = 'Y' And ED.Emp_Code = @emp_code    
  GROUP  BY Emp_Code,ED.FundType    
        
    
        SELECT EA.AddType,CAST(EA.AddAmt AS DECIMAL(9, 2)) AddAmt,RowOrDer        
        FROM   (SELECT AddType=CASE        
                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN ('' + CAST(@nhhrs AS VARCHAR) + ' is Normal Hours Worked and ' + CAST(@hourlyrate AS VARCHAR) + ' is Normal Hourly Rate')        
                                 ELSE NULL        
                               END,        
                       --AddAmt=Case When Cast(@nhhrs as float) != 0 And Cast(@hourlyrate as float) > 0 Then Cast(@daysworkedrate as float) Else cast(0 as float) End,             
      NULL AddAmt,        
                       0 RowOrDer        
                UNION        
                SELECT AddType=CASE        
                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@nhhrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@hourlyrate AS FLOAT) / 60) AS VARCHAR) + ') NH:'        
                                 ELSE NULL        
                               END,(dbo.Converttominutes(CAST(@nhhrs AS FLOAT))) * (CAST(@hourlyrate AS FLOAT) / 60) AddAmt,0.5 RowOrDer        
                UNION        
                SELECT '(' + CAST(@Day_Work AS VARCHAR) + ' Days) x (' + CAST(@BasicDayRate AS VARCHAR) + ' Day Rate) Days Worked:' AddType,CAST (@Day_Work AS FLOAT) * CAST (@BasicDayRate AS FLOAT) AddAmt,0 RowOrDer        
                UNION        
 SELECT AddType=CASE        
                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT1Hrs AS VARCHAR) + ' is OT1 Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate')        
                                 ELSE NULL        
                               END,        
                       --'' + CAST(@OT1Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate' AddType          
                       NULL AddAmt,        
        1 RowOrDer        
                UNION        
                SELECT AddType=CASE        
                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT1Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT1Rate AS FLOAT) / 60) AS VARCHAR) + ') OT1:'        
                                 ELSE NULL        
                               END,CAST (@OT1 AS FLOAT) AddAmt,2 RowOrDer        
                UNION        
                SELECT AddType=CASE        
                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT2Hrs AS VARCHAR) + ' is OT2 Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate')        
                                 ELSE NULL        
                               END,        
                       --'' + CAST(@OT2Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate' AddType          
                       NULL AddAmt,3 RowOrDer        
                UNION        
                SELECT AddType=CASE        
                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT2Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT2Rate AS FLOAT) / 60) AS VARCHAR) + ') OT2:'        
                                 ELSE NULL        
                               END,CAST (@OT2 AS FLOAT) AddAmt,3.5 RowOrDer      
                UNION        
                SELECT EA.AddType + ':',EA.AddAmt,4 RowOrDer        
                FROM   (SELECT EA.*,AT.[Desc] AddType        
                        FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
                 FROM   emp_additions EA        
                                WHERE  (--MONTH(trx_period) = @month AND                        
                                       (trx_period >= @startdtsub        
                                        AND trx_period <= @enddtsub)        
                                       AND YEAR(trx_period) = @Year        
                                       AND Emp_Code = @emp_code)        
           AND (EA.ClaimStatus = 'Approved'        
           OR EA.ClaimStatus IS NULL)        
                                GROUP  BY Emp_Code,Trx_Type) EA        
                               INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID) EA) EA        
        WHERE  AddType IS NOT NULL        
           AND (AddAmt != 0        
                 OR AddAmt IS NULL)        
        ORDER  BY RowOrder        
        
        IF (@empcpfamount != 0)        
            BEGIN        
                SELECT *        
                FROM   (SELECT 'EMPLOYEEE CPF CONTRIBUTIONS:' AddType,@empcpfamount AddAmt,0 RowORder        
                        UNION ALL
                        SELECT AddType = CASE        
                                           WHEN Len(@cpfrate) >= 3 THEN REPLACE('{(' + @ordwages + ' Ord Wages+ ' + @addwages + ' Add Wages) And CPF Rate is: ' + @cpfrate + '}', '+ 0 Add Wages', '')        
                                           ELSE REPLACE('{(' + @ordwages + ' Ord Wages + ' + @addwages + ' Add Wages) x' + @cpfrate + '% (CPF Rate)}', '+ 0 Add Wages', '')        
                                         END,NULL AddAmt,1 RowORder        
                        UNION ALL
                        SELECT '(' + @fundgrossamount + ' Calculate on Fund) ' + @fundname + ':',@fundamount,2 RowORder        
                        UNION All
                        SELECT '(' + @fundgrossamount + ' Calculate on Fund) ' + FundType + ':',DedAmt,2 RowORder From #Deduction     
                        UNION All        
                        SELECT ED.AddType + ':',ED.AddAmt,3 RowORder        
                        FROM   (SELECT ED.*,DT.[Desc] AddType        
                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
                                        FROM   emp_deductions ED        
                                        WHERE  ((trx_period >= @startdtsub        
                               AND trx_period <= @enddtsub)        
                                               AND YEAR(trx_period) = @Year        
                                               AND Emp_Code = @emp_code And (ED.FundType is NULL OR ED.FundType=0))
                                        GROUP  BY Emp_Code,Trx_Type) ED        
                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED        
                WHERE  (AddAmt != 0        
                     OR AddAmt IS NULL)    
                ORDER  BY ED.RowOrder        
            END        
        ELSE        
            BEGIN      
                SELECT *        
                FROM   (SELECT @fundname + ':' AddType,@fundamount AddAmt,2 RowORder        
                        UNION        
                        SELECT ED.AddType + ':' AddType,ED.AddAmt AddAmt,3 RowORder        
                        FROM   (SELECT ED.*,DT.[Desc] AddType        
                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
                                        FROM   emp_deductions ED        
                                        WHERE  ((trx_period >= @startdtsub        
                                                AND trx_period <= @enddtsub)        
                                               AND YEAR(trx_period) = @Year        
                                               AND Emp_Code = @emp_code)        
                                        GROUP  BY Emp_Code,Trx_Type) ED        
                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED        
                WHERE  ED.AddAmt != 0        
                ORDER  BY ED.RowOrder  
  END        
    END     
    
DROP TABLE #Deduction    
GO
------Merging 9.0


/****** Object:  StoredProcedure [dbo].[sp_GetEmployeePayDetails]    Script Date: 09/02/2009 11:57:48 ******/
------SET ANSI_NULLS ON
------GO
------SET QUOTED_IDENTIFIER ON
------GO
--------sp_GetEmployeePayDetails  85, 2010, 1, '' , '173.63', '266.09', '12.5', '12.50', '12.50', '13.53', '18.04', '', '', '','', 'MBMF', '0', '0', '1', '15', '9.02', '88.30', '796.47'    
------CREATE PROCEDURE [dbo].[Sp_getemployeepaydetails] @emp_code        VARCHAR(256),
------                                                 @Year            VARCHAR(256),
------                                                 @Month           VARCHAR(256),
------                                                 @Day_Work        VARCHAR(256),
------                                                 @OT1             VARCHAR(256),
------                                                 @OT2             VARCHAR(256),
------                                                 @BasicDayRate    VARCHAR(256),
------                                                 @OT1Hrs          VARCHAR(256),
------                                                 @OT2Hrs          VARCHAR(256),
------                                                 @OT1Rate         VARCHAR(256),
------                                                 @OT2Rate         VARCHAR(256),
------                                                 @empcpfamount    VARCHAR(10),
------                                                 @ordwages        VARCHAR(10),
------                                                 @addwages        VARCHAR(10),
------                                                 @cpfrate         VARCHAR(200),
------                                                 @fundname        VARCHAR(10),
------                                                 @fundamount      VARCHAR(10),
------                                                 @fundgrossamount VARCHAR(10),
------                                                 @stdatesubmonth  VARCHAR(2),
------                                                 @endatesubmonth  VARCHAR(2),
------                                                 @hourlyrate      VARCHAR(10),
------                                                 @nhhrs           VARCHAR(10),
------                                                 @daysworkedrate  VARCHAR(10)
------AS
------  DECLARE @startsubpay VARCHAR(10)
------  DECLARE @endsubpay VARCHAR(10)
------  DECLARE @startdtsub DATETIME
------  DECLARE @enddtsub DATETIME
------
------    BEGIN
------        SET @startsubpay = @stdatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
------        SET @endsubpay = @endatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
------        SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)
------        SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)
------
------        SELECT EA.AddType,CAST(EA.AddAmt AS DECIMAL(9, 2)) AddAmt,RowOrDer
------        FROM   (SELECT AddType=CASE
------                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN ('' + CAST(@nhhrs AS VARCHAR) + ' is Normal Hours Worked and ' + CAST(@hourlyrate AS VARCHAR) + ' is Normal Hourly Rate')
------                                 ELSE NULL
------                               END,
------                       --AddAmt=Case When Cast(@nhhrs as float) != 0 And Cast(@hourlyrate as float) > 0 Then Cast(@daysworkedrate as float) Else cast(0 as float) End,     
------						NULL AddAmt,
------                       0 RowOrDer
------                UNION
------                SELECT AddType=CASE
------                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@nhhrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@hourlyrate AS FLOAT) / 60) AS VARCHAR) + ') NH:'
------                                 ELSE NULL
------                               END,(dbo.Converttominutes(CAST(@nhhrs AS FLOAT))) * (CAST(@hourlyrate AS FLOAT) / 60) AddAmt,0.5 RowOrDer
------                UNION
------                SELECT '(' + CAST(@Day_Work AS VARCHAR) + ' Days) x (' + CAST(@BasicDayRate AS VARCHAR) + ' Day Rate) Days Worked:' AddType,CAST (@Day_Work AS FLOAT) * CAST (@BasicDayRate AS FLOAT) AddAmt,0 RowOrDer
------                UNION
------                SELECT AddType=CASE
------                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT1Hrs AS VARCHAR) + ' is OT1 Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate')
------                                 ELSE NULL
------                               END,
------                       --'' + CAST(@OT1Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate' AddType  
------                       NULL AddAmt,
------					   1 RowOrDer
------                UNION
------                SELECT AddType=CASE
------                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT1Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT1Rate AS FLOAT) / 60) AS VARCHAR) + ') OT1:'
------                                 ELSE NULL
------                               END,CAST (@OT1 AS FLOAT) AddAmt,2 RowOrDer
------                UNION
------                SELECT AddType=CASE
------                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT2Hrs AS VARCHAR) + ' is OT2 Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate')
------                                 ELSE NULL
------                               END,
------                       --'' + CAST(@OT2Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate' AddType  
------                       NULL AddAmt,3 RowOrDer
------                UNION
------                SELECT AddType=CASE
------                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT2Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT2Rate AS FLOAT) / 60) AS VARCHAR) + ') OT2:'
------                                 ELSE NULL
------                               END,CAST (@OT2 AS FLOAT) AddAmt,3.5 RowOrDer
------                UNION
------                SELECT EA.AddType + ':',EA.AddAmt,4 RowOrDer
------                FROM   (SELECT EA.*,AT.[Desc] AddType
------                        FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt
------                                FROM   emp_additions EA
------                                WHERE  (--MONTH(trx_period) = @month AND                
------                                       (trx_period >= @startdtsub
------                                        AND trx_period <= @enddtsub)
------                                       AND YEAR(trx_period) = @Year
------                                       AND Emp_Code = @emp_code)
------									  AND (EA.ClaimStatus = 'Approved'  
------											OR EA.ClaimStatus IS NULL)  
------                                GROUP  BY Emp_Code,Trx_Type) EA
------                               INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID) EA) EA
------        WHERE  AddType IS NOT NULL
------           AND (AddAmt != 0
------                 OR AddAmt IS NULL)
------        ORDER  BY RowOrder
------
------        IF (@empcpfamount != 0)
------            BEGIN
------                SELECT *
------                FROM   (SELECT 'EMPLOYEEE CPF CONTRIBUTIONS:' AddType,@empcpfamount AddAmt,0 RowORder
------                        UNION
------                        SELECT AddType = CASE
------                                           WHEN Len(@cpfrate) >= 3 THEN REPLACE('{(' + @ordwages + ' Ord Wages+ ' + @addwages + ' Add Wages) And CPF Rate is: ' + @cpfrate + '}', '+ 0 Add Wages', '')
------                                           ELSE REPLACE('{(' + @ordwages + ' Ord Wages + ' + @addwages + ' Add Wages) x' + @cpfrate + '% (CPF Rate)}', '+ 0 Add Wages', '')
------                                         END,NULL AddAmt,1 RowORder
------                        UNION
------                        SELECT '(' + @fundgrossamount + ' Calculate on Fund) ' + @fundname + ':',@fundamount,2 RowORder
------                        UNION
------                        SELECT ED.AddType + ':',ED.AddAmt,3 RowORder
------                        FROM   (SELECT ED.*,DT.[Desc] AddType
------                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt
------                                        FROM   emp_deductions ED
------                                        WHERE  (--MONTH(trx_period) = @Month AND                
------                                               (trx_period >= @startdtsub
------                                                AND trx_period <= @enddtsub)
------                                               AND YEAR(trx_period) = @Year
------                                               AND Emp_Code = @emp_code)
------                                        GROUP  BY Emp_Code,Trx_Type) ED
------                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED
------                WHERE  (AddAmt != 0
------                     OR AddAmt IS NULL)
------                ORDER  BY ED.RowOrder
------            END
------        ELSE
------            BEGIN
------                SELECT *
------                FROM   (SELECT @fundname + ':' AddType,@fundamount AddAmt,2 RowORder
------                        UNION
------                        SELECT ED.AddType + ':' AddType,ED.AddAmt AddAmt,3 RowORder
------                        FROM   (SELECT ED.*,DT.[Desc] AddType
------                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt
------                                        FROM   emp_deductions ED
------                                        WHERE  (--MONTH(trx_period) = @Month AND                
------                                               (trx_period >= @startdtsub
------                                                AND trx_period <= @enddtsub)
------                                               AND YEAR(trx_period) = @Year
------                                               AND Emp_Code = @emp_code)
------                                        GROUP  BY Emp_Code,Trx_Type) ED
------                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED
------                WHERE  ED.AddAmt != 0
------                ORDER  BY ED.RowOrder
------            END
------    END 
------GO
------Merging 9.0

/****** Object:  StoredProcedure [dbo].[sp_getLockAddition]    Script Date: 09/02/2009 11:57:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_getLockAddition]
       @month1 INT ,
       @month2 INT ,
       @year1 INT ,
       @year2 INT ,
       @emp_code INT ,
       @compid INT
AS 
       IF @emp_code = -1 
          BEGIN   

                SELECT  ISNULL(COUNT(ead.trx_id), 0)
                FROM    (SELECT EA.*
                         FROM   emp_additions EA
                         INNER JOIN Employee Em ON EA.Emp_Code = Em.Emp_Code
                         WHERE  Em.Company_ID = @compid
                        ) ead
                WHERE   ((MONTH(ead.trx_period) = @month1 AND
                          YEAR(ead.trx_period) = @year1
                         ) OR
                         (MONTH(ead.trx_period) = @month2 AND
                          YEAR(ead.trx_period) = @year2
                         )
                        ) AND
                        status = 'L'   
          END   
       ELSE 
          BEGIN   
                SELECT  ISNULL(COUNT(ead.trx_id), 0)
                FROM    (SELECT EA.*
                         FROM   emp_additions EA
                         INNER JOIN Employee Em ON EA.Emp_Code = Em.Emp_Code
                         WHERE  Em.Company_ID = @compid
                        ) ead
                WHERE   ead.emp_code = @emp_code AND
                        ((MONTH(ead.trx_period) = @month1 AND
                          YEAR(ead.trx_period) = @year1
                         ) OR
                         (MONTH(ead.trx_period) = @month2 AND
                          YEAR(ead.trx_period) = @year2
                         )
                        ) AND
                        status = 'L' 
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_new_payslip_emp]    Script Date: 09/02/2009 11:58:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_new_payslip_emp 133, 2010, 85    
CREATE PROC [dbo].[Sp_new_payslip_emp] --4,2009,1044                                                                
@month   INT,  
@year    INT,  
@empcode INT  
AS  
  DECLARE @startdtsub DATETIME  
  DECLARE @enddtsub DATETIME  
  DECLARE @monthname VARCHAR(20)  
  DECLARE @monthint AS INT  
  
  SELECT @monthint = [Month],@startdtsub = PaySubStartDate,@enddtsub = PaySubEndDate,@monthname = [MonthName]  
  FROM   PayrollMonthlyDetail  
  WHERE  ROWID = @month  
  
  DECLARE @compid INT  
  
  SELECT @compid = company_id  
  FROM   employee  
  WHERE  emp_code = @empcode  
  
  CREATE TABLE #EmpList  
      (  
           ID     INT IDENTITY,  
           empID  INT NULL,  
           trx_id INT NULL  
      )  
  
  INSERT INTO #EmpList  
  SELECT emp_id,trx_id  
  FROM   prepare_payroll_detail  
  WHERE  trx_id IN (SELECT trx_id  
                    FROM   prepare_payroll_hdr  
                    WHERE  --MONTH(start_period) = @month AND                  
                   --AND MONTH(ph.start_period) = Convert(Varchar,@startmonth)                             
                   (start_period >= @startdtsub  
                    AND end_period <= @enddtsub)  
                   AND YEAR(start_period) = @year)  
     AND status = 'G'  
  
  CREATE TABLE #Main  
      (  
           ID         INT NULL,  
           emp_id     INT NULL,  
           trx_id     INT NULL,  
           add_type   VARCHAR(500) NULL,  
           add_Amount FLOAT NULL,  
           add_CPF    VARCHAR(10) NULL,  
           ded_type   VARCHAR(500) NULL,  
           ded_Amount FLOAT NULL  
      )  
  
  --Ded_type varchar(500) NULL,Ded_Amount FLOAT NULL)                                                                
  WHILE EXISTS (SELECT TOP 1 ID  
                FROM   #EmpList)  
      BEGIN  
          DECLARE @rowID INT  
          DECLARE @empID INT  
          DECLARE @trxID INT  
          DECLARE @addCount INT  
          DECLARE @dedCount INT  
  
          SET @addCount = 2  
          SET @dedCount = 2  
  
          SELECT TOP 1 @rowID = ID,@empID = empID,@trxID = trx_id  
          FROM   #EmpList  
  
          SELECT @addCount = COUNT(*)  
          FROM   emp_additions  
          WHERE  --MONTH(trx_period) = @month AND                 
          (trx_period >= @startdtsub  
           AND trx_period <= @enddtsub)  
          AND YEAR(trx_period) = @year  
          AND emp_code = @empID  
  
          SELECT @dedCount = COUNT(*)  
          FROM   emp_deductions  
          WHERE  --MONTH(trx_period) = @month AND                  
          (trx_period >= @startdtsub  
           AND trx_period <= @enddtsub)  
          AND YEAR(trx_period) = @year  
          AND emp_code = @empID  
  
          IF @addCount > @dedCount  
              BEGIN  
                  DECLARE @countID INT  
  
                  SET @countID = 1  
  
                  WHILE @countID <= @addCount  
                      BEGIN  
                          INSERT INTO #Main  
                                      (ID,emp_id,trx_id)  
                          SELECT @countID,@empID,@trxID  
  
                          SET @countID = @countID + 1  
                      END  
  
                  CREATE TABLE #tempAddtions  
                      (  
                           ID         INT IDENTITY,  
                           add_type   VARCHAR(500) NULL,  
                           add_amount FLOAT NULL,  
                           add_cpf    VARCHAR(10) NULL,  
                           emp_code   INT NULL  
                      )  
  
                  INSERT INTO #tempAddtions  
                  SELECT (SELECT [desc]  
                          FROM   additions_types  
                          WHERE  id = ed.trx_type) 'add_type',trx_amount,(SELECT cpf  
                                                                          FROM   additions_types  
                                                                          WHERE  id = ed.trx_type) 'add_cpf',emp_code  
                  FROM   emp_additions ed  
                WHERE  ed.emp_code = @empID  
                     AND  
                     --MONTH(trx_period) = @month AND                  
                     (trx_period >= @startdtsub  
                      AND trx_period <= @enddtsub)  
                     AND YEAR(trx_period) = @year  
                     AND (ed.claimstatus = 'Approved'  
                           OR ed.claimstatus IS NULL)  
  
                  UPDATE #Main  
                  SET    add_type = t1.add_type,  
                         add_Amount = t1.add_amount,  
                         add_CPF = t1.add_cpf  
                  FROM   #Main Ma,  
                         #tempAddtions t1  
                  WHERE  Ma.ID = t1.ID  
                     AND Ma.emp_id = t1.emp_code  
  
                  DROP TABLE #tempAddtions  
  
                  CREATE TABLE #tempDeduction  
                      (  
                           ID         INT IDENTITY,  
                           ded_type   VARCHAR(500) NULL,  
                           ded_amount FLOAT NULL,  
                           emp_code   INT NULL  
                      )  
  
                  INSERT INTO #tempDeduction  
                  SELECT (SELECT [desc]  
                          FROM   deductions_types  
                          WHERE  id = ed.trx_type) 'ded_type',trx_amount,emp_code  
                  FROM   emp_deductions ed  
                  WHERE  ed.emp_code = @empID  
                     AND  
                     --MONTH(trx_period) = @month AND                  
                     (trx_period >= @startdtsub  
                      AND trx_period <= @enddtsub)  
                     AND YEAR(trx_period) = @year  
  
                  UPDATE #Main  
                  SET    ded_type = t1.ded_type,  
                         ded_Amount = t1.ded_amount  
                  FROM   #Main Ma,  
                         #tempDeduction t1  
                  WHERE  Ma.ID = t1.ID  
                     AND Ma.emp_id = t1.emp_code  
  
                  DROP TABLE #tempDeduction  
              END  
  
          IF @addCount < @dedCount  
              BEGIN  
                  DECLARE @countID1 INT  
  
                  SET @countID1 = 1  
  
                  WHILE @countID1 <= @dedCount  
                      BEGIN  
                          INSERT INTO #Main  
                                      (ID,emp_id,trx_id)  
                          SELECT @countID1,@empID,@trxID  
  
                          SET @countID1 = @countID1 + 1  
                      END  
  
                  CREATE TABLE #tempAddtions1  
                      (  
                           ID         INT IDENTITY,  
                           add_type   VARCHAR(500) NULL,  
                           add_amount FLOAT NULL,  
                           add_cpf    VARCHAR(10) NULL,  
                           emp_code   INT NULL  
                      )  
  
                  INSERT INTO #tempAddtions1  
                  SELECT (SELECT [desc]  
                          FROM   additions_types  
                          WHERE  id = ed.trx_type) 'add_type',trx_amount,(SELECT cpf  
                                                                          FROM   additions_types  
                                                                          WHERE  id = ed.trx_type) 'add_cpf',emp_code  
                  FROM   emp_additions ed  
                  WHERE  ed.emp_code = @empID  
                     AND  
                     --MONTH(trx_period) = @month AND                  
                     (trx_period >= @startdtsub  
                      AND trx_period <= @enddtsub)  
                     AND YEAR(trx_period) = @year  
                     AND (ed.claimstatus = 'Approved'  
                           OR ed.claimstatus IS NULL)  
  
                  UPDATE #Main  
                  SET    add_type = t1.add_type,  
                         add_Amount = t1.add_amount,  
                         add_CPF = t1.add_cpf  
                  FROM   #Main Ma,  
                 #tempAddtions1 t1  
                  WHERE  Ma.ID = t1.ID  
                     AND Ma.emp_id = t1.emp_code  
  
                  DROP TABLE #tempAddtions1  
  
                  CREATE TABLE #tempDeduction1  
                      (  
                           ID         INT IDENTITY,  
                           ded_type   VARCHAR(500) NULL,  
                           ded_amount FLOAT NULL,  
                           emp_code   INT NULL  
                      )  
  
                  INSERT INTO #tempDeduction1  
                  SELECT (SELECT [desc]  
                          FROM   deductions_types  
                          WHERE  id = ed.trx_type) 'ded_type',trx_amount,emp_code  
                  FROM   emp_deductions ed  
                  WHERE  ed.emp_code = @empID  
                     AND  
                     --MONTH(trx_period) = @month AND                  
                     (trx_period >= @startdtsub  
                      AND trx_period <= @enddtsub)  
                     AND YEAR(trx_period) = @year  
  
                  UPDATE #Main  
                  SET    ded_type = t1.ded_type,  
                         ded_Amount = t1.ded_amount  
                  FROM   #Main Ma,  
                         #tempDeduction1 t1  
                  WHERE  Ma.ID = t1.ID  
                     AND Ma.emp_id = t1.emp_code  
  
                  DROP TABLE #tempDeduction1  
              END  
  
          IF (@addCount = @dedCount)  
             AND (@addCount <> 0  
                  AND @dedCount <> 0)  
              BEGIN  
                  DECLARE @countID2 INT  
  
                  SET @countID2 = 1  
  
                  WHILE @countID2 <= @addCount  
                      BEGIN  
                          INSERT INTO #Main  
                                      (ID,emp_id,trx_id)  
                          SELECT @countID2,@empID,@trxID  
  
                          SET @countID2 = @countID2 + 1  
                      END  
  
                  CREATE TABLE #tempAddtions2  
                      (  
                           ID         INT IDENTITY,  
                           add_type   VARCHAR(500) NULL,  
                           add_amount FLOAT NULL,  
                           add_cpf    VARCHAR(10) NULL,  
                           emp_code   INT NULL  
                      )  
  
                  INSERT INTO #tempAddtions2  
                  SELECT (SELECT [desc]  
                          FROM   additions_types  
                          WHERE  id = ed.trx_type) 'add_type',trx_amount,(SELECT cpf  
                                                                          FROM   additions_types  
                                                                          WHERE  id = ed.trx_type) 'add_cpf',emp_code  
                  FROM   emp_additions ed  
                  WHERE  ed.emp_code = @empID  
                     AND  
                     --MONTH(trx_period) = @month AND                  
                     (trx_period >= @startdtsub  
                      AND trx_period <= @enddtsub)  
                     AND YEAR(trx_period) = @year  
                     AND (ed.claimstatus = 'Approved'  
                           OR ed.claimstatus IS NULL)  
  
                  UPDATE #Main  
                  SET    add_type = t1.add_type,  
                         add_Amount = t1.add_amount,  
                         add_CPF = t1.add_cpf  
                  FROM   #Main Ma,  
                         #tempAddtions2 t1  
                  WHERE  Ma.ID = t1.ID  
                     AND Ma.emp_id = t1.emp_code  
  
                  DROP TABLE #tempAddtions2  
  
                  CREATE TABLE #tempDeduction2  
                      (  
                           ID         INT IDENTITY,  
                           ded_type   VARCHAR(500) NULL,  
                           ded_amount FLOAT NULL,  
                           emp_code   INT NULL  
                      )  
  
                  INSERT INTO #tempDeduction2  
                  SELECT (SELECT [desc]  
                          FROM   deductions_types  
                          WHERE  id = ed.trx_type) 'ded_type',trx_amount,emp_code  
                  FROM   emp_deductions ed  
                  WHERE  ed.emp_code = @empID  
                     AND  
                     --MONTH(trx_period) = @month AND                  
                     (trx_period >= @startdtsub  
                      AND trx_period <= @enddtsub)  
                     AND YEAR(trx_period) = @year  
  
                  UPDATE #Main  
                  SET    ded_type = t1.ded_type,  
                         ded_Amount = t1.ded_amount  
                  FROM   #Main Ma,  
                         #tempDeduction2 t1  
                  WHERE  Ma.ID = t1.ID  
                     AND Ma.emp_id = t1.emp_code  
  
                  DROP TABLE #tempDeduction2  
              END  
  
          IF @addCount = 0  
             AND @dedCount = 0  
              BEGIN  
                  INSERT INTO #Main  
                              (ID,emp_id,trx_id)  
                  SELECT 1,@empID,@trxID  
              END  
  
          DELETE FROM #EmpList  
          WHERE  ID = @rowID  
      END -- Main While Loop Ends                                                                 
  
  ALTER TABLE #Main ADD compname VARCHAR(100) NULL, compaddress1 VARCHAR(200) NULL, compaddress2 VARCHAR(200) NULL, postalcode VARCHAR(20) NULL, phone VARCHAR(20) NULL, fax VARCHAR(20) NULL, state VARCHAR(100) NULL, country VARCHAR(100) NULL, MONTH VARCHAR(10) NULL, YEAR VARCHAR(10) NULL, emp_name VARCHAR(100) NULL, fund_type VARCHAR(10) NULL, fund_amount FLOAT NULL, total_deductions FLOAT NULL, total_additions FLOAT NULL, netpay VARBINARY(128) NULL, ot1_e FLOAT NULL, ot2_e FLOAT NULL, ic_pp_number VARCHAR(50) NULL, ot FLOAT NULL, employeecpf FLOAT NULL, employercpf FLOAT, basic_pay VARBINARY(128) NULL, Gross FLOAT NULL, cpfNet FLOAT NULL, unpaid_leaves FLOAT NULL, unpaid_leaves_amount FLOAT NULL, company_roc VARCHAR(100) NULL, emp_addr1 VARCHAR(500) NULL
, emp_addr2 VARCHAR(500) NULL, emp_postal_code VARCHAR(100) NULL, emp_country VARCHAR(200) NULL, timecardno VARCHAR(50) NULL, block_no VARCHAR(50) NULL, street_name VARCHAR(100) NULL, unit_no VARCHAR(50) NULL, Level_no VARCHAR(50)  
  NULL, emp_type VARCHAR(50), cpf_entitlement VARCHAR(10), ot1_rate FLOAT NULL, ot2_rate FLOAT NULL, ot1hrs FLOAT NULL, ot2hrs FLOAT NULL, NHRate FLOAT NULL, NH_Wh FLOAT NULL, NH_E FLOAT NULL, Dept_ID Int  
  
  UPDATE #Main  
  SET    compname = (SELECT company_name  
                     FROM   company  
                     WHERE  company_id = @compid),  
         compaddress1 = (SELECT address  
                         FROM   company  
                         WHERE  company_id = @compid),  
         compaddress2 = (SELECT address2  
                         FROM   company  
                         WHERE  company_id = @compid),  
         postalcode = (SELECT postal_code  
                       FROM   company  
                       WHERE  company_id = @compid),  
         phone = (SELECT phone  
                  FROM   company  
                  WHERE  company_id = @compid),  
         fax = (SELECT fax  
                FROM   company  
                WHERE  company_id = @compid),  
         state = (SELECT state  
                  FROM   company  
                  WHERE  company_id = @compid),  
         company_roc = (SELECT company_roc  
                        FROM   company  
                        WHERE  company_id = @compid),  
         MONTH = @monthint,  
         YEAR = @year,  
         emp_name = emp.emp_name + ' ' + emp.emp_lname,  
         fund_type = pd.fund_type,  
         fund_amount = pd.fund_amount,  
         total_deductions = pd.total_deductions,  
         total_additions = pd.total_additions,  
         netpay = pd.netpay,  
         ot1_e = pd.ot1_e,  
         ot2_e = pd.ot2_e,  
         ot1_rate = pd.ot1rate,  
         ot2_rate = pd.ot2rate,  
         ic_pp_number = emp.ic_pp_number,  
         ot = pd.ot1_e + pd.ot2_e,  
         employeecpf = pd.empcpf,  
         employercpf = pd.employercpf,  
         basic_pay = pd.basic_pay,  
         Gross = pd.total_gross,  
         cpfNet = pd.cpfNet,  
         unpaid_leaves = pd.unpaid_leaves,  
         unpaid_leaves_amount = pd.unpaid_leaves_amount,  
         emp_addr1 = emp.address,  
         emp_addr2 = emp.localaddress2,  
         emp_postal_code = emp.postal_code,  
         block_no = emp.block_no,  
         street_name = emp.street_name,  
         unit_no = emp.unit_no,  
         Level_no = emp.Level_no,  
         emp_country = (SELECT Country  
                        FROM   Country  
                        WHERE  id = emp.country_id),  
         timecardno = emp.time_card_no,  
         emp_type = emp.emp_type,  
         cpf_entitlement = emp.cpf_entitlement,  
         ot1hrs = pd.ot1_wh,  
         ot2hrs = pd.ot2_wh,  
         NHRate = pd.NHRate,  
         NH_Wh = pd.NH_Wh,  
         NH_E = pd.NH_E,  
   Dept_ID = emp.Dept_ID  
  FROM   #Main Ma,  
         employee emp,  
         prepare_payroll_detail pd  
  WHERE  Ma.emp_id = emp.emp_code  
     AND Ma.emp_id = pd.emp_id  
     AND pd.status = 'G'  
     AND Ma.trx_id = pd.trx_id  
  
  SELECT MONTH,YEAR,emp_id 'EMP_CODE',EMP_NAME,FUND_TYPE,FUND_AMOUNT,TOTAL_DEDUCTIONS,TOTAL_ADDITIONS,CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay,ot1_e,ot2_e,ic_pp_number,ot,ot1_rate,ot2_rate,CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,Gross,(SELECT CONVERT(VARCHAR(15), trx_date, 103)  
                                                                                                                                                                                                                                                               
                                                                                                                    FROM   prepare_payroll_hdr  
                                                                                                                                                                                                                                                               
                                                                                                                    WHERE  trx_id IN (SELECT trx_id  
                                                                                                                                                                                                                                                               
                                                                                                                                      FROM   prepare_payroll_detail  
                                                                                                                                                                                                                                                               
                                                                                                                                      WHERE  emp_id = Ma.emp_id  
                                                                                                                                                                                                                                                               
                                                                                                                                         AND status = 'G')  
                                      AND  
                                                                                                                                                                                                                                                               
                                                                                                                       --MONTH(start_period) = @month AND                  
                                                                                                                                                                                                                                                               
                                                                                                                       (start_period >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                        AND end_period <= @enddtsub)  
                                                                                                                                                                                                                                                               
                                                                                                                       AND YEAR(start_period) = @year) 'paydate',add_Amount 'ADDAMT',add_type 'ADDITIONS',ded_type 'DEDUCTAMT',ded_Amount 'DEDUCTIONS',(SELECT 
SUM(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))))  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                        FROM   
prepare_payroll_detail x,prepare_payroll_hdr y  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                        WHERE  
x.trx_id = y.trx_id  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                           AND 
x.emp_id = Ma.emp_id  
                AND YEAR(y.start_period) = @year  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                           AND 
MONTH(y.start_period) <= @monthint  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                           AND 
status = 'G') 'ytdgross',(SELECT SUM(employerCPF)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                          FROM   prepare_payroll_detail m,prepare_payroll_hdr n  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                          WHERE  m.trx_id = n.trx_id  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                             AND m.emp_id = Ma.emp_id  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                             AND YEAR(n.start_period) = @year  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                             AND  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                       --(n.start_period >= @startdtsub And n.start_period <= @enddtsub) And        
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                             MONTH(n.start_period) <= @monthint  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                             AND status = 'G') 'ytdcpf',employeecpf,employercpf,COMPNAME,compaddress1,compaddress2,postalcode,phone,fax,state,country,company_roc,add_CPF 'ADDITION_CPF',cpfNet,unpaid_leaves,unpaid_leaves_amount,emp_addr1,emp_addr2,emp_postal_code,emp_country,timecardno,block_no,street_name,unit_no,Level_no,emp_type,cpf_entitlement,ot1hrs,ot2hrs,Upper(@monthname) [MONTHNAME],NHRate,NH_Wh,NH_E,(dbo.Converttominutes(NH_Wh)) NHMin,(NHRate / 60) NHRateMin,(  
         dbo.Converttominutes(ot1hrs)) OT1Min,(OT1_Rate / 60) OT1_RateMin,(dbo.Converttominutes(OT2Hrs)) OT2Min,(OT2_Rate / 60) OT2_RateMin,NHText=CASE  
                WHEN NH_Wh != 0 THEN '(' + CAST(NH_Wh AS VARCHAR) + ' is Normal Hours Worked and ' + CAST(NHRate AS VARCHAR) + ' is Normal Hourly Rate)'  
                ELSE NULL  
                END,OT1Text=CASE  
                              WHEN ot1hrs != 0 THEN '(' + CAST(ot1hrs AS VARCHAR) + ' is OT1 Hours Worked and ' + CAST(ot1_rate AS VARCHAR) + ' is OT1 Hourly Rate)'  
                              ELSE NULL  
                            END,OT2Text=CASE  
                                          WHEN ot2hrs != 0 THEN '(' + CAST(ot2hrs AS VARCHAR) + ' is OT2 Hours Worked and ' + CAST(ot2_rate AS VARCHAR) + ' is OT2 Hourly Rate)'  
                                          ELSE NULL  
                                        END,(SELECT Remarks  
                                             FROM   empPayslipRemarks  
                                             WHERE  emp_code = @empcode  
                                                AND Rowid = @month) Remarks, ([FileName]) 'FileName'
  FROM   #Main Ma  
  Left Outer Join Department D On Ma.Dept_ID = D.ID  
  WHERE  Ma.emp_id = @empcode   

GO

/****** Object:  StoredProcedure [dbo].[sp_new_payslip_all2]    Script Date: 09/02/2009 11:58:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[sp_new_payslip_all2] 4,2009,17                                        
CREATE PROC [dbo].[sp_new_payslip_all2]  
 @month INT ,            
 @year INT ,            
 @compid INT,
 @empcode INT            
AS             
 DECLARE @startdtsub DATETIME                                                                                                                          
 DECLARE @enddtsub DATETIME                                                                                                                          
 DECLARE @monthname varchar(20)            
 DECLARE @monthint AS INT      
      
 Select @monthint=[Month],@startdtsub=PaySubStartDate,@enddtsub=PaySubEndDate,@monthname=[MonthName] From  PayrollMonthlyDetail Where ROWID=@month              
          
       CREATE TABLE #EmpList            
              (            
               ID INT IDENTITY ,            
               empID INT NULL ,            
               trx_id INT NULL            
              )                                                    
       INSERT   INTO #EmpList            
                SELECT  emp_id, trx_id            
                FROM    prepare_payroll_detail            
                WHERE   trx_id IN (SELECT   trx_id            
                                   FROM     prepare_payroll_hdr            
                                   WHERE    --MONTH(start_period) = @month AND            
           (start_period >= @startdtsub And end_period <= @enddtsub) And          
                                            YEAR(start_period) = @year) AND            
                        status = 'G' AND            
                        emp_id IN (SELECT   emp_code            
                                   FROM     employee            
                                   WHERE    company_id = @compid)                                                    

		IF (@empcode != 0)
		BEGIN
			Delete From #EmpList Where empID != @empcode
		END  
                                                    
       CREATE TABLE #Main            
              (            
               ID INT NULL ,            
               emp_id INT NULL ,            
               trx_id INT NULL ,            
               add_type VARCHAR(500) NULL ,            
               add_Amount FLOAT NULL ,            
               add_CPF VARCHAR(10) NULL ,            
               ded_type VARCHAR(500) NULL ,            
               ded_Amount FLOAT NULL            
              )                                                    
--Ded_type varchar(500) NULL,Ded_Amount FLOAT NULL)                                                    
                                                    
       WHILE EXISTS ( SELECT TOP 1            
                                ID            
                      FROM      #EmpList )             
             BEGIN                                                    
                   DECLARE @rowID INT                                                    
                   DECLARE @empID INT                                                    
                   DECLARE @trxID INT                                                     
                   DECLARE @addCount INT                                                    
                   DECLARE @dedCount INT                                                    
                   SET @addCount = 2                                                    
                   SET @dedCount = 2                                                      
                   SELECT TOP 1            
                            @rowID = ID, @empID = empID, @trxID = trx_id            
                   FROM     #EmpList                                                     
                   SELECT   @addCount = COUNT(*)            
                   FROM     emp_additions            
                   WHERE    --MONTH(trx_period) = @month AND            
       (trx_period >= @startdtsub And trx_period <= @enddtsub) And            
                            YEAR(trx_period) = @year AND            
                            emp_code = @empID   
                   SELECT   @dedCount = COUNT(*)            
                   FROM     emp_deductions            
                   WHERE    --MONTH(trx_period) = @month AND          
       (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
                            YEAR(trx_period) = @year AND            
                            emp_code = @empID                                                    
        IF @addCount > @dedCount             
                      BEGIN                                                    
                            DECLARE @countID INT                                                    
                            SET @countID = 1                                                    
                            WHILE @countID <= @addCount             
                                  BEGIN                                                    
                                        INSERT  INTO #Main (ID, emp_id, trx_id)            
                                                SELECT  @countID, @empID, @trxID                                                      
                                        SET @countID = @countID + 1                                                        
                                  END                                
                            CREATE TABLE #tempAddtions            
                                   (            
                                    ID INT IDENTITY ,            
                                    add_type VARCHAR(500) NULL ,            
                                    add_amount FLOAT NULL ,            
                                    add_cpf VARCHAR(10) NULL ,            
                                    emp_code INT NULL            
                                   )                                                      
                            INSERT  INTO #tempAddtions            
                                    SELECT  (SELECT [desc] FROM additions_types WHERE id = ed.trx_type            
                                            ) 'add_type', trx_amount,            
                                            (SELECT cpf FROM additions_types WHERE id = ed.trx_type            
                                            ) 'add_cpf', emp_code            
                                    FROM    emp_additions ed            
                                    WHERE   ed.emp_code = @empID AND            
                                            --MONTH(trx_period) = @month AND            
           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
                                            YEAR(trx_period) = @year AND            
                                            (ed.claimstatus = 'Approved' OR            
                                             ed.claimstatus IS NULL            
                                            )                                                    
                            UPDATE  #Main            
                            SET     add_type = t1.add_type, add_Amount = t1.add_amount, add_CPF = t1.add_cpf            
                            FROM    #Main Ma ,            
                                    #tempAddtions t1            
                            WHERE   Ma.ID = t1.ID AND            
                                    Ma.emp_id = t1.emp_code                                                    
                            DROP TABLE #tempAddtions                   
                            CREATE TABLE #tempDeduction            
                                   (            
                                    ID INT IDENTITY ,            
                                    ded_type VARCHAR(500) NULL ,            
                                    ded_amount FLOAT NULL ,            
                                    emp_code INT NULL            
                                   )                   
                            INSERT  INTO #tempDeduction            
                                    SELECT  (SELECT [desc] FROM deductions_types WHERE id = ed.trx_type            
                                     ) 'ded_type', trx_amount, emp_code            
                                    FROM    emp_deductions ed            
                         WHERE   ed.emp_code = @empID AND            
                                            --MONTH(trx_period) = @month AND            
           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
                                            YEAR(trx_period) = @year                                                    
              UPDATE  #Main            
                            SET     ded_type = t1.ded_type, ded_Amount = t1.ded_amount            
                            FROM    #Main Ma ,            
                                    #tempDeduction t1            
                            WHERE   Ma.ID = t1.ID AND            
                                    Ma.emp_id = t1.emp_code                                                    
                            DROP TABLE #tempDeduction                                                    
                      END                                                    
                   IF @addCount < @dedCount             
                      BEGIN                                                    
                            DECLARE @countID1 INT                                                    
                            SET @countID1 = 1                                              
                            WHILE @countID1 <= @dedCount             
                                  BEGIN                                                    
                                        INSERT  INTO #Main (ID, emp_id, trx_id)            
                                                SELECT  @countID1, @empID, @trxID                                                  
                                        SET @countID1 = @countID1 + 1                                                       
                                  END                                                    
                            CREATE TABLE #tempAddtions1            
                                   (            
                                    ID INT IDENTITY ,            
                                    add_type VARCHAR(500) NULL ,            
                                    add_amount FLOAT NULL ,            
                                    add_cpf VARCHAR(10) NULL ,            
                                    emp_code INT NULL            
                                   )                                                      
                            INSERT  INTO #tempAddtions1            
                                    SELECT  (SELECT [desc] FROM additions_types WHERE id = ed.trx_type            
                                            ) 'add_type', trx_amount,            
                                            (SELECT cpf FROM additions_types WHERE id = ed.trx_type            
                                            ) 'add_cpf', emp_code            
                                    FROM    emp_additions ed            
                                    WHERE   ed.emp_code = @empID AND            
                                            --MONTH(trx_period) = @month AND            
           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
                                            YEAR(trx_period) = @year AND            
                                            (ed.claimstatus = 'Approved' OR            
                                             ed.claimstatus IS NULL            
                                            )                                                    
                            UPDATE  #Main            
       SET     add_type = t1.add_type, add_Amount = t1.add_amount, add_CPF = t1.add_cpf            
                            FROM    #Main Ma ,            
                                    #tempAddtions1 t1            
                            WHERE   Ma.ID = t1.ID AND            
                       Ma.emp_id = t1.emp_code                                                    
                            DROP TABLE #tempAddtions1                                                    
                            CREATE TABLE #tempDeduction1            
                                   (            
                                    ID INT IDENTITY ,            
                                    ded_type VARCHAR(500) NULL ,            
                                    ded_amount FLOAT NULL ,            
                                    emp_code INT NULL            
                                   )                                                      
                            INSERT  INTO #tempDeduction1            
                                    SELECT  (SELECT [desc] FROM deductions_types WHERE id = ed.trx_type            
                                            ) 'ded_type', trx_amount, emp_code            
                                    FROM    emp_deductions ed            
                                WHERE   ed.emp_code = @empID AND            
                                            --MONTH(trx_period) = @month AND            
           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
                                            YEAR(trx_period) = @year                                                    
                            UPDATE  #Main            
                            SET     ded_type = t1.ded_type, ded_Amount = t1.ded_amount            
                            FROM    #Main Ma ,            
                                    #tempDeduction1 t1            
                            WHERE   Ma.ID = t1.ID AND            
                                    Ma.emp_id = t1.emp_code                                                    
                            DROP TABLE #tempDeduction1                                                    
                      END                                                    
                   IF (@addCount = @dedCount) AND            
                      (@addCount <> 0 AND            
                       @dedCount <> 0            
                      )             
                      BEGIN                                                    
                            DECLARE @countID2 INT                                                    
      SET @countID2 = 1                                                    
                            WHILE @countID2 <= @addCount             
                                  BEGIN                                                    
                                        INSERT  INTO #Main (ID, emp_id, trx_id)            
                                                SELECT  @countID2, @empID, @trxID                                                     
                                        SET @countID2 = @countID2 + 1                                                       
                                  END                     
                            CREATE TABLE #tempAddtions2            
                                   (            
                                    ID INT IDENTITY ,            
                                    add_type VARCHAR(500) NULL ,            
                                    add_amount FLOAT NULL ,            
                                    add_cpf VARCHAR(10) NULL ,            
                                    emp_code INT NULL            
                                   )                     
                            INSERT  INTO #tempAddtions2            
                                    SELECT  (SELECT [desc] FROM additions_types WHERE id = ed.trx_type            
                                            ) 'add_type', trx_amount,            
                                            (SELECT cpf FROM additions_types WHERE id = ed.trx_type            
                                            ) 'add_cpf', emp_code            
                                    FROM    emp_additions ed            
                            WHERE   ed.emp_code = @empID AND            
                                            --MONTH(trx_period) = @month AND            
           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
                                            YEAR(trx_period) = @year AND            
(ed.claimstatus = 'Approved' OR            
                                             ed.claimstatus IS NULL            
                                            )                                                    
                            UPDATE  #Main            
                            SET     add_type = t1.add_type, add_Amount = t1.add_amount, add_CPF = t1.add_cpf            
                            FROM    #Main Ma ,            
                                    #tempAddtions2 t1            
                            WHERE   Ma.ID = t1.ID AND            
                           Ma.emp_id = t1.emp_code                                                    
                            DROP TABLE #tempAddtions2                                                    
                            CREATE TABLE #tempDeduction2            
                                   (            
                                    ID INT IDENTITY ,            
     ded_type VARCHAR(500) NULL ,            
                                    ded_amount FLOAT NULL ,            
                                    emp_code INT NULL            
                                   )                                                      
                            INSERT  INTO #tempDeduction2            
                                    SELECT  (SELECT [desc] FROM deductions_types WHERE id = ed.trx_type            
                                            ) 'ded_type', trx_amount, emp_code            
                                    FROM    emp_deductions ed            
                                    WHERE   ed.emp_code = @empID AND            
                                            --MONTH(trx_period) = @month AND            
           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
                                            YEAR(trx_period) = @year                                           
                            UPDATE  #Main            
                            SET     ded_type = t1.ded_type, ded_Amount = t1.ded_amount            
                            FROM    #Main Ma ,            
                                    #tempDeduction2 t1            
                            WHERE   Ma.ID = t1.ID AND            
                                    Ma.emp_id = t1.emp_code                                       
                            DROP TABLE #tempDeduction2                                                    
                      END                                                    
                   IF @addCount = 0 AND            
       @dedCount = 0             
                      BEGIN                                                    
                            INSERT  INTO #Main (ID, emp_id, trx_id)            
                                    SELECT  1, @empID, @trxID                                                        
                      END                                                    
                   DELETE   FROM #EmpList            
                   WHERE    ID = @rowID                                                     
             END -- Main While Loop Ends                                                     
                                                    
     ALTER TABLE #Main ADD compname VARCHAR(100) NULL,compaddress1 VARCHAR(200) NULL,compaddress2 VARCHAR(200) NULL,                                                   
       postalcode VARCHAR(20) NULL,phone VARCHAR(20) NULL,fax VARCHAR(20) NULL,state VARCHAR(100) NULL,country VARCHAR(100) NULL,                                                    
       MONTH VARCHAR(10) NULL,YEAR VARCHAR(10) NULL,emp_name VARCHAR(100) NULL, fund_type VARCHAR(10) NULL,fund_amount FLOAT NULL,                                                  
       total_deductions FLOAT NULL,total_additions FLOAT NULL,netpay VARBINARY(128) NULL,ot1_e FLOAT NULL,ot2_e FLOAT NULL,ic_pp_number VARCHAR(50) NULL,                                                    
       ot FLOAT NULL,employeecpf FLOAT NULL,employercpf FLOAT,basic_pay VARBINARY(128) NULL,Gross FLOAT NULL,cpfNet FLOAT NULL,                
       unpaid_leaves FLOAT NULL, unpaid_leaves_amount FLOAT NULL, company_roc VARCHAR(100) NULL,                                       
       emp_addr1 VARCHAR(500) NULL, emp_addr2 VARCHAR(500) NULL, emp_postal_code VARCHAR(100) NULL,block_no VARCHAR(50) NULL,street_name VARCHAR(100) NULL,unit_no VARCHAR(50) NULL,Level_no  VARCHAR(50) NULL                                                
  
   
       , emp_country VARCHAR(200) NULL,timecardno VARCHAR(50) NULL,emp_type VARCHAR(50),cpf_entitlement VARCHAR(10),                
       ot1_rate FLOAT NULL,ot2_rate FLOAT NULL,ot1hrs FLOAT NULL,ot2hrs FLOAT NULL ,NHRate  FLOAT NULL,NH_Wh  FLOAT NULL,NH_E  FLOAT NULL, Dept_ID Int, DHRate  FLOAT NULL,DH_E  FLOAT NULL, WDays  FLOAT NULL  
                                                    
                                                    
                                                    
                                                    
       UPDATE   #Main            
       SET      compname = (SELECT company_name FROM company WHERE company_id= @compid            
                           ), compaddress1 = (SELECT address FROM company WHERE company_id= @compid            
                                      ), compaddress2 = (SELECT address2 FROM company WHERE company_id= @compid            
                                                               ),            
                postalcode = (SELECT postal_code FROM company WHERE company_id= @compid            
                             ), phone = (SELECT phone FROM company WHERE company_id= @compid            
                                        ), fax = (SELECT fax FROM company WHERE company_id= @compid            
                                                 ), state = (SELECT state FROM company WHERE company_id= @compid            
                                                            ),            
                company_roc = (SELECT company_roc FROM company WHERE company_id= @compid            
                              ), MONTH = @monthint, YEAR = @year, emp_name = emp.emp_name + ' ' + emp.emp_lname,            
                fund_type = pd.fund_type, fund_amount = pd.fund_amount, total_deductions = pd.total_deductions,            
                total_additions = pd.total_additions, netpay = pd.netpay, ot1_e = pd.ot1_e, ot2_e = pd.ot2_e,            
                ot1_rate = pd.ot1rate, ot2_rate = pd.ot2rate, ic_pp_number = emp.ic_pp_number, ot = pd.ot1_e + pd.ot2_e,            
                employeecpf = pd.empcpf, employercpf = pd.employercpf, basic_pay = pd.basic_pay, Gross = pd.total_gross,            
                cpfNet = pd.cpfNet, unpaid_leaves = pd.unpaid_leaves, unpaid_leaves_amount = pd.unpaid_leaves_amount,            
                emp_addr1 = emp.address, emp_addr2 = emp.localaddress2, block_no = emp.block_no,            
              street_name = emp.street_name, unit_no = emp.unit_no, Level_no = emp.Level_no,            
                emp_postal_code = emp.postal_code, emp_country = (SELECT Country FROM Country WHERE id = emp.country_id            
                                         ), timecardno = emp.time_card_no,            
                emp_type = emp.emp_type, cpf_entitlement = emp.cpf_entitlement, ot1hrs = pd.ot1_wh, ot2hrs = pd.ot2_wh, NHRate = pd.NHRate, NH_Wh = pd.NH_Wh, NH_E = pd.NH_E,Dept_ID = emp.Dept_ID, DHRate=pd.DHRate, DH_e = pd.DH_e, Wdays=pd.Wdays  
       FROM     #Main Ma ,            
                employee emp ,            
                prepare_payroll_detail pd            
       WHERE    Ma.emp_id = emp.emp_code AND            
                Ma.emp_id = pd.emp_id AND            
                pd.status = 'G' AND            
                Ma.trx_id = pd.trx_id                                                    
                                                    
       SELECT   MONTH, YEAR, emp_id 'EMP_CODE', EMP_NAME, FUND_TYPE, FUND_AMOUNT, TOTAL_DEDUCTIONS, TOTAL_ADDITIONS,            
                CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay))) AS netpay,            
                ot1_e, ot2_e, ic_pp_number, ot, ot1_rate, ot2_rate,            
                CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay))) AS basic_pay,            
                Gross, (SELECT  CONVERT(VARCHAR(15), trx_date, 103)            
                        FROM    prepare_payroll_hdr            
                        WHERE   trx_id IN (SELECT   trx_id            
                                           FROM     prepare_payroll_detail            
                                           WHERE    emp_id = Ma.emp_id AND            
                                                    status = 'G') AND            
                                --MONTH(start_period) = @month AND            
        (start_period >= @startdtsub And end_period <= @enddtsub) And                                    YEAR(start_period) = @year            
                       ) 'paydate', add_Amount 'ADDAMT', add_type 'ADDITIONS', ded_type 'DEDUCTAMT',            
                ded_Amount 'DEDUCTIONS',            
                (SELECT SUM(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay))))            
                 FROM   prepare_payroll_detail x ,            
                        prepare_payroll_hdr y            
                 WHERE  x.trx_id = y.trx_id AND            
                        x.emp_id = Ma.emp_id AND            
                        YEAR(y.start_period) = @year AND            
                        MONTH(y.start_period) <= @monthint AND            
                        status = 'G'            
                ) 'ytdgross', (SELECT   SUM(employerCPF)            
                               FROM     prepare_payroll_detail m ,            
                                        prepare_payroll_hdr n            
                               WHERE    m.trx_id = n.trx_id AND            
                                        m.emp_id = Ma.emp_id AND            
          --(n.start_period >= @startdtsub And n.end_period <= @enddtsub) And          
                                        YEAR(n.start_period) = @year AND            
                                        MONTH(n.start_period) <= @monthint AND            
                                        status = 'G'            
                              ) 'ytdcpf', employeecpf, employercpf, COMPNAME, compaddress1, compaddress2, postalcode,            
                phone, fax, state, country, company_roc, add_CPF 'ADDITION_CPF', cpfNet, unpaid_leaves,            
                unpaid_leaves_amount, emp_addr1, emp_addr2, emp_postal_code, emp_country, timecardno, block_no,            
                street_name, unit_no, Level_no, emp_type, cpf_entitlement, ot1hrs, ot2hrs, Upper(@monthname) [MonthName]        
    , NHRate, NH_Wh, NH_E        
    , (dbo.ConvertToMinutes(NH_Wh)) NHMin, (NHRate/60) NHRateMin        
    , (dbo.ConvertToMinutes(ot1hrs)) OT1Min, (OT1_Rate/60) OT1_RateMin        
    , (dbo.ConvertToMinutes(OT2Hrs)) OT2Min, (OT2_Rate/60) OT2_RateMin ,      
 NHText=Case When  NH_Wh > 0 Then '(' + Cast(NH_Wh as varchar) + ' is Normal Hours Worked and ' + Cast(NHRate as varchar) + ' is Normal Hourly Rate)'  Else null End,          
 OT1Text=Case When ot1hrs > 0 Then '(' +Cast(ot1hrs as varchar) + ' is OT1 Hours Worked and ' + Cast(ot1_rate as varchar) + ' is OT1 Hourly Rate)' Else null End,          
 OT2Text=Case When ot2hrs > 0 Then '(' +Cast(ot2hrs as varchar) + ' is OT2 Hours Worked and ' + Cast(ot2_rate as varchar) + ' is OT2 Hourly Rate)' Else null End,      
 (select Remarks from empPayslipRemarks where emp_code = Ma.emp_id and Rowid=@month) Remarks,[FileName] 'FileName' ,DHRate ,DH_E,WDays  
 FROM     #Main Ma       
  Left Outer Join Department D On Ma.Dept_ID = D.ID      
GO
/****** Object:  StoredProcedure [dbo].[sp_empadd_update]    Script Date: 09/02/2009 11:57:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		mythili
-- Create date:18-09-07
-- Description:	procedure to update the employee additions
-- =============================================
CREATE PROCEDURE [dbo].[sp_empadd_update]
       (
        @trx_id VARCHAR(10) ,
        @trx_type [varchar](50) ,
        @trx_period VARCHAR(25) ,
        @trx_amount [money] ,
        @basis_arriving_payment VARCHAR(100) ,
        @service_length VARCHAR(50) ,
        @iras_approval VARCHAR(3) ,
        @iras_approval_date VARCHAR(12)
       )
AS 
       BEGIN  
             DECLARE @trx_period1 DATETIME  

             SELECT @trx_period1 = CONVERT(DATETIME, @trx_period)  

             UPDATE [emp_additions]
             SET    [trx_type] = @trx_type, [trx_amount] = @trx_amount, basis_arriving_payment = @basis_arriving_payment,
                    service_length = CASE WHEN LEN(@service_length) > 0 THEN CAST(@service_length AS FLOAT)
                                          ELSE 0
                                     END, iras_approval = @iras_approval,
                    iras_approval_date = CASE WHEN LEN(@iras_approval_date) > 0
                                              THEN CONVERT(DATETIME, @iras_approval_date)
                                              ELSE NULL
                                         END
             WHERE  [trx_id] = @trx_id  
       END  

--select * from emp_additions
GO
/****** Object:  StoredProcedure [dbo].[sp_empclaim_update]    Script Date: 09/02/2009 11:57:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_empclaim_update]
       (
        @trx_id VARCHAR(10) ,
        @trx_type [varchar](50) ,
        @approver VARCHAR(50) ,
        @trx_period VARCHAR(25) ,
        @rec_path VARCHAR(250) ,
        @trx_amount [money]
       )
AS 
       BEGIN    
             DECLARE @trx_period1 DATETIME    
    
             SELECT @trx_period1 = CONVERT(DATETIME, @trx_period)    
    
             UPDATE [emp_additions]
             SET    [trx_type] = @trx_type, [trx_period] = @trx_period1, [approver] = @approver,
                    [trx_amount] = @trx_amount, recpath = @rec_path
             WHERE  [trx_id] = @trx_id    
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_email_claim]    Script Date: 09/02/2009 11:56:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_email_claim] --1966          
       @trx_id INT
AS 
       BEGIN          
          
             DECLARE @email VARCHAR(50)      
             SELECT @email = email
             FROM   employee
             WHERE  emp_code = (SELECT emp_code FROM emp_additions WHERE trx_id = @trx_id
                               )      
      
             SELECT a.emp_code, @email, --c.email,          
                    b.email_SMTP_server, b.email_username, b.email_password, claimstatus, b.email_sender_domain,
                    b.email_claim_sender_name, b.email_claim_reply_name, b.email_smtp_port, b.email, b.email_claimalert,
                    b.email_sender, DATENAME(month, trx_period) AS month, YEAR(trx_period) AS [year], b.ccalert_claims
             FROM   emp_additions a ,
                    employee c ,
                    company b
             WHERE  trx_id = @trx_id AND
                    a.emp_code = c.emp_code AND
                    c.company_id = b.company_id          
          
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_empadd_add]    Script Date: 09/02/2009 11:57:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_empadd_add]    
       (    
        @emp_code INT ,    
        @trx_type [varchar](50) ,    
        @trx_period1 VARCHAR(25) ,    
        @trx_period2 VARCHAR(25) ,    
        @trx_amount [money] ,    
        @basis_arriving_payment VARCHAR(100) ,    
        @service_length VARCHAR(50) ,    
        @iras_approval VARCHAR(3) ,    
        @iras_approval_date VARCHAR(12) ,    
        @additionsforyear VARCHAR(12) ,    
        @compid INT ,    
        @claimstatus VARCHAR(20)    
       )    
AS     
       BEGIN            
             DECLARE @trx_period3 DATETIME            
             DECLARE @trx_period4 DATETIME            
             DECLARE @month1 AS INT            
             DECLARE @month2 AS INT            
             DECLARE @year AS INT            
        
             SELECT @trx_period3 = CONVERT(DATETIME, @trx_period1), @trx_period4 = CONVERT(DATETIME, @trx_period2)            
             --SELECT @trx_period3 = DATEADD(dd, DATEPART(dd, @trx_period3) * -1 + 1, @trx_period3)            
             --SELECT @trx_period4 = DATEADD(dd, DATEPART(dd, @trx_period4) * -1 + 1, @trx_period4)            
             SELECT @month1 = DATEPART(yy, @trx_period1) * 100 + DATEPART(mm, @trx_period1)            
             SELECT @month2 = DATEPART(yy, @trx_period4) * 100 + DATEPART(mm, @trx_period4)            
             WHILE (@trx_period3 <= @trx_period4)     
                   BEGIN            
                         SELECT @trx_period3            
                         IF @emp_code = '-1'     
                            BEGIN            
                                  INSERT    INTO [emp_additions] ([emp_code], [trx_type], [trx_period], [trx_amount],    
                                                                  [basis_arriving_payment], [service_length],    
                                                                  [iras_approval], [iras_approval_date],    
                                                                  [additionsforyear], [claimstatus])    
                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount,    
                                                    @basis_arriving_payment,    
                                                    CASE WHEN LEN(@service_length) > 0    
                                                         THEN CAST(@service_length AS FLOAT)    
                                                         ELSE 0    
                                                    END, @iras_approval,    
                                                    CASE WHEN LEN(@iras_approval_date) > 0    
                                                         THEN CONVERT(DATETIME, @iras_approval_date)    
                                                         ELSE NULL    
                                                    END, @additionsforyear, @claimstatus    
                                            FROM    employee    
                                            WHERE   Company_ID = @compid        
                            END            
                         ELSE     
                            BEGIN            
                                  INSERT    INTO [emp_additions] ([emp_code], [trx_type], [trx_period], [trx_amount],    
                                                                  [basis_arriving_payment], [service_length],    
                                                                  [iras_approval], [iras_approval_date],    
                                                                  [additionsforyear], [claimstatus])    
                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount,    
                                                    @basis_arriving_payment,    
                                                    CASE WHEN LEN(@service_length) > 0    
                                                         THEN CAST(@service_length AS FLOAT)    
                                                      ELSE 0    
                                                    END, @iras_approval,    
                                                    CASE WHEN LEN(@iras_approval_date) > 0    
                                                         THEN CONVERT(DATETIME, @iras_approval_date)    
                                                         ELSE NULL    
                                                    END, @additionsforyear, @claimstatus    
                                            FROM    employee    
                                            WHERE   emp_code = @emp_code            
                            END            
                         SELECT @trx_period3 = DATEADD(mm, 1, @trx_period3)            
                   END                
       END 
GO
/****** Object:  StoredProcedure [dbo].[sp_empclaim_add]    Script Date: 09/02/2009 11:57:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[sp_empclaim_add]      
       (      
        @emp_code INT ,      
        @trx_type [varchar](50) ,      
        @trx_period1 VARCHAR(25) ,      
        @trx_period2 VARCHAR(25) ,      
        @trx_amount [money] ,      
        @path VARCHAR(500) ,      
        @approver VARCHAR(50) ,      
        @claimstatus VARCHAR(50) ,      
        @compid INT ,     
        @claimRemark VARCHAR(500)
       )      
AS       
       BEGIN              
             DECLARE @trx_period3 DATETIME              
             DECLARE @trx_period4 DATETIME              
             DECLARE @month1 AS INT              
             DECLARE @month2 AS INT              
             DECLARE @year AS INT              
              
             SELECT @trx_period3 = CONVERT(DATETIME, @trx_period1), @trx_period4 = CONVERT(DATETIME, @trx_period2)              
             --SELECT @trx_period3 = DATEADD(dd, DATEPART(dd, @trx_period3) * -1 + 1, @trx_period3)              
             --SELECT @trx_period4 = DATEADD(dd, DATEPART(dd, @trx_period4) * -1 + 1, @trx_period4)              
              
              
             SELECT @month1 = DATEPART(yy, @trx_period1) * 100 + DATEPART(mm, @trx_period1)              
             SELECT @month2 = DATEPART(yy, @trx_period4) * 100 + DATEPART(mm, @trx_period4)              
              
 --Select @month1, @month2, @year              
              
             WHILE (@trx_period3 <= @trx_period4)       
                   BEGIN              
                         SELECT @trx_period3              
                         IF @emp_code = '-1'       
                            BEGIN      
   --print '1'              
                                  INSERT    INTO [emp_additions] ([emp_code], [trx_type], [trx_period], [trx_amount],      
                                                                  [recpath], [approver], [claimstatus],[remarks])      
                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount, @path, @approver,      
                                                    @claimstatus ,@claimRemark     
                                            FROM    employee      
                                            WHERE   Company_ID = @compid             
                            END              
                         ELSE       
                            BEGIN              
   --print '2'              
                                  INSERT    INTO [emp_additions] ([emp_code], [trx_type], [trx_period], [trx_amount],      
                                                                  [recpath], [approver], [claimstatus],[remarks])      
                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount, @path, @approver,      
                                                    @claimstatus ,@claimRemark     
                                            FROM    employee      
                                            WHERE   emp_code = @emp_code              
                            END              
                         SELECT @trx_period3 = DATEADD(mm, 1, @trx_period3)              
                   END                  
       END   


GO
/****** Object:  StoredProcedure [dbo].[sp_emppay_deduc]    Script Date: 09/02/2009 11:57:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_emppay_deduc] (@empcode  INT,
											 @empmonth INT,
											 @empyear  VARCHAR(50))
	AS
		BEGIN
			IF (@empmonth <> 13)
				BEGIN
					SELECT e.[trx_id],a.id,a.[desc] TYPE,e.[trx_amount],CONVERT(VARCHAR(10), e.trx_period, 103) trx_period,e.[emp_code],b.emp_name + ' ' + b.emp_lname 'emp_name',CONVERT(VARCHAR(10), CONVERT(DATETIME, e.trx_period, 105), 103) trx_period_copy
					FROM   [emp_deductions] e,deductions_types a,employee b
					WHERE  e.[emp_code] = @empcode
					   AND e.trx_type = a.id
					   AND e.emp_code = b.emp_code
					   AND Datepart(mm, trx_period) = @empmonth
					   AND CONVERT(CHAR(4), Datepart(yyyy, trx_period)) = @empyear
					ORDER  BY b.emp_name
				END
			ELSE
				BEGIN
					SELECT e.[trx_id],a.id,a.[desc] TYPE,e.[trx_amount],CONVERT(VARCHAR(10), e.trx_period, 103) trx_period,e.[emp_code],b.emp_name + ' ' + b.emp_lname 'emp_name',CONVERT(VARCHAR(10), CONVERT(DATETIME, e.trx_period, 105), 103) trx_period_copy
					FROM   [emp_deductions] e,deductions_types a,employee b
					WHERE  e.[emp_code] = @empcode
					   AND e.trx_type = a.id
					   AND e.emp_code = b.emp_code
					   AND CONVERT(CHAR(4), Datepart(yyyy, trx_period)) = @empyear
					ORDER  BY b.emp_name
				END
		END 
GO
/****** Object:  StoredProcedure [dbo].[sp_payroll_detail_deduction]    Script Date: 09/02/2009 11:58:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_payroll_detail_deduction]
       @emp_code INT ,
       @month INT ,
       @year INT
AS 
       BEGIN
             SELECT isnull(a.emp_name,'')+' '+isnull(a.emp_lname,'') emp_name, b.trx_amount, b.trx_type, c.[desc]
             FROM   employee a ,
                    emp_deductions b ,
                    deductions_types c
             WHERE  b.emp_code = a.emp_code AND
                    b.trx_type = c.id AND
                    a.emp_code = @emp_code AND
                    DATEPART(yy, trx_period) = @year AND
                    DATEPART(mm, trx_period) = @month
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_empdeduc_add]    Script Date: 09/02/2009 11:57:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_empdeduc_add]        
       (        
        @emp_code INT ,        
        @trx_type [varchar](50) ,        
        @trx_period1 VARCHAR(25) ,        
        @trx_period2 VARCHAR(25) ,        
        @trx_amount [money] ,        
        @compid INT        
       )        
AS         
       BEGIN    
		DEclare @fundtype as int  
		Select @fundtype=Case  
				When [Desc] = 'CDAC -A' Then 1   
				When [Desc] = 'ECF  -A' Then 2   
				When [Desc] = 'MBMF -A' Then 3   
				When [Desc] = 'SINDA-A' Then 4   
				When [Desc] = 'CDAC -M' Then 5   
				When [Desc] = 'ECF  -M' Then 6   
				When [Desc] = 'MBMF -M' Then 7   
				When [Desc] = 'SINDA-M' Then 8 Else 0  
			END   
		From Deductions_Types Where ID = @trx_type  
  
  
          
             DECLARE @trx_period3 DATETIME            
             DECLARE @trx_period4 DATETIME            
             DECLARE @month1 AS INT            
             DECLARE @month2 AS INT            
             DECLARE @year AS INT            
            
             SELECT @trx_period3 = CONVERT(DATETIME, @trx_period1), @trx_period4 = CONVERT(DATETIME, @trx_period2)            
             --SELECT @trx_period3 = DATEADD(dd, DATEPART(dd, @trx_period3) * -1 + 1, @trx_period3)            
             --SELECT @trx_period4 = DATEADD(dd, DATEPART(dd, @trx_period4) * -1 + 1, @trx_period4)            
        
             SELECT @month1 = DATEPART(yy, @trx_period3) * 100 + DATEPART(mm, @trx_period3)            
             SELECT @month2 = DATEPART(yy, @trx_period4) * 100 + DATEPART(mm, @trx_period4)            
            
            
             WHILE (@trx_period3 <= @trx_period4)         
                   BEGIN            
                         SELECT @trx_period3            
                         IF @emp_code = '-1'         
                            BEGIN            
   --print '1'            
                                  INSERT    INTO [emp_deductions] ([emp_code], [trx_type], [trx_period], [trx_amount])        
                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount        
                                            FROM    employee        
                                            WHERE   Company_ID = @compid        
                            END            
                         ELSE         
                            BEGIN            
   --print '2'            
                                  INSERT    INTO [emp_deductions] ([emp_code], [trx_type], [trx_period], [trx_amount],FundType)        
                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount,@fundtype        
                                            FROM    employee        
                                            WHERE   emp_code = @emp_code AND        
                                                    Company_Id = @compid        
                            END            
                         SELECT @trx_period3 = DATEADD(mm, 1, @trx_period3)            
                   END                
       END 
GO
/****** Object:  StoredProcedure [dbo].[sp_getLockDeduction]    Script Date: 09/02/2009 11:57:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_getLockDeduction]
       @month1 INT ,
       @month2 INT ,
       @year1 INT ,
       @year2 INT ,
       @emp_code INT ,
       @compid INT
AS 
       IF @emp_code = -1 
          BEGIN   
                SELECT  ISNULL(COUNT(ead.trx_id), 0)
                FROM    (SELECT ED.*
                         FROM   emp_deductions ED
                         INNER JOIN Employee Em ON ED.Emp_Code = Em.Emp_Code
                         WHERE  Em.Company_ID = @compid
                        ) ead
                WHERE   ((MONTH(ead.trx_period) = @month1 AND
                          YEAR(ead.trx_period) = @year1
                         ) OR
                         (MONTH(ead.trx_period) = @month2 AND
                          YEAR(ead.trx_period) = @year2
                         )
                        ) AND
                        ead.[status] = 'L'   
          END   
       ELSE 
          BEGIN   
                SELECT  ISNULL(COUNT(ead.trx_id), 0)
                FROM    (SELECT ED.*
                         FROM   emp_deductions ED
                         INNER JOIN Employee Em ON ED.Emp_Code = Em.Emp_Code
                         WHERE  Em.Company_ID = @compid
                        ) ead
                WHERE   emp_code = @emp_code AND
                        ((MONTH(ead.trx_period) = @month1 AND
                          YEAR(ead.trx_period) = @year1
                         ) OR
                         (MONTH(ead.trx_period) = @month2 AND
                          YEAR(ead.trx_period) = @year2
                         )
                        ) AND
                        ead.[status] = 'L'  
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_empdeduc_update]    Script Date: 09/02/2009 11:57:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_empdeduc_update]  
       (  
        @trx_id [int] ,  
        @trx_type [varchar](50) ,  
        @trx_period VARCHAR(25) ,  
        @trx_amount [money]  
       )  
AS   
       BEGIN  
			DECLARE @trx_period1 DATETIME  
			DEclare @fundtype as int  
				Select @fundtype=Case
				When [Desc] = 'CDAC -A' Then 1
				When [Desc] = 'ECF  -A' Then 2
				When [Desc] = 'MBMF -A' Then 3
				When [Desc] = 'SINDA-A' Then 4
				When [Desc] = 'CDAC -M' Then 5
				When [Desc] = 'ECF  -M' Then 6
				When [Desc] = 'MBMF -M' Then 7
				When [Desc] = 'SINDA-M' Then 8 Else 0  
				END   
			From Deductions_Types Where ID = @trx_type  
  
             --SELECT @trx_period1 = CONVERT(DATETIME, @trx_period)
  
             UPDATE [emp_deductions]  
             SET    [trx_type] = @trx_type, [trx_amount] = @trx_amount, FundType = @fundtype 
             WHERE  [trx_id] = @trx_id  
       END  
GO
/****** Object:  StoredProcedure [dbo].[sp_empgroup_add]    Script Date: 09/02/2009 11:57:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_empgroup_add]
       (
        @EmpGroupName VARCHAR(50) ,
        @company_id INT
       )
AS 
       BEGIN  

             INSERT INTO [emp_group] ([EmpGroupName], [Company_id])
             VALUES (@EmpGroupName, @Company_id)

             DECLARE @groupID INT        
             SELECT @groupid = ISNULL(MAX(id), 0)
             FROM   emp_group
             WHERE  company_id = @company_id

             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 1, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 2, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 3, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 4, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 5, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 6, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 7, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 8, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 9, 0)
             INSERT INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)
             VALUES (@company_id, @groupID, 10, 0)

       END
GO
/****** Object:  StoredProcedure [dbo].[sp_passport_expiry]    Script Date: 09/02/2009 11:58:10 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[sp_passport_expiry] @compid INT
AS 
       SELECT   emp_code, isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name, passport, (SELECT nationality FROM nationality WHERE id= e.nationality_id
                                              ) 'nationality', CONVERT(VARCHAR(15), passport_expiry, 103) 'Exp Date'
       FROM     employee e ,
                nationality b
       WHERE    company_id = @compid
GO
/****** Object:  StoredProcedure [dbo].[sp_rpt_emp_get]    Script Date: 09/02/2009 11:58:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_rpt_emp_get] @company_id INT
AS 
       SELECT   emp_name + ' ' + emp_lname [Employee Name], emp_alias [Alias],
                (SELECT nationality FROM nationality WHERE nationality.id = e.nationality_id
                ) [Nationality], emp_type [Employee Type], ic_pp_number [Passport#],
                wp_exp_date [Work Permit Expiry Date], pr_date [PR Date], address [Address], country_id [Country],
                postal_code [Postal Code], phone [Phone], hand_phone [Hand Phone], email [Email],
                time_card_no [Time Card#], sex [Sex], religion_id [Religion], race_id [Race],
                marital_status [Marital Status], place_of_birth [Place of Birth], date_of_birth [Date of Birth],
                income_taxid [Income Tax ID]
      --,giro_bank  
      --,giro_code  
      --,giro_branch  
      --,giro_acct_number  
                , desig_id [Designation], dept_id [Department], joining_date [Joining Date],
                probation_period [Probation Period], confirmation_date [Confirmation Date],
                termination_date [Termination Date], cpf_entitlement [CPF Entitlement], emp_group_id [Employee Group],
                cpf_employer [CPF Employer], cpf_employee [CPF Employee]
      --,employee_cpf_acct  
      --,employer_cpf_acct  
                , emp_supervisor [Supervisor], ot_entitlement [OT Entitlement], payment_mode [Payment Mode],
                fw_code [FW Code], fw_levy [FW Levy], sdf_required [SDF Required], cdac_fund [CDAC], mbmf_fund [MBMF],
                sinda_fund [SINDA], ecf_fund [ECF], cchest_fund [CCHEST]
      --,email_payslip  
      --,wh_tax_pct  
      --,wh_tax_amt  
                , education [Education], termination_reason [Termination Reason], pay_frequency [Pay Frequency],
                payrate [Pay Rate], remarks [Remarks]
      --,UserName        
                , GroupID [Group], StatusId [Status]
   --,Company_Id  
                , Insurance_number [Insurance Number], Insurance_expiry [Insurance Expiry], CSOC_number [CSOC Number],
                CSOC_expiry [CSOC Expiry], passport [Passport], passport_expiry [Passport Expiry]
   --,empcpftype  
   --   ,leave_carry_forward  
   --   ,Giro_acc_name  
                , localaddress2 [Local Address], foreignaddress1 [Foreign Address1], foreignaddress2 [Foreign Address2],
                foreignpostalcode [Foreign Address Postal Code], pp_issue_date [Passport Issue Date],
                wp_application_date [Work Permit Expiry Date], worker_levy [Worker Levy],
                hourly_rate_mode [Hourly Rate Mode], hourly_rate [Hourly Rate], daily_rate_mode [Daily Rate Mode],
                daily_rate [Daily Rate], block_no [Block#], street_name [Street Name], level_no + '-' + unit_no [Unit],
                wdays_per_week [Days per week], emp_ref_no [Reference#], emp_status [Status]
   --,fund_optout  
                , emp_category [Category]
       FROM     employee e
       WHERE    company_id = @company_id
       ORDER BY emp_name
GO
/****** Object:  StoredProcedure [dbo].[sp_rpt_attachment_schedule]    Script Date: 09/02/2009 11:58:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_rpt_attachment_schedule 5

CREATE PROC [dbo].[sp_rpt_attachment_schedule] @schedule_id INT
AS 
       SELECT   CONVERT(VARCHAR(10), schedule_date, 103) schedule_date, employer_cpf, guarantor_cpf, auth_name, emp_id,
                (emp_name + ' ' + emp_lname) employee_name, sex,
                (SELECT nationality FROM nationality WHERE [id] = e.nationality_id
                ) nationality, CONVERT(VARCHAR(10), date_of_birth, 103) date_of_birth, ic_pp_number, passport,
                CONVERT(VARCHAR(10), wp_application_date, 103) wp_application_date
       FROM     attachment_schedule_hdr h ,
                attachment_schedule_dtl d ,
                employee e
       WHERE    h.schedule_id = d.schedule_id AND
                e.emp_code = d.emp_id AND
                h.schedule_id = @schedule_id
GO
/****** Object:  StoredProcedure [dbo].[sp_submit_email1]    Script Date: 09/02/2009 11:58:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_submit_email1] --1   
       @comp_id INT
AS 
       SELECT   email_SMTP_server, email_username, email_password, email_reply_name, email_smtp_port, email_payalert,
                email_sender_domain, sslrequired, ccmail
       FROM     company
       WHERE    company_id = @comp_id
GO
/****** Object:  StoredProcedure [dbo].[sp_comp_update]    Script Date: 09/02/2009 11:56:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[Sp_comp_update] (@Company_Id              [INT],          
                                        @Company_name            [VARCHAR](50),          
                                        @Company_Code            [VARCHAR](50),          
                                        @phone                   [INT],          
                                        @email                   [VARCHAR](50),          
                                        @website                 [VARCHAR](50),          
                                        @city                    [VARCHAR](50),          
                                        @Fax                     [VARCHAR](50),          
                                        @country                 [INT],          
                                        @auth_person             [VARCHAR](50),          
                                        @designation             [VARCHAR](50),          
                                        @company_roc             [VARCHAR](100),          
                                        @company_type            [VARCHAR](3),          
                                        @Address                 [VARCHAR](350),          
                                        @Auth_email              [VARCHAR](50),          
                                        @monthly_cpf_ceil        [INT],          
                                        @annual_cpf_ceil         [INT],          
                                        @payslip_format          [VARCHAR](50),          
                                        @Payroll_Approval        INT,          
                                        @no_work_days            FLOAT,          
                                        @day_hours               FLOAT,          
                                        @day_min                 FLOAT,          
                                        @email_sender            [VARCHAR](50),          
                                        @email_SMTP_server       [VARCHAR](50),          
                                        @email_username          [VARCHAR](50),          
                                        @email_password          [VARCHAR](50),          
                                        @email_sender_domain     [VARCHAR](50),          
                                        @email_sender_name       VARCHAR(MAX),          
                                        @email_reply_address     VARCHAR(MAX),          
                                        @email_reply_name        VARCHAR(MAX),          
                                        @email_leavedel    VARCHAR(MAX),          
                                        @email_SMTP_port         [VARCHAR](50),          
                                        @timesheet_approve       [INT],          
                                        @state                   VARCHAR(100),          
                                        @address2                VARCHAR(250),          
                                        @postal_code             VARCHAR(50),          
                                        @email_leavealert        VARCHAR(50),          
                                        @email_payalert          VARCHAR(50),          
                                        @epayslip                VARCHAR(50),          
                                        @leave_model             INT,          
                                        @email_claim_sender_name VARCHAR(MAX),          
                                        @email_claim_reply_name  VARCHAR(MAX),          
                                        @email_claimalert        VARCHAR(50),          
                                        @sslrequired             VARCHAR(10),          
                                        @pwdrequired             VARCHAR(10),          
                                        @ccmail                  VARCHAR(50),          
                  @ccclaimalert            VARCHAR(50),          
         @ccleavealert            VARCHAR(50),          
                                        @leaveroundoff           VARCHAR(50),          
                                        @additionsroundoff       VARCHAR(50),          
                                        @deductionsroundoff      VARCHAR(50),          
                                        @netpayroundoff          VARCHAR(50),          
                                        @payrolltype             INT,    
                                        @tsremarks       [INT],    
          @projectassign INT,  
  @SalaryGLCode VARCHAR(20),  
  @EmployeeCPFGLCode VARCHAR(20),
  @EmployerCPFGLCode VARCHAR(20),
  @FundAmtGLCode VARCHAR(20),
  @SDLAmtGLCode VARCHAR(20),
  @AccountGLCode   VARCHAR(20),
  @UnpaidLeaGLCode varchar(20)
)          
AS          
Declare @leavemodelcount int          
          
Select @leavemodelcount=Count(Company_Id) From Company Where Company_ID = @Company_Id And leave_model = @leave_model           
Set @leavemodelcount = isnull(@leavemodelcount,0)          
          
  BEGIN          
      UPDATE company          
      SET    [Company_Code] = @Company_Code,          
             [Company_name] = @Company_name,          
             [phone] = @phone,          
             [email] = @email,          
             [website] = @website,          
             [city] = @city,          
             [Fax] = @Fax,          
             [country] = @country,          
             [auth_person] = @auth_person,          
             [designation] = @designation,          
             [company_roc] = @company_roc,          
             [company_type] = @company_type,          
             [Address] = @Address,          
             [Auth_email] = @Auth_email,          
             [monthly_cpf_ceil] = @monthly_cpf_ceil,          
             [annual_cpf_ceil] = @annual_cpf_ceil,          
             [payslip_format] = @payslip_format,          
             Payroll_Approval = @Payroll_Approval,          
             no_work_days = @no_work_days,          
             day_hours = @day_hours,          
             day_minute = @day_min,          
             email_sender = @email_sender,          
             email_SMTP_server = @email_SMTP_server,          
             email_username = @email_username,          
             email_sender_domain = @email_sender_domain,          
             email_sender_name = @email_sender_name,          
             email_reply_address = @email_reply_address,          
             email_reply_name = @email_reply_name,          
             email_leave_delete = @email_leavedel,          
             email_SMTP_port = @email_SMTP_port,          
             timesheet_approve = @timesheet_approve,          
             [state] = @state,          
             address2 = @address2,          
             postal_code = @postal_code,          
             email_leavealert = @email_leavealert,          
             email_payalert = @email_payalert,          
             epayslip = @epayslip,          
             leave_model = @leave_model,          
             email_claim_sender_name = @email_claim_sender_name,          
             email_claim_reply_name = @email_claim_reply_name,          
             email_claimalert = @email_claimalert,          
             sslrequired = @sslrequired,          
             pwdrequired = @pwdrequired,          
             ccmail = @ccmail,          
             ccalert_claims = @ccclaimalert,          
             ccalert_leaves = @ccleavealert,          
             basicrnd = @leaveroundoff,          
             additionsrnd = @additionsroundoff,          
             deductionsrnd = @deductionsroundoff,          
             netpayrnd = @netpayroundoff,          
             payrolltype = @payrolltype,    
    isTSRemarks = @tsremarks,    
    projectassign = @projectassign ,   
    SalaryGLCode = @SalaryGLCode,  
    EmployeeCPFGLCode=@EmployeeCPFGLCode,  
    EmployerCPFGLCode=@EmployerCPFGLCode,  
    FundAmtGLCode=@FundAmtGLCode,  
    SDLAmtGLCode=@SDLAmtGLCode,  
    AccountGLCode=@AccountGLCode,
	UnpaidLeaGLCode=@UnpaidLeaGLCode
      WHERE  [Company_Id] = @Company_Id          
          
  IF (@leavemodelcount <= 0 And (@leave_model = 3 OR @leave_model=4  OR @leave_model=6  OR @leave_model=8 ))    
  BEGIN          
   Exec sp_YOSEmployeeAutoRec @Company_Id, 0          
  END          
          
          
      IF @email_password <> ''          
        BEGIN          
            UPDATE company          
            SET    email_password = @email_password          
            WHERE  [Company_Id] = @Company_Id          
        END
  END
GO
/****** Object:  StoredProcedure [dbo].[sp_send_email]    Script Date: 09/02/2009 11:58:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_send_email] --104,2
       @empcode INT ,  
       @compid INT  
AS   
       BEGIN          
             SELECT a.emp_supervisor, isnull(c.emp_name,'')+' '+isnull(c.emp_lname,'') 'supervisor', c.email 'supervisor email', a.email, a.emp_code,  
                    (a.emp_name + ' ' + a.emp_lname) emp_name, b.email_SMTP_server, b.email_username, b.email_password,  
                    b.email_sender_domain, b.email_sender_name, b.email_reply_address, b.email_reply_name,  
                    b.email_smtp_port, b.email, b.email_sender, b.email_leavealert, b.ccalert_leaves, b.email_leave_delete  
             FROM   employee a   
			 Inner Join company b On a.company_id = b.company_id  
			 Left Outer Join employee c On a.emp_supervisor= c.emp_code  
             WHERE  a.emp_code = @empcode AND  
                    a.company_id = @compid          
          
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_send_email_status]    Script Date: 09/02/2009 11:58:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_send_email_status] --102
       @trx_id INT
AS 
       BEGIN        
             SELECT CONVERT(VARCHAR(10), start_date, 103) 'start_date', CONVERT(VARCHAR(10), end_date, 103) 'end_date',
                    approver, status, CONVERT(VARCHAR(10), [Application date], 103) [Application date],
                    b.email_SMTP_server, b.email_username, b.email_password, b.email_sender_domain, b.email_sender_name,
                    b.email_reply_address, b.email_reply_name, b.email_smtp_port, b.email, c.company_id, c.email,
                    a.remarks, b.email_leavealert, b.email_sender, b.ccalert_leaves
             FROM   emp_leaves a ,
                    company b ,
                    employee c
             WHERE  trx_id = @trx_id AND
                    a.emp_id = c.emp_code AND
                    c.company_id = b.company_id        
        
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_get_leavedetails]    Script Date: 09/02/2009 11:57:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_get_leavedetails 103, 2009,17  
CREATE PROC [dbo].[sp_get_leavedetails]-- 996,2009                    
       @Username INT ,
       @leave_year INT ,
       @leave_type INT = 0
AS 
       DECLARE @group_id INT      
       CREATE TABLE #temp
              (
               leave_type INT ,
               leave_type_desc VARCHAR(100) NULL ,
               leaves_allowed FLOAT ,
               leaves_taken FLOAT ,
               leaves_remaining FLOAT ,
               unpaid_leave FLOAT ,
               code VARCHAR(50)
              )                                  
                                  
       DECLARE @sex VARCHAR(10)              
       DECLARE @filtrec VARCHAR(10)              
       DECLARE @Company_Id INT                                
       DECLARE @prorated_leaves INT                              
       DECLARE @leaves_model INT                                            
       DECLARE @year_of_service INT                                    
       DECLARE @user_name VARCHAR(50)                                
                                
       SELECT   @user_name = username, @sex = sex
       FROM     employee
       WHERE    emp_code = @Username                                
       SELECT   @Company_Id = Company_Id
       FROM     employee
       WHERE    emp_code = @Username                                  
                                
       SELECT   @group_id = emp_group_id
       FROM     employee
       WHERE    emp_code = @Username                                  
              
       IF (@sex = 'M') 
          SET @filtrec = '0003'              
              
       IF (@sex = 'F') 
          SET @filtrec = '0004'              
                                  
--insert into #temp (leave_type, leaves_allowed, leaves_taken, leaves_remaining, unpaid_leave,code )                                  
-- select leave_type, leaves_allowed, 0, 0, 0,ltt.code  from leaves_allowed lal            
-- inner join leave_types ltt on lal.leave_type=ltt.id                
-- inner join leaves_annual lan  on lal.leave_year=lan.leave_year            
-- where lal.group_id = @group_id and lan.leave_year = @leave_year and (ltt.code <> @filtrec Or ltt.code is null) and lan.emp_id=@Username                   
      
       INSERT   INTO #temp (leave_type, leaves_allowed, leaves_taken, leaves_remaining, unpaid_leave, code)
                SELECT  leave_type, leaves_allowed, 0, 0, 0, ltt.code
                FROM    EmployeeLeavesAllowed lal
                INNER JOIN leave_types ltt ON lal.leave_type = ltt.id
                WHERE   (ltt.code <> @filtrec OR
                         ltt.code IS NULL
                        ) AND
                        lal.Emp_ID = @Username    
      
    
    
    
/* Below code commented as now calculation will take place according to leave_model                             
select @prorated_leaves = prorated_leaves from company where company_id = @Company_Id                                        
if @prorated_leaves is null                                    
 set @prorated_leaves=3                                    
*/                              
       SELECT   @leaves_model = ISNULL(leave_model, 1)
       FROM     company
       WHERE    company_id = @Company_Id                                          
       IF @leaves_model IS NULL 
          SET @leaves_model = 1                                      
                                            
                                
-- get Year of Service                                
                    
       SELECT   @year_of_service = DATEDIFF(year, joining_date, GETDATE())
       FROM     employee
       WHERE    emp_code = @username                                     
       IF @year_of_service = 0 
          SET @year_of_service = 1                                 
                    
       IF @leaves_model = 1 OR
          @leaves_model = 3 
          BEGIN                            
  --   update #temp                            
  --   set leaves_allowed = (select sum(isnull(leave_remaining,0)) from leaves_annual where emp_id = @Username and leave_year <= @leave_year)                                  
  --   where leave_type = (select [id] from leave_types where type = 'Annual Leave')         
                UPDATE  #temp
                SET     leaves_allowed = (SELECT    SUM(ISNULL(leaves_allowed, 0))
                                          FROM      EmployeeLeavesAllowed
                                          WHERE     emp_id = @Username AND
                                                    leave_year <= @leave_year AND
                                                    leave_type = (SELECT [id] FROM leave_types
                                                                            WHERE type = 'Annual Leave'
                                                                 )
                                         )
                WHERE   leave_type = (SELECT [id] FROM leave_types WHERE type = 'Annual Leave'
                                     )                                  
          END                            
       IF @leaves_model = 2 OR
          @leaves_model = 5 
          BEGIN                            
                UPDATE  #temp
                SET     leaves_allowed = (SELECT    dbo.get_available_leaves_prorated1(CONVERT(VARCHAR(10), GETDATE(), 103),
                                                                                       @Company_Id, @user_name)
                                         )
                WHERE   leave_type = (SELECT [id] FROM leave_types WHERE type = 'Annual Leave'
                                     )                                  
          END                            
       IF @leaves_model = 4 OR
          @leaves_model = 6 
          BEGIN                            
                UPDATE  #temp
                SET     leaves_allowed = (SELECT    dbo.get_available_leaves_prorated2(CONVERT(VARCHAR(10), GETDATE(), 103),
                                                                                       @Company_Id, @user_name)
                                         )
                WHERE   leave_type = (SELECT [id] FROM leave_types WHERE type = 'Annual Leave'
                                     )                                  
          END                                
      
      
       UPDATE   #temp
       SET      leaves_taken = (SELECT  ISNULL(SUM(paid_leaves), 0) +
                                        (SELECT SUM(SumPL) SumPL
                                         FROM   (SELECT COUNT(ELD.trx_Id) SumPL
                                                 FROM   emp_leaves_detail ELD
                                                 INNER JOIN Emp_Leaves EL ON ELD.Trx_ID = EL.Trx_ID
                                                 WHERE  EL.emp_id = @Username AND
                                                        ELD.Nextyear = @leave_year AND
                                                        ELD.Unpaid_Leave = 0 AND
                                                        ELD.HalfDay_Leave = 0 AND
                                                        EL.[Status] = 'Approved' AND
                                                        El.Leave_Type = #temp.leave_type
                                                 UNION
                                                 SELECT CAST(COUNT(ELD.trx_Id) AS FLOAT) / 2 SumPL
                                                 FROM   emp_leaves_detail ELD
                                                 INNER JOIN Emp_Leaves EL ON ELD.Trx_ID = EL.Trx_ID
                                                 WHERE  EL.emp_id = @Username AND
                                                        ELD.Nextyear = @leave_year AND
                                                        ELD.Unpaid_Leave = 0 AND
                                                        ELD.HalfDay_Leave = 1 AND
                                                        EL.[Status] = 'Approved' AND
                                                        El.Leave_Type = #temp.leave_type
                                                ) D
                                        )
                                FROM    emp_leaves
                                WHERE   status = 'Approved' AND
                                        emp_id = @Username AND
                                        leave_type = #temp.leave_type AND
                                        YEAR(start_date) = @leave_year
                               )                                  
                                  
       UPDATE   #temp
       SET      unpaid_leave = (SELECT  ISNULL(SUM(unpaid_leaves), 0) +
                                        (SELECT SUM(SumPL) SumPL
                                         FROM   (SELECT COUNT(ELD.trx_Id) SumPL
                                                 FROM   emp_leaves_detail ELD
                                                 INNER JOIN Emp_Leaves EL ON ELD.Trx_ID = EL.Trx_ID
                                                 WHERE  EL.emp_id = @Username AND
                                                        ELD.Nextyear = @leave_year AND
                                                        ELD.Unpaid_Leave = 1 AND
                                                        ELD.HalfDay_Leave = 0 AND
                                                        EL.[Status] = 'Approved' AND
                                                        El.Leave_Type = #temp.leave_type
                                                 UNION
                                                 SELECT CAST(COUNT(ELD.trx_Id) AS FLOAT) / 2 SumPL
                                                 FROM   emp_leaves_detail ELD
                                                 INNER JOIN Emp_Leaves EL ON ELD.Trx_ID = EL.Trx_ID
                                                 WHERE  EL.emp_id = @Username AND
                                                        ELD.Nextyear = @leave_year AND
                                                        ELD.Unpaid_Leave = 1 AND
                                                        ELD.HalfDay_Leave = 1 AND
                                                        EL.[Status] = 'Approved' AND
                                                        El.Leave_Type = #temp.leave_type
                                                ) D
                                        )
                                FROM    emp_leaves
                                WHERE   status = 'Approved' AND
                                        emp_id = @Username AND
                                        leave_type = #temp.leave_type AND
                                        YEAR(start_date) = @leave_year
                               )                                  
                  
       UPDATE   #temp
       SET      leave_type_desc = type
       FROM     leave_types
       WHERE    #temp.leave_type = [id]                                  
                                  
        
       UPDATE   #temp
       SET      leaves_remaining = ISNULL(leaves_allowed, 0) - ISNULL(leaves_taken, 0)        
      
--update #temp     
--set leaves_remaining  =   leaves_allowed Where Leave_Type = 8        
                                
       UPDATE   #temp
       SET      leaves_remaining = 0
       WHERE    leaves_remaining < 0                                
    
       IF (@leave_type != 0) 
          BEGIN    
                DELETE  FROM #Temp
                WHERE   leave_type != @leave_type    
          END    
                                
       SELECT   leave_type_desc type, leaves_allowed, leaves_taken, leaves_remaining leaves_available,
                unpaid_leave unpaid_leaves, code
       FROM     #temp
       ORDER BY leave_type_desc    
  
       DROP TABLE #Temp  
GO
/****** Object:  StoredProcedure [dbo].[sp_sendclaim_email]    Script Date: 09/02/2009 11:58:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_sendclaim_email] --102,1          
       @empcode INT ,
       @compid INT
AS 
       BEGIN            
             SELECT a.emp_supervisor, isnull(c.emp_name,'')+' '+isnull(c.emp_lname,'') 'supervisor', c.email 'supervisor email', a.email, a.emp_code,  
                    isnull(a.emp_name,'')+' '+isnull(a.emp_lname,'') emp_name, b.email_SMTP_server, b.email_username, b.email_password, b.email_sender_domain,  
                    b.email_claim_sender_name, b.email_claim_reply_name, b.email_reply_name, b.email_smtp_port, b.email,  
                    b.email_sender, b.email_claimalert, b.ccalert_claims  
             FROM   employee a ,  
                    employee c ,  
                    company b  
             WHERE  a.company_id = b.company_id AND  
                    a.emp_clsupervisor = c.emp_code AND  
                    a.emp_code = @empcode AND  
                    a.company_id = @compid       
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_comp_delete]    Script Date: 09/02/2009 11:56:48 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_comp_delete] @company_id INT
AS 
       BEGIN
             DELETE FROM emp_group
             WHERE  company_id = @company_id
             DELETE FROM GroupRights
             WHERE  GroupId IN (SELECT  GroupId
                                FROM    usergroups
                                WHERE   company_id = @company_id)
             DELETE FROM usergroups
             WHERE  company_id = @company_id
             DELETE FROM GiroBanks
             WHERE  company_id = @company_id
             DELETE FROM company
             WHERE  company_id = @company_id
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_passport1_expiry]    Script Date: 09/02/2009 11:58:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_passport1_expiry]
       @company_id INT ,
       @fromdate DATETIME ,
       @todate DATETIME
AS --declare @date1 datetime        
--declare @date2 datetime        
--        
--set @date1 = convert(datetime, @fromdate, 103)        
--set @date2 = convert(datetime, @todate, 103)      
      
       SELECT   emp_code, emp_name + ' ' + emp_lname 'emp_name', passport, b.company_name,
                CONVERT(VARCHAR(15), passport_expiry, 103) passport_expiry
       FROM     employee a ,
                company b
       WHERE    a.company_id = @company_id AND
                passport_expiry >= @fromdate AND
                passport_expiry <= @todate AND
                a.company_id = b.company_id
       ORDER BY emp_name
GO
/****** Object:  StoredProcedure [dbo].[insurance_expiry_report]    Script Date: 09/02/2009 11:56:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[insurance_expiry_report]
       @company_id INT ,
       @fromdate DATETIME ,
       @todate DATETIME
AS --declare @date1 datetime        
--declare @date2 datetime        
--        
--set @date1 = convert(datetime, @fromdate, 103)        
--set @date2 = convert(datetime, @todate, 103)      
      
       SELECT   emp_code, (emp_name + ' ' + emp_lname) emp_name, insurance_number,
                CONVERT(VARCHAR(15), insurance_expiry, 103) insurance_expiry, b.company_name
       FROM     employee a ,
                company b
       WHERE    a.company_id = @company_id AND
                insurance_expiry >= @fromdate AND
                insurance_expiry <= @todate AND
                a.company_id = b.company_id
       ORDER BY emp_name
GO
/****** Object:  StoredProcedure [dbo].[sp_payslip_email]    Script Date: 09/02/2009 11:58:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_payslip_email] --102      
       @empid INT
AS 
       BEGIN        
        
             SELECT c.emp_code, c.email, b.email_SMTP_server, b.email_username, b.email_password, b.email_sender_domain,
                    b.email_sender_name, b.email_reply_address, b.email_reply_name, b.email_smtp_port, b.email,
                    c.email_payslip, b.email_sender
             FROM   employee c ,
                    company b
             WHERE  c.company_id = b.company_id AND
                    c.emp_code = @empid      
        
       END
GO
/****** Object:  StoredProcedure [dbo].[CSOC_expiry_report]    Script Date: 09/02/2009 11:56:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--drop proc  [CSOC_expiry_report]    
      
CREATE PROCEDURE [dbo].[CSOC_expiry_report]
       @company_id INT ,
       @fromdate DATETIME ,
       @todate DATETIME
AS --declare @date1 datetime        
--declare @date2 datetime        
--        
--set @date1 = convert(datetime, @fromdate, 103)        
--set @date2 = convert(datetime, @todate, 103)      
      
       SELECT   emp_code, (emp_name + ' ' + emp_lname) emp_name, CSOC_number,
                CONVERT(VARCHAR(15), CSOC_expiry, 103) CSOC_expiry, b.company_name
       FROM     employee a ,
                company b
       WHERE    a.company_id = @company_id AND
                CSOC_expiry >= @fromdate AND
                CSOC_expiry <= @todate AND
                a.company_id = b.company_id
       ORDER BY emp_name
GO
/****** Object:  StoredProcedure [dbo].[wp_expiry_report]    Script Date: 09/02/2009 11:58:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[wp_expiry_report]
       @company_id INT ,
       @fromdate DATETIME ,
       @todate DATETIME
AS --declare @date1 datetime        
--declare @date2 datetime        
--        
--set @date1 = convert(datetime, @fromdate, 103)        
--set @date2 = convert(datetime, @todate, 103)      
      
       SELECT   emp_code, ISNULL(emp_name, '') + ' ' + ISNULL(emp_lname, '') 'emp_name', ic_pp_number, b.company_name,
                CONVERT(VARCHAR(15), wp_exp_date, 103) wp_exp_date
       FROM     employee a ,
                company b
       WHERE    a.company_id = @company_id AND
                wp_exp_date >= @fromdate AND
                wp_exp_date <= @todate AND
                a.company_id = b.company_id
GO
/****** Object:  StoredProcedure [dbo].[sp_leavereport2]    Script Date: 09/02/2009 11:58:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_leavereport1 1022,2008
CREATE PROC [dbo].[sp_leavereport2] @empcode INT, @year INT
AS 
       DECLARE @group_id INT                  
                  
       CREATE TABLE #temp
              (
               leave_type INT ,
               leave_type_desc VARCHAR(100) NULL ,
               leave_availabe FLOAT ,
               leave_taken FLOAT ,
               leave_unpaid FLOAT ,
               leave_paid FLOAT
              )                    
                    
       DECLARE @Company_Id INT                  
       DECLARE @prorated_leaves INT                
       DECLARE @leaves_model INT                              
       DECLARE @year_of_service INT                      
       DECLARE @user_name VARCHAR(50)                  
                  
       SELECT   @user_name = username
       FROM     employee
       WHERE    emp_code = @empcode                   
       SELECT   @Company_Id = Company_Id
       FROM     employee
       WHERE    emp_code = @empcode      
       SELECT   @group_id = emp_group_id
       FROM     employee
       WHERE    emp_code = @empcode                   
                    
       INSERT   INTO #temp (leave_type, leave_availabe, leave_taken, leave_unpaid, leave_paid)
                SELECT  leave_type, leaves_allowed, 0, 0, 0
                FROM    leaves_allowed
                WHERE   group_id = @group_id AND
                        leave_year = @year                    
                  
/* Below code commented as now calculation will take place according to leave_model               
select @prorated_leaves = prorated_leaves from company where company_id = @Company_Id                          
if @prorated_leaves is null                      
 set @prorated_leaves=3                      
*/                
       SELECT   @leaves_model = ISNULL(leave_model, 1)
       FROM     company
       WHERE    company_id = @Company_Id                            
       IF @leaves_model IS NULL 
          SET @leaves_model = 1                        
                              
                  
-- get Year of Service                  
       SELECT   @year_of_service = DATEDIFF(year, joining_date, GETDATE())
       FROM     employee
       WHERE    emp_code = @empcode                       
       IF @year_of_service = 0 
          SET @year_of_service = 1                   
              
       BEGIN              
             UPDATE #temp
             SET    leave_availabe = (SELECT SUM (ISNULL (leave_remaining, 0)) FROM leaves_annual
                                                WHERE emp_id = @empcode
                                     )
             WHERE  leave_type = (SELECT [id] FROM leave_types WHERE type = 'Annual Leave'
                                 )                    
       END              
--IF @leaves_model = 2 OR @leaves_model = 5              
-- begin              
--   update #temp                    
--   set leave_availabe = (select dbo.get_available_leaves_prorated1(convert(varchar(10), getdate(), 103), @Company_Id, @user_name))                    
--   where leave_type = (select [id] from leave_types where type = 'Annual Leave')                    
-- end              
--IF @leaves_model = 4 OR @leaves_model = 6              
-- begin              
--   update #temp                
--   set leave_availabe = (select dbo.get_available_leaves_prorated2(convert(varchar(10), getdate(), 103), @Company_Id, @user_name))                    
--   where leave_type = (select [id] from leave_types where type = 'Annual Leave')                                        
-- end                        
--update #temp                    
--set leave_taken = (                    
--select isnull(sum(paid_leaves),0) from emp_leaves where status = 'Approved' and emp_id = @empcode and leave_type = #temp.leave_type and year(start_date) = @year)                    
--         
       UPDATE   #temp
       SET      leave_paid = (SELECT    ISNULL(SUM(paid_leaves), 0)
                              FROM      emp_leaves
                              WHERE     status = 'Approved' AND
                                        emp_id = @empcode AND
                                        leave_type = #temp.leave_type AND
                                        YEAR(start_date) = @year
                             )                    
                    
       UPDATE   #temp
       SET      leave_unpaid = (SELECT  ISNULL(SUM(unpaid_leaves), 0)
                                FROM    emp_leaves
                                WHERE   status = 'Approved' AND
                                        emp_id = @empcode AND
                                        leave_type = #temp.leave_type AND
                                        YEAR(start_date) = @year
                               )                    
    
       UPDATE   #temp
       SET      leave_taken = (ISNULL(leave_paid, 0) + ISNULL(leave_unpaid, 0))     
                                   
       UPDATE   #temp
       SET      leave_type_desc = type
       FROM     leave_types
       WHERE    #temp.leave_type = [id]                    
            
       SELECT   leave_type leave_id, leave_type_desc leave_type, leave_availabe, leave_taken, leave_unpaid, leave_paid,
                (SELECT company_name
                 FROM   company
                 WHERE  company_id = (SELECT company_id FROM employee WHERE emp_code = @empcode
                                     )
                ) 'CompName', (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name FROM employee WHERE emp_code = @empcode
                              ) 'EmpName'
       FROM     #temp
       ORDER BY leave_type_desc
GO
/****** Object:  StoredProcedure [dbo].[sp_leavereport1]    Script Date: 09/02/2009 11:58:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_leavereport1 1022,6,2008  
CREATE PROC [dbo].[sp_leavereport1]
       @empcode INT ,
       @month INT ,
       @year INT
AS 
       DECLARE @group_id INT                  
       DECLARE @customdate VARCHAR(10)
       SET @customdate = CONVERT(VARCHAR, @month) + '/' + '01/' + CONVERT(VARCHAR, @year)
                  
       CREATE TABLE #temp
              (
               leave_type INT ,
               leave_type_desc VARCHAR(100) NULL ,
               leave_availabe FLOAT ,
               leave_taken FLOAT ,
               leave_unpaid FLOAT ,
               leave_paid FLOAT
              )                    
                    
       DECLARE @Company_Id INT                  
       DECLARE @prorated_leaves INT                
       DECLARE @leaves_model INT                              
       DECLARE @year_of_service INT                      
       DECLARE @user_name VARCHAR(50)                  
                  
       SELECT   @user_name = username
       FROM     employee
       WHERE    emp_code = @empcode                   
       SELECT   @Company_Id = Company_Id
       FROM     employee
       WHERE    emp_code = @empcode      
       SELECT   @group_id = emp_group_id
       FROM     employee
       WHERE    emp_code = @empcode                   
                    
       INSERT   INTO #temp (leave_type, leave_availabe, leave_taken, leave_unpaid, leave_paid)
                SELECT  leave_type, leaves_allowed, 0, 0, 0
                FROM    leaves_allowed
                WHERE   group_id = @group_id AND
                        leave_year = @year                    
                  
/* Below code commented as now calculation will take place according to leave_model               
select @prorated_leaves = prorated_leaves from company where company_id = @Company_Id                          
if @prorated_leaves is null                      
 set @prorated_leaves=3                      
*/                
       SELECT   @leaves_model = ISNULL(leave_model, 1)
       FROM     company
       WHERE    company_id = @Company_Id                            
       IF @leaves_model IS NULL 
          SET @leaves_model = 1                        
                              
                  
-- get Year of Service                  
       SELECT   @year_of_service = DATEDIFF(year, joining_date, GETDATE())
       FROM     employee
       WHERE    emp_code = @empcode                       
       IF @year_of_service = 0 
          SET @year_of_service = 1                   
              
       IF @leaves_model = 1 OR
          @leaves_model = 3 
          BEGIN              
                UPDATE  #temp
                SET     leave_availabe = (SELECT ISNULL (leave_remaining, 0) FROM leaves_annual
                                                    WHERE emp_id = @empcode AND leave_year = @year
                                         )
                WHERE   leave_type = (SELECT [id] FROM leave_types WHERE type = 'Annual Leave'
                                     )                    
          END              
       IF @leaves_model = 2 OR
          @leaves_model = 5 
          BEGIN              
                UPDATE  #temp
                SET     leave_availabe = (SELECT    dbo.get_available_leaves_prorated1(CONVERT(VARCHAR(10), CONVERT(DATETIME, @customdate), 103),
                                                                                       @Company_Id, @user_name)
                                         )
                WHERE   leave_type = (SELECT [id] FROM leave_types WHERE type = 'Annual Leave'
                                     )                    
          END              
       IF @leaves_model = 4 OR
          @leaves_model = 6 
          BEGIN              
                UPDATE  #temp
                SET     leave_availabe = (SELECT    dbo.get_available_leaves_prorated2(CONVERT(VARCHAR(10), GETDATE(), 103),
                                                                                       @Company_Id, @user_name)
                                         )
                WHERE   leave_type = (SELECT [id] FROM leave_types WHERE type = 'Annual Leave'
                                     )                                        
          END                        
    
-- (                    
--select isnull(sum(paid_leaves),0) from emp_leaves where status = 'Approved' and emp_id = @empcode and leave_type = #temp.leave_type and year(start_date) = @year and month(start_date) = @month)                    
         
       UPDATE   #temp
       SET      leave_paid = (SELECT    ISNULL(SUM(paid_leaves), 0)
                              FROM      emp_leaves
                              WHERE     status = 'Approved' AND
                                        emp_id = @empcode AND
                                        leave_type = #temp.leave_type AND
                                        YEAR(start_date) = @year AND
                                        MONTH(start_date) = @month
                             )                    
                    
       UPDATE   #temp
       SET      leave_unpaid = (SELECT  ISNULL(SUM(unpaid_leaves), 0)
                                FROM    emp_leaves
                                WHERE   status = 'Approved' AND
                                        emp_id = @empcode AND
                                        leave_type = #temp.leave_type AND
                                        YEAR(start_date) = @year AND
                                        MONTH(start_date) = @month
                               )                    
     
       UPDATE   #temp
       SET      leave_taken = (ISNULL(leave_paid, 0) + ISNULL(leave_unpaid, 0))     
                   
       UPDATE   #temp
       SET      leave_type_desc = type
       FROM     leave_types
       WHERE    #temp.leave_type = [id]                    
                    
       SELECT   leave_type leave_id, leave_type_desc leave_type, leave_availabe, leave_taken, leave_unpaid, leave_paid,
                (SELECT company_name
                 FROM   company
                 WHERE  company_id = (SELECT company_id FROM employee WHERE emp_code = @empcode
                                     )
                ) 'CompName', (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name FROM employee WHERE emp_code = @empcode
                              ) 'EmpName'
       FROM     #temp
       ORDER BY leave_type_desc
GO
/****** Object:  StoredProcedure [dbo].[sp_IR8ADetails_all]    Script Date: 09/02/2009 11:57:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_IR8ADetails_all]
       (
        @year INT = '2008' ,
        @companyid INT      
       )
AS 
       DECLARE @where VARCHAR(8000)                      
       DECLARE @select VARCHAR(8000)           
          
       DECLARE @companyname VARCHAR(100)          
       DECLARE @CompnayPhone VARCHAR(100)          
       DECLARE @AuthPerson VARCHAR(100)          
       DECLARE @Designation_company VARCHAR(100)          
       DECLARE @companyroc VARCHAR(100)          
       DECLARE @company_type VARCHAR(100)          
       DECLARE @companyaddress1 VARCHAR(100)          
       DECLARE @companyaddress2 VARCHAR(100)          
       DECLARE @comppostalcode VARCHAR(100)                        
                
       BEGIN                                
             SET NOCOUNT ON                              
             IF @year IS NULL 
                BEGIN                                  
                      SELECT    @year = '2008'                                   
                END                
                
             SET @companyname = (SELECT company_name FROM company WHERE company_id= @companyid
                                )          
             SET @CompnayPhone = (SELECT phone FROM company WHERE company_id= @companyid
                                 )          
             SET @AuthPerson = (SELECT auth_person FROM company WHERE company_id= @companyid
                               )          
             SET @Designation_company = (SELECT designation FROM company WHERE company_id= @companyid
                                        )          
             SET @companyroc = (SELECT company_roc FROM company WHERE company_id= @companyid
                               )          
             SET @company_type = (SELECT company_type FROM company WHERE company_id= @companyid
                                 )          
             SET @companyaddress1 = (SELECT [address] FROM company WHERE company_id= @companyid
                                    )          
             SET @companyaddress2 = (SELECT address2 FROM company WHERE company_id= @companyid
                                    )          
             SET @comppostalcode = (SELECT postal_code FROM company WHERE company_id= @companyid
                                   )                
--If len(@EmpCode) > 0                      
--Begin                      
-- Select @where ='Where Emp_Code not in (' + @EmpCode + ')'                
--End                  
--print @where                
             SELECT *
             INTO   #temp
             FROM   Employee
             WHERE  Company_Id = @companyid                
--                
--                
--Select @select= 'Delete From #temp ' + @where                      
--EXEC (@select)                      
--                
             SELECT startdate = CASE WHEN F.joining_date_Iras IS NOT NULL AND
                                          YEAR(F.joining_date_Iras) = @year
                                     THEN CONVERT(VARCHAR(10), F.joining_date_Iras, 101)
                                     ELSE F.StartDateOld
                                END,
                    enddate = CASE WHEN F.termination_date_Iras IS NOT NULL AND
                                        YEAR(F.termination_date_Iras) = @year
                                   THEN CONVERT(VARCHAR(10), F.termination_date_Iras, 101)
                                   ELSE F.enddateold
                              END, F.*
             FROM   (SELECT joining_date_Iras = CASE WHEN i.dateofcommencement IS NULL AND
                                                          YEAR(tmp.joining_date) = @year THEN tmp.joining_date
                                                     ELSE i.dateofcommencement
                                                END ,
                            termination_date_Iras = CASE WHEN i.dateofcessation IS NULL AND
                                                              YEAR(tmp.termination_date) = @year
                                                         THEN tmp.termination_date
                                                         ELSE i.dateofcessation
                                                    END ,
                            tmp.* ,
                            i.addr_type ,
                            i.cessation_provision ,
                            i.s45_tax_on_directorFee ,
                            ISNULL(i.retirement_benefits_amount, 0) retirement_benefits_amount ,
                            i.retirement_benefits_fundName ,
                            i.retirement_benefits ,
                            ISNULL(i.benefits_in_kind_amount, 0) benefits_in_kind_amount ,
                            i.benefits_in_kind ,
                            ISNULL(i.stock_options_amount, 0) stock_options_amount ,
                            i.stock_options ,
                            ISNULL(i.excess_voluntary_cpf_employer_amount, 0) excessvoluntarycpfemployeramt ,
                            i.excess_voluntary_cpf_employer ,
                            ISNULL(i.pension_out_singapore_amount, 0) pension_out_singapore_amount ,
                            i.pension_out_singapore ,
                            ISNULL(i.tax_borne_employer_amount, 0) tax_borne_employer_amount ,
                            i.tax_borne_employer_options ,
                            ISNULL(i.tax_borne_employee_amount, 0) tax_borne_employee_amount ,
                            @companyname [Companyname] ,
                            @CompnayPhone [Companyphone] ,
                            @AuthPerson [Authperson] ,
                            @Designation_company [Authpersondesignation] ,
                            @companyroc [Companyroc] ,
                            @company_type [Companytype] ,
                            @companyaddress1 [Companyaddress1] ,
                            @companyaddress2 [Companyaddress2] ,
                            @comppostalcode [Companypostal]
                     FROM   (SELECT MIN(CONVERT(VARCHAR(10), hrd.start_period, 101)) AS startdateold,
                                    MAX(CONVERT(VARCHAR(10), hrd.end_period, 101)) AS enddateold, a.emp_code, a.emp_name,
                                    a.emp_lname, a.emp_alias, a.nationality_name, a.emp_type, a.ic_pp_number,
                                    a.wp_exp_date, a.pr_date, a.address, a.country_name, a.postal_code, a.phone,
                                    a.hand_phone, a.email, a.time_card_no, a.sex, a.religion_id1, a.race_id1,
                                    a.marital_status, a.place_of_birth,
                                    CONVERT(VARCHAR(8), a.date_of_birth, 112) AS date_of_birth, a.income_taxid,
                                    a.giro_bank, a.giro_code, a.giro_branch, a.giro_acct_number, a.desig_id1, a.dep_name,
                                    a.joining_date, a.probation_period, a.confirmation_date, a.termination_date,
                                    a.cpf_entitlement, a.emp_group_id, a.cpf_employer, a.cpf_employee,
                                    a.employee_cpf_acct, a.employer_cpf_acct, a.emp_supervisor, a.ot_entitlement,
                                    a.payment_mode, a.fw_code, a.fw_levy, a.sdf_required, a.funds, a.mbmf_fund,
                                    a.email_payslip, a.wh_tax_pct, a.wh_tax_amt, a.education, a.termination_reason,
                                    a.pay_frequency, a.payrate, a.remarks, a.images, a.username, a.password, a.groupid,
                                    a.statusid, a.company_id, a.insurance_number, a.insurance_expiry, a.csoc_number,
                                    a.csoc_expiry, a.passport, a.passport_expiry, a.empcpftype, a.leave_carry_forward,
                                    a.giro_acc_name, a.localaddress2, a.foreignaddress1, a.foreignaddress2,
                                    a.foreignpostalcode, a.pp_issue_date, a.leaves_remaining, a.wp_application_date,
                                    a.worker_levy, a.hourly_rate_mode, a.hourly_rate, a.daily_rate_mode, a.daily_rate,
                                    a.block_no, a.street_name, a.level_no, a.unit_no, a.wdays_per_week,
                                    a.emp_ref_no AS emp_id_type, a.emp_status, a.fund_optout, a.emp_category,
                                    ROUND((ISNULL(SUM(a.[Total Gross]), 0) + ISNULL([dbo].[fn_GrossSalary](a.emp_code,
                                                                                                        @year), 0)) -
                                          (ISNULL(SUM(a.unpaid_leaves_amount), 0)), 0, 1) Gross,
                                    ISNULL(SUM(a.empcpf), 0) empcpf,
                                    ISNULL(SUM(a.unpaid_leaves_amount), 0) unpaid_leaves_amount,
                                    ISNULL(a.Bonus, 0) Bonus, ISNULL(DirectorsFee, 0) DirectorsFee,
                                    ISNULL(Pension, 0) Pension, ISNULL(TransportAllowance, 0) TransportAllowance,
                                    ISNULL(EntertainmentAllowance, 0) EntertainmentAllowance,
                                    ISNULL(OtherAllowance, 0) OtherAllowance, ISNULL(GratuityNotice, 0) GratuityNotice,
                                    CessationProvisions, ApprovalObtainedFromIRAS, ApprovalObtainedFromIRASApproveDate,
                                    ISNULL(GrossCommissionAmountAndOther, '0-0-0') GrossCommissionAmountAndOther,
                                    GrossCommissionIndicator,
                                    ISNULL(CompensationRetrenchmentBenefitsPaid, 0) CompensationRetrenchmentBenefitsPaid,
                                    CompensationRetrenchmentBenefitsPaidYN = CASE WHEN (CompensationRetrenchmentBenefitsPaid IS NOT NULL OR
                                                                                        CompensationRetrenchmentBenefitsPaid > 0
                                                                                       ) THEN 'Y'
                                                                                  ELSE ''
                                                                             END
                             FROM   (SELECT [dbo].[fn_getEmpNationality](e.nationality_id) AS nationality_name,
                                            [dbo].[fn_getCountryName](e.country_id) AS country_name,
                                            [dbo].[fn_getReligion](e.religion_id) AS religion_id1,
                                            [dbo].[fn_getRace](e.race_id) AS race_id1,
                                            [dbo].[fn_getDesignation](e.desig_id) AS desig_id1,
                                            [dbo].[fn_getEmpDept](e.dept_id) AS dep_name,
                                            [dbo].[fn_getFundDetails](e.emp_code, @year) AS Funds,
                                            [dbo].[fn_getFundDetailsMBMF](e.emp_code, @year) AS mbmf_fund, e.emp_code,
                                            e.emp_name, e.emp_lname, e.emp_alias, e.emp_type, e.nationality_id,
                                            e.ic_pp_number, e.wp_exp_date, e.pr_date, e.address, e.postal_code, e.phone,
                                            e.hand_phone, e.email, e.time_card_no, e.sex, e.country_id, e.religion_id,
                                            e.race_id, e.marital_status, e.place_of_birth, e.date_of_birth,
                                            e.income_taxid, e.giro_bank, e.giro_code, e.giro_branch, e.giro_acct_number,
                                            e.desig_id, e.dept_id, e.joining_date, e.probation_period,
                                            e.confirmation_date, e.termination_date, e.cpf_entitlement, e.emp_group_id,
                                            e.cpf_employer, e.cpf_employee, e.employee_cpf_acct, e.employer_cpf_acct,
                                            e.emp_supervisor, e.ot_entitlement, e.payment_mode, e.fw_code, e.fw_levy,
                                            e.sdf_required, e.cdac_fund, e.sinda_fund, e.ecf_fund, e.cchest_fund,
                                            e.email_payslip, e.wh_tax_pct, e.wh_tax_amt, e.education,
                                            e.termination_reason, e.pay_frequency, e.payrate, e.remarks, e.images,
                                            e.username, e.password, e.groupid, e.statusid, e.company_id,
                                            e.insurance_number, e.insurance_expiry, e.csoc_number, e.csoc_expiry,
                                            e.passport, e.passport_expiry, e.empcpftype, e.leave_carry_forward,
                                            e.giro_acc_name, e.localaddress2, e.foreignaddress1, e.foreignaddress2,
                                            e.foreignpostalcode, e.pp_issue_date, e.leaves_remaining,
                                            e.wp_application_date, e.worker_levy, e.hourly_rate_mode, e.hourly_rate,
                                            e.daily_rate_mode, e.daily_rate, e.block_no, e.street_name, e.level_no,
                                            e.unit_no, e.wdays_per_week, e.emp_ref_no, e.emp_status, e.fund_optout,
                                            e.emp_category, d.trx_id, e.emp_clsupervisor, e.v1rate, e.v2rate, e.v3rate,
                                            e.v4rate, e.wp_number, e.wp_issue_date, e.batch_no, e.shipyard_quota,
                                            e.photo_no,
                                            SUM(CONVERT(DECIMAL(8, 3), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                        d.basic_pay)))) +
                                            ISNULL(SUM(d.OT2_E), 0) + ISNULL(SUM(d.OT1_E), 0) [Total Gross],
                                            ISNULL(SUM(d.EMPCPF), 0) AS empcpf,
                                            ISNULL(SUM(d.unpaid_leaves_amount), 0) unpaid_leaves_amount,
                                            [dbo].[fn_Bonus](e.emp_code, @year) AS Bonus,
                                            [dbo].[fn_DirectorsFee](e.emp_code, @year) AS DirectorsFee,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 4) AS Pension,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 5) AS TransportAllowance,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 6) AS EntertainmentAllowance,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 7) AS OtherAllowance,
                                            [dbo].[fn_GratuityNoticePayment](e.emp_code, @year) AS GratuityNotice,
                                            [dbo].[fn_CessationProvisions](e.emp_code, @year) AS CessationProvisions,
                                            [dbo].[fn_ApprovalObtainedFromIRAS](e.emp_code, @year) AS ApprovalObtainedFromIRAS,
                                            [dbo].[fn_ApprovalObtainedFromIRASApproveDate](e.emp_code, @year) AS ApprovalObtainedFromIRASApproveDate,
                                            [dbo].[fn_GrossCommissionAmount](e.emp_code, @year) AS GrossCommissionAmountAndOther,
                                            [dbo].[fn_GrossCommissionIndicator](e.emp_code, @year) AS GrossCommissionIndicator,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 9) AS CompensationRetrenchmentBenefitsPaid
                                     FROM   #temp e
                                     INNER JOIN prepare_payroll_detail d ON e.emp_code = d.emp_id
                                     WHERE  D.status = 'G' AND
                                            e.company_id = @companyid
                                     GROUP BY e.emp_code, e.emp_name, e.emp_lname, e.emp_alias, e.emp_type,
                                            e.nationality_id, e.ic_pp_number, e.wp_exp_date, e.pr_date, e.address,
                                            e.postal_code, e.phone, e.hand_phone, e.email, e.time_card_no, e.sex,
                                            e.country_id, e.religion_id, e.race_id, e.marital_status, e.place_of_birth,
                                            e.date_of_birth, e.income_taxid, e.giro_bank, e.giro_code, e.giro_branch,
                                            e.giro_acct_number, e.desig_id, e.dept_id, e.joining_date,
                                            e.probation_period, e.confirmation_date, e.termination_date,
                                            e.cpf_entitlement, e.emp_group_id, e.cpf_employer, e.cpf_employee,
                                            e.employee_cpf_acct, e.employer_cpf_acct, e.emp_supervisor, e.ot_entitlement,
                                            e.payment_mode, e.fw_code, e.fw_levy, e.sdf_required, e.cdac_fund,
                                            e.mbmf_fund, e.sinda_fund, e.ecf_fund, e.cchest_fund, e.email_payslip,
                                            e.wh_tax_pct, e.wh_tax_amt, e.education, e.termination_reason,
                                            e.pay_frequency, e.payrate, e.remarks, e.images, e.username, e.password,
                                            e.groupid, e.statusid, e.company_id, e.insurance_number, e.insurance_expiry,
                                            e.csoc_number, e.csoc_expiry, e.passport, e.passport_expiry, e.empcpftype,
                                            e.leave_carry_forward, e.giro_acc_name, e.localaddress2, e.foreignaddress1,
                                            e.foreignaddress2, e.foreignpostalcode, e.pp_issue_date, e.leaves_remaining,
                                            e.wp_application_date, e.worker_levy, e.hourly_rate_mode, e.hourly_rate,
                                            e.daily_rate_mode, e.daily_rate, e.block_no, e.street_name, e.level_no,
                                            e.unit_no, e.wdays_per_week, e.emp_ref_no, e.emp_status, e.fund_optout,
                                            e.emp_category, d.trx_id, e.emp_clsupervisor, e.v1rate, e.v2rate, e.v3rate,
                                            e.v4rate, e.wp_number, e.wp_issue_date, e.batch_no, e.shipyard_quota,
                                            e.photo_no
                                    ) AS a
                             INNER JOIN prepare_payroll_hdr hrd ON a.trx_id = hrd.trx_id
                             WHERE  DATEPART(year, hrd.start_period) = @year
                             GROUP BY a.emp_code, a.emp_name, a.emp_lname, a.emp_alias, a.nationality_name, a.emp_type,
                                    a.ic_pp_number, a.wp_exp_date, a.pr_date, a.address, a.country_name, a.postal_code,
                                    a.phone, a.hand_phone, a.email, a.time_card_no, a.sex, a.religion_id1, a.race_id1,
                                    a.marital_status, a.place_of_birth, a.date_of_birth, a.income_taxid, a.giro_bank,
                                    a.giro_code, a.giro_branch, a.giro_acct_number, a.desig_id1, a.dep_name,
                                    a.joining_date, a.probation_period, a.confirmation_date, a.termination_date,
                                    a.cpf_entitlement, a.emp_group_id, a.cpf_employer, a.cpf_employee,
                                    a.employee_cpf_acct, a.employer_cpf_acct, a.emp_supervisor, a.ot_entitlement,
                                    a.payment_mode, a.fw_code, a.fw_levy, a.sdf_required, a.mbmf_fund, a.funds,
                                    a.mbmf_fund, a.email_payslip, a.wh_tax_pct, a.wh_tax_amt, a.education,
                                    a.termination_reason, a.pay_frequency, a.payrate, a.remarks, a.images, a.username,
                                    a.password, a.groupid, a.statusid, a.company_id, a.insurance_number,
                                    a.insurance_expiry, a.csoc_number, a.csoc_expiry, a.passport, a.passport_expiry,
                                    a.empcpftype, a.leave_carry_forward, a.giro_acc_name, a.localaddress2,
                                    a.foreignaddress1, a.foreignaddress2, a.foreignpostalcode, a.pp_issue_date,
                                    a.leaves_remaining, a.wp_application_date, a.worker_levy, a.hourly_rate_mode,
                                    a.hourly_rate, a.daily_rate_mode, a.daily_rate, a.block_no, a.street_name,
                                    a.level_no, a.unit_no, a.wdays_per_week, a.emp_ref_no, a.emp_status, a.fund_optout,
                                    a.emp_category, a.Bonus, a.DirectorsFee, a.Pension, a.TransportAllowance,
                                    a.EntertainmentAllowance, a.OtherAllowance, a.GratuityNotice, a.CessationProvisions,
                                    a.ApprovalObtainedFromIRAS, a.ApprovalObtainedFromIRASApproveDate,
                                    a.GrossCommissionAmountAndOther, a.GrossCommissionIndicator,
                                    a.CompensationRetrenchmentBenefitsPaid, a.emp_clsupervisor
                            ) tmp
                     LEFT OUTER JOIN employee_ir8a i ON tmp.emp_code = i.emp_id
                    ) F        
       END                            
       DROP TABLE #temp
GO
/****** Object:  StoredProcedure [dbo].[sp_IR8ADetails]    Script Date: 09/02/2009 11:57:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_IR8ADetails]
       (
        @year INT = '2008' ,
        @companyid INT ,
        @EmpCode VARCHAR(8000) = ''                            
       )
AS 
       DECLARE @where VARCHAR(8000)                                
       DECLARE @select VARCHAR(8000)              
               
       DECLARE @companyname VARCHAR(100)              
       DECLARE @CompnayPhone VARCHAR(100)              
       DECLARE @AuthPerson VARCHAR(100)              
       DECLARE @Designation_company VARCHAR(100)              
       DECLARE @companyroc VARCHAR(100)              
       DECLARE @company_type VARCHAR(100)              
       DECLARE @companyaddress1 VARCHAR(100)              
       DECLARE @companyaddress2 VARCHAR(100)              
       DECLARE @comppostalcode VARCHAR(100)                 
                          
       BEGIN                                          
             SET NOCOUNT ON                                        
             IF @year IS NULL 
                BEGIN                                            
                      SELECT    @year = '2008'                                             
                END                          
                    
             IF @EmpCode = '100000' 
                BEGIN                    
                      SET @EmpCode = ''                    
                END                          
                          
             IF LEN(@EmpCode) > 0 
                BEGIN                                
                      SELECT    @where = 'Where Emp_Code not in (' + @EmpCode + ')'                          
                END                            
             PRINT @where                  
              
             SET @companyname = (SELECT company_name FROM company WHERE company_id= @companyid
                                )              
             SET @CompnayPhone = (SELECT phone FROM company WHERE company_id= @companyid
                                 )              
             SET @AuthPerson = (SELECT auth_person FROM company WHERE company_id= @companyid
                               )              
             SET @Designation_company = (SELECT designation FROM company WHERE company_id= @companyid
                                        )              
             SET @companyroc = (SELECT company_roc FROM company WHERE company_id= @companyid
                               )              
             SET @company_type = (SELECT company_type FROM company WHERE company_id= @companyid
                                 )              
             SET @companyaddress1 = (SELECT [address] FROM company WHERE company_id= @companyid
                                    )              
             SET @companyaddress2 = (SELECT address2 FROM company WHERE company_id= @companyid
                                    )              
             SET @comppostalcode = (SELECT postal_code FROM company WHERE company_id= @companyid
                                   )               
                      
             SELECT *
             INTO   #temp
             FROM   Employee
             WHERE  Company_Id = @companyid                          
                          
                          
             SELECT @select = 'Delete From #temp ' + @where                                
             EXEC (@select)                                
                          
                          
             SELECT startdate = CASE WHEN F.joining_date_Iras IS NOT NULL AND
                                          YEAR(F.joining_date_Iras) = @year
                                     THEN CONVERT(VARCHAR(10), F.joining_date_Iras, 101)
                                     ELSE F.StartDateOld
                                END,
                    enddate = CASE WHEN F.termination_date_Iras IS NOT NULL AND
                                        YEAR(F.termination_date_Iras) = @year
                                   THEN CONVERT(VARCHAR(10), F.termination_date_Iras, 101)
                                   ELSE F.enddateold
                              END, F.*
             FROM   (SELECT joining_date_Iras = CASE WHEN i.dateofcommencement IS NULL AND
                                                          YEAR(tmp.joining_date) = @year THEN tmp.joining_date
                                                     ELSE i.dateofcommencement
                                                END ,
                            termination_date_Iras = CASE WHEN i.dateofcessation IS NULL AND
                                                              YEAR(tmp.termination_date) = @year
                                                         THEN tmp.termination_date
                                                         ELSE i.dateofcessation
                                                    END ,
                            tmp.* ,
                            i.addr_type ,
                            i.cessation_provision ,
                            i.s45_tax_on_directorFee ,
                            ISNULL(i.retirement_benefits_amount, 0) retirement_benefits_amount ,
                            i.retirement_benefits_fundName ,
                            i.retirement_benefits ,
                            ISNULL(i.benefits_in_kind_amount, 0) benefits_in_kind_amount ,
                            i.benefits_in_kind ,
                            ISNULL(i.stock_options_amount, 0) stock_options_amount ,
                            i.stock_options ,
                            ISNULL(i.excess_voluntary_cpf_employer_amount, 0) excessvoluntarycpfemployeramt ,
                            i.excess_voluntary_cpf_employer ,
                            ISNULL(i.pension_out_singapore_amount, 0) pension_out_singapore_amount ,
                            i.pension_out_singapore ,
                            ISNULL(i.tax_borne_employer_amount, 0) tax_borne_employer_amount ,
                            i.tax_borne_employer_options ,
                            ISNULL(i.tax_borne_employee_amount, 0) tax_borne_employee_amount ,
                            @companyname [Companyname] ,
                            @CompnayPhone [Companyphone] ,
                            @AuthPerson [Authperson] ,
                            @Designation_company [Authpersondesignation] ,
                            @companyroc [Companyroc] ,
                            @company_type [Companytype] ,
                            @companyaddress1 [Companyaddress1] ,
                            @companyaddress2 [Companyaddress2] ,
                            @comppostalcode [Companypostal]
                     FROM   (SELECT MIN(CONVERT(VARCHAR(10), hrd.start_period, 101)) AS startdateold,
                                    MAX(CONVERT(VARCHAR(10), hrd.end_period, 101)) AS enddateold, a.emp_code, a.emp_name,
                                    a.emp_lname, a.emp_alias, a.nationality_name, a.emp_type, a.ic_pp_number,
                                    a.wp_exp_date, a.pr_date, a.address, a.country_name, a.postal_code, a.phone,
                                    a.hand_phone, a.email, a.time_card_no, a.sex, a.religion_id1, a.race_id1,
                                    a.marital_status, a.place_of_birth,
                                    CONVERT(VARCHAR(8), a.date_of_birth, 112) AS date_of_birth, a.income_taxid,
                                    a.giro_bank, a.giro_code, a.giro_branch, a.giro_acct_number, a.desig_id1, a.dep_name,
                                    a.joining_date, a.probation_period, a.confirmation_date, a.termination_date,
                                    a.cpf_entitlement, a.emp_group_id, a.cpf_employer, a.cpf_employee,
                                    a.employee_cpf_acct, a.employer_cpf_acct, a.emp_supervisor, a.ot_entitlement,
                                    a.payment_mode, a.fw_code, a.fw_levy, a.sdf_required, a.funds, a.mbmf_fund,
                                    a.email_payslip, a.wh_tax_pct, a.wh_tax_amt, a.education, a.termination_reason,
                                    a.pay_frequency, a.payrate, a.remarks, a.images, a.username, a.password, a.groupid,
                                    a.statusid, a.company_id, a.insurance_number, a.insurance_expiry, a.csoc_number,
                                    a.csoc_expiry, a.passport, a.passport_expiry, a.empcpftype, a.leave_carry_forward,
                                    a.giro_acc_name, a.localaddress2, a.foreignaddress1, a.foreignaddress2,
                                    a.foreignpostalcode, a.pp_issue_date, a.leaves_remaining, a.wp_application_date,
                                    a.worker_levy, a.hourly_rate_mode, a.hourly_rate, a.daily_rate_mode, a.daily_rate,
                                    a.block_no, a.street_name, a.level_no, a.unit_no, a.wdays_per_week,
                                    a.emp_ref_no AS emp_id_type, a.emp_status, a.fund_optout, a.emp_category,
                                    ROUND((ISNULL(SUM(a.[Total Gross]), 0) + ISNULL([dbo].[fn_GrossSalary](a.emp_code,
                                                                                                        @year), 0)) -
                                          (ISNULL(SUM(a.unpaid_leaves_amount), 0)), 0, 1) Gross,
                                    ISNULL(SUM(a.empcpf), 0) empcpf,
                                    ISNULL(SUM(a.unpaid_leaves_amount), 0) unpaid_leaves_amount,
                                    ISNULL(a.Bonus, 0) Bonus, ISNULL(DirectorsFee, 0) DirectorsFee,
                                    ISNULL(Pension, 0) Pension, ISNULL(TransportAllowance, 0) TransportAllowance,
                                    ISNULL(EntertainmentAllowance, 0) EntertainmentAllowance,
                                    ISNULL(OtherAllowance, 0) OtherAllowance, ISNULL(GratuityNotice, 0) GratuityNotice,
                                    CessationProvisions, ApprovalObtainedFromIRAS, ApprovalObtainedFromIRASApproveDate,
                                    ISNULL(GrossCommissionAmountAndOther, '0-0-0') GrossCommissionAmountAndOther,
                                    GrossCommissionIndicator,
                                    ISNULL(CompensationRetrenchmentBenefitsPaid, 0) CompensationRetrenchmentBenefitsPaid,
                                    CompensationRetrenchmentBenefitsPaidYN = CASE WHEN (CompensationRetrenchmentBenefitsPaid IS NOT NULL OR
                                                                                        CompensationRetrenchmentBenefitsPaid > 0
                                                                                       ) THEN 'Y'
                                                                                  ELSE ''
                                                                             END
                             FROM   (SELECT [dbo].[fn_getEmpNationality](e.nationality_id) AS nationality_name,
                                            [dbo].[fn_getCountryName](e.country_id) AS country_name,
                                            [dbo].[fn_getReligion](e.religion_id) AS religion_id1,
                                            [dbo].[fn_getRace](e.race_id) AS race_id1,
                                            [dbo].[fn_getDesignation](e.desig_id) AS desig_id1,
                                            [dbo].[fn_getEmpDept](e.dept_id) AS dep_name,
                                            [dbo].[fn_getFundDetails](e.emp_code, @year) AS Funds,
                                            [dbo].[fn_getFundDetailsMBMF](e.emp_code, @year) AS mbmf_fund, e.emp_code,
                                            e.emp_name, e.emp_lname, e.emp_alias, e.emp_type, e.nationality_id,
                                            e.ic_pp_number, e.wp_exp_date, e.pr_date, e.address, e.postal_code, e.phone,
                                            e.hand_phone, e.email, e.time_card_no, e.sex, e.country_id, e.religion_id,
                                            e.race_id, e.marital_status, e.place_of_birth, e.date_of_birth,
                                            e.income_taxid, e.giro_bank, e.giro_code, e.giro_branch, e.giro_acct_number,
                                            e.desig_id, e.dept_id, e.joining_date, e.probation_period,
                                            e.confirmation_date, e.termination_date, e.cpf_entitlement, e.emp_group_id,
                                            e.cpf_employer, e.cpf_employee, e.employee_cpf_acct, e.employer_cpf_acct,
                                            e.emp_supervisor, e.ot_entitlement, e.payment_mode, e.fw_code, e.fw_levy,
                                            e.sdf_required, e.cdac_fund, e.sinda_fund, e.ecf_fund, e.cchest_fund,
                                            e.email_payslip, e.wh_tax_pct, e.wh_tax_amt, e.education,
                                            e.termination_reason, e.pay_frequency, e.payrate, e.remarks, e.images,
                                            e.username, e.password, e.groupid, e.statusid, e.company_id,
                                            e.insurance_number, e.insurance_expiry, e.csoc_number, e.csoc_expiry,
                                            e.passport, e.passport_expiry, e.empcpftype, e.leave_carry_forward,
                                            e.giro_acc_name, e.localaddress2, e.foreignaddress1, e.foreignaddress2,
                                            e.foreignpostalcode, e.pp_issue_date, e.leaves_remaining,
                                            e.wp_application_date, e.worker_levy, e.hourly_rate_mode, e.hourly_rate,
                                            e.daily_rate_mode, e.daily_rate, e.block_no, e.street_name, e.level_no,
                                            e.unit_no, e.wdays_per_week, e.emp_ref_no, e.emp_status, e.fund_optout,
                                            e.emp_category, d.trx_id, e.emp_clsupervisor, e.v1rate, e.v2rate, e.v3rate,
                                            e.v4rate, e.wp_number, e.wp_issue_date, e.batch_no, e.shipyard_quota,
                                            e.photo_no,
                                            SUM(CONVERT(DECIMAL(8, 3), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                                        d.basic_pay)))) +
                                            ISNULL(SUM(d.OT2_E), 0) + ISNULL(SUM(d.OT1_E), 0) [Total Gross],
                                            ISNULL(SUM(d.EMPCPF), 0) AS empcpf,
                                            ISNULL(SUM(d.unpaid_leaves_amount), 0) unpaid_leaves_amount,
                                            [dbo].[fn_Bonus](e.emp_code, @year) AS Bonus,
                                            [dbo].[fn_DirectorsFee](e.emp_code, @year) AS DirectorsFee,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 4) AS Pension,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 5) AS TransportAllowance,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 6) AS EntertainmentAllowance,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 7) AS OtherAllowance,
                                            [dbo].[fn_GratuityNoticePayment](e.emp_code, @year) AS GratuityNotice,
                                            [dbo].[fn_CessationProvisions](e.emp_code, @year) AS CessationProvisions,
                                            [dbo].[fn_ApprovalObtainedFromIRAS](e.emp_code, @year) AS ApprovalObtainedFromIRAS,
                                            [dbo].[fn_ApprovalObtainedFromIRASApproveDate](e.emp_code, @year) AS ApprovalObtainedFromIRASApproveDate,
                                            [dbo].[fn_GrossCommissionAmount](e.emp_code, @year) AS GrossCommissionAmountAndOther,
                                            [dbo].[fn_GrossCommissionIndicator](e.emp_code, @year) AS GrossCommissionIndicator,
                                            [dbo].[fn_GetOtherInfo](e.emp_code, @year, 9) AS CompensationRetrenchmentBenefitsPaid
                                     FROM   #temp e
                                     INNER JOIN prepare_payroll_detail d ON e.emp_code = d.emp_id
                                     WHERE  D.status = 'G' AND
                                            e.company_id = @companyid
                                     GROUP BY e.emp_code, e.emp_name, e.emp_lname, e.emp_alias, e.emp_type,
                                            e.nationality_id, e.ic_pp_number, e.wp_exp_date, e.pr_date, e.address,
                                            e.postal_code, e.phone, e.hand_phone, e.email, e.time_card_no, e.sex,
                                            e.country_id, e.religion_id, e.race_id, e.marital_status, e.place_of_birth,
                                            e.date_of_birth, e.income_taxid, e.giro_bank, e.giro_code, e.giro_branch,
                                            e.giro_acct_number, e.desig_id, e.dept_id, e.joining_date,
                                            e.probation_period, e.confirmation_date, e.termination_date,
                                            e.cpf_entitlement, e.emp_group_id, e.cpf_employer, e.cpf_employee,
                                            e.employee_cpf_acct, e.employer_cpf_acct, e.emp_supervisor, e.ot_entitlement,
                                            e.payment_mode, e.fw_code, e.fw_levy, e.sdf_required, e.cdac_fund,
                                            e.mbmf_fund, e.sinda_fund, e.ecf_fund, e.cchest_fund, e.email_payslip,
                                            e.wh_tax_pct, e.wh_tax_amt, e.education, e.termination_reason,
                                            e.pay_frequency, e.payrate, e.remarks, e.images, e.username, e.password,
                                            e.groupid, e.statusid, e.company_id, e.insurance_number, e.insurance_expiry,
                                            e.csoc_number, e.csoc_expiry, e.passport, e.passport_expiry, e.empcpftype,
                                            e.leave_carry_forward, e.giro_acc_name, e.localaddress2, e.foreignaddress1,
                                            e.foreignaddress2, e.foreignpostalcode, e.pp_issue_date, e.leaves_remaining,
                                            e.wp_application_date, e.worker_levy, e.hourly_rate_mode, e.hourly_rate,
                                            e.daily_rate_mode, e.daily_rate, e.block_no, e.street_name, e.level_no,
                                            e.unit_no, e.wdays_per_week, e.emp_ref_no, e.emp_status, e.fund_optout,
                                            e.emp_category, d.trx_id, e.emp_clsupervisor, e.v1rate, e.v2rate, e.v3rate,
                                            e.v4rate, e.wp_number, e.wp_issue_date, e.batch_no, e.shipyard_quota,
                                            e.photo_no
                                    ) AS a
                             INNER JOIN prepare_payroll_hdr hrd ON a.trx_id = hrd.trx_id
                             WHERE  DATEPART(year, hrd.start_period) = @year
                             GROUP BY a.emp_code, a.emp_name, a.emp_lname, a.emp_alias, a.nationality_name, a.emp_type,
                                    a.ic_pp_number, a.wp_exp_date, a.pr_date, a.address, a.country_name, a.postal_code,
                                    a.phone, a.hand_phone, a.email, a.time_card_no, a.sex, a.religion_id1, a.race_id1,
                                    a.marital_status, a.place_of_birth, a.date_of_birth, a.income_taxid, a.giro_bank,
                                    a.giro_code, a.giro_branch, a.giro_acct_number, a.desig_id1, a.dep_name,
                                    a.joining_date, a.probation_period, a.confirmation_date, a.termination_date,
                                    a.cpf_entitlement, a.emp_group_id, a.cpf_employer, a.cpf_employee,
                                    a.employee_cpf_acct, a.employer_cpf_acct, a.emp_supervisor, a.ot_entitlement,
                                    a.payment_mode, a.fw_code, a.fw_levy, a.sdf_required, a.mbmf_fund, a.funds,
                                    a.mbmf_fund, a.email_payslip, a.wh_tax_pct, a.wh_tax_amt, a.education,
                                    a.termination_reason, a.pay_frequency, a.payrate, a.remarks, a.images, a.username,
                                    a.password, a.groupid, a.statusid, a.company_id, a.insurance_number,
                                    a.insurance_expiry, a.csoc_number, a.csoc_expiry, a.passport, a.passport_expiry,
                                    a.empcpftype, a.leave_carry_forward, a.giro_acc_name, a.localaddress2,
                                    a.foreignaddress1, a.foreignaddress2, a.foreignpostalcode, a.pp_issue_date,
                                    a.leaves_remaining, a.wp_application_date, a.worker_levy, a.hourly_rate_mode,
                                    a.hourly_rate, a.daily_rate_mode, a.daily_rate, a.block_no, a.street_name,
                                    a.level_no, a.unit_no, a.wdays_per_week, a.emp_ref_no, a.emp_status, a.fund_optout,
                                    a.emp_category, a.Bonus, a.DirectorsFee, a.Pension, a.TransportAllowance,
                                    a.EntertainmentAllowance, a.OtherAllowance, a.GratuityNotice, a.CessationProvisions,
                                    a.ApprovalObtainedFromIRAS, a.ApprovalObtainedFromIRASApproveDate,
                                    a.GrossCommissionAmountAndOther, a.GrossCommissionIndicator,
                                    a.CompensationRetrenchmentBenefitsPaid, a.emp_clsupervisor
                            ) tmp
                     LEFT OUTER JOIN employee_ir8a i ON tmp.emp_code = i.emp_id
                    ) F          
       END                              
       DROP TABLE #temp
GO
/****** Object:  StoredProcedure [dbo].[sp_EmployeeWorkflowLevel]    Script Date: 09/02/2009 11:57:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROC [dbo].[sp_EmployeeWorkflowLevel]    
		(    
			@WorkflowID INT ,    
			@PayrollGroupID INT ,    
			@FlowType INT ,   
			@ExpiryDays INT,  
			@Action VARCHAR(20),  
			@retval INT OUTPUT          
		)    
		AS     
	   DECLARE @RowID AS INT              
	   BEGIN      
     		SELECT @RowID = COUNT(RowID)    
				 FROM   EmployeeWorkFlowLevel    
				 WHERE  WorkFlowID = @WorkflowID AND    
						FlowType = @FlowType    
				 INSERT INTO EmployeeWorkFlowLevel (WorkFlowID, RowID, PayrollGroupID, FlowType,ExpiryDays,[Action])  
				 VALUES (@WorkFlowID, @RowID + 1, @PayrollGroupID, @FlowType,@ExpiryDays,@Action)    
			 RETURN          
	   END
GO
/****** Object:  StoredProcedure [dbo].[sp_CheckSuperAdminCount]    Script Date: 09/02/2009 11:56:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_CheckSuperAdminCount]
       (
        @CompanyID INT ,
        @EmployeeID INT = ''  
       )
AS 
       BEGIN    
  
             DECLARE @grpname AS VARCHAR(20)  
    
             SELECT @grpname = UG.GroupName
             FROM   Employee E
             JOIN   UserGroups UG ON E.GroupID = UG.GroupID
             WHERE  E.Emp_Code = @EmployeeID  
  
             IF @grpname = 'Super Admin' 
                BEGIN  
                      SELECT    COUNT(*)
                      FROM      Employee E
                      JOIN      UserGroups UG ON E.GroupID = UG.GroupID
                      WHERE     UG.GroupName = 'Super Admin' AND
                                E.StatusID = 1 AND
                                E.Company_Id = @CompanyID    
                END  
             ELSE 
                BEGIN  
 --IF Normal User then return anything less than -1 or -1. Becoz system assumes it normal user  
 -- and allows for further update.  
                      SELECT    -100  
                END  
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_checkValidLeaveRequest]    Script Date: 09/02/2009 11:56:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_checkValidLeaveRequest]
       @emp_id INT ,
       @leaverequestfromdate VARCHAR(50) ,
       @leaverequesttodate VARCHAR(50)
AS 
       DECLARE @joining_date DATETIME  
--DECLARE @leaverequestfromdate varchar(50)  
--DECLARE @leaverequesttodate varchar(50)  
  
       SET @leaverequestfromdate = CONVERT(DATETIME, @leaverequestfromdate, 103)          
       SET @leaverequesttodate = CONVERT(DATETIME, @leaverequesttodate, 103)    
       SELECT   @joining_date = CONVERT(DATETIME, joining_date, 103)
       FROM     Employee
       WHERE    emp_code = @emp_id  
  
--print DATEDIFF( dd, convert(datetime, @joining_date, 103) , convert(datetime, @leaverequestfromdate, 103))  
--print DATEDIFF( dd, convert(datetime, @joining_date , 103) , convert(datetime, @leaverequesttodate, 103))  
  
       IF DATEDIFF(dd, CONVERT(DATETIME, @joining_date, 103), CONVERT(DATETIME, @leaverequestfromdate, 103)) < 0 
          BEGIN  
                SELECT  -100  
          END  
       ELSE 
          BEGIN  
                IF DATEDIFF(dd, CONVERT(DATETIME, @joining_date, 103), CONVERT(DATETIME, @leaverequestfromdate, 103)) >= 0 OR
                   DATEDIFF(dd, CONVERT(DATETIME, @leaverequesttodate, 103), CONVERT(DATETIME, @joining_date, 103)) >= 0 
                   BEGIN  
                         SELECT 1  
                   END  
                ELSE 
                   BEGIN  
                         SELECT -1   
                   END  
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_User_add]    Script Date: 09/02/2009 11:58:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_User_add]
       (
        @UserName [varchar](50) ,
        @Password [varchar](100) ,
        @GroupId [int] ,
        @StatusId [int] ,
        @Email [varchar](50)
       )
AS 
       BEGIN
	
   
             INSERT INTO [employee] ([UserName], [Password], [GroupId], [StatusId], [Email])
             VALUES (@UserName, @Password, @GroupId, @StatusId, @Email)
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_user_update]    Script Date: 09/02/2009 11:58:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Mythili   
-- Create date: 17.8.07  
-- Description: To update the record in the Employee table.  
-- =============================================  
CREATE PROCEDURE [dbo].[sp_user_update]
       (
        @UserName [varchar](50) ,
        @Password [varchar](100) ,
        @GroupId [int] ,
        @StatusId [int] ,
        @Email [varchar](50)
       )
AS 
       BEGIN  
             IF @Password <> '' 
                BEGIN
                      UPDATE    employee
                      SET       [Password] = @Password, [GroupId] = @GroupId, [StatusId] = @StatusId, [Email] = @Email
                      WHERE     [UserName] = @UserName  
                END

             ELSE 
                BEGIN
                      UPDATE    employee
                      SET       [GroupId] = @GroupId, [StatusId] = @StatusId, [Email] = @Email
                      WHERE     [UserName] = @UserName  
                END
   
       END  
  
  
  
       SELECT   USERNAME, PASSWORD
       FROM     employee
       WHERE    username = 'ADMIN'
GO
/****** Object:  StoredProcedure [dbo].[sp_trans_leave]    Script Date: 09/02/2009 11:58:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_trans_leave 3,2011,8,2  
CREATE PROC [dbo].[Sp_trans_leave] (@Groupid     INT,
                                   @year        INT,
                                   @leaves      FLOAT,
                                   @compid      INT,
                                   @applydateon DATETIME = NULL)
AS
  DECLARE @today AS DATETIME
  DECLARE @leavemodel AS INT

  SELECT @leavemodel = Leave_Model
  FROM   Company
  WHERE  Company_ID = @compid

  IF @applydateon IS NULL
    BEGIN
        SET @applydateon = Getdate()
        SET @today = Getdate()
    END
  ELSE
    BEGIN
        SET @today = @applydateon
    END

  IF ( @leavemodel = 1
        OR @leavemodel = 2
        OR @leavemodel = 5
        OR @leavemodel = 7 )
    BEGIN
        IF ( YEAR(@today) >= @year )
          BEGIN
              SET @today = CONVERT(DATETIME, '31/12/'+CAST(@year-1 AS VARCHAR), 103)
          END
    END

  BEGIN
      DECLARE @LEAVEAVAIL TABLE (
        ID                    INT,
        EMP_ID                INT,
        LEAVE_YEAR            INT,
        [TYPE]                VARCHAR(50),
        CompanyLeaveAllowed   FLOAT,
        LY_Leaves_Bal         FLOAT,
        LeavesAllowed         FLOAT,
        LeavesEarned          FLOAT,
        PaidLeaves            FLOAT,
        UnpaidLeaves          FLOAT,
        PendingLeaves         FLOAT,
        LeavesAvailable       FLOAT,
        TotalLeavesTaken      FLOAT,
        ActualLeavesAvailable FLOAT,
        SHOWLEAVEMODEL        INT )
      DECLARE @lastyear INT

      SET @lastyear = @year - 1

      SELECT EMp_Code,
             Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') Emp_Name,
             company_id,
             emp_group_id,
             termination_date,
             joining_date
      --,0 currentyear, 0 LastYr_leaves_allowed, 0 Company_Policy, 0 paid_leaves, 0 lastyearleaves, 0 RemLastYrLeaves, 0 TotalLastYrLeaves, 0 TotalAvailLeaves                      
      INTO   ##EmployeeTemp
      FROM   Employee
      WHERE  Emp_Code IN (SELECT DISTINCT Emp_Id
                          FROM   dbo.EmployeeLeavesAllowed AS ela
                          WHERE  ela.leave_year < @year
                                 AND leave_type = 8
                                 AND Emp_ID NOT IN (SELECT DISTINCT Emp_Id
                                                    FROM   dbo.EmployeeLeavesAllowed AS ela
                                                    WHERE  ela.leave_year >= @year
                                                           AND leave_type = 8))
             AND emp_group_id = @Groupid
             AND Termination_Date IS NULL

      DECLARE @EmpID INT
      DECLARE db_cursor CURSOR FOR
        SELECT Emp_Code
        FROM   ##EmployeeTemp

      OPEN db_cursor

      FETCH NEXT FROM db_cursor INTO @EmpID

      WHILE @@FETCH_STATUS = 0
        BEGIN
            INSERT @LEAVEAVAIL
                   (ID,
                    EMP_ID,
                    LEAVE_YEAR,
                    [TYPE],
                    CompanyLeaveAllowed,
                    LY_Leaves_Bal,
                    LeavesAllowed,
                    LeavesEarned,
                    PaidLeaves,
                    UnpaidLeaves,
                    PendingLeaves,
                    LeavesAvailable,
                    ActualLeavesAvailable,
                    TotalLeavesTaken,
                    SHOWLEAVEMODEL)
            EXEC Sp_getemployeeleavepolicy
              @EmpID,
              @lastyear,
              @today,
              8

            FETCH NEXT FROM db_cursor INTO @EmpID
        END

      CLOSE db_cursor

      DEALLOCATE db_cursor

      SELECT Emp_Code,
             Emp_Name,
             Company_ID,
             Emp_Group_ID,
             Termination_Date,
             LastYearLeaves,
             Company_Policy,
             TotalLastYrLeaves,
             CurrentYear = CASE
                             WHEN ( @leavemodel = 3
                                     OR @leavemodel = 4
                                     OR @leavemodel = 6
                                     OR @leavemodel = 8 ) THEN ( CurrentYearCalc + CalcYearOf )
                             ELSE CurrentYearCalc
                           END,
             TotalAvailLeaves
      FROM   (SELECT Emp_Code,
                     Emp_Name,
                     Company_ID,
                     Emp_Group_ID,
                     Termination_Date,
                     Isnull(LastYearLeaves, 0)                            LastYearLeaves,
                     Isnull(Company_Policy, 0)                            Company_Policy,
                     Isnull(TotalLastYrLeaves, 0)                         TotalLastYrLeaves,
                     Isnull(CurrentYearCalc, 0)                           CurrentYearCalc,
                     ( TotalLastYrLeaves + CurrentYearCalc + CalcYearOf ) TotalAvailLeaves,
                     CalcYearOf
              FROM   (SELECT *,
                             CalcYearOf= CASE
                                           WHEN Ceiling(( Datediff(m, Joining_Date, CONVERT(DATETIME, @applydateon, 103)) ) / 12) = 0 THEN 0
                                           ELSE 0
                                         END,
                             CurrentYearCalc = CASE
                                                 WHEN CurYear IS NULL THEN 0
                                                 ELSE CurYear
                                               END
                      FROM   (SELECT ET.*,
                                     Isnull(LA.ActualLeavesAvailable, 0) lastyearleaves,
                                     Isnull(@leaves, 0)                  AS Company_Policy,
                                     CASE
                                       WHEN ( LA.ActualLeavesAvailable > @leaves ) THEN Isnull(@leaves, 0)
                                       WHEN ( LA.ActualLeavesAvailable <= @leaves ) THEN Isnull(LA.ActualLeavesAvailable, 0)
                                       ELSE 0
                                     END                                 TotalLastYrLeaves,
                                     (SELECT SUM(Leaves_Allowed) CurYear
                                      FROM   Leaves_Allowed
                                      WHERE  Group_ID = @Groupid
                                             AND Leave_Year = @year
                                             AND Leave_Type = 8)         CurYear
                              FROM   ##EmployeeTemp Et
                                     LEFT OUTER JOIN @LEAVEAVAIL LA
                                       ON ET.Emp_code = LA.EMP_ID) D) D) E

      DROP TABLE ##EmployeeTemp
  END 

GO
/****** Object:  StoredProcedure [dbo].[sp_leavereport3]    Script Date: 09/02/2009 11:58:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_leavereport3 1022,8,2008  
CREATE PROC [dbo].[sp_leavereport3]
       @empcode INT ,
       @month INT ,
       @year INT
AS 
       DECLARE @group_id INT              
       SELECT   @group_id = (SELECT emp_group_id FROM employee WHERE emp_code = @empcode
                            )  
  
       CREATE TABLE #leaveTemp
              (
               leave_id INT NULL ,
               leave_type VARCHAR(200) NULL
              )  
       INSERT   INTO #leaveTemp
                SELECT  [id], [type]
                FROM    [leave_types]
                WHERE   id IN (SELECT   leave_type
                               FROM     leaves_allowed
                               WHERE    group_id = (SELECT emp_group_id FROM employee WHERE emp_code = @empcode
                                                   ) AND
                                        leave_year = @year)    
                
    
       CREATE TABLE #temp
              (
               leave_id INT NULL ,
               leave_type VARCHAR(200) NULL ,
               leave_availabe FLOAT NULL ,
               leave_taken FLOAT NULL ,
               leave_unpaid FLOAT NULL ,
               leave_paid FLOAT NULL ,
               start_date VARCHAR(20) NULL ,
               end_date VARCHAR(20) NULL ,
               leave_balance FLOAT NULL
              )   
  
       WHILE EXISTS ( SELECT    *
                      FROM      #leaveTemp ) 
             BEGIN  
                   DECLARE @row_id INT  
                   DECLARE @row_desc VARCHAR(200)  
                   SELECT TOP 1
                            @row_id = leave_id, @row_desc = leave_type
                   FROM     #leaveTemp  
                   INSERT   INTO #temp (leave_id, leave_type, leave_unpaid, leave_paid, start_date, end_date)
                            SELECT  @row_id, @row_desc, ISNULL(unpaid_leaves, 0), ISNULL(paid_leaves, 0),
                                    CONVERT(VARCHAR(20), start_date, 103), CONVERT(VARCHAR(20), end_date, 103)
                            FROM    emp_leaves
                            WHERE   status = 'Approved' AND
                                    YEAR(start_date) = @year AND
                                    MONTH(start_date) = @month AND
                                    leave_type = @row_id AND
                                    emp_id = @empcode  
  
                   UPDATE   #temp
                   SET      leave_availabe = (SELECT    ISNULL(leaves_allowed, 0)
                                              FROM      leaves_allowed
                                              WHERE     group_id = @group_id AND
                                                        leave_year = @year AND
                                                        leave_type = @row_id
                                             )
                   WHERE    leave_id = @row_id  
  
                   UPDATE   #temp
                   SET      leave_taken = ((SELECT SUM (ISNULL (leave_unpaid, 0)) FROM #temp WHERE leave_id = @row_id
                                           ) + (SELECT SUM (ISNULL (leave_paid, 0)) FROM #temp WHERE leave_id = @row_id
                                               ))
                   WHERE    leave_id = @row_id  
                   UPDATE   #temp
                   SET      leave_balance = (SELECT SUM (leave_remaining) FROM leaves_annual WHERE emp_id= @empcode
                                            )
                   WHERE    leave_id = @row_id  
                   DELETE   FROM #leaveTemp
                   WHERE    leave_id = @row_id  
             END  
  
       DECLARE @row_count INT  
       SET @row_count = 0  
       SELECT   @row_count = COUNT(leave_id)
       FROM     #temp  
       IF @row_count > 0 
          BEGIN  
                SELECT  *, (SELECT  company_name
                            FROM    company
                            WHERE   company_id = (SELECT company_id FROM employee WHERE emp_code = @empcode
                                                 )
                           ) 'CompName', (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name FROM employee WHERE emp_code = @empcode
                                         ) 'EmpName'
                FROM    #temp       
          END  
       ELSE 
          BEGIN  
                INSERT  INTO #temp (leave_id, leave_type)
                        SELECT  [id], [type]
                        FROM    [leave_types]
                        WHERE   id IN (SELECT   leave_type
                                       FROM     leaves_allowed
                                       WHERE    group_id = (SELECT emp_group_id FROM employee WHERE emp_code = @empcode
                                                           ) AND
                                                leave_year = @year)  
  
                UPDATE  #temp
                SET     leave_availabe = (SELECT    ISNULL(leaves_allowed, 0)
                                          FROM      leaves_allowed
                                          WHERE     group_id = @group_id AND
                                                    leave_year = @year AND
                                                    leave_type = te.leave_id
                                         )
                FROM    #temp te
                WHERE   leave_id = te.leave_id  
                UPDATE  #temp
                SET     leave_balance = leave_availabe   
  
                SELECT  *, (SELECT  company_name
                            FROM    company
                            WHERE   company_id = (SELECT company_id FROM employee WHERE emp_code = @empcode
                                                 )
                           ) 'CompName', (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name FROM employee WHERE emp_code = @empcode
                                         ) 'EmpName'
                FROM    #temp       
    
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_emp_get1]    Script Date: 09/02/2009 11:57:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_emp_get1] @emp_code INT
AS 
       SELECT   emp_code, isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name, emp_type, ic_pp_number
       FROM     employee
       WHERE    emp_code = @emp_code
GO
/****** Object:  StoredProcedure [dbo].[sp_Group_update]    Script Date: 09/02/2009 11:57:53 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mythili
-- Create date: 18.08.07
-- Description:	To update groups in usergroup table
-- =============================================
CREATE PROCEDURE [dbo].[sp_Group_update]
       (
        @GroupId [Int] ,
        @GroupName [varchar](50)
       )
AS 
       BEGIN   
             UPDATE UserGroups
             SET    [GroupName] = @GroupName
             WHERE  [GroupId] = @GroupID


       END
GO
/****** Object:  StoredProcedure [dbo].[sp_Group_add]    Script Date: 09/02/2009 11:57:53 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mythili
-- Create date: 18.08.07
-- Description:	To add groups in usergroup table
-- =============================================
CREATE PROCEDURE [dbo].[sp_Group_add]
       (
        @GroupName [varchar](50) ,
        @company_id INT
       )
AS 
       BEGIN
             SET NOCOUNT ON ;

    
             INSERT INTO [UserGroups] ([GroupName], [company_id])
             VALUES (@GroupName, @company_id)
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_addRights_Customize]    Script Date: 09/02/2009 11:56:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_addRights_Customize]
       (
        @RightName [varchar](50) ,
        @RightCategory [varchar](50) ,
        @UserName [varchar](50)
       )
AS 
       DECLARE @count INT
       SELECT   @count = COUNT(rightid)
       FROM     userrights
       WHERE    UPPER(RightName) = UPPER(@RightName) AND
                UPPER(RightCategory) = UPPER(@RightCategory)



       IF @count <= 0 
          BEGIN
                BEGIN TRANSACTION         
                DELETE  FROM grouprights
                WHERE   rightid IN (SELECT  rightid
                                    FROM    userrights
                                    WHERE   UPPER(RightName) = UPPER(@RightName) AND
                                            UPPER(RightCategory) = UPPER(@RightCategory))  
                DELETE  FROM userrights
                WHERE   UPPER(RightName) = UPPER(@RightName) AND
                        UPPER(RightCategory) = UPPER(@RightCategory)  
                INSERT  INTO userrights (RightName, RightCategory)
                VALUES  (@RightName, @RightCategory)          
                COMMIT TRANSACTION    
     
                BEGIN TRANSACTION        
                CREATE TABLE #temp
                       (
                        GroupID INT NULL ,
                        RightID INT NULL
                       )         
	  
                INSERT  INTO #temp
                        SELECT  groupid, 0
                        FROM    usergroups
                        WHERE   GroupName = @UserName  
                UPDATE  #temp
                SET     RightID = (SELECT rightid FROM userrights WHERE RightName = @RightName
                                  )        
	  
                DELETE  FROM GroupRights
                WHERE   GroupID IN (SELECT  groupid
                                    FROM    usergroups
                                    WHERE   GroupName = @UserName) AND
                        RightID IN (SELECT  rightid
                                    FROM    userrights
                                    WHERE   RightName = @RightName)  
	  
                INSERT  INTO GroupRights
                        SELECT  *
                        FROM    #temp         
                DROP TABLE #temp          
                COMMIT TRANSACTION  
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_emp_leaves_adddeduc_update]    Script Date: 09/02/2009 11:57:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_emp_leaves_adddeduc_update]
       @rowid VARCHAR(8000) ,
       @leavereamining FLOAT ,
       @leavetype INT ,
       @eid VARCHAR(4) ,
       @Leave_Forefited INT ,
       @Remarks VARCHAR(8000) ,
       @Status INT
AS 
       BEGIN
             DECLARE @sqlstr VARCHAR(200)
             UPDATE EmployeeLeavesAllowed
             SET    Leaves_Allowed = @leavereamining
             WHERE  EMP_ID = @eid AND
                    LEAVE_TYPE = @leavetype
-- AAKASH --INSERT INTO leaves_forefited
             INSERT INTO leaves_forefited (EMP_ID, Leave_Year, Leave_Allowed, Leave_Forefited, Update_Date, Remarks,
                                           [Status])
             VALUES (@eid, YEAR(GETDATE()), @leavereamining, @Leave_Forefited, GETDATE(), @Remarks, @Status)

       END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetDaysInMonth]    Script Date: 09/02/2009 11:57:43 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_GetDaysInMonth]
AS 
       SELECT   year, CASE month
                        WHEN 1 THEN (SELECT 'January'
                                    )
                        WHEN 2 THEN (SELECT 'February'
                                    )
                        WHEN 3 THEN (SELECT 'March'
                                    )
                        WHEN 4 THEN (SELECT 'April'
                                    )
                        WHEN 5 THEN (SELECT 'May'
                                    )
                        WHEN 6 THEN (SELECT 'June'
                                    )
                        WHEN 7 THEN (SELECT 'July'
                                    )
                        WHEN 8 THEN (SELECT 'August'
                                    )
                        WHEN 9 THEN (SELECT 'September'
                                    )
                        WHEN 10 THEN (SELECT 'October'
                                     )
                        WHEN 11 THEN (SELECT 'November'
                                     )
                        WHEN 12 THEN (SELECT 'December'
                                     )
                      END 'month', calendar_days, sundays, saturdays, days_week5, days_week512, days_week6, days_week7
       FROM     daysinmonth
       WHERE    year = YEAR(GETDATE())
GO
/****** Object:  StoredProcedure [dbo].[sp_Hitachi_OT_Report]    Script Date: 09/02/2009 11:57:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_Hitachi_OT_Report]
       @month INT ,
       @year INT ,
       @compid INT ,
       @con VARCHAR(20)
AS 
       DECLARE @dateFrom DATETIME  
       DECLARE @dateTo DATETIME  
       DECLARE @endDate INT  
  
       SELECT   @endDate = calendar_days
       FROM     DaysInMonth
       WHERE    month = @month AND
                year = @year  
       SET @dateFrom = CAST(@month AS VARCHAR(20)) + '/01/' + CAST(@year AS VARCHAR(20))  
       SET @dateTo = CAST(@month AS VARCHAR(20)) + '/' + CAST((ISNULL(@endDate, 28)) AS VARCHAR(20)) + '/' +
           CAST(@year AS VARCHAR(20))  
  
       CREATE TABLE #temp
              (
               userID VARCHAR(50) NULL ,
               empName VARCHAR(100) NULL ,
               empCategory INT NULL ,
               remarks VARCHAR(50) NULL ,
               tapDate VARCHAR(20) NULL ,
               timeentry DATETIME NULL ,
               dept VARCHAR(50) NULL ,
               INTIME DATETIME NULL ,
               OUTTIME DATETIME NULL ,
               OT1 FLOAT NULL ,
               OT2 FLOAT NULL ,
               Flag INT NULL
              )             
        
       INSERT   INTO #temp (userID, tapDate)
                SELECT DISTINCT
                        userID, CONVERT(VARCHAR(20), timeentry, 103)
                FROM    ACTATEK_LOGS
                WHERE   timeentry BETWEEN @dateFrom AND @dateTo + 1 AND
                        userID IN (SELECT   time_card_no
                                   FROM     employee
                                   WHERE    company_id = @compid)        
       UPDATE   #temp
       SET      empName = (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') EMP_NAME FROM EMPLOYEE WHERE time_card_no = t1.userID
                          )
       FROM     #temp t1         
       UPDATE   #temp
       SET      empCategory = (SELECT ISNULL (emp_category, 1) FROM EMPLOYEE WHERE time_card_no = t1.userID
                              )
       FROM     #temp t1         
       UPDATE   #temp
       SET      timeentry = (SELECT TOP 1
                                    timeentry
                             FROM   ACTATEK_LOGS
                             WHERE  userID = t1.userID AND
                                    CONVERT(VARCHAR(20), timeentry, 103) = t1.tapDate
                            )
       FROM     #temp t1        
       UPDATE   #temp
       SET      dept = (SELECT  DeptName
                        FROM    department
                        WHERE   id = (SELECT dept_id FROM employee WHERE time_card_no = t1.userID
                                     )
                       )
       FROM     #temp t1        
       UPDATE   #temp
       SET      INTIME = (SELECT TOP 1
                                    timeentry
                          FROM      ACTATEK_LOGS
                          WHERE     userID = t1.userID AND
                                    CONVERT(VARCHAR(20), timeentry, 103) = t1.tapDate AND
                                    eventID = 'IN'
                          ORDER BY  timeentry
                         )
       FROM     #temp t1        
       UPDATE   #temp
       SET      OUTTIME = (SELECT TOP 1
                                    timeentry
                           FROM     ACTATEK_LOGS
                           WHERE    userID = t1.userID AND
                                    CONVERT(VARCHAR(20), timeentry, 103) = t1.tapDate AND
                                    eventID = 'OUT'
                           ORDER BY timeentry DESC
                          )
       FROM     #temp t1       
  
-- SET FLAG FOR NOT HAVING BOTH IN AND OUT ENTRIES  
       UPDATE   #temp
       SET      Flag = 1
       WHERE    (ISNULL(INTIME, -1) = -1) OR
                (ISNULL(OUTTIME, -1) = -1)   
  
--OT1 CALCULATION FOR CATEGORY - 1   
       UPDATE   #temp
       SET      OT1 = ((ISNULL((DATEDIFF(N, '17:28:00', CONVERT(VARCHAR(20), OUTTIME, 108))), 0)) / 60)
       WHERE    ISNULL(Flag, 0) <> 1 AND
                (CONVERT(VARCHAR(20), timeentry, 103) NOT IN (SELECT    CONVERT(VARCHAR(20), holiday_date, 103)
                                                              FROM      public_holidays    Where  (CompanyID=@compid Or CompanyID=-1) And
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))  
																		MONTH(holiday_date) = @month AND
                                                                        YEAR(holiday_date) = @year AND
                                                                        companyid IN (-1, @compid))) AND
                DATENAME(dw, timeentry) <> 'Sunday' AND
                DATENAME(dw, timeentry) <> 'Saturday' AND
                empCategory = 1   
  
--OT1 CALCULATION FOR CATEGORY - 1 (FOR SATURDAYS)   
       UPDATE   #temp
       SET      OT1 = ((ISNULL((DATEDIFF(N, INTIME, OUTTIME)), 0)) / 60)
       WHERE    ISNULL(Flag, 0) <> 1 AND
                (CONVERT(VARCHAR(20), timeentry, 103) NOT IN (SELECT    CONVERT(VARCHAR(20), holiday_date, 103)
                                                              FROM      public_holidays   WHere  (CompanyID=@compid Or CompanyID=-1) And
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))  
																		MONTH(holiday_date) = @month AND
                                                                        YEAR(holiday_date) = @year AND
                                                                        companyid IN (-1, @compid))) AND
                DATENAME(dw, timeentry) <> 'Sunday' AND
                DATENAME(dw, timeentry) = 'Saturday' AND
                empCategory = 1   
  
--OT2 CALCULATION FOR CATEGORY - 1  
       UPDATE   #temp
       SET      OT2 = ((ISNULL((DATEDIFF(N, INTIME, OUTTIME)), 0)) / 60)
       WHERE    ISNULL(Flag, 0) <> 1 AND
                ((CONVERT(VARCHAR(20), timeentry, 103) IN (SELECT   CONVERT(VARCHAR(20), holiday_date, 103)
                                                           FROM     public_holidays     WHere  (CompanyID=@compid Or CompanyID=-1)  And
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))  
																	MONTH(holiday_date) = @month AND
                                                                    YEAR(holiday_date) = @year AND
                                                                    companyid IN (-1, @compid))) OR
                 DATENAME(dw, timeentry) = 'Sunday'
                ) AND
                empCategory = 1   
  
  
--OT1 CALCULATION FOR CATEGORY - 2   
       UPDATE   #temp
       SET      OT1 = FLOOR(((ISNULL((DATEDIFF(N, '17:28:00', CONVERT(VARCHAR(20), OUTTIME, 108))), 0)) / 60))
       WHERE    ISNULL(Flag, 0) <> 1 AND
                (CONVERT(VARCHAR(20), timeentry, 103) NOT IN (SELECT    CONVERT(VARCHAR(20), holiday_date, 103)
                                                              FROM      public_holidays      WHere  (CompanyID=@compid Or CompanyID=-1) And
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))  
																		MONTH(holiday_date) = @month AND
                                                                        YEAR(holiday_date) = @year AND
                                                                        companyid IN (-1, @compid))) AND
                DATENAME(dw, timeentry) <> 'Sunday' AND
                DATENAME(dw, timeentry) <> 'Saturday' AND
                empCategory = 2   
  
  
-- OT CALCULATION FOR CATEGORY - 2 & 3  
       UPDATE   #temp
       SET      OT1 = FLOOR(((ISNULL((DATEDIFF(N, INTIME, OUTTIME)), 0)) / 60))
       WHERE    ISNULL(Flag, 0) <> 1 AND
                ((CONVERT(VARCHAR(20), timeentry, 103) IN (SELECT   CONVERT(VARCHAR(20), holiday_date, 103)
                                                           FROM     public_holidays   WHere  (CompanyID=@compid Or CompanyID=-1) And
																	MONTH(holiday_date) = @month AND
                                                                    YEAR(holiday_date) = @year AND
                                                                    companyid IN (-1, @compid))) OR
                 (DATENAME(dw, timeentry) = 'Sunday') OR
                 (DATENAME(dw, timeentry) = 'Saturday')
                ) AND
                empCategory IN (2, 3) -- deptID 11 FOR CATEGORY 2 EMPLOYEE, CHANGE IT ACCORDINGLY  
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))  
  
/*select distinct userID,empCategory,sum(isnull(OT1,0))OT1,sum(isnull(OT2,0))OT2 INTO #finalTemp from #temp group by userID,empCategory  
  
UPDATE #finalTemp SET OT1 = FLOOR((ISNULL(OT1,0))/2) WHERE ISNULL(empCategory,1) = 2  
UPDATE #finalTemp SET OT1 = FLOOR((ISNULL(OT1,0))/4) WHERE ISNULL(empCategory,1) = 3  
  
--SELECT userID USERID2,empCategory EMPCAT,OT1 OVERTIME1,OT2 OVERTIME2 FROM #finalTemp   
SELECT * FROM #finalTemp   */
       INSERT   INTO #temp
                SELECT  (SELECT time_card_no FROM employee WHERE emp_code = el.emp_id
                        ) 'userID', (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name FROM employee WHERE emp_code = el.emp_id
                                    ) 'empName',
                        (SELECT ISNULL (emp_category, 1) FROM employee WHERE emp_code = el.emp_id
                        ) 'empCategory', (SELECT type FROM leave_types WHERE id = el.leave_type
                                         ) 'remarks', CONVERT(VARCHAR(20), leave_date, 103) 'tapDate',
                        leave_date 'timeentry',
                        (SELECT DeptName FROM department
                                WHERE id = (SELECT dept_id FROM employee WHERE emp_code = el.emp_id)
                        ) 'dept', '', '', '', '', 1
                FROM    emp_leaves el ,
                        emp_leaves_detail ed
                WHERE   el.trx_id IN (SELECT    trx_id
                                      FROM      emp_leaves_detail
                                      WHERE     leave_date BETWEEN @dateFrom AND @dateTo + 1) AND
                        el.trx_id = ed.trx_id        
 
       SELECT   userID, empName, empCategory, remarks, tapDate, timeentry, dept,
                CONVERT(VARCHAR(20), INTIME, 108) 'INTIME', CONVERT(VARCHAR(20), OUTTIME, 108) 'OUTTIME', OT1, OT2, Flag
       INTO     #temp2
       FROM     #temp

       IF @con = 'ALL' 
          BEGIN
                SELECT  *
                FROM    #temp2
                ORDER BY userID, timeentry	
          END 
       IF @con = 'GEN' 
          BEGIN
                SELECT  *
                FROM    #temp2
                WHERE   ISNULL(empCategory, 1) = 1
                ORDER BY userID, timeentry
          END 
       IF @con = 'OT2' 
          BEGIN
                SELECT  *
                FROM    #temp2
                WHERE   ISNULL(empCategory, 1) = 2
                ORDER BY userID, timeentry
          END 
       IF @con = 'OT4' 
          BEGIN
                SELECT  *
                FROM    #temp2
                WHERE   ISNULL(empCategory, 1) = 3
                ORDER BY userID, timeentry
          END 
       IF @con = 'ALL_D' 
          BEGIN
                SELECT  *
                FROM    #temp2
                WHERE   ISNULL(Flag, -1) = 1
                ORDER BY userID, timeentry
          END 
       IF @con = 'GEN_D' 
          BEGIN
                SELECT  *
                FROM    #temp2
                WHERE   ISNULL(Flag, -1) = 1 AND
                        ISNULL(empCategory, 1) = 1
                ORDER BY userID, timeentry
          END 
       IF @con = 'OT2_D' 
          BEGIN
                SELECT  *
                FROM    #temp2
                WHERE   ISNULL(Flag, -1) = 1 AND
                        ISNULL(empCategory, 1) = 2
                ORDER BY userID, timeentry
          END 
       IF @con = 'OT4_D' 
          BEGIN
                SELECT  *
                FROM    #temp2
                WHERE   ISNULL(Flag, -1) = 1 AND
                        ISNULL(empCategory, 1) = 3
                ORDER BY userID, timeentry
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_Hitachi_OT]    Script Date: 09/02/2009 11:57:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_Hitachi_OT]
       @month INT ,
       @year INT ,
       @compid INT
AS 
       DECLARE @dateFrom DATETIME
       DECLARE @dateTo DATETIME
       DECLARE @endDate INT

       SELECT   @endDate = calendar_days
       FROM     DaysInMonth
       WHERE    month = @month AND
                year = @year
       SET @dateFrom = CAST(@month AS VARCHAR(20)) + '/01/' + CAST(@year AS VARCHAR(20))
       SET @dateTo = CAST(@month AS VARCHAR(20)) + '/' + CAST((ISNULL(@endDate, 28)) AS VARCHAR(20)) + '/' +
           CAST(@year AS VARCHAR(20))

       CREATE TABLE #temp
              (
               userID VARCHAR(50) NULL ,
               empName VARCHAR(100) NULL ,
               empCategory INT NULL ,
               remarks VARCHAR(50) NULL ,
               tapDate VARCHAR(20) NULL ,
               timeentry DATETIME NULL ,
               dept VARCHAR(50) NULL ,
               INTIME DATETIME NULL ,
               OUTTIME DATETIME NULL ,
               OT1 FLOAT NULL ,
               OT2 FLOAT NULL ,
               Flag INT NULL
              )           
      
       INSERT   INTO #temp (userID, tapDate)
                SELECT DISTINCT
                        userID, CONVERT(VARCHAR(20), timeentry, 103)
                FROM    ACTATEK_LOGS
                WHERE   timeentry BETWEEN @dateFrom AND @dateTo + 1 AND
                        userID IN (SELECT   time_card_no
                                   FROM     employee
                                   WHERE    company_id = @compid)      
       UPDATE   #temp
       SET      empName = (SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') EMP_NAME FROM EMPLOYEE WHERE time_card_no = t1.userID
                          )
       FROM     #temp t1       
       UPDATE   #temp
       SET      empCategory = (SELECT ISNULL (emp_category, 1) FROM EMPLOYEE WHERE time_card_no = t1.userID
                              )
       FROM     #temp t1       
       UPDATE   #temp
       SET      timeentry = (SELECT TOP 1
                                    timeentry
                             FROM   ACTATEK_LOGS
                             WHERE  userID = t1.userID AND
                                    CONVERT(VARCHAR(20), timeentry, 103) = t1.tapDate
                            )
       FROM     #temp t1      
       UPDATE   #temp
       SET      dept = (SELECT  DeptName
                        FROM    department
                        WHERE   id = (SELECT dept_id FROM employee WHERE time_card_no = t1.userID
                                     )
                       )
       FROM     #temp t1      
       UPDATE   #temp
       SET      INTIME = (SELECT TOP 1
                                    timeentry
                          FROM      ACTATEK_LOGS
                          WHERE     userID = t1.userID AND
                                    CONVERT(VARCHAR(20), timeentry, 103) = t1.tapDate AND
                                    eventID = 'IN'
                          ORDER BY  timeentry
                         )
       FROM     #temp t1      
       UPDATE   #temp
       SET      OUTTIME = (SELECT TOP 1
                                    timeentry
                           FROM     ACTATEK_LOGS
                           WHERE    userID = t1.userID AND
                                    CONVERT(VARCHAR(20), timeentry, 103) = t1.tapDate AND
                                    eventID = 'OUT'
                           ORDER BY timeentry DESC
                          )
       FROM     #temp t1     

-- SET FLAG FOR NOT HAVING BOTH IN AND OUT ENTRIES
       UPDATE   #temp
       SET      Flag = 1
       WHERE    (ISNULL(INTIME, -1) = -1) OR
                (ISNULL(OUTTIME, -1) = -1) 

--OT1 CALCULATION FOR CATEGORY - 1 
       UPDATE   #temp
       SET      OT1 = ((ISNULL((DATEDIFF(N, '17:28:00', CONVERT(VARCHAR(20), OUTTIME, 108))), 0)) / 60)
       WHERE    ISNULL(Flag, 0) <> 1 AND
                (CONVERT(VARCHAR(20), timeentry, 103) NOT IN (SELECT    CONVERT(VARCHAR(20), holiday_date, 103)
                                                              FROM      public_holidays    WHere  (CompanyID=@compid Or CompanyID=-1) And
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))
																		MONTH(holiday_date) = @month AND
                                                                        YEAR(holiday_date) = @year AND
                                                                        companyid IN (-1, @compid))) AND
                DATENAME(dw, timeentry) <> 'Sunday' AND
                DATENAME(dw, timeentry) <> 'Saturday' AND
                empCategory = 1 

--OT1 CALCULATION FOR CATEGORY - 1 (FOR SATURDAYS) 
       UPDATE   #temp
       SET      OT1 = ((ISNULL((DATEDIFF(N, INTIME, OUTTIME)), 0)) / 60)
       WHERE    ISNULL(Flag, 0) <> 1 AND
                (CONVERT(VARCHAR(20), timeentry, 103) NOT IN (SELECT    CONVERT(VARCHAR(20), holiday_date, 103)
                                                              FROM      public_holidays    WHere  (CompanyID=@compid Or CompanyID=-1) And 
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))
																		MONTH(holiday_date) = @month AND
                                                                        YEAR(holiday_date) = @year AND
                                                                        companyid IN (-1, @compid))) AND
                DATENAME(dw, timeentry) <> 'Sunday' AND
                DATENAME(dw, timeentry) = 'Saturday' AND
                empCategory = 1 

--OT2 CALCULATION FOR CATEGORY - 1
       UPDATE   #temp
       SET      OT2 = ((ISNULL((DATEDIFF(N, INTIME, OUTTIME)), 0)) / 60)
       WHERE    ISNULL(Flag, 0) <> 1 AND
                ((CONVERT(VARCHAR(20), timeentry, 103) IN (SELECT   CONVERT(VARCHAR(20), holiday_date, 103)
                                                           FROM     public_holidays    WHere  (CompanyID=@compid Or CompanyID=-1) And 
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))
																	MONTH(holiday_date) = @month AND
                                                                    YEAR(holiday_date) = @year AND
                                                                    companyid IN (-1, @compid))) OR
                 DATENAME(dw, timeentry) = 'Sunday'
                ) AND
                empCategory = 1 


--OT1 CALCULATION FOR CATEGORY - 2 
       UPDATE   #temp
       SET      OT1 = FLOOR(((ISNULL((DATEDIFF(N, '17:28:00', CONVERT(VARCHAR(20), OUTTIME, 108))), 0)) / 60))
       WHERE    ISNULL(Flag, 0) <> 1 AND
                (CONVERT(VARCHAR(20), timeentry, 103) NOT IN (SELECT    CONVERT(VARCHAR(20), holiday_date, 103)
                                                              FROM      public_holidays    WHere  (CompanyID=@compid Or CompanyID=-1) And 
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))
																		MONTH(holiday_date) = @month AND
                                                                        YEAR(holiday_date) = @year AND
                                                                        companyid IN (-1, @compid))) AND
                DATENAME(dw, timeentry) <> 'Sunday' AND
                DATENAME(dw, timeentry) <> 'Saturday' AND
                empCategory = 2 


-- OT CALCULATION FOR CATEGORY - 2 & 3
       UPDATE   #temp
       SET      OT1 = FLOOR(((ISNULL((DATEDIFF(N, INTIME, OUTTIME)), 0)) / 60))
       WHERE    ISNULL(Flag, 0) <> 1 AND
                ((CONVERT(VARCHAR(20), timeentry, 103) IN (SELECT   CONVERT(VARCHAR(20), holiday_date, 103)
                                                           FROM     public_holidays   WHere  (CompanyID=@compid Or CompanyID=-1) And 
																	MONTH(holiday_date) = @month AND
                                                                    YEAR(holiday_date) = @year AND
                                                                    companyid IN (-1, @compid))) OR
                 (DATENAME(dw, timeentry) = 'Sunday') OR
                 (DATENAME(dw, timeentry) = 'Saturday')
                ) AND
                empCategory IN (2, 3) -- deptID 11 FOR CATEGORY 2 EMPLOYEE, CHANGE IT ACCORDINGLY
--where month(holiday_date) = @month AND year(holiday_date) = @year AND companyid IN (-1,@compid)))

       SELECT DISTINCT
                userID, empCategory, SUM(ISNULL(OT1, 0)) OT1, SUM(ISNULL(OT2, 0)) OT2
       INTO     #finalTemp
       FROM     #temp
       GROUP BY userID, empCategory

       UPDATE   #finalTemp
       SET      OT1 = FLOOR((ISNULL(OT1, 0)) / 2)
       WHERE    ISNULL(empCategory, 1) = 2
       UPDATE   #finalTemp
       SET      OT1 = FLOOR((ISNULL(OT1, 0)) / 4)
       WHERE    ISNULL(empCategory, 1) = 3

       SELECT   userID USERID2, empCategory EMPCAT, OT1 OVERTIME1, OT2 OVERTIME2
       FROM     #finalTemp
GO
/****** Object:  StoredProcedure [dbo].[Usp_DelGroupRights]    Script Date: 09/02/2009 11:58:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Usp_DelGroupRights] (@GroupID AS INT)
AS 
       DELETE   FROM grouprights
       WHERE    GroupID = @GroupID
GO
/****** Object:  StoredProcedure [dbo].[Usp_InsGroupRights]    Script Date: 09/02/2009 11:58:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Usp_InsGroupRights]
       (
        @GroupID AS INT ,
        @RightID AS INT
       )
AS 
       INSERT   INTO grouprights (GroupID, RightID)
       VALUES   (@GroupID, @RightID)
GO
/****** Object:  StoredProcedure [dbo].[sp_getAppliedLeaveCount]    Script Date: 09/02/2009 11:57:43 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_getAppliedLeaveCount]
       @dtStart VARCHAR(10) ,
       @dtEnd VARCHAR(10) ,
       @emp_code INT ,
       @half_day INT ,
       @timesession VARCHAR(2)
AS 
       DECLARE @from_date DATETIME    
       DECLARE @to_date DATETIME    

       SET @from_date = CONVERT(DATETIME, @dtStart, 103)    
       SET @to_date = CONVERT(DATETIME, @dtEnd, 103)    

       IF (@half_day = 1) 
          BEGIN
                SELECT  ISNULL(COUNT(el.trx_id), 0) CNT
                FROM    dbo.emp_leaves_detail eld
                INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id
                WHERE   ((leave_date BETWEEN @from_date AND @to_date)) AND
                        emp_id = @emp_code AND
                        eld.halfday_leave = @half_day AND
                        el.timesession = @timesession AND
                        el.status != 'Rejected'  	   
          END
       ELSE 
          BEGIN
                SELECT  ISNULL(COUNT(el.trx_id), 0) CNT
                FROM    dbo.emp_leaves_detail eld
                INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id
                WHERE   ((leave_date BETWEEN @from_date AND @to_date)) AND
                        emp_id = @emp_code AND
                        status != 'Rejected'  
          END
GO
/****** Object:  StoredProcedure [dbo].[sp_new_payslip1]    Script Date: 09/02/2009 11:58:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_new_payslip1]
       @month INT ,
       @year INT ,
       @empcode INT
AS 
       BEGIN        
             DECLARE @MONTH1 AS INT        
             DECLARE @YEAR1 AS INT        
             DECLARE @compid AS INT            
        
             SET @MONTH1 = @MONTH        
             SET @YEAR1 = @YEAR            
             SELECT @compid = company_id
             FROM   employee
             WHERE  emp_code = @empcode         
        
             SELECT @MONTH1 'MONTH', @YEAR1 'YEAR', isnull(b.emp_name,'')+' '+isnull(b.emp_lname,'') emp_name, fund_type, fund_amount, total_deductions,
                    total_additions,
                    CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay))) AS netpay,
                    ot1_e, ot2_e, b.ic_pp_number, ot1_e + ot2_e 'ot',
                    CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay))) AS basic_pay,
                    CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay)) + total_additions 'Gross',        
--c.deptname,d.designation,
                    e.trx_amount 'ADDAMT', f.[desc] 'ADDITIONS', h.trx_amount 'DEDUCTAMT', i.[desc] 'DEDUCTIONS',
                    (SELECT SUM(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'),
                                                                                              basic_pay))) +
                                CONVERT(NUMERIC(18, 2), total_additions))
                     FROM   prepare_payroll_detail x ,
                            prepare_payroll_hdr y
                     WHERE  x.trx_id = y.trx_id AND
                            x.emp_id = @empcode AND
                            YEAR(y.start_period) = @year
                    ) 'ytdgross', (SELECT   SUM(employerCPF)
                                   FROM     prepare_payroll_detail m ,
                                            prepare_payroll_hdr n
                                   WHERE    m.trx_id = n.trx_id AND
                                            m.emp_id = @empcode AND
                                            YEAR(n.start_period) = @year
                                  ) 'ytdcpf', (SELECT   ISNULL(a.Leaves_allowed, 0)
                                               FROM     leaves_allowed a ,
                                                        leave_types c
                                               WHERE    a.leave_type = c.id AND
                                                        a.group_id IN (SELECT   emp_group_id
                                                                       FROM     employee
                                                                       WHERE    emp_code = @empcode) AND
                                                        c.id = 8
                                              ) 'Annual leaves_allowed',
                    (SELECT ISNULL(a.Leaves_allowed, 0)
                     FROM   leaves_allowed a ,
                            leave_types c
                     WHERE  a.leave_type = c.id AND
                            a.group_id IN (SELECT   emp_group_id
                                           FROM     employee
                                           WHERE    emp_code = @empcode) AND
                            c.id = 9
                    ) 'sick leaves_allowed',
                    (SELECT ISNULL(SUM(ISNULL(dbo.Fn_NoWds(@compid, start_date, end_date), 0)), 0) Leaves_Taken
                     FROM   emp_leaves ,
                            leave_types c
                     WHERE  emp_id IN (SELECT   emp_code
                                       FROM     employee
                                       WHERE    emp_code = @empcode) AND
                            status = 'Approved' AND
                            leave_type = c.id AND
                            c.id = 8
                    ) 'Annual Leaves_Taken',
                    (SELECT ISNULL(SUM(ISNULL(dbo.Fn_NoWds(@compid, start_date, end_date), 0)), 0) Leaves_Taken
                     FROM   emp_leaves ,
                            leave_types c
                     WHERE  emp_id IN (SELECT   emp_code
                                       FROM     employee
                                       WHERE    emp_code = @empcode) AND
                            status = 'Approved' AND
                            leave_type = c.id AND
                            c.id = 9
                    ) 'Sick Leaves_Taken',
                    (SELECT ISNULL((a.leaves_allowed -
                                    (SELECT SUM(ISNULL(dbo.Fn_NoWds(@compid, start_date, end_date), 0)) Leaves_Taken
                                     FROM   emp_leaves
                                     WHERE  emp_id IN (SELECT   emp_code
                                                       FROM     employee
                                                       WHERE    emp_code = @empcode) AND
                                            status = 'Approved' AND
                                            leave_type = c.id
                                    )), 0) Leaves_Available
                     FROM   leaves_allowed a ,
                            leave_types c
                     WHERE  a.leave_type = c.id AND
                            a.group_id IN (SELECT   emp_group_id
                                           FROM     employee
                                           WHERE    emp_code = @empcode) AND
                            c.id = 8
                    ) 'Annual Leaves Available',
                    (SELECT ISNULL((a.leaves_allowed -
                                    (SELECT ISNULL(SUM(ISNULL(dbo.Fn_NoWds(@compid, start_date, end_date), 0)), 0) Leaves_Taken
                                     FROM   emp_leaves
                                     WHERE  emp_id IN (SELECT   emp_code
                                                       FROM     employee
                                                       WHERE    emp_code = @empcode) AND
                                            status = 'Approved' AND
                                            leave_type = c.id
                                    )), 0) Leaves_Available
                     FROM   leaves_allowed a ,
                            leave_types c
                     WHERE  a.leave_type = c.id AND
                            a.group_id IN (SELECT   emp_group_id
                                           FROM     employee
                                           WHERE    emp_code = @empcode) AND
                            c.id = 9
                    ) 'Sick Leaves Available'
             FROM   prepare_payroll_detail a ,
                    employee b ,
--department c,designation d,
                    emp_additions e ,
                    additions_types f ,
                    prepare_payroll_hdr g ,
                    emp_deductions h ,
                    deductions_types i
             WHERE  a.emp_id = b.emp_code AND
                    b.emp_code = @empcode 
--and b.dept_id *=c.id and b.desig_id *=d.id        
                    AND
                    e.emp_code = a.emp_id AND
                    e.trx_type = f.id AND
                    MONTH(g.start_period) = @month AND
                    YEAR(g.start_period) = @year AND
                    a.trx_id = g.trx_id AND
                    MONTH(e.trx_period) = @month AND
                    YEAR(e.trx_period) = @year AND
                    h.trx_type = i.id AND
                    MONTH(h.trx_period) = @month AND
                    YEAR(h.trx_period) = @year        
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_GeneratePayRoll]    Script Date: 09/02/2009 11:57:41 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
--    
--CREATE PROC [dbo].[sp_GeneratePayRoll]      
--       @company_id INT ,      
--       @month INT ,      
--       @year INT ,      
--       @UserID INT ,      
--       @EmpPassID VARCHAR(100) = ''      
--AS       
--       DECLARE @EmployerCPFAmt VARCHAR(200)                                                                                                  
--       DECLARE @EmployeeCPFAmt VARCHAR(200)                                                                                                  
--       DECLARE @cpfamtemployer FLOAT                                                                                                  
--       DECLARE @cpfamtemployee FLOAT                                                                                                  
--       DECLARE @select VARCHAR(8000)                                                                                                        
--       DECLARE @where VARCHAR(100)                                                                                                        
--       DECLARE @compute NVARCHAR(150)                                                                                                  
--       DECLARE @param1 NVARCHAR(150)                                                                                                  
--       DECLARE @param2 NVARCHAR(150)                                                                                        
--       DECLARE @EmpID INT                                                                                                  
--       DECLARE @startproll VARCHAR(10)                                                                                                  
--       DECLARE @endproll VARCHAR(10)                                                                                                  
--       DECLARE @startsubpay VARCHAR(10)                                                                                                  
--       DECLARE @endsubpay VARCHAR(10)                                                                                                  
--       DECLARE @startdtsub DATETIME                                                                                                  
--       DECLARE @enddtsub DATETIME                                                                                                  
--       DECLARE @startdtproll DATETIME                                                                                                  
--       DECLARE @enddtproll DATETIME                                                                                                  
--       DECLARE @startmonth INT                                                                                                  
--       DECLARE @startyear INT                                                                                                  
--       DECLARE @TotalDaysCountPayroll_5 FLOAT                                                                                                  
--       DECLARE @TotalDaysCountPayroll_5p FLOAT                                                                                                  
--       DECLARE @TotalDaysCountPayroll_6 FLOAT                                                                                                  
--       DECLARE @TotalDaysCountPayroll_7 FLOAT                                                                                                  
--       DECLARE @TotalDaysCount_5 FLOAT                                                                                                  
--       DECLARE @TotalDaysCount_5p FLOAT                                                                                                  
--       DECLARE @TotalDaysCount_6 FLOAT                                                                                                  
--       DECLARE @TotalDaysCount_7 FLOAT                                                                                                  
-- DECLARE @NoWrkgDaysSubPay FLOAT                         
--       DECLARE @RollDays FLOAT                                   
--       DECLARE @roundunpaid INT                        
--       DECLARE @roundnetpay INT                              
--       DECLARE @roundaddition INT                                          
--       DECLARE @rounddeduction INT                                                                
--       DECLARE @cpfceiling FLOAT                                                                                              
--       DECLARE @lastyear INT                                                                                                  
--       DECLARE @AWCeiling FLOAT                                                                                                  
--       DECLARE @dt_date DATETIME                                                                                  
--       DECLARE @lastdaymonth VARCHAR(2)                                                                                  
--       DECLARE @ID AS INT                       
--       DECLARE @WorkFlowID AS INT                       
--       DECLARE @RowID AS INT                       
--      
--       DECLARE @CPFAWCALC TABLE      
--               (      
--                Emp_Code INT ,      
--                CMOW float ,      
--                LYOW float ,      
--                CYOW float ,      
--                CPFAWCIL float ,      
--                EST_AWCIL float ,      
--                ACTCIL float ,      
--                AWCM float ,      
--                AWB4CM float ,      
--                AWCM_AWB4CM float ,      
--                AWCPF float      
--               )      
--                           
--       CREATE TABLE #EmployeeWorkFlowLevel      
--              (      
--               ID INT ,      
--               WORKFLOWID INT ,      
--               ROWID INT ,      
--               PAYROLLGROUPID INT      
--              )                    
--       SELECT DISTINCT      
--                WL.ID, WL.WorkFlowID, WL.RowID      
--       INTO     #EmployeeWorkFlow      
--       FROM     Employee EM      
--       INNER JOIN (SELECT WL.* FROM EmployeeWorkFlowLevel WL WHERE WL.FlowType = 1      
--                  ) WL ON EM.Pay_supervisor = WL.ID                    
--       DECLARE curse CURSOR FOR SELECT * FROM #EmployeeWorkFlow                     
--                      
--       OPEN curse                      
--       FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID                    
--                      
--       WHILE @@FETCH_STATUS = 0       
--             BEGIN                      
--   --PRINT @RowID                      
--                   INSERT   INTO #EmployeeWorkFlowLevel      
--                            SELECT  @ID, @WorkFlowID, RowID, PayrollGroupID      
--                            FROM    EmployeeWorkFlowLevel      
--                            WHERE   WorkFLowID = @WorkFLowID AND      
--                                    RowID <= @RowID                    
--                   FETCH NEXT FROM curse  INTO @ID, @WorkFlowID, @RowID                    
--             END                      
--                    
--       SELECT DISTINCT      
--                Te.ID, EG.Emp_ID      
--       INTO     #EmployeeAssignedToPayrollGroup      
--       FROM     #EmployeeWorkFlowLevel Te      
--       INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID      
--       WHERE    EG.Emp_ID = @UserID                    
--                    
--       CLOSE curse                      
--       DEALLOCATE curse                      
--                                                                    
--                                                                                  
--       SELECT TOP 1      
--                @lastdaymonth = dateinyear      
--       FROM     (SELECT CONVERT(FLOAT, DATENAME(dd, DateInYear)) dateinyear      
--                 FROM   DateInYear      
--                 WHERE  MONTH(DateInYear) = @month AND      
--                        DATENAME(yy, DateInYear) = @year      
--      ) DY      
--       ORDER BY dateinyear DESC                                                                                  
--                                                                                  
--       SET @AWCeiling = 76500                                                                                    
--       SET @startproll = '01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)                                   
--       SET @endproll = @lastdaymonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)                                                                                                  
--       SET @startsubpay = '01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)                                                                                                  
--       SET @endsubpay = @lastdaymonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)                                                                                        
--       SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)                                                                                                  
--       SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)                                                          
--       SET @startdtproll = CONVERT(DATETIME, @startproll, 103)                                                             
--       SET @enddtproll = CONVERT(DATETIME, @endproll, 103)                                                                               
--       SET @startmonth = MONTH(@startdtsub)                                                       
--       SET @startyear = YEAR(@startdtsub)                                                                                   
--       SET @RollDays = (DATEDIFF(dw, @startdtproll, @enddtproll) + 1)                                
--       SET @lastyear = @startyear - 1                                             
--       SET @dt_date = CONVERT(DATETIME, @startsubpay, 103)                                                                                                                                 
--       SET @param1 = N'@cpfamtemployer float output'                                                                                                  
--       SET @param2 = N'@cpfamtemployee float output'                                                                                                  
--       SET @NoWrkgDaysSubPay = (DATEDIFF(dw, @startdtsub, @enddtsub) + 1)                                                                                         
--                                                                                                  
--                                                                                                  
--       IF LEN(@EmpPassID) > 0       
--          BEGIN                                                                                                        
--                SELECT  @where = 'Where Emp_Code Not In (' + @EmpPassID + ')'                                                                                                  
--          END                                                                                                  
--                                  
--                                                                                                  
--       SELECT   @cpfceiling = monthly_cpf_ceil, @roundunpaid = basicrnd, @roundnetpay = netpayrnd,      
--                @roundaddition = additionsrnd, @rounddeduction = deductionsrnd      
--       FROM     Company      
--       WHERE    Company_ID = @company_id                                                                       
--              
---- Dump The Required Employees in one Temp Table                                                                                                  
--       SELECT   Emp_Code,  Emp_Name, Emp_Lname, IC_PP_NUMBER, Sex, Emp_Group_Id, Race_ID, Dept_Id, Date_Of_Birth,      
--                Joining_Date, Termination_Date,      
--                PR_Date = CASE WHEN Emp_Type = 'SC' THEN CONVERT(DATETIME, '01/01/1910', 103)      
--                               ELSE PR_Date      
--                          END, Emp_Type, CPF_Entitlement, OT_Entitlement, Payment_Mode, Pay_Frequency, EmpCPFType,      
--     Wdays_per_Week, Hourly_Rate_Mode, Hourly_Rate, Daily_Rate_Mode, Daily_Rate,      
--                PayRateCust=Case When len(convert(varchar(10),DecryptByAsymKey(AsymKey_ID('AsymKey'), Em.payrate))) >0 Then Convert(decimal(9,2),CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), Em.Payrate))) Else 0 End,                                             
--                ROUND(CAST(ISNULL(DATEDIFF(m, ISNULL(date_of_birth, 0), @dt_date), 0) AS FLOAT) / 12, 2) Age,      
--                dbo.fn_GetAgeGroup(Em.Emp_Code, @dt_date) AS Age_Group,      
--                FundType = CASE WHEN (Emp_Type = 'SPR' OR      
--                                      Emp_Type = 'SDPR' OR      
--                                      Emp_Type = 'SC'      
--                                     ) AND      
--                                     Fund_OptOut = 0 AND      
--                                     UPPER(Ra.Race) LIKE '%CHIN%' THEN 'CDAC'      
--                                WHEN (Emp_Type = 'SPR' OR      
--                                      Emp_Type = 'SDPR' OR      
--                                      Emp_Type = 'SC'      
--                                     ) AND      
--                                     Fund_OptOut = 0 AND      
--                                     UPPER(Ra.Race) LIKE '%MALAY%' THEN 'MBMF'      
--                                WHEN (Emp_Type = 'SPR' OR      
--                                      Emp_Type = 'SDPR' OR      
--                                      Emp_Type = 'SC'      
--                                     ) AND      
--                                     Fund_OptOut = 0 AND      
--                                     UPPER(Ra.Race) LIKE '%INDIA%' THEN 'SINDA'      
--                                WHEN (Emp_Type = 'SPR' OR      
--                                      Emp_Type = 'SDPR' OR      
--                                      Emp_Type = 'SC'      
--                                     ) AND      
--                                     Fund_OptOut = 0 AND      
--                                     UPPER(Ra.Race) LIKE '%EURA%' THEN 'ECF'      
--                                ELSE ''      
--                           END, Giro_acct_number, giro_bank, CalculateCPF = CASE WHEN (CPF_Entitlement = 'Y' AND      
--                                                                                       (Emp_Type = 'SPR' OR      
--                                                                                        Emp_Type = 'SDPR' OR      
--                                                                                        Emp_Type = 'SC'      
--                                                                                       )      
--                                                                                      ) THEN 'Y'      
--                                                                                 ELSE 'N'      
--                                                                            END, OT1Rate, Ot2Rate, OT1Rate OT1SysRate,      
--                OT2Rate OT2SysRate, ISNULL(Pay_supervisor, 0) Pay_supervisor      
--       INTO     #EmployeeTemp      
--       FROM     Employee Em      
--       INNER JOIN Race Ra ON Em.Race_ID = Ra.ID      
--       WHERE    (Em.Payrate IS NOT NULL) AND      
--                (Em.Joining_Date <= @enddtsub) AND      
--                (Em.Termination_Date IS NULL OR      
--                 (Em.termination_date >= @startdtsub)      
--                ) AND      
--                (Em.Company_id = @company_id) AND      
--                (Em.StatusID = 1 OR      
--                 (Em.StatusID = 2 AND      
--                  @enddtsub <= Em.termination_date      
--                 ) OR      
--                 (Em.StatusID = 2 AND      
--                  Em.termination_date >= @startdtsub AND      
--                  Em.termination_date <= @enddtsub      
--                 )      
--                ) AND   
--                Em.Emp_Code NOT IN (SELECT  pd.Emp_ID      
--                                    FROM    prepare_payroll_hdr ph      
--                                    INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID      
--                                    WHERE   pd.[Status] != 'R' AND      
--                                            MONTH(ph.start_period) = @startmonth AND      
--                  YEAR(ph.start_period) = @startyear)                                        
--                                          
--              
--              
--                                                      
--       SELECT   @select = 'Delete From #EmployeeTemp ' + @where                                                               
--       EXEC (@select)             
--                      
--                      
--       DELETE   FROM #EmployeeTemp      
--       WHERE    Pay_supervisor NOT IN (SELECT   ID      
--                                       FROM     #EmployeeAssignedToPayrollGroup) AND      
--                (Pay_supervisor > 0)                        
--              
--                        
----Delete From #EmployeeTemp                        
----Where Emp_Code Not In                        
----(                        
---- Select Emp_Code From                      
---- (                      
----  Select EM.Emp_Code,WL.WorkFlowID From EmployeeWorkFlowLevel WL                      
----  Inner Join Employee EM On WL.ID = EM.Pay_supervisor                      
----  Where WL.FlowType=1 And (EM.Pay_supervisor is not null or EM.Pay_supervisor > 0 )                      
---- ) Re Inner Join #WLTemp WL On Re.WorkFlowID=WL.WorkFlowID                      
----) And (Pay_supervisor is not null or Pay_supervisor > 0)                        
--      
----Start Here on 7th Jan 2010...1757      
----Calculate Total No of Public Holidays in Payroll Period                                                     
--  Declare @PUBLICHOLIDAYSMONTH FLOAT    
--  Declare @PUBLICHOLIDAYSBYMONTH FLOAT    
--  Select @PUBLICHOLIDAYSMONTH = Count(Holiday_Date) From Public_Holidays PH Where       
--  (PH.Holiday_Date >= @startdtproll AND PH.Holiday_Date <= @enddtproll)      
--  And (DATEPART(weekday, Holiday_Date) != 1 And DATEPART(weekday, Holiday_Date) != 7)      
--    
--  Select @PUBLICHOLIDAYSBYMONTH = Count(Holiday_Date) From Public_Holidays PH Where       
--  (PH.Holiday_Date >= @startdtsub AND PH.Holiday_Date <= @enddtsub)      
--  And (DATEPART(weekday, Holiday_Date) != 1 And DATEPART(weekday, Holiday_Date) != 7)      
--
----CONSIDER 0 to PH in PAYROLL @PUBLICHOLIDAYSMONTH and @PUBLICHOLIDAYSBYMONTH
--Set @PUBLICHOLIDAYSMONTH   = 0
--Set @PUBLICHOLIDAYSBYMONTH = 0
--    
----Calculate Total No of Working Days in Payroll Period                                                     
--       SELECT   @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5)-@PUBLICHOLIDAYSMONTH,      
--                @TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p)-@PUBLICHOLIDAYSMONTH,      
--                @TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6)-@PUBLICHOLIDAYSBYMONTH,      
--                @TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7)-@PUBLICHOLIDAYSMONTH      
--       FROM     (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND      
--                                                      (R.[WeekDay] = 1 OR      
--                                                       R.[WeekDay] = 7      
--                                                      )      
--                                                     ) THEN 0      
--                                                ELSE R.CntDay      
--                                           END ,      
--                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND      
--                                                       (R.[WeekDay] = 7)      
--                                                      ) THEN (R.CntDay / 2)      
--                                                 WHEN (R.DaysPattern_5p = 5.5 AND      
--                                                       (R.[WeekDay] = 1)      
--                                                      ) THEN 0      
-- ELSE R.CntDay      
--                                            END ,      
--                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND      
--                                                      (R.[WeekDay] = 1)      
--                                                     ) THEN 0      
--                                                ELSE R.CntDay      
--                                           END ,      
--                        TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay      
--                                  END      
--                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],      
--                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,      
--                                6 DaysPattern_6, 7 DaysPattern_7      
--                         FROM   DateInYear Dt      
--                         WHERE  (Dt.DateInYear >= @startdtproll AND      
--                                 Dt.DateInYear <= @enddtproll      
--                                )      
--                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)      
--                        ) R      
--                ) Res                                                                 
--      
--                                                                                  
----Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens                               
--       SELECT   @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5)-@PUBLICHOLIDAYSBYMONTH, @TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p)-@PUBLICHOLIDAYSBYMONTH,      
--                @TotalDaysCount_6 = SUM(Res.TotalDaysCount_6)-@PUBLICHOLIDAYSBYMONTH, @TotalDaysCount_7 = SUM(Res.TotalDaysCount_7)-@PUBLICHOLIDAYSBYMONTH      
--       FROM     (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND      
--                                                      (R.[WeekDay] = 1 OR      
--                                                       R.[WeekDay] = 7      
--                                                      )      
--                                                     ) THEN 0      
--                                                ELSE R.CntDay      
--                                           END ,      
--                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND      
--                                                       (R.[WeekDay] = 7)      
--                                                      ) THEN (R.CntDay / 2)      
--                                                 WHEN (R.DaysPattern_5p = 5.5 AND      
--                                                       (R.[WeekDay] = 1)      
--                                                      ) THEN 0      
--                                                 ELSE R.CntDay      
--                                            END ,      
--                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND      
--                                                      (R.[WeekDay] = 1)      
--                                                     ) THEN 0      
--                                                ELSE R.CntDay      
--                                           END ,      
--                        TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay      
--                                           END      
--                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],      
--                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,      
--                                6 DaysPattern_6, 7 DaysPattern_7      
--                         FROM   DateInYear Dt      
--                         WHERE  (Dt.DateInYear >= @startdtsub AND      
--                                 Dt.DateInYear <= @enddtsub      
--                                )      
--                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)      
--                        ) R      
--                ) Res      
--    
--    
------Calculate Total No of Working Days in Payroll Period                    
----       SELECT   @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5),      
----                @TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p),      
----                @TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6),      
----                @TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7)      
----       FROM     (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND      
----                       (R.[WeekDay] = 1 OR      
----                                                       R.[WeekDay] = 7      
----                                                      )      
----                                                     ) THEN 0      
----                                                ELSE R.CntDay      
----                                           END ,      
----                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND      
----                                                       (R.[WeekDay] = 7)      
----                                                      ) THEN (R.CntDay / 2)      
----                                                 WHEN (R.DaysPattern_5p = 5.5 AND      
----                                         (R.[WeekDay] = 1)      
----                                                      ) THEN 0      
----                                                 ELSE R.CntDay      
----                                            END ,      
----                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND      
----                                                      (R.[WeekDay] = 1)      
----                                                     ) THEN 0      
----                                                ELSE R.CntDay      
----                                           END ,      
----                        TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay      
----                                           END      
----                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],      
----                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,      
----                                6 DaysPattern_6, 7 DaysPattern_7      
----                         FROM   DateInYear Dt      
----                         WHERE  (Dt.DateInYear >= @startdtproll AND      
----                                 Dt.DateInYear <= @enddtproll      
----                                )      
----                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)      
----                        ) R      
----                ) Res                                                                                             
----                                                          
----                                                                                                  
------Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens                                               
----       SELECT   @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5), @TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p),      
----                @TotalDaysCount_6 = SUM(Res.TotalDaysCount_6), @TotalDaysCount_7 = SUM(Res.TotalDaysCount_7)      
----       FROM     (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND      
----                                                      (R.[WeekDay] = 1 OR      
----                                                       R.[WeekDay] = 7      
----                                                      )      
----                                                     ) THEN 0      
----                                                ELSE R.CntDay      
----                                           END ,      
----                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND      
----                                                       (R.[WeekDay] = 7)      
----                                                      ) THEN (R.CntDay / 2)      
----                                                 WHEN (R.DaysPattern_5p = 5.5 AND      
----                                                       (R.[WeekDay] = 1)      
----                                                      ) THEN 0      
----                                                 ELSE R.CntDay      
----                                            END ,      
----                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND      
----                                                      (R.[WeekDay] = 1)      
----                                                     ) THEN 0      
----                                                ELSE R.CntDay      
----                                           END ,      
----                        TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay      
----                                           END      
----                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],      
----                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,      
----                                6 DaysPattern_6, 7 DaysPattern_7      
----                         FROM   DateInYear Dt      
----                         WHERE  (Dt.DateInYear >= @startdtsub AND      
----                                 Dt.DateInYear <= @enddtsub      
----                                )      
----                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)      
----                        ) R      
----                ) Res                    
--      
----End Here on 7th Jan 2010...1757      
--      
--                                                                                                  
--                                                                  
--                                  
----Calculate the No of Actual Working Days with Sat and Sunday when a employee is a PR and works during PR Period.                                                                                                  
--       SELECT   E.Emp_Code, (CONVERT(FLOAT, (SELECT COUNT(DATEPART(weekday, DateInYear))      
--                                             FROM   DateInYear Dt      
--                                             WHERE  (E.PR_Date IS NOT NULL AND      
--                                                     E.Termination_Date IS NULL AND      
--                                                     E.PR_Date >= @startdtsub AND      
--                                                     E.PR_Date <= @enddtsub AND      
--                                                     E.Joining_Date < @startdtsub AND      
--                                                     Dt.DateInYear >= E.PR_Date AND      
--                                                     Dt.DateInYear <= @enddtsub AND      
--                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                    ) OR      
--                                                    (E.PR_Date IS NOT NULL AND      
--                                                     E.Termination_Date IS NULL AND      
--                                                     E.PR_Date >= @startdtsub AND      
--                                                     E.PR_Date <= @enddtsub AND      
--                                                     E.Joining_Date >= @startdtsub AND      
--                                                     E.Joining_Date <= @enddtsub AND      
--                                                     E.PR_Date >= E.Joining_Date AND      
--                                                     Dt.DateInYear >= E.PR_Date AND      
--                                                     Dt.DateInYear <= @enddtsub AND      
--                    (DATEPART(weekday, DateInYear) = 7)      
--                                                    ) OR      
--                                                    (E.PR_Date IS NOT NULL AND      
--                                                     E.Termination_Date IS NULL AND      
--                                                     E.PR_Date >= @startdtsub AND      
--                                                     E.PR_Date <= @enddtsub AND      
--                                                     E.Joining_Date >= @startdtsub AND      
--                                                     E.Joining_Date <= @enddtsub AND      
--                                                     E.Joining_Date >= E.PR_Date AND      
--                                                     Dt.DateInYear >= E.Joining_Date AND      
--                                                     Dt.DateInYear <= @enddtsub AND      
--                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                    ) OR      
--                                                    (E.PR_Date IS NOT NULL AND      
--                                                     E.Termination_Date IS NOT NULL AND      
--                                                     E.Termination_Date >= @startdtsub AND      
--                                                     E.Termination_Date <= @enddtsub AND      
--                                                     E.Joining_Date > @startdtsub AND      
--                                                     E.PR_Date >= E.Joining_Date AND      
--                                                     Dt.DateInYear >= E.PR_Date AND      
--                                                     Dt.DateInYear <= E.Termination_Date AND      
--                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                    ) OR      
--                                                    (E.PR_Date IS NOT NULL AND      
--                                                     E.Termination_Date IS NOT NULL AND      
--                                                     E.Termination_Date >= @startdtsub AND      
--                                                     E.Termination_Date <= @enddtsub AND      
--                                                     E.Joining_Date < @startdtsub AND      
--                                                     E.PR_Date < @startdtsub AND      
--                                                     Dt.DateInYear >= @startdtsub AND      
--                                                     Dt.DateInYear <= E.Termination_Date AND      
--                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                    ) OR      
--                                                    (E.PR_Date IS NOT NULL AND      
--                                                     E.Termination_Date IS NOT NULL AND      
--                                                     E.Termination_Date >= @startdtsub AND      
--                                                     E.Termination_Date <= @enddtsub AND      
--                                                     E.Joining_Date <= @startdtsub AND      
--                                                     E.PR_Date >= @startdtsub AND      
--                                                     Dt.DateInYear >= E.PR_Date AND      
--                                                     Dt.DateInYear <= E.Termination_Date AND      
--                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                    )      
--                                            ))) ActPRSatDaySpan, (SELECT    COUNT(DATEPART(weekday, DateInYear))      
--                                                                  FROM      DateInYear Dt      
--                        WHERE     (E.PR_Date IS NOT NULL AND      
--                                                                             E.Termination_Date IS NULL AND      
--                                                                             E.PR_Date >= @startdtsub AND      
--                                                                             E.PR_Date <= @enddtsub AND      
--                                                                             E.Joining_Date < @startdtsub AND      
--                                                                             Dt.DateInYear >= E.PR_Date AND      
--                                                                             Dt.DateInYear <= @enddtsub AND      
--                                                                             (DATEPART(weekday, DateInYear) = 1)      
--                                        ) OR      
--                                                                            (E.PR_Date IS NOT NULL AND      
--                                                                             E.Termination_Date IS NULL AND      
--                                                                             E.PR_Date >= @startdtsub AND      
--                                                                             E.PR_Date <= @enddtsub AND      
--                                                                             E.Joining_Date >= @startdtsub AND      
--                                                                             E.Joining_Date <= @enddtsub AND      
--                                                                             E.PR_Date >= E.Joining_Date AND      
--                                                                             Dt.DateInYear >= E.PR_Date AND      
--                                                                             Dt.DateInYear <= @enddtsub AND      
--                                                                             (DATEPART(weekday, DateInYear) = 1)      
--                                                                            ) OR      
--                                                                            (E.PR_Date IS NOT NULL AND      
--                                                                             E.Termination_Date IS NULL AND      
--                                                                             E.PR_Date >= @startdtsub AND      
--                                                                             E.PR_Date <= @enddtsub AND      
--                                                                             E.Joining_Date >= @startdtsub AND      
--                                                                             E.Joining_Date <= @enddtsub AND      
--                                                                             E.Joining_Date >= E.PR_Date AND      
--                                                                             Dt.DateInYear >= E.Joining_Date AND      
--                                                                             Dt.DateInYear <= @enddtsub AND      
--                                                                             (DATEPART(weekday, DateInYear) = 1)      
--                                                                            ) OR      
--                                                                            (E.PR_Date IS NOT NULL AND      
--                                                                             E.Termination_Date IS NOT NULL AND      
--                                                                             E.Termination_Date >= @startdtsub AND      
--                                                                             E.Termination_Date <= @enddtsub AND      
--                                                                             E.Joining_Date > @startdtsub AND      
--                                                                             E.PR_Date >= E.Joining_Date AND      
--                                                                             Dt.DateInYear >= E.PR_Date AND      
--                                                                             Dt.DateInYear <= E.Termination_Date AND      
--                                                                             (DATEPART(weekday, DateInYear) = 1)      
--                                                                            ) OR      
--                                                                            (E.PR_Date IS NOT NULL AND      
--                                                                             E.Termination_Date IS NOT NULL AND      
--                                                                             E.Termination_Date >= @startdtsub AND      
--                                                                             E.Termination_Date <= @enddtsub AND      
--                                                                             E.Joining_Date < @startdtsub AND      
--                                                                             E.PR_Date < @startdtsub AND      
--                                                                             Dt.DateInYear >= @startdtsub AND      
--                                                                             Dt.DateInYear <= E.Termination_Date AND      
--                                                                             (DATEPART(weekday, DateInYear) = 1)      
--                                                                            ) OR      
--                                                                            (E.PR_Date IS NOT NULL AND      
--                                                                             E.Termination_Date IS NOT NULL AND      
--                                                                             E.Termination_Date >= @startdtsub AND      
--                                                                             E.Termination_Date <= @enddtsub AND      
--                                                                             E.Joining_Date <= @startdtsub AND      
--                                                                             E.PR_Date >= @startdtsub AND      
--                                                                             Dt.DateInYear >= E.PR_Date AND      
--                                                                             Dt.DateInYear <= E.Termination_Date AND      
--                                                                             (DATEPART(weekday, DateInYear) = 1)      
--                                                                            )      
--                                                                 ) ActPRSunDaySpan      
--       INTO     #PRSatSunDaysTemp      
--       FROM     #EmployeeTemp E                                                                                                  
--              
----Calculate the No of Actual Working Days with Sat and Sunday when a employee is not PR and works during PR Period.                                                                          
--       SELECT   Emp_Code, (SELECT   COUNT(DATEPART(weekday, DateInYear))      
--                           FROM     DateInYear Dt      
--                           WHERE    (((E.Termination_Date >= @startdtsub AND      
--                                       E.Termination_Date <= @enddtsub      
--                                      ) AND      
--                                      E.Joining_Date >= @startdtsub      
--                                     ) AND      
--                                     Dt.DateInYear >= E.Joining_Date AND      
--                                     Dt.DateInYear <= E.Termination_Date AND      
--                                     (DATEPART(weekday, DateInYear) = 1)      
--                                    ) OR      
--                                    (((E.Termination_Date >= @startdtsub AND      
--                                       E.Termination_Date <= @enddtsub      
--                                      ) AND      
--                                      E.Joining_Date < @startdtsub      
--                                     ) AND      
--                                     Dt.DateInYear >= @startdtsub AND      
--                                     Dt.DateInYear <= E.Termination_Date AND      
--                                     (DATEPART(weekday, DateInYear) = 1)      
--                                    ) OR      
--                                    ((E.Termination_Date IS NULL AND      
--                                      (E.Joining_Date > @startdtsub AND      
--                                       E.Joining_Date <= @enddtsub      
--                                      )      
--                                     ) AND      
--                                     Dt.DateInYear >= E.Joining_Date AND      
--                                     Dt.DateInYear <= @enddtsub AND      
--                 (DATEPART(weekday, DateInYear) = 1)      
--                                    ) OR      
--                                    ((E.Termination_Date IS NULL AND      
--                                      (E.Joining_Date < @startdtsub)      
--                                     ) AND      
--                                     Dt.DateInYear >= @startdtsub AND      
--                                     Dt.DateInYear <= @enddtsub AND      
--                                     (DATEPART(weekday, DateInYear) = 1)      
--                                    ) OR      
--                                    ((E.Termination_Date > @enddtsub AND      
--                                      E.Joining_Date < @startdtsub      
--                                     ) AND      
--                                     Dt.DateInYear >= @startdtsub AND      
--                                     Dt.DateInYear <= @enddtsub AND      
--                                     (DATEPART(weekday, DateInYear) = 1)      
--                                    )      
--                          ) ActSunDaySpan, (CONVERT(FLOAT, (SELECT  COUNT(DATEPART(weekday, DateInYear))      
--                                                            FROM    DateInYear Dt      
--                                                            WHERE   (((E.Termination_Date >= @startdtsub AND      
--                                                            E.Termination_Date <= @enddtsub      
--                                                                      ) AND      
--                                                                      E.Joining_Date >= @startdtsub      
--                                                                     ) AND      
--                                                                     Dt.DateInYear >= E.Joining_Date AND      
--                                                                     Dt.DateInYear <= E.Termination_Date AND      
--                                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                                    ) OR      
--                                                                    (((E.Termination_Date >= @startdtsub AND      
--                                                                       E.Termination_Date <= @enddtsub      
--                                                                      ) AND      
--                                                                      E.Joining_Date < @startdtsub      
--                                                                     ) AND      
--                                                                     Dt.DateInYear >= @startdtsub AND      
--                                                                     Dt.DateInYear <= E.Termination_Date AND      
--                                                                     (DATEPART(weekday, DateInYear) = 7)      
--                   ) OR      
--                                                                    ((E.Termination_Date IS NULL AND      
--                                                                      (E.Joining_Date > @startdtsub AND      
--                                                                       E.Joining_Date <= @enddtsub      
--                                                                      )      
--                                                                     ) AND      
--                                                                     Dt.DateInYear >= E.Joining_Date AND      
--                                                                     Dt.DateInYear <= @enddtsub AND      
--                                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                                    ) OR      
--                                                                    ((E.Termination_Date IS NULL AND      
--                                                                      (E.Joining_Date < @startdtsub)      
--                                                                     ) AND      
--                                                                     Dt.DateInYear >= @startdtsub AND      
--                                                                     Dt.DateInYear <= @enddtsub AND      
--                                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                                    ) OR      
--                                                                    ((E.Termination_Date > @enddtsub AND      
--                                                                      E.Joining_Date < @startdtsub      
--                                                                     ) AND      
--                                                                     Dt.DateInYear >= @startdtsub AND      
--                                                                     Dt.DateInYear <= @enddtsub AND      
--                                                                     (DATEPART(weekday, DateInYear) = 7)      
--                                                                    )      
--                                                           ))) ActSatDaySpan      
--       INTO     #SatSunDaysTemp      
--       FROM     #EmployeeTemp E                                                 
--                   
--                                        
---- Calculate Unpaid FullDay for the Employees who took leaves during the PR Period                                                                                            
--       SELECT   El.Emp_Id, COUNT(Eld.unpaid_leave) UnpaidFullDayPR      
--       INTO     #UnpaidFullDayPR      
--       FROM     Emp_Leaves el      
--       INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id      
--       INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code      
--       WHERE    (Eld.Leave_Date >= @startdtsub AND      
--                 Eld.Leave_Date <= @enddtsub      
--                ) AND      
--                (Eld.unpaid_leave = 1 AND      
--                 eld.halfday_leave = 0      
--                ) AND      
--                El.Status = 'Approved' AND      
--                ((E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NULL AND      
--                  E.PR_Date >= @startdtsub AND      
--                  E.PR_Date <= @enddtsub AND      
--                  E.Joining_Date < @startdtsub AND      
--                  Eld.Leave_Date >= E.PR_Date AND      
--                  Eld.Leave_Date <= @enddtsub      
--                 ) OR      
--                 (E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NULL AND      
--                  E.PR_Date >= @startdtsub AND      
--                  E.PR_Date <= @enddtsub AND      
--                  E.Joining_Date >= @startdtsub AND      
--                  E.Joining_Date <= @enddtsub AND      
--                  E.PR_Date >= E.Joining_Date AND      
--                  Eld.Leave_Date >= E.PR_Date AND      
--                  Eld.Leave_Date <= @enddtsub      
--                 ) OR      
--                 (E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NOT NULL AND      
--                  E.Termination_Date >= @startdtsub AND      
--                  E.Termination_Date <= @enddtsub AND      
--                  E.Joining_Date > @startdtsub AND      
--                  E.PR_Date >= E.Joining_Date AND      
--                  Eld.Leave_Date >= E.PR_Date AND      
--                  Eld.Leave_Date <= E.Termination_Date      
--                 ) OR      
--                 (E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NOT NULL AND      
--                  E.Termination_Date >= @startdtsub AND      
--                  E.Termination_Date <= @enddtsub AND      
--                  E.Joining_Date < @startdtsub AND      
--                  E.PR_Date < @startdtsub AND      
--                  Eld.Leave_Date >= @startdtsub AND      
--                  Eld.Leave_Date <= E.Termination_Date      
--                 )      
--                )      
--       GROUP BY El.Emp_Id                                                               
--                                                                                                  
---- Calculate Unpaid Half Day for the Employees who took leaves during the PR Period              
--       SELECT   El.Emp_Id, COUNT(Eld.unpaid_leave) / 2 UnpaidHalfDayPR      
--       INTO     #UnpaidHalfDayPR      
--       FROM     Emp_Leaves el      
--       INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id      
--       INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code      
--       WHERE    (Eld.Leave_Date >= @startdtsub AND      
--                 Eld.Leave_Date <= @enddtsub      
--                ) AND      
--                (Eld.unpaid_leave = 1 AND      
--                 eld.halfday_leave = 1      
--                ) AND      
--                El.Status = 'Approved' AND      
--                ((E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NULL AND      
--                  E.PR_Date >= @startdtsub AND      
--                  E.PR_Date <= @enddtsub AND      
--                  E.Joining_Date < @startdtsub AND      
--                  Eld.Leave_Date >= E.PR_Date AND      
--                  Eld.Leave_Date <= @enddtsub      
--                 ) OR      
--                 (E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NULL AND      
--                  E.PR_Date >= @startdtsub AND      
--                  E.PR_Date <= @enddtsub AND      
--                  E.Joining_Date >= @startdtsub AND      
--                  E.Joining_Date <= @enddtsub AND      
--                  E.PR_Date >= E.Joining_Date AND      
--                  Eld.Leave_Date >= E.PR_Date AND      
--                  Eld.Leave_Date <= @enddtsub      
--                 ) OR      
--                 (E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NOT NULL AND      
--                  E.Termination_Date >= @startdtsub AND      
--                  E.Termination_Date <= @enddtsub AND      
--                  E.Joining_Date > @startdtsub AND      
--                  E.PR_Date >= E.Joining_Date AND      
--                  Eld.Leave_Date >= E.PR_Date AND      
--                  Eld.Leave_Date <= E.Termination_Date      
--                 ) OR      
--                 (E.PR_Date IS NOT NULL AND      
--                  E.Termination_Date IS NOT NULL AND      
--                  E.Termination_Date >= @startdtsub AND      
--                  E.Termination_Date <= @enddtsub AND      
--                  E.Joining_Date < @startdtsub AND      
--                  E.PR_Date < @startdtsub AND      
--                  Eld.Leave_Date >= @startdtsub AND      
--                  Eld.Leave_Date <= E.Termination_Date      
--                 )      
--                )      
--       GROUP BY El.Emp_Id                                      
--                                                                                                  
---- Calculate Paid Half Day for the Employees who took leaves during working days                                                                                                  
--       SELECT   El.Emp_Id, COUNT(Eld.unpaid_leave) / 2 PaidHalfDay      
--       INTO     #PaidHalfDay      
--       FROM     Emp_Leaves el      
--       INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id      
--       WHERE    (Eld.Leave_Date >= @startdtsub AND      
--                 Eld.Leave_Date <= @enddtsub      
--                ) AND      
--                (Eld.unpaid_leave = 0 AND      
--                 eld.halfday_leave = 1      
--                ) AND      
--                El.Status = 'Approved'      
--       GROUP BY El.Emp_Id                                                                             
--                                                                                                  
---- Calculate Paid Full Day for the Employees who took leaves during working days                                                                                                  
--       SELECT   El.Emp_Id, COUNT(Eld.unpaid_leave) PaidFullDay      
--       INTO     #PaidFullDay      
--       FROM     Emp_Leaves el      
--       INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id      
--       WHERE    (Eld.Leave_Date >= @startdtsub AND      
--                 Eld.Leave_Date <= @enddtsub      
--                ) AND      
--                (Eld.unpaid_leave = 0 AND      
--                 eld.halfday_leave = 0      
--                ) AND      
--                El.Status = 'Approved'      
--       GROUP BY El.Emp_Id                                        
--                                                                                                  
---- Calculate UnPaid Half Day for the Employees who took leaves during working days                                                                                                  
--       SELECT   El.Emp_Id, SUM(Eld.unpaid_leave) / 2 UnpaidHalfDay      
--       INTO     #UnpaidHalfDay      
--       FROM     Emp_Leaves el      
--       INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id      
--       WHERE    (Eld.Leave_Date >= @startdtsub AND      
--                 Eld.Leave_Date <= @enddtsub      
--                ) AND      
--                (Eld.unpaid_leave = 1 AND      
--                 eld.halfday_leave = 1      
--                ) AND      
--                El.Status = 'Approved'      
--       GROUP BY El.Emp_Id                                                                                                  
--                                                                                                  
---- Calculate UnPaid Full Day for the Employees who took leaves during working days                                                                                                  
--       SELECT   El.Emp_Id, SUM(Eld.unpaid_leave) UnpaidFullDay      
--       INTO     #UnpaidFullDay      
--      FROM     Emp_Leaves el      
--       INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id      
--       WHERE    (Eld.Leave_Date >= @startdtsub AND      
--                 Eld.Leave_Date <= @enddtsub      
--                ) AND      
--                (Eld.unpaid_leave = 1 AND      
--                 eld.halfday_leave = 0      
--                ) AND      
--                El.Status = 'Approved'      
--       GROUP BY El.Emp_Id                                                                                                  
--                                                                                     
----Calc Deduction Amounts For Employees                                                                                                  
--       SELECT   Emp_Code, SUM(trx_amount) DedAmt      
--       INTO     #Deduction      
--       FROM     Emp_Deductions ED      
--       INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID      
--WHERE    (MONTH(trx_period) = @startmonth AND      
--                 YEAR(trx_period) = @startyear      
--                )      
--       GROUP BY Emp_Code                                                                                                  
--              
----Calc Deduction Amounts Applicable CPF on Deduction For Employees              
--       SELECT   ED.Emp_Code, SUM(ED.trx_amount) DedCPFAmt      
--       INTO     #DeductionCPF      
--       FROM     Emp_Deductions ED      
--       INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID      
--       WHERE    (MONTH(ED.trx_period) = @startmonth AND      
--                 YEAR(ED.trx_period) = @startyear      
--                ) AND      
--                DT.CPF = 'Yes'      
--       GROUP BY Emp_Code                      
--              
--                                                                                                  
----Calc Add for Wages                                                           
--       SELECT   Emp_Code, SUM(trx_amount) Add4AW      
--       INTO     #Add4AW      
--       FROM     emp_additions EA      
--       INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID      
--       WHERE    --Status='L' And                                                                                                   
--                (MONTH(trx_period) = @startmonth AND      
--                 YEAR(trx_period) = @startyear      
--                ) AND      
--                AT.CPF = 'Yes' AND      
--                AT.Type_Of_Wage = 'A' AND      
--                (EA.ClaimStatus = 'Approved' OR      
--                 EA.ClaimStatus IS NULL      
--                )      
--       GROUP BY Emp_Code                                                                
--                                         
----Calc Add For Ordinary Wages                                                                                                  
--       SELECT   Emp_Code, SUM(trx_amount) Add4OW      
--       INTO     #Add4OW      
--       FROM     emp_additions EA      
--       INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID      
--       WHERE    --Status='L' And                                                                              
--                (MONTH(trx_period) = @startmonth AND      
--                 YEAR(trx_period) = @startyear      
--                ) AND      
--                AT.CPF = 'Yes' AND      
--                (AT.Type_Of_Wage = 'O' OR      
--                 AT.Type_Of_Wage IS NULL      
--                ) AND      
--                (EA.ClaimStatus = 'Approved' OR      
--                 EA.ClaimStatus IS NULL      
--                )      
--       GROUP BY Emp_Code                                                                                   
--                                   
----Calc Add For Normal Wages                                
--       SELECT   Emp_Code, SUM(trx_amount) Add4NW      
--       INTO     #Add4NW      
--       FROM     emp_additions EA      
--       INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID      
--       WHERE    --Status='L' And                                                                                                   
--                (MONTH(trx_period) = @startmonth AND      
--                 YEAR(trx_period) = @startyear      
--                ) AND      
--                AT.CPF = 'No' AND      
--                (AT.Type_Of_Wage = 'O' OR      
--                 AT.Type_Of_Wage IS NULL      
--                ) AND      
--                (EA.ClaimStatus = 'Approved' OR      
--                 EA.ClaimStatus IS NULL      
--                )      
--       GROUP BY Emp_Code                                                                                                  
--                                                                                                  
----Calc Employee Overtime                                                       
--       SELECT   Emp_Code, overtime1, overtime2, Days_Work, NH_Work      
--       INTO     #EOT      
--       FROM     emp_overtime      
--       WHERE    ((Trx_Month = @startmonth AND      
--                  Trx_Year = @startyear      
--                 ) OR      
--                 Trx_Month IS NULL      
--                )                                                                                                  
--                                                                                                  
----Select @TotalDaysCount_5,@TotalDaysCount_5p,@TotalDaysCount_6,@TotalDaysCount_7                                                          
--       SELECT   *, ([Basic] - TotalUnPaid) ActualBasic,      
--                CPFOrdinary = CASE WHEN (CPF = 'Y' AND      
--                                         Emp_Type = 'SPR' OR      
--                                         Emp_Type = 'SDPR' OR      
--                                         Emp_Type = 'SC'      
--                                        ) AND      
--                                        [BasicPR] <= 0      
--                                   THEN (([Basic] - TotalUnPaid) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)      
--                                   ELSE (([BasicPR] - UnpaidDeductPR) + DaysWorkedRate + OT1 + OT2 + Add4OW) -      
--                                        (DedCPFAmt)      
--                              END,      
--                GrossWithOutAddition = CASE WHEN (CPF = 'Y' AND      
--                                                  Emp_Type = 'SPR' OR      
--                                                  Emp_Type = 'SDPR' OR      
--                                                  Emp_Type = 'SC'      
--                                                 ) AND      
--              [BasicPR] <= 0 AND      
--                                                 @roundnetpay >= 0      
--                                            THEN ISNULL(CAST(ROUND((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate),      
--                                                                   @roundnetpay) AS DECIMAL(9, 2)), 0)      
--                                            WHEN (CPF = 'Y' AND      
--                                                  Emp_Type = 'SPR' OR      
--                                                  Emp_Type = 'SDPR' OR      
--                                                  Emp_Type = 'SC'      
--                                                 ) AND      
--                                                 [BasicPR] <= 0 AND      
--                                                 @roundnetpay = -1      
--                                            THEN ISNULL(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9,      
--                                                                                                        2)), 0)      
--                                            WHEN ([BasicPR] > 0 AND      
--                                                  @roundnetpay = -1      
--                                                 )      
--                                            THEN ISNULL(CAST((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9,      
--                                                                                                        2)), 0)      
--                                            WHEN ([BasicPR] > 0 AND      
--                                                  @roundnetpay >= 0      
--                                                 )      
--                                            THEN ISNULL(CAST(ROUND((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 +      
--                                                                    DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)      
--                                            WHEN (Emp_Type = 'WP' OR      
--                                                  Emp_Type = 'DP' OR      
--                                                  Emp_Type = 'EP' OR      
--                                                  Emp_Type = 'SP'      
--                                                 ) AND      
--                                                 @roundnetpay >= 0      
--                                            THEN ISNULL(CAST(ROUND((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate),      
--                                                                   @roundnetpay) AS DECIMAL(9, 2)), 0)      
--                                            WHEN (Emp_Type = 'WP' OR      
--                                                  Emp_Type = 'DP' OR      
--                                                  Emp_Type = 'EP' OR      
--                                                  Emp_Type = 'SP'      
--                                                 ) AND      
--                                                 @roundnetpay >= 0      
--                                            THEN ISNULL(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9,      
--                                                                                                        2)), 0)      
--                                       END      
--       INTO     #PriorGenPayroll      
--       FROM     (SELECT * ,      
--                        [BasicPR] = CASE WHEN (PR_Date >= @startdtsub) AND      
--                                              (Emp_Type = 'SPR' OR      
--                                               Emp_Type = 'SDPR' OR      
--                                               Emp_Type = 'SC'      
--                                              )      
--                                         THEN ROUND(CONVERT(DECIMAL(8, 2), (ActPRWrkgDaysSpan * BasicDayRateWORound)), 2)      
--                                         ELSE -1                                             
--           --Else Round(convert(decimal(8,2),(ActWrkgDaysSpan*BasicDayRateWORound)),2)                                                                     
--                                    END ,      
--                        [Basic] = CASE WHEN ActPRWrkgDaysSpan > 0      
--                                       THEN ROUND(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)      
--                                       ELSE ROUND(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)      
--                                  END      
--                 FROM   (SELECT E.Emp_Code ,      
--                                E.FullName ,      
--                                E.Emp_Type ,      
--                                E.DeptName ,      
--                                E.GroupName ,      
--                                E.EmployeeGiro ,      
--                                E.EmployerGiro ,      
--                                E.GiroBank ,      
--                                E.PRAge ,      
--                                E.WorkingDaysInWeek ,      
--                                E.OT ,      
--                                E.CPF ,      
--                                E.CPFType ,      
--                                E.PayType ,      
--                                E.Daily_rate_mode ,      
--                                E.Daily_Rate ,      
--                                E.Pay_Mode ,      
--                                E.Hourly_rate ,      
--                                E.Join_Date Join_Date ,      
--                                E.Term_Date Term_Date ,      
--                                E.Pr_date Pr_date ,      
--                                E.RollDays ,      
--                                E.WrkgDaysInRoll ,      
--                                E.BasicPayInRoll ,      
--                                E.SubPayDays ,      
--                                E.WrkgDaysInSubPay ,      
--                                E.BasicDayRate ,      
--                                E.BasicDayRateWORound ,      
--                                (E.BasicDayRate * E.ActWrkgDaysSpan) BasicNorSubPay ,      
--                                E.UnpaidFullDay ,      
--                 E.UnpaidHalfDay ,      
--                                E.PaidFullDay ,      
--                                E.PaidHalfDay ,      
--                                E.UnPaidDeduct ,      
--                            E.UnpaidFullDayPR ,      
--                                E.UnpaidHalfDayPR ,      
--                                E.UnPaidDeductPR ,      
--                                (E.UnPaidDeduct + E.UnPaidDeductPR) TotalUnPaid ,      
--                                E.Days_Work ,      
--                                E.NH_Work ,      
--                                E.OT1Rate ,      
--                                E.OT1Hrs ,      
--                                E.OT1 ,      
--                                E.OT2Rate ,      
--                                E.OT2Hrs ,      
--                                E.OT2 ,      
--                                E.Add4NW ,      
--                                E.Add4OW ,      
--                                E.Add4AW ,      
--                                E.AdditionalWages ,      
--                                E.DedAmt ,      
--                                E.DedCPFAmt ,      
--                                E.ActSatDaySpan ,      
--                                E.ActSunDaySpan ,      
--                                E.ActWrkgDaysSpan ,      
--                                E.ActPRSatDaySpan ,      
--                                E.ActPRSunDaySpan ,      
--                                ActPRWrkgDaysSpan = CASE WHEN (E.PR_Date IS NULL OR      
--                                                               E.PR_Date > @enddtsub      
--                                                              ) THEN 0      
--                                                         WHEN (E.PR_Date IS NOT NULL AND      
--                                                               E.Term_Date IS NOT NULL AND      
--                                                               (E.PR_Date >= @startdtsub AND      
-- E.PR_Date <= @enddtsub      
--                                                               ) AND      
--                                                               E.Term_Date >= @enddtsub      
--                                                              )      
--                                                         THEN (DATEDIFF(dw, E.PR_Date, @enddtsub) + 1) -      
--                                                              (ActPRSatDaySpan + ActPRSunDaySpan)      
--                                                         WHEN (E.PR_Date IS NOT NULL AND      
--                                                               E.Term_Date IS NOT NULL AND      
--                                                               (E.PR_Date >= @startdtsub AND      
--                                                                E.PR_Date <= @enddtsub      
--                                                               ) AND      
--                                                               E.Term_Date < @enddtsub      
--                                                              )      
--                                                         THEN (DATEDIFF(dw, E.PR_Date, E.Term_Date) + 1) -      
--                                                              (ActPRSatDaySpan + ActPRSunDaySpan)      
--                                                         WHEN (E.PR_Date IS NOT NULL AND      
--                                                               E.Term_Date IS NULL AND      
--                                                               E.PR_Date <= @startdtsub AND      
--                                                               E.Join_Date <= @enddtsub      
--                                                              ) THEN E.ActWrkgDaysSpan      
--                                                         WHEN (E.PR_Date IS NOT NULL AND      
--                                                               E.Term_Date IS NOT NULL AND      
--                                                               E.PR_Date < @startdtsub AND      
--                                                               E.Join_Date < @startdtsub AND      
--                       E.Term_Date <= @enddtsub      
--                                    )      
--                                                         THEN (DATEDIFF(dw, @startdtsub, E.Term_Date) + 1) -      
--                                                              (ActPRSatDaySpan + ActPRSunDaySpan)      
--                                                         WHEN (E.PR_Date IS NOT NULL AND      
--                                                               E.Term_Date IS NOT NULL AND      
--                                                               E.PR_Date < @startdtsub AND      
--                                                               E.Join_Date >= @startdtsub AND      
--                                                               E.Join_Date <= @enddtsub AND      
--                                                               E.Term_Date <= @enddtsub      
--                                                              ) THEN E.ActWrkgDaysSpan      
--                                                         WHEN (E.PR_Date IS NOT NULL AND      
--                                                               E.Term_Date IS     NULL AND      
--                                                               (E.PR_Date >= @startdtsub AND      
--                                                                E.PR_Date <= @enddtsub      
--                                                               ) AND      
--                                                               E.Join_Date <= @startdtsub      
--                                                              )      
--                                                         THEN (DATEDIFF(dw, E.PR_Date, @enddtsub) + 1) -      
--                                                              (ActPRSatDaySpan + ActPRSunDaySpan)      
--                                                         WHEN (E.PR_Date IS NOT NULL AND                                                                   E.Term_Date IS     NULL AND      
--                                                               (E.PR_Date >= @startdtsub AND      
--                                                                E.PR_Date <= @enddtsub      
--                                                               ) AND      
--                                                               E.Join_Date >= @startdtsub AND      
--                                                               E.Join_Date <= @enddtsub      
--                                                              ) AND      
--                                                              E.Join_Date < E.PR_Date      
--                                                         THEN (DATEDIFF(dw, E.PR_Date, @enddtsub) + 1) -      
--                                                              (ActPRSatDaySpan + ActPRSunDaySpan)      
--                                                         WHEN (E.PR_Date IS NOT NULL AND      
--                                                               E.Term_Date IS     NULL AND      
--                                                               (E.PR_Date >= @startdtsub AND      
--                                                                E.PR_Date <= @enddtsub      
--                                                               ) AND      
--                                                               E.Join_Date >= @startdtsub AND      
--                                                               E.Join_Date <= @enddtsub      
--                                                              ) AND      
--                                                              E.Join_Date >= E.PR_Date      
--                                                         THEN (DATEDIFF(dw, E.Join_Date, @enddtsub) + 1) -      
--                                                              (ActPRSatDaySpan + ActPRSunDaySpan)      
--                                                         ELSE E.ActWrkgDaysSpan      
--                                                    END ,      
--                                E.DaysWorkedRate ,      
--                                E.CalculateCPF      
--                         FROM   (SELECT T.Emp_Code ,      
--                                        T.FullName ,      
--                                        T.Emp_Type ,      
--                                        T.DeptName ,      
--                                        T.GroupName ,      
--                                        T.EmployeeGiro ,      
--                                        T.EmployerGiro ,      
--                                        T.GiroBank ,      
--                                        T.PRAge ,      
--                                        T.WorkingDaysInWeek ,      
--                                        T.OT ,      
--                                        T.CPF ,      
--                                        T.CPFType ,      
--                                        T.PayType ,      
--                                        T.Daily_rate_mode ,      
--                                        T.Daily_Rate ,      
--                                        T.Pay_Mode ,      
--                                        T.Hourly_rate ,      
--                                        T.Join_Date Join_Date ,      
--                                        T.Term_Date Term_Date ,      
--                                        T.Pr_date Pr_date ,      
--                                        T.RollDays ,      
--                                        T.WrkgDaysInRoll ,      
--                                        T.BasicPayInRoll ,      
--                                        T.SubPayDays ,      
--                                        T.WrkgDaysInSubPay ,      
--                                        T.BasicDayRate ,      
--                                        T.BasicDayRate BasicDayRateWORound ,      
--                                        T.UnpaidFullDay ,      
--                                        T.UnpaidHalfDay ,      
--                                        T.PaidFullDay ,      
--                                        T.PaidHalfDay ,      
--                                        T.UnpaidFullDayPR ,      
--                                        T.UnpaidHalfDayPR ,      
--                                        T.Days_Work ,      
--                                        T.NH_Work ,      
--                                        T.OT1Rate ,      
--                                        ISNULL(T.OT1Hrs, 0) OT1Hrs ,      
--                                        OT1 = CASE WHEN @roundaddition = -1 THEN T.OT1      
--                                                   ELSE ROUND(T.OT1, @roundaddition)      
--                                              END ,      
--                                        T.OT2Rate ,      
--                                        ISNULL(T.OT2Hrs, 0) OT2Hrs ,      
--                                        OT2 = CASE WHEN @roundaddition = -1 THEN T.OT2      
--                                                   ELSE ROUND(T.OT2, @roundaddition)      
--                                              END ,      
--                                        Add4NW = CASE WHEN @roundaddition = -1 THEN T.Add4NW      
--                                                      ELSE ROUND(T.Add4NW, @roundaddition)      
--                                                 END ,      
--                                        Add4OW = CASE WHEN @roundaddition = -1 THEN T.Add4OW      
--                                                      ELSE ROUND(T.Add4OW, @roundaddition)      
--                                                 END ,      
--                                        Add4AW = CASE WHEN @roundaddition = -1 THEN T.Add4AW      
--                                                      ELSE ROUND(T.Add4AW, @roundaddition)      
--                                                 END ,      
--                                        AdditionalWages = CASE WHEN @roundaddition = -1 THEN T.AdditionalWages      
--                                                               ELSE ROUND(T.AdditionalWages, @roundaddition)     
--                                                          END ,      
--                                        DedAmt = CASE WHEN @rounddeduction = -1 THEN T.DedAmt      
--                                                      ELSE ROUND(T.DedAmt, @rounddeduction)      
--                                                 END ,      
--                      DedCPFAmt = CASE WHEN @rounddeduction = -1 THEN T.DedCPFAmt      
--                                                         ELSE ROUND(T.DedCPFAmt, @rounddeduction)      
--                                                    END ,      
--                                        T.ActSatDaySpan ,      
--                                        T.ActSunDaySpan ,      
--                                        ActWrkgDaysSpan = CASE WHEN (T.Join_Date IS NULL) THEN T.WrkgDaysInSubPay      
--                                                               WHEN (T.Join_Date <= @startdtsub AND      
--                                                                     T.Term_Date IS NULL      
--                                                                    ) THEN (T.WrkgDaysInSubPay)      
--                                                               WHEN (T.Join_Date > @startdtsub AND      
--                                                                     T.Term_Date IS NULL      
--                                                                    )      
--                                                               THEN ((@RollDays - DAY(T.Join_Date) - DATEDIFF(dw,      
--                                                                                                        @enddtsub,      
--                                                                                                        @enddtproll)) +      
--                                                                     1) - (ActSatDaySpan + ActSunDaySpan)      
--                                                               WHEN (T.Join_Date >= @startdtsub AND      
--                                                                     T.Join_Date <= @enddtsub AND      
--                                                                     T.Term_Date IS NOT NULL AND      
--                                                                     T.Term_Date > @enddtsub      
--                                                                    )      
--                                                               THEN (DATEDIFF(dw, T.Join_Date, @enddtsub) + 1) -      
--                                                                    (ActSatDaySpan + ActSunDaySpan)      
--                                                               WHEN (T.Join_Date <= @startdtsub AND      
--                                                                     T.Term_Date IS NOT NULL AND      
--                                                                     T.Term_Date <= @enddtsub      
--                                                                    )      
--                                                               THEN (DATEDIFF(dw, @startdtsub, T.Term_Date) + 1) -      
--                                                                    (ActSatDaySpan + ActSunDaySpan)      
--                                                               WHEN (T.Join_Date >= @startdtsub AND      
--                                                                     T.Join_Date <= @enddtsub AND      
--                                                                     T.Term_Date IS NOT NULL AND      
--                                                                     T.Term_Date <= @enddtsub      
--                                                                    )      
--                                                               THEN (DATEDIFF(dw, T.Join_Date, T.Term_Date) + 1) -      
--                                                                    (ActSatDaySpan + ActSunDaySpan)      
--                                                               ELSE T.WrkgDaysInSubPay      
--                                              END ,      
--                                        T.ActPRSatDaySpan ,      
--                                        T.ActPRSunDaySpan ,      
--                                        UnPaidDeduct = CASE WHEN @roundunpaid = -1      
--                                                            THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate *      
--                                                                 (T.UnpaidFullDay + T.UnpaidHalfDay))      
--                                                   ELSE ROUND(CONVERT(DECIMAL(8, 2), (ROUND(T.BasicDayRate,      
--                                                                                                     @roundunpaid) *      
--                                                                                               (T.UnpaidFullDay +      
--                                                                                                T.UnpaidHalfDay))),      
--                                                                       @roundunpaid)      
--                                                       END ,      
--                                        UnPaidDeductPR = CASE WHEN @roundunpaid = -1      
--                                                              THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate *      
--                                                                   (T.UnpaidFullDayPR + T.UnpaidHalfDayPR))      
--                                                              ELSE ROUND(CONVERT(DECIMAL(8, 2), (ROUND(T.BasicDayRate,      
--                                                                                                       @roundunpaid) *      
--                                                                                                 (T.UnpaidFullDayPR +      
--                                                                                                  T.UnpaidHalfDayPR))),      
--                                                                         @roundunpaid)      
--                                                         END ,      
--                                        DaysWorkedRate = CASE WHEN T.PayType = 'D' AND      
--                                                                   T.Daily_rate_mode = 'A' AND      
--                                                                   @roundaddition >= 0      
--                                                              THEN ROUND((T.BasicDayRate * T.Days_Work), @roundaddition)      
--                                                              WHEN T.PayType = 'D' AND      
--                                                                   T.Daily_rate_mode = 'A' AND      
--                                                                   @roundaddition = -1      
--                                                              THEN (T.BasicDayRate * T.Days_Work)      
--                                                              WHEN T.PayType = 'D' AND      
--                                                                   T.Daily_rate_mode = 'M' AND      
--                                                                   @roundaddition >= 0      
--                                                              THEN ROUND(T.Daily_Rate * T.Days_Work, @roundaddition)      
--                                                              WHEN T.PayType = 'D' AND      
--                                                                   T.Daily_rate_mode = 'M' AND      
--                                                                   @roundaddition = -1 THEN (T.Daily_Rate * T.Days_Work)      
--                                                              WHEN T.PayType = 'H' AND      
--                                                                   @roundaddition >= 0      
--                                                              THEN ROUND((T.Hourly_Rate * T.NH_Work), @roundaddition)      
--                                                              WHEN T.PayType = 'H' AND      
--                                                                   @roundaddition = -1 THEN (T.Hourly_Rate * T.NH_Work)      
--                                                              ELSE 0      
--                                                         END ,      
--                                        T.CalculateCPF      
--                                 FROM   (SELECT Em.Emp_Code ,      
--                                                (Em.emp_name + ' ' + Em.emp_lname) FullName ,      
--                                                Em.Emp_Type ,      
--                                                DEPT.DeptName ,      
--                               EG.EmpGroupName GroupName ,                                     --Em.Sex, EG.EmpGroupName GroupName, Ic_PP_Number NRICPREPWP,                                                   
--                                                Em.giro_acct_number EmployeeGiro ,      
--                                                GIRO.bank_accountno EmployerGiro ,      
--                                                giro_bank GiroBank ,      
--                                                PRAge = CASE WHEN (Em.Emp_Type = 'SC') THEN 3      
--                                                             WHEN (Em.Emp_Type = 'SPR' OR      
--                                                                   Em.Emp_Type = 'SDPR'      
--                                                                  ) AND      
--                                                                  (DATEDIFF(m, Em.pr_date, @startdtsub) > 24) THEN 3      
--                                                             WHEN (Em.Emp_Type = 'SPR' OR      
--                                                                   Em.Emp_Type = 'SDPR'      
--                                                                  ) AND      
--                                                                  (DATEDIFF(m, Em.pr_date, @startdtsub) <= 12) THEN 1      
--                                                             WHEN (Em.Emp_Type = 'SPR' OR      
--                                                                   Em.Emp_Type = 'SDPR'      
--       ) AND      
--                                                                  (DATEDIFF(m, Em.pr_date, @startdtsub) > 12 AND      
--                                                                   DATEDIFF(m, Em.pr_date, @startdtsub) <= 24      
--                                                                  ) THEN 2      
--                                                             ELSE 0      
--                                                        END ,      
--                                                Em.wdays_per_week WorkingDaysInWeek ,      
--                                                Em.Ot_Entitlement OT ,      
--                                                Em.Cpf_entitlement CPF ,      
--                                                Em.EmpCPFtype CPFType ,      
--                                                Em.Pay_Frequency PayType ,      
--                                                Em.Payment_Mode Pay_Mode ,      
--                                                Em.Joining_Date Join_Date ,      
--                                                Em.Termination_date Term_Date ,      
--                                                Em.Pr_date ,      
--                                                Em.Hourly_rate ,      
--                                                @RollDays RollDays ,      
--                                                WrkgDaysInRoll = CASE WHEN (Em.wdays_per_week = 5)      
--                                                                      THEN @TotalDaysCountPayRoll_5      
--                                                                      WHEN (Em.wdays_per_week = 5.5)      
--                                                                      THEN @TotalDaysCountPayRoll_5p      
--                                                                      WHEN (Em.wdays_per_week = 6)      
--                                                                      THEN @TotalDaysCountPayRoll_6      
--                                                                      WHEN (Em.wdays_per_week = 7)      
--                                                                      THEN @TotalDaysCountPayRoll_7      
--                                                                 END ,      
--                                                Em.PayRateCust AS BasicPayInRoll ,      
--                                                @NoWrkgDaysSubPay SubPayDays ,      
--                                                WrkgDaysInSubPay = CASE WHEN (Em.wdays_per_week = 5)      
--                                                                        THEN @TotalDaysCount_5      
--                                                                        WHEN (Em.wdays_per_week = 5.5)      
--                                                                        THEN @TotalDaysCount_5p      
--                                                                        WHEN (Em.wdays_per_week = 6)      
--                                                                        THEN @TotalDaysCount_6      
--                                                                        WHEN (Em.wdays_per_week = 7)      
--                                                                        THEN @TotalDaysCount_7      
--                                                                   END ,      
--                                                BasicDayRate = CASE WHEN (Em.Pay_Frequency='H') Then 0      
--                 WHEN (Em.wdays_per_week >= 5 AND      
--                                                                          EM.daily_rate_mode = 'M' AND      
--                                                                          EM.daily_rate > 0      
--                                                                         ) THEN Em.daily_rate      
--                                                                    WHEN (Em.wdays_per_week = 5 AND      
--                                                                          @roundunpaid = -1      
--                                                                         )      
--                                                THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5)      
--                                                                    WHEN (Em.wdays_per_week = 5 AND      
--                                                                          @roundunpaid >= 0      
--                                                                         )      
--                                                                    THEN ROUND((Em.PayRateCust /      
--                                                                                @TotalDaysCountPayRoll_5), @roundunpaid)      
--                                                                    WHEN (Em.wdays_per_week = 5.5 AND      
--                                                                          @roundunpaid = -1      
--                                                                         )      
--                                                                    THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5p)      
--                                                                    WHEN (Em.wdays_per_week = 5.5 AND      
--                                                                          @roundunpaid >= 0      
--                                                                         )      
--                                                                    THEN ROUND((Em.PayRateCust /      
--                                                                                @TotalDaysCountPayRoll_5p), @roundunpaid)      
--                                                                    WHEN (Em.wdays_per_week = 6 AND      
--                                                                          @roundunpaid = -1      
--                                       )      
--                                                                    THEN (Em.PayRateCust / @TotalDaysCountPayRoll_6)      
--                                                                    WHEN (Em.wdays_per_week = 6 AND      
--                                                                          @roundunpaid >= 0      
--                                                                         )      
--                                                                    THEN ROUND((Em.PayRateCust /      
--                                                                                @TotalDaysCountPayRoll_6), @roundunpaid)      
--                                                                    WHEN (Em.wdays_per_week = 7 AND      
--                                                                          @roundunpaid = -1      
--                                             )      
--                                                                    THEN (Em.PayRateCust / @TotalDaysCountPayRoll_7)      
--                                                                    WHEN (Em.wdays_per_week = 7 AND      
--                                                                          @roundunpaid >= 0      
--                                                                         )      
--                                                                    THEN ROUND((Em.PayRateCust /      
--                                                                                @TotalDaysCountPayRoll_7), @roundunpaid)                                                  
--                --When (Em.wdays_per_week >= 5  And daily_rate_mode='M') Then daily_rate                   
--                                                               END ,      
--                                                (ISNULL(UFD.UnpaidFullDay, 0) - ISNULL(UFPR.UnpaidFullDayPR, 0)) UnpaidFullDay ,      
--                                                (ISNULL(UHD.UnpaidHalfDay, 0) - ISNULL(UHPR.UnpaidHalfDayPR, 0)) UnpaidHalfDay ,      
--                                                ISNULL(PFD.PaidFullDay, 0) PaidFullDay ,      
--                                                ISNULL(PHD.PaidHalfDay, 0) PaidHalfDay ,      
--                                                ISNULL(UFPR.UnpaidFullDayPR, 0) UnpaidFullDayPR ,      
--                                                ISNULL(UHPR.UnpaidHalfDayPR, 0) UnpaidHalfDayPR ,      
--                                                (Em.hourly_rate * Em.Ot1Rate) OT1Rate ,      
--                                                EOT.overtime1 OT1Hrs ,      
--                                                CONVERT(DECIMAL(8, 2), ((Em.hourly_rate * Em.Ot1Rate) *      
--                                                                        ISNULL(EOT.overtime1, 0))) OT1 ,      
--                                                (Em.hourly_rate * Em.Ot2Rate) OT2Rate ,      
--                                                EOT.overtime2 OT2Hrs ,      
--                                                CONVERT(DECIMAL(8, 2), ((Em.hourly_rate * Em.Ot2Rate) *      
--                                                                        ISNULL(EOT.overtime2, 0))) OT2 ,      
--                                                Days_Work = CASE WHEN Em.Pay_Frequency = 'D'      
--                                                                 THEN ISNULL(EOT.Days_Work, 0)      
--                                                                 ELSE 0      
--                                                            END ,      
--                                                NH_Work = CASE WHEN Em.Pay_Frequency = 'H' THEN ISNULL(EOT.NH_Work, 0)      
--                                                               ELSE 0      
--                                                          END ,      
--                                                ActSatDaySpan = CASE WHEN (Em.wdays_per_week = 5.5)      
--               THEN SSD.ActSatDaySpan / 2      
--                                                                     WHEN (Em.wdays_per_week = 6) THEN 0      
--                                                                     WHEN (Em.wdays_per_week = 7) THEN 0      
--                                                                     ELSE SSD.ActSatDaySpan      
--                                                                END ,      
--                                                ActSunDaySpan = CASE WHEN (Em.wdays_per_week = 7) THEN 0      
--                                                                     ELSE SSD.ActSunDaySpan      
--                                                                END ,      
--                                                ActPRSatDaySpan = CASE WHEN (Em.wdays_per_week = 5.5)      
--                                                                       THEN SSDPR.ActPRSatDaySpan / 2      
--                                                                       WHEN (Em.wdays_per_week = 6) THEN 0      
--                                                                      WHEN (Em.wdays_per_week = 7) THEN 0      
--                                                                       ELSE SSDPR.ActPRSatDaySpan      
--                                                                  END ,      
--                                                ActPRSunDaySpan = CASE WHEN (Em.wdays_per_week = 7) THEN 0      
--                                                                       ELSE SSDPR.ActPRSunDaySpan      
--                                                                  END ,      
--                                                ISNULL(Add4NW.Add4NW, 0) Add4NW ,      
--                                                ISNULL(Add4OW.Add4OW, 0) Add4OW ,      
--                                                ISNULL(Add4AW.Add4AW, 0) Add4AW ,      
--                                                (ISNULL(Add4NW.Add4NW, 0) + ISNULL(Add4OW.Add4OW, 0) +      
--                                                 ISNULL(Add4AW.Add4AW, 0)) AdditionalWages ,      
--                                                ISNULL(Ded.DedAmt, 0) DedAmt ,      
--                                                ISNULL(DCPF.DedCPFAmt, 0) DedCPFAmt ,      
--                                                CalculateCPF ,      
--                                                Daily_rate_mode ,      
--                                                Daily_Rate = CASE WHEN @roundunpaid = -1 THEN Daily_Rate      
--                                                                  ELSE ROUND(Daily_Rate, @roundunpaid)      
--                                                             END      
--                                         FROM   #EmployeeTemp Em      
--                                         LEFT OUTER JOIN Department DEPT ON Em.Dept_Id = DEPT.Id      
--                                         LEFT OUTER JOIN Emp_Group EG ON Em.emp_group_id = EG.Id      
--                                         LEFT OUTER JOIN GiroBanks GIRO ON Em.Payment_Mode = GIRO.ID      
--                                         LEFT OUTER JOIN Race RA ON Em.Race_Id = RA.ID      
--                                         LEFT OUTER JOIN #UnpaidFullDay UFD ON Em.Emp_Code = UFD.Emp_Id      
--                                         LEFT OUTER JOIN #UnpaidHalfDay UHD ON Em.Emp_Code = UHD.Emp_Id      
--                                         LEFT OUTER JOIN #PaidFullDay PFD ON Em.Emp_Code = PFD.Emp_Id      
--                                         LEFT OUTER JOIN #PaidHalfDay PHD ON Em.Emp_Code = PHD.Emp_Id      
--                                         LEFT OUTER JOIN #UnpaidFullDayPR UFPR ON Em.Emp_Code = UFPR.Emp_Id      
--                                         LEFT OUTER JOIN #UnpaidHalfDayPR UHPR ON Em.Emp_Code = UHPR.Emp_Id      
--                                         LEFT OUTER JOIN #EOT EOT ON Em.Emp_Code = EOT.Emp_Code      
--                                         LEFT OUTER JOIN #SatSunDaysTemp SSD ON Em.Emp_Code = SSD.Emp_Code      
--                                         LEFT OUTER JOIN #PRSatSunDaysTemp SSDPR ON Em.Emp_Code = SSDPR.Emp_Code      
--                                         LEFT OUTER JOIN #Add4NW Add4NW ON Em.Emp_Code = Add4NW.Emp_Code      
--                                         LEFT OUTER JOIN #Add4OW Add4OW ON Em.Emp_Code = Add4OW.Emp_Code      
--                                         LEFT OUTER JOIN #Add4AW Add4AW ON Em.Emp_Code = Add4AW.Emp_Code      
--                                         LEFT OUTER JOIN #Add4AWNOCPF Add4AWNOCPF ON Em.Emp_Code = Add4AWNOCPF.Emp_Code
--                                         LEFT OUTER JOIN #Deduction Ded ON Em.Emp_Code = Ded.Emp_Code      
--                                         LEFT OUTER JOIN #DeductionCPF DCPF ON Em.Emp_Code = DCPF.Emp_Code      
--                                        ) T      
--                                ) E      
--                        ) F      
--                ) G      
--       ORDER BY G.FullName                                                                                                 
--      
----CALCULATE AW FOR CPF      
--       DECLARE @EMPLID INT      
--       DECLARE @BASICEMP FLOAT      
--       DECLARE db_cursor_old CURSOR FOR SELECT Emp_Code,[BASIC] FROM #PriorGenPayroll      
--       OPEN db_cursor_old                                                                 
--       FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP      
--       WHILE @@FETCH_STATUS = 0       
--             BEGIN                           
--                   INSERT   @CPFAWCALC (Emp_Code, CMOW, LYOW, CYOW, CPFAWCIL, EST_AWCIL, ACTCIL, AWCM, AWB4CM,      
--                                        AWCM_AWB4CM, AWCPF)      
--                            EXEC sp_CalculateCPFAW @company_id, @month, @year, @EMPLID, @BASICEMP      
--                   FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP      
--             END                                                                                                     
--                               
--       CLOSE db_cursor_old                                                                                                     
--       DEALLOCATE db_cursor_old                                                                         
--                                                        
----Calculate Last Year Ordinary Wage CPF, Ordinary CPF Ceiling                                                                                                  
----    SELECT  Emp_ID Emp_Code, SUM(CPFOrdinaryNet) OrdinaryWagesLY              
----    INTO    #LYOWPaidWithCPFCeil     
----    FROM    ( SELECT    * ,              
----                        CPFOrdinaryNet = CASE WHEN OrdinaryWagesLY >= @cpfceiling              
----                                              THEN @cpfceiling              
----                                              ELSE OrdinaryWagesLY              
----                                         END              
----              FROM      ( SELECT    pd.emp_id ,              
----                                    MONTH(ph.start_period) Mth ,              
----                                    ( pd.cpfnet - pd.cpfAdd_Additional ) OrdinaryWagesLY              
----                          FROM      prepare_payroll_hdr ph              
----                          INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id              
----                          WHERE     pd.status = 'G' AND              
----                                    YEAR(ph.start_period) = @lastyear AND              
----                                    pd.CPFNet > 0              
----                        ) R              
----            ) R              
----    GROUP BY R.Emp_ID                                                                                                  
--                                                                                                  
----Calculate Current Year Ordinary Wage CPF, Ordinary CPF Ceiling and Addition Wages Ceiling                                                                                                  
----    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCY) OrdinaryWagesCY              
----    INTO    #CYOWPaidWithCPFCeil              
----    FROM    ( SELECT    R.Emp_Code, SUM(R.OrdinaryWagesCY) OrdinaryWagesCY              
----              FROM      ( SELECT    * ,              
----                                    CPFOrdinaryNet = CASE WHEN OrdinaryWagesCY >= @cpfceiling              
----                                                          THEN @cpfceiling              
----                                                          ELSE OrdinaryWagesCY              
----                                                     END              
----                          FROM      ( SELECT    pd.emp_id Emp_Code ,              
----                                                MONTH(ph.start_period) Mth ,              
----                                                ( pd.cpfnet -              
----                                                  pd.cpfAdd_Additional ) OrdinaryWagesCY              
----                                      FROM      prepare_payroll_hdr ph              
----                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id              
----                                      WHERE     pd.status = 'G' AND              
----                                                MONTH(ph.start_period) <= @startmonth AND              
----                     YEAR(ph.start_period) = @startyear AND              
----                                                pd.CPFNet > 0              
----                                    ) D              
----                        ) AS R              
----              GROUP BY  R.Emp_Code              
----            ) D              
----    GROUP BY Emp_Code                                                   
--                                                                                                  
----    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal              
----    INTO    #CYOWPaidWithCPFCeilRecal              
----    FROM    ( SELECT    R.Emp_Code,              
----                        SUM(R.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal              
----              FROM      ( SELECT    * ,              
----                                    CPFOrdinaryNetRecal = CASE              
----                                                              WHEN OrdinaryWagesCYRecal >= @cpfceiling              
----                                                              THEN @cpfceiling              
----                                             ELSE OrdinaryWagesCYRecal              
----                                                   END              
----                          FROM      ( SELECT    pd.emp_id Emp_Code ,              
----                                                MONTH(ph.start_period) Mth ,              
----                                                ( pd.cpfnet -              
----                                                  pd.cpfAdd_Additional ) OrdinaryWagesCYRecal              
----                                      FROM      prepare_payroll_hdr ph              
----                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id              
----                                      WHERE     pd.status = 'G' AND              
----                                                MONTH(ph.start_period) < @startmonth AND              
----                YEAR(ph.start_period) = @startyear AND              
----                                                pd.CPFNet > 0              
----                                    ) D              
----                        ) AS R              
----              GROUP BY  R.Emp_Code              
----            ) D              
----    GROUP BY Emp_Code                                                                                                  
--                                                        
----Calculate Current Year Addition Wages Paid Less than current month.                                                                       
----    SELECT  R.Emp_Code, SUM(R.AWPaidCY) AWPaidCY              
----    INTO    #AWPAIDCurYear              
----    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],              
----                        SUM(trx_amount) AWPaidCY              
----              FROM      emp_additions EA              
----              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID              
----              WHERE     Status = 'L' AND              
----                        ( MONTH(trx_period) <= @startmonth AND              
----                          YEAR(trx_period) = @startyear              
----                        ) AND              
----                        AT.CPF = 'Yes' AND              
----                        AT.Type_Of_Wage = 'A' AND              
----                        ( EA.ClaimStatus = 'Approved' OR              
----                          EA.ClaimStatus IS NULL              
----                        )              
----              GROUP BY  Emp_Code, MONTH(trx_period)              
----            ) AS R              
----    GROUP BY R.Emp_Code              
----    ORDER BY R.Emp_Code                                                  
--                                                                                                  
----Calculate Current Year Addition Wages Paid of current month.                                                                                                  
----    SELECT  R.Emp_Code, SUM(R.AWPaidCYMonth) AWPaidCYMonth              
----    INTO    #AWPAIDCurYearMonth             
----    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],              
----                        SUM(trx_amount) AWPaidCYMonth              
----              FROM      emp_additions EA              
----              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID              
----              WHERE     --Status='L' And                
----                        ( MONTH(trx_period) = @startmonth AND              
----                          YEAR(trx_period) = @startyear              
----                        ) AND              
----                        AT.CPF = 'Yes' AND              
----                        AT.Type_Of_Wage = 'A' AND              
----                        ( EA.ClaimStatus = 'Approved' OR              
----                          EA.ClaimStatus IS NULL              
----                        )              
----              GROUP BY  Emp_Code, MONTH(trx_period)              
----            ) AS R              
----    GROUP BY R.Emp_Code              
----    ORDER BY R.Emp_Code                                                                                     
--                                                             
--       SELECT   *      
--       INTO     #Final      
--       FROM     (SELECT * ,      
--                        EmployeeCPF = CASE WHEN (Em.CPFGross > 0 AND      
--                                                 Em.CPFGross <= 1500      
--                                                ) THEN 0      
--                                           WHEN (Em.CPFGross <= 0) THEN 0      
--                                           ELSE (ISNULL(((ISNULL(Em.CPFGross, 0)) * CPFEmployeePerc), 0)) / 100      
--                                      END ,      
--                        EmployerCPF = CASE WHEN Em.CPFGross <= 1500 AND      
--                                                Em.CPFGross > 0 THEN 0      
--                                           WHEN Em.CPFGross <= 0 THEN 0      
--                                           ELSE (ISNULL(((ISNULL(Em.CPFGross, 0)) * CPFEmployerPerc), 0)) / 100      
--                                      END ,      
--                        REPLACE((SELECT employee_cpf      
--                                 FROM   CPFAmount_detail      
--                                 WHERE  hdr_id = (SELECT    row_id      
--                                                  FROM      CPFAmount_hdr      
--                                                  WHERE     pr_years = Em.PRAge AND      
--                                                            emp_group = Em.EmpCPFType AND      
--                                                            Round(Em.CPFGross,0) BETWEEN sal_from AND sal_to      
--                                                 ) AND      
--                                        age_group = Em.Age_Group      
--                                ), '@SAL', Em.CPFGross) EmployeeCPFRow ,      
--                        REPLACE((SELECT employer_cpf      
--                                 FROM   CPFAmount_detail      
--                                 WHERE  hdr_id = (SELECT    row_id      
--                                                  FROM      CPFAmount_hdr      
--                                                  WHERE     pr_years = Em.PRAge AND      
--                                                            emp_group = Em.EmpCPFType AND      
--                                                            Round(Em.CPFGross,0) BETWEEN sal_from AND sal_to      
--                                                 ) AND      
--                                        age_group = Em.Age_Group      
--                                ), '@SAL', Em.CPFGross) EmployerCPFRow      
--                 FROM   (SELECT * ,      
--                                CPFAdditionNet = CASE WHEN CPFAdditionNetRev < 0 THEN 0      
--                                                      ELSE CPFAdditionNetRev      
--                                                 END ,      
--                                CPFAdditionNetRev AWSUBJCPF ,      
--                                CPFGross = CASE WHEN (CalculateCPF = 'Y' AND      
--                                                      CPFAdditionNetRev >= 0      
--                                                     ) THEN ((CPFOrdinaryCeil + CPFAdditionNetRev))      
--                                                WHEN (CalculateCPF = 'Y' AND      
--                                                      CPFAdditionNetRev < 0      
--                                                     ) THEN (CPFOrdinaryCeil)      
--                                                ELSE 0      
--                                           END ,      
--                                CPFEmployerPerc = CASE WHEN (CalculateCPF = 'Y')      
--                                                       THEN dbo.GetEmployerCPFPCT(EmpCPFType, Age, PRAge)      
--                                                       ELSE 0      
--                                                  END ,      
--                                CPFEmployeePerc = CASE WHEN (CalculateCPF = 'Y')      
--                                                       THEN dbo.GetEmployeeCPFPCT(EmpCPFType, Age, PRAge)      
--                                                       ELSE 0      
--                               END      
--                         FROM   (SELECT J5.* ,      
--                                        CPFOrdinaryCeil = CASE WHEN (J5.CalculateCPF = 'Y') AND      
--                                                                    (CPFOrdinary) >= @cpfceiling THEN @cpfceiling      
--                                                               WHEN (J5.CalculateCPF = 'Y') AND      
--                                                                    (CPFOrdinary) < @cpfceiling      
--                                                               THEN ISNULL((CPFOrdinary), 0)      
--                                                               ELSE 0      
--                                                          END ,          
--                                        --dbo.fn_GENPayrollAWCalc(@startmonth, @startyear, Em.Emp_Code, J5.Basic) AS CPFAdditionNetRev ,  
--                                        J7.AWCPF CPFAdditionNetRev ,      
--                                        Em.EmpCPFtype ,      
--                                        Em.Age_Group ,      
--                                        Em.Age ,      
--                                        Em.FundType ,      
--              Ot1SysRate ,      
--                                        OT2SysRate ,      
--                                        J7.CMOW ,      
--                                        J7.LYOW ,      
--                                        J7.CYOW ,      
--                                        J7.CPFAWCIL ,      
--                                        J7.EST_AWCIL ,      
--                                        J7.ACTCIL ,      
--                                        J7.AWCM ,      
--                                        J7.AWB4CM ,      
--                                        J7.AWCM_AWB4CM      
--                                 FROM   #EmployeeTemp Em --LEFT OUTER JOIN #CYOWPaidWithCPFCeilRecal J6 ON Em.Emp_Code = J6.Emp_Code              
--                                      --LEFT OUTER JOIN #CYOWPaidWithCPFCeil J1 ON Em.Emp_Code = J1.Emp_Code              
--                                      --LEFT OUTER JOIN #AWPAIDCurYear J2 ON Em.Emp_Code = J2.Emp_Code              
--                                      --LEFT OUTER JOIN #LYOWPaidWithCPFCeil J3 ON Em.Emp_Code = J3.Emp_Code              
--                                      --LEFT OUTER JOIN #AWPAIDCurYearMonth J4 ON Em.Emp_Code = J4.Emp_Code              
--                                 LEFT OUTER JOIN #PriorGenPayroll J5 ON Em.Emp_Code = J5.Emp_Code      
--                                 LEFT OUTER JOIN @CPFAWCALC J7 ON Em.Emp_Code = J7.Emp_Code      
--                                ) Em      
--                        ) Em      
--                ) Em      
--       ORDER BY Em.FullName                                                                                                  
--                  
--    --Calculate Employer and Employee CPF Contribution                                                                                             
--       DECLARE db_cursor CURSOR FOR SELECT Emp_Code, EmployerCPFRow, EmployeeCPFRow FROM #Final WHERE EmployeeCPFRow IS NOT NULL OR EmployerCPFRow IS NOT NULL                                                                                              
--       OPEN db_cursor                                                                                                     
--       FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt                                                                                                  
--       WHILE @@FETCH_STATUS = 0       
--             BEGIN                                                                                                     
--                   SET @compute = N'set @cpfamtemployer= ' + @EmployerCPFAmt                                                             
--                   EXEC sp_executesql @compute, @param1, @cpfamtemployer OUTPUT                                                                        
--                                                               
--                   SET @compute = N'set @cpfamtemployee= ' + @EmployeeCPFAmt                                                                                                   
--                   EXEC sp_executesql @compute, @param2, @cpfamtemployee OUTPUT                                                                                                  
--                                                                                                  
--                                                                                             
--                   UPDATE   #Final      
--                   SET      EmployerCPF = @cpfamtemployer, EmployeeCPF = @cpfamtemployee      
--                   WHERE    Emp_Code = @EmpID                                                                                            
--                   FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt                                                                                                  
--             END                                                                                                     
--                                                                                               
--       CLOSE db_cursor                                                                                                     
--       DEALLOCATE db_cursor                                                                         
--                                                                                                  
--       SELECT   Emp_Code, FullName, DeptName, GroupName, [Basic], [BasicPR], TotalAdditions, TotalDeductions, OT1Rate,      
--                OT2Rate, OT1Hrs, OT2Hrs, OT1, OT2, Days_Work,      
--                CAST(ROUND(([Basic] + OT1 + OT2 + DaysWorkedRate + Add4NW + Add4OW + Add4AW) - TotalDeductions,      
--                           @roundnetpay) AS DECIMAL(9, 2)) NetPay, OT, CPFOrdinaryCeil, CPFAdditionNet, CPFGross,      
--                EmployeeCPFAmt, EmployerCPFAmt, (EmployeeCPFAmt + EmployerCPFAmt) CPFAmount, CPF, EmpCPFtype, PRAge,      
--                @cpfceiling CPFCeiling, FundType, FundAmount,      
--                (UnpaidFullDay + UnpaidHalfDay + UnpaidFullDayPR + UnpaidHalfDayPR) UnPaidLeaves, TotalUnPaid, PayType,      
--                Daily_rate_mode, Daily_Rate, ActualBasic, Pay_Mode, EmployeeGiro, EmployerGiro, GiroBank, Emp_Type,      
--                WorkingDaysInWeek, CPFType, Hourly_rate, Join_Date, Term_Date, Pr_date, RollDays, WrkgDaysInRoll,      
--                BasicPayInRoll, SubPayDays, WrkgDaysInSubPay, BasicDayRate, BasicDayRateWORound, BasicNorSubPay,      
--                UnpaidFullDay, UnpaidHalfDay, PaidFullDay, PaidHalfDay, UnPaidDeduct, UnpaidFullDayPR, UnpaidHalfDayPR,      
--                UnPaidDeductPR, Add4NW, Add4OW, Add4AW, AdditionalWages, DedAmt, ActSatDaySpan, ActSunDaySpan,      
--                ActWrkgDaysSpan, ActPRSatDaySpan, ActPRSunDaySpan, ActPRWrkgDaysSpan, DaysWorkedRate, CPFOrdinary,      
--                Age_Group, Age, OT1SysRate, OT2SysRate, CalculateCPF, CPFEmployeePerc, CPFEmployerPerc, EmployeeCPFRow,      
--                EmployerCPFRow,      
--                CAST(ROUND((([Basic] - TotalUnPaid) + OT1 + OT2 + TotalAdditions), @roundnetpay) AS DECIMAL(9, 2)) GrossWithAddition,      
--                ISNULL(GrossWithOutAddition, 0) GrossWithOutAddition, ISNULL(FundGrossAmount, 0) FundGrossAmount,      
--                SDLFundGrossAmount, CMOW, LYOW, CYOW, CPFAWCIL, EST_AWCIL, ACTCIL, AWCM, AWB4CM, AWCM_AWB4CM, AWSUBJCPF,      
--                ('EmployeePayReport.aspx?qsEmpID=' + CONVERT(VARCHAR, Emp_Code) + '&qsMonth=' + CONVERT(VARCHAR, @month) +      
--                 '&qsYear=' + CONVERT(VARCHAR, @year)) AS MediumUrl      
--       FROM     (SELECT * ,      
--                        CAST((Add4NW + Add4OW + Add4AW + DaysWorkedRate) AS DECIMAL(9, 2)) TotalAdditions ,      
--                        CAST((UnPaidDeduct + UnpaidDeductPR + +DedAmt + EmployeeCPFAmt + FundAmount) AS DECIMAL(9, 2)) TotalDeductions      
--                 FROM   (SELECT * ,      
--                                FLOOR(EmployeeCPF) EmployeeCPFAmt ,      
--                                ROUND(((ABS(FLOOR(EmployeeCPF) - EmployeeCPF)) + EmployerCPF), 0) EmployerCPFAmt ,      
--                                dbo.GetEmpFundContribution((ISNULL((GrossWithOutAddition + Add4AW + Add4OW), 0)),      
--                                                           ISNULL(FundType, '')) FundAmount ,      
--                                (GrossWithOutAddition + Add4AW + Add4OW) FundGrossAmount ,      
--                                SDLFundGrossAmount = CASE WHEN (PR_Date >= @startdtsub) AND      
--                                                               (Emp_Type = 'SPR' OR      
--                                                                Emp_Type = 'SDPR' OR      
--                                                                Emp_Type = 'SC'      
--                                                               )      
--                                                          THEN ISNULL(CAST(ROUND((([Basic] - TotalUnPaid) + OT1 + OT2 +      
--                                                                                  DaysWorkedRate), @roundnetpay) AS DECIMAL(9,      
--                                                                                                        2)), 0)      
--                                                          ELSE 0      
--                                                     END      
--                         FROM   #Final      
--                        ) Res      
--                ) Res                                                                                                  
--                                                     
--       DROP TABLE #Final                                                                       
--       DROP TABLE #EmployeeTemp                                    
--       DROP TABLE #PRSatSunDaysTemp                                                                                                  
--       DROP TABLE #SatSunDaysTemp                                                                                                  
--       DROP TABLE #UnpaidFullDayPR                                                                                
--       DROP TABLE #UnpaidHalfDayPR                                               
--       DROP TABLE #PaidHalfDay                                                                                                  
--       DROP TABLE #PaidFullDay                                                                                                  
--       DROP TABLE #UnpaidHalfDay                                                                                                   
--       DROP TABLE #UnpaidFullDay                                                                                                  
--       DROP TABLE #Add4AW                                                                                                  
--       DROP TABLE #Add4OW                                                                                                  
--       DROP TABLE #Add4NW                                                                                                  
--       DROP TABLE #EOT                   
--       DROP TABLE #PriorGenPayroll                                                                                                  
--    --DROP TABLE #AWPAIDCurYear                                                                    
--    --DROP TABLE #CYOWPaidWithCPFCeil                                                                                                  
--    --DROP TABLE #CYOWPaidWithCPFCeilRecal                                                                                                  
--    --DROP TABLE #AWPAIDCurYearMonth                                                                                      
--    --DROP TABLE #LYOWPaidWithCPFCeil                        
--       DROP TABLE #Deduction                                    
--       DROP TABLE #DeductionCPF              
--       DROP TABLE #EmployeeWorkFlow                     
--       DROP TABLE #EmployeeWorkFlowLevel                    
--       DROP TABLE #EmployeeAssignedToPayrollGroup 
GO
/****** Object:  StoredProcedure [dbo].[sp_GetManualTimeSheetRec]    Script Date: 09/02/2009 11:57:52 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GetManualTimeSheetRec]
       (
        @start_date VARCHAR(10) ,
        @end_date VARCHAR(10) ,
        @compid INT ,
        @empid VARCHAR(10) ,
        @subprojid VARCHAR(50) ,
        @isEmpty VARCHAR(3) ,
        @AMB INT = 2 --@AMB 0 is A 1 is M B is 2
       )
AS --Declare @compid  int                    
--Declare @start_date varchar(10)                    
--Declare @end_date varchar(10)                    
--                    
--Set @start_date = '01/05/2009'                    
--Set @end_date = '15/05/2009'                    
--Set @compid  = 12                    
--declare @from_date datetime   
--set @from_date = convert(datetime, '01/01/2009', 103)                  
  
       DECLARE @workinghrs INT  
       BEGIN                    
  
             SELECT @workinghrs = (day_hours * 60) + day_minute
             FROM   Company
             WHERE  Company_ID = @compid  
  
             SELECT E.*, 'NH' = CASE WHEN (HrsinMins - CompanyWorkHours) > 0 THEN dbo.ConvertToHours(CompanyWorkHours)
                                     ELSE dbo.ConvertToHours(HrsinMins)
                                END,
                    'OT1' = CASE WHEN PH = 0 AND
                                      (HrsinMins - CompanyWorkHours) > 0
                                 THEN dbo.ConvertToHours(HrsinMins - CompanyWorkHours)
                                 ELSE 0
                            END,
                    'OT2' = CASE WHEN PH = 1 AND
                                      (HrsinMins - CompanyWorkHours) > 0
                                 THEN dbo.ConvertToHours(HrsinMins - CompanyWorkHours)
                                 ELSE 0
                            END
             INTO   #TempResult
             FROM   (SELECT F.Emp_Code ,
                            F.Emp_Name ,
                            F.Time_Card_No ,
                            F.Sub_Project_ID ,
                            F.Sub_Project_Name ,
                            F.TSDate ,
                            F.InShortTime ,
                            F.OutShortTime ,
                            F.PH ,
                            'HoursWorked' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                                 ELSE HoursWorked
                                            END ,
                            'CompanyWorkHours' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                                      ELSE Ro.CompanyWorkHours
                                                 END ,
                            'HrsinMins' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                               ELSE dbo.ConvertToMinutes(HoursWorked)
                                          END
                     FROM   (SELECT EM.Emp_Code ,
                                    Em.Emp_Name ,
                                    Em.Time_Card_No ,
                                    SP.Sub_Project_ID ,
                                    Sub_Project_Name ,
                                    TS.TSDate ,
                                    TS.InShortTime ,
                                    TS.OutShortTime ,
                                    'HoursWorked' = CASE WHEN TS.InTime IS NOT NULL AND
                                                              TS.OutTime IS NOT NULL
                                                         THEN dbo.ConvertToHours(DATEDIFF(mi, TS.InTime, TS.OutTime))
                                                         ELSE 0
                                                    END ,
                                    'PH' = CASE WHEN DATENAME(dw, CONVERT(DATETIME, '01/01/2009', 103)) = 'Sunday'
                                                THEN 1
                                                ELSE dbo.IsHoliday(1, CONVERT(DATETIME, TS.TSDATE, 103))
                                           END
                             FROM   (SELECT E.Company_Id ,
                                            E.Emp_Code ,
                                            (E.Emp_Name + ' ' + E.Emp_LName) Emp_Name ,
                                            E.Time_Card_No ,
                                            E.Joining_Date
                                     FROM   Employee E
                                    ) EM
                             LEFT OUTER JOIN (SELECT    INPROJ ,
                                                        OUTPROJ ,
                                                        'Time_Card_No' = CASE WHEN InUserID IS NULL THEN OutUserId
                                                                              ELSE InUserID
                                                                         END ,
                                                        'TSDate' = CASE WHEN InMonth IS NULL THEN OutMonth
                                                                        ELSE InMonth
                                                                   END ,
                                                        InTime ,
                                                        OutTime ,
                                                        CONVERT(CHAR(5), CONVERT (DATETIME, InTime, 105), 108) InShortTime ,
                                                        CONVERT(CHAR(5), CONVERT(DATETIME, OutTime, 105), 108) OutShortTime ,
                                                        'Terminal' = CASE WHEN INPROJ IS NULL AND
                                                                               OutPROJ IS NULL THEN NULL
                                                                          WHEN INPROJ IS NOT NULL AND
                                                                               OutPROJ IS NOT NULL THEN INPROJ
                                                                          WHEN INPROJ IS NULL AND
                                                                               OutPROJ IS NOT NULL THEN OUTPROJ
                                                                          WHEN INPROJ IS NOT NULL AND
                                                                               OutPROJ IS NULL THEN INPROJ
                                                                     END
                                              FROM      (SELECT TSIN.TerminalSN INPROJ ,
                                                                TSOUT.TerminalSN OUTPROJ ,
                                                                TSIN.UserId InUserID ,
                                                                TSIN.TranID InTranID ,
                                                                TSIN.[PunchTime] InMonth ,
                                                                TSIN.TimeEntry AS [InTime] ,
                                                                TSOUT.UserId OutUserID ,
                                                                TSOUT.TranID OutTranID ,
                                                                TSOUT.[PunchTime] OutMonth ,
                                                                TSOut.TimeEntry AS [OutTime]
                                                         FROM   (SELECT [PunchTime], TranID, TerminalSN, UserID, EventID,
                                                                        MIN(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                 FROM   (SELECT * ,
                                                                                CONVERT(VARCHAR, CONVERT(DATETIME, A.TimeEntry, 105), 103) [PunchTime] ,
                                                                                'AMB' = CASE WHEN @AMB = 2 THEN 2
                                                                                             WHEN Inserted = 'A' THEN 0
                                                                                             WHEN Inserted = 'M' THEN 1
                                                                                        END
                                                                         FROM   ACTATEK_LOGS A
                                                                        ) AS Ts
                                                                 WHERE  softdelete = 0 AND
                                                                        UPPER(EventID) LIKE '%IN%' AND
                                                                        AMB = @AMB/*And TerminalSN=@projectid*/
                                                                 GROUP BY TranID, TerminalSN, USerID, EventID,
                                                                        [PunchTime]
                                                                ) TSIN
                                                         FULL OUTER JOIN (SELECT    [PunchTime], TranID, TerminalSN,
                                                                                    UserID, EventID,
                                                                                    MAX(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                          FROM      (SELECT * ,
                                                                                            CONVERT(VARCHAR, CONVERT(DATETIME, A.TimeEntry, 105), 103) [PunchTime] ,
                                                                                            'AMB' = CASE
                                                                                                        WHEN @AMB = 2
                                                                                                        THEN 2
                                                                                                        WHEN Inserted = 'A'
                                                                                                        THEN 0
                                                                                                        WHEN Inserted = 'M'
                                                                                                        THEN 1
                                                                                                    END
                                                                                     FROM   ACTATEK_LOGS A
                                                                                    ) AS Ts
                                                                          WHERE     UPPER(EventID) LIKE '%OUT%' AND
                                                                                    softdelete = 0 AND
                                                                                    AMB = @AMB/*And TerminalSN=@projectid*/
                                                                          GROUP BY  TranID, TerminalSN, USerID, EventID,
                                                                                    [PunchTime]
                                                                         ) TSOUT ON TSIN.TranID = TSOUT.TranID AND
                                                                                    TSIN.UserID = TSOUT.UserID AND
                                                                                    TSIN.TerminalSN = TSOUT.TerminalSN AND
                                                                                    TSIN.[PunchTime] = TSOUT.[PunchTime]
                                                        ) TSOutPut
                                             ) TS ON Em.Time_Card_No = TS.Time_Card_No --And convert(datetime, Em.DateInYear, 103) = convert(datetime, TS.TSDate, 103)                  
                             INNER JOIN SubProject SP ON TS.Terminal = SP.Sub_Project_ID
                             WHERE  CONVERT(DATETIME, TS.TSDATE, 103) BETWEEN CONVERT(DATETIME, @start_date, 103)
                                                                      AND     CONVERT(DATETIME, @end_date, 103)
                            ) F
                     LEFT OUTER JOIN (SELECT    E.Emp_ID ,
                                                R.* ,
                                                dbo.ConvertToMinutes(dbo.ConvertToHours(DATEDIFF(mi, R.InTime, R.OutTime))) CompanyWorkHours
                                      FROM      RosterDetail R
                                      INNER JOIN EmployeeAssignedToRoster E ON R.Roster_ID = E.Roster_ID
                                     ) Ro ON F.Emp_Code = Ro.Emp_ID AND
                                             CONVERT(DATETIME, F.TSDate, 103) = CONVERT(DATETIME, RO.Roster_Date, 103)
                    ) E
             ORDER BY Emp_Code, CONVERT(DATETIME, TSDate, 103)        
      
      
             IF ((@empid != '-1') AND
                 (@subprojid != '-1')
                ) 
                BEGIN        
                      DELETE    FROM #TempResult
                      WHERE     Time_Card_No != @empid OR
                                Sub_PRoject_ID != @subprojid            
                END        
        
             IF (@empid = '-1' AND
                 @subprojid != '-1'
                ) 
                BEGIN        
                      DELETE    FROM #TempResult
                      WHERE     Sub_PRoject_ID != @subprojid        
                END        
        
             IF (@empid != '-1' AND
                 @subprojid = '-1'
                ) 
                BEGIN        
                      DELETE    FROM #TempResult
                      WHERE     Time_Card_No != @empid        
                END        
        
           
             IF @isEmpty = 'Yes' 
                BEGIN                  
                      DELETE    FROM #TempResult
                      WHERE     InShortTime IS NOT NULL AND
                                OutShortTime IS NOT NULL                  
                END            
            
             SELECT *
             FROM   #TempResult                  
             DROP TABLE #TempResult                  
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_empleave_add]    Script Date: 09/02/2009 11:57:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--SP_empleave_Add 2, '01/11/2010', '16/11/2010', 8, '', 'Open', 10, 2, 0, '', '', 2010  
CREATE PROCEDURE [dbo].[Sp_empleave_add](    
               @emp_code      [VARCHAR](50),    
               @start_date    VARCHAR(10),    
               @end_date      VARCHAR(10),    
               @leave_type    [INT],    
               @approver      VARCHAR(50),    
               @status        VARCHAR(50),    
               @paid_leaves   FLOAT,    
               @unpaid_leaves FLOAT,    
               @half_day      INT  = 0,    
               @timesession   VARCHAR(10),    
               @remarks       VARCHAR(250),    
               @applyyear     INT)    
AS    
  BEGIN  
 DECLARE  @leavemodel  INT  
  
    DECLARE  @nextyear INT    
        
    DECLARE  @FirstTime INT    
        
    DECLARE  @trx_id INT    
        
    DECLARE  @from_date DATETIME    
        
    DECLARE  @to_date DATETIME    
        
    DECLARE  @leave_date DATETIME    
        
    DECLARE  @halfday_leave BIT    
        
    DECLARE  @unpaid_leave BIT    
        
    DECLARE  @company_code INT    
        
    DECLARE  @i float    
        
    DECLARE  @wdays_per_week FLOAT    
        
    DECLARE  @cnthalfday FLOAT    
        
    SET @nextyear = NULL    
        
    SET @cnthalfday = 0    
        
    IF (@applyyear != Year(Convert(DATETIME,@start_date,103)))    
      BEGIN    
        IF ((@applyyear - Year(Convert(DATETIME,@start_date,103))) <= 1)    
          BEGIN    
            SET @nextyear = @applyyear    
          END    
      END    
  
    SELECT @company_code = e.company_id,    
           @wdays_per_week = e.wdays_per_week, @leavemodel = c.Leave_Model    
    FROM   employee  e Inner Join Company c On e.Company_ID = c.Company_ID  
    WHERE  emp_code = @emp_code    
  
        
    INSERT INTO [emp_leaves]    
               ([emp_id],    
                [start_date],    
                [end_date],    
                [leave_type],    
                [approver],    
                [status],    
                [paid_leaves],    
                [unpaid_leaves],    
                [timesession],    
                [Remarks],  
    [Leave_Model])    
    VALUES     (@emp_code,    
                Convert(DATETIME,@start_date,103),    
                Convert(DATETIME,@end_date,103),    
                @leave_type,    
                @approver,    
                @status,    
                @paid_leaves,    
                @unpaid_leaves,    
                @timesession,    
                @remarks,  
    @leavemodel)    
        
    -- cater child table    
    SELECT @trx_id = @@IDENTITY    
    FROM   [emp_leaves]    
        
    SET @i = 1    
        
    SET @from_date = Convert(DATETIME,@start_date,103)    
        
    SET @to_date = Convert(DATETIME,@end_date,103)    
        
    SET @leave_date = @from_date    
        
    SET @halfday_leave = @half_day    
        
    SET @FirstTime = 0    
        
    WHILE @leave_date <= @to_date    
      BEGIN    
        SET @halfday_leave = 0    
            
        IF (@leave_date = @to_date)    
          BEGIN    
            IF (@half_day = 1)    
              BEGIN    
                SET @halfday_leave = 1    
              END    
          END    
            
        IF (@i - @cnthalfday) >= Round((@paid_leaves+@unpaid_leaves),0) AND @unpaid_leaves > 0    
          BEGIN    
            SET @unpaid_leave = 1    
          END    
        ELSE    
          BEGIN    
            SET @unpaid_leave = 0    
          END    
            
        IF dbo.Isholiday(@company_code,@leave_date) = 0    
          BEGIN    
            IF (@wdays_per_week = 5    
                AND Datename(dw,@leave_date) != 'Saturday'    
                AND Datename(dw,@leave_date) != 'Sunday')    
              BEGIN    
                IF (@unpaid_leave = 1    
                    AND @FirstTime = 0)    
                  BEGIN    
                    SET @FirstTime = 1    
                        
                    IF (@paid_leaves - Cast(@paid_leaves AS INT)) = 0.5  AND @half_day = 0    
                      BEGIN    
                        UPDATE emp_leaves_detail    
                        SET    halfday_leave = 1    
                        WHERE  trx_id = @trx_id    
                               AND leave_date = Dateadd(DAY,-1,@leave_date)    
                      END    
                 
                    IF (@unpaid_leaves - Cast(@unpaid_leaves AS INT)) = 0.5  AND @half_day = 0    
                      BEGIN    
                        INSERT INTO emp_leaves_detail    
                                   (trx_id,    
                                    leave_date,    
                                    halfday_leave,    
                                    unpaid_leave,    
                                    nextyear)    
                        VALUES     (@trx_id,    
                                    Dateadd(DAY,-1,@leave_date),    
                                    1,    
                                    1,    
                                    @nextyear)    
                      END    
                        
                    INSERT INTO emp_leaves_detail    
                               (trx_id,    
                                leave_date,    
                                halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
                ELSE    
                  BEGIN    
                    INSERT INTO emp_leaves_detail    
                               (trx_id,    
                                leave_date,    
                                halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
              END    
                
            IF (@wdays_per_week = 5.5    
                AND Datename(dw,@leave_date) = 'Saturday')    
              BEGIN    
                INSERT INTO emp_leaves_detail    
                           (trx_id,    
                            leave_date,    
                            halfday_leave,    
                            unpaid_leave,    
                            nextyear)    
                VALUES     (@trx_id,    
                            @leave_date,    
                            1,    
                            @unpaid_leave,    
                            @nextyear)    
              END    
                
            IF (@wdays_per_week = 5.5    
                AND Datename(dw,@leave_date) != 'Saturday'    
                AND Datename(dw,@leave_date) != 'Sunday')    
              BEGIN    
                IF (@unpaid_leave = 1    
                    AND @FirstTime = 0)    
                  BEGIN    
                    SET @FirstTime = 1    
                        
                    IF (@paid_leaves - Cast(@paid_leaves AS INT)) = 0.5 AND @half_day = 0    
                      BEGIN    
                        UPDATE emp_leaves_detail    
                        SET    halfday_leave = 1    
                        WHERE  trx_id = @trx_id    
                               AND leave_date = Dateadd(DAY,-1,@leave_date)    
                      END    
                        
                    IF (@unpaid_leaves - Cast(@unpaid_leaves AS INT)) = 0.5 AND @half_day = 0    
                      BEGIN    
                        INSERT INTO emp_leaves_detail    
               (trx_id,    
                                    leave_date,    
                                    halfday_leave,    
                                    unpaid_leave,    
                                    nextyear)    
                        VALUES     (@trx_id,    
                                    Dateadd(DAY,-1,@leave_date),    
                                    1,    
                                    1,    
                                    @nextyear)    
                      END    
                        
                    INSERT INTO emp_leaves_detail    
                    (trx_id,    
                                leave_date,    
                                halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
                ELSE    
                  BEGIN    
                    INSERT INTO emp_leaves_detail    
                               (trx_id,    
                                leave_date,    
                                halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
              END    
                
            IF ((@wdays_per_week = 6)    
                AND (Datename(dw,@leave_date) != 'Sunday'))    
              BEGIN    
                IF (@unpaid_leave = 1    
                    AND @FirstTime = 0)    
                  BEGIN    
                    SET @FirstTime = 1    
                        
                    IF (@paid_leaves - Cast(@paid_leaves AS INT)) = 0.5    
                       AND @half_day = 0    
                      BEGIN    
                        UPDATE emp_leaves_detail    
                        SET    halfday_leave = 1    
                        WHERE  trx_id = @trx_id    
                               AND leave_date = Dateadd(DAY,-1,@leave_date)    
                      END    
                        
                    IF (@unpaid_leaves - Cast(@unpaid_leaves AS INT)) = 0.5    
                       AND @half_day = 0    
                      BEGIN    
                        INSERT INTO emp_leaves_detail    
                                   (trx_id,    
                                    leave_date,    
                                    halfday_leave,    
                                    unpaid_leave,    
                                    nextyear)    
                        VALUES     (@trx_id,    
                                    Dateadd(DAY,-1,@leave_date),    
                                    1,    
                                    1,    
                                    @nextyear)    
                      END    
                        
                    INSERT INTO emp_leaves_detail    
                               (trx_id,    
                                leave_date,    
                                halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
                ELSE    
                  BEGIN    
                    INSERT INTO emp_leaves_detail    
                               (trx_id,    
                                leave_date,    
  halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
              END    
                
            IF (@wdays_per_week = 7)    
              BEGIN    
                IF (@unpaid_leave = 1    
                    AND @FirstTime = 0)    
                  BEGIN    
                    SET @FirstTime = 1    
                        
                    IF (@paid_leaves - Cast(@paid_leaves AS INT)) = 0.5    
                       AND @half_day = 0    
            BEGIN    
                        UPDATE emp_leaves_detail    
                        SET    halfday_leave = 1    
                        WHERE  trx_id = @trx_id    
                               AND leave_date = Dateadd(DAY,-1,@leave_date)    
                      END    
                        
                    IF (@unpaid_leaves - Cast(@unpaid_leaves AS INT)) = 0.5    
                       AND @half_day = 0    
                      BEGIN    
                        INSERT INTO emp_leaves_detail    
                                   (trx_id,    
                                    leave_date,    
                                    halfday_leave,    
                                    unpaid_leave,    
                                    nextyear)    
                        VALUES     (@trx_id,    
                                    Dateadd(DAY,-1,@leave_date),    
                                    1,    
                                    1,    
                                    @nextyear)    
                      END    
                        
                    INSERT INTO emp_leaves_detail    
                               (trx_id,    
                                leave_date,    
                                halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
                ELSE    
                  BEGIN    
                    INSERT INTO emp_leaves_detail    
                               (trx_id,    
                                leave_date,    
                                halfday_leave,    
                                unpaid_leave,    
                                nextyear)    
                    VALUES     (@trx_id,    
                                @leave_date,    
                                @halfday_leave,    
                                @unpaid_leave,    
                                @nextyear)    
                  END    
              END    
                
            IF (@wdays_per_week = 5    
                AND (Datename(dw,@leave_date) = 'Saturday'    
                      OR Datename(dw,@leave_date) = 'Sunday'))    
              BEGIN    
                SET @i = @i - 1    
              END    
                
            IF (@wdays_per_week >= 5.5 AND @wdays_per_week <= 6) AND Datename(dw,@leave_date) = 'Saturday'    
              BEGIN    
                --IF Sat and Sunday then ignore it for 5.5 and 6 days a week. For 7 days we dont have to ignore.    
                SET @cnthalfday = @cnthalfday + 0.5    
    IF (@wdays_per_week = 5.5)    
    BEGIN    
     SET @i = @i - 0.5    
    END    
    ELSE    
    BEGIN    
     SET @i = @i - 1    
    END    
              END    
          END    
            
  --Select @leave_date, dbo.Isholiday(@company_code,@leave_date), @i    
        SET @leave_date = Dateadd(DAY,1,@leave_date)    
  SET @i = @i + 1    
      END    
        
--    SELECT *    
--    FROM  emp_leaves_detail    
--        
--    DELETE FROM emp_leaves_detail    
  END 
GO
/****** Object:  StoredProcedure [dbo].[sp_leave_report]    Script Date: 09/02/2009 11:57:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_helptext sp_leave_report1

CREATE PROCEDURE [dbo].[sp_leave_report] --102,'10/11/2007','31/12/2008'       
       (
        @empcode INT ,
        @fromdate VARCHAR(10) ,
        @todate VARCHAR(10)
       )
AS 
       BEGIN          
             DECLARE @compid AS INT       
             DECLARE @employee AS VARCHAR(50)    
             DECLARE @compname AS VARCHAR(50)    
             DECLARE @startdate AS DATETIME    
             DECLARE @enddate AS DATETIME     
    
             SET @startdate = CONVERT(DATETIME, @fromdate, 103)    
             SET @enddate = CONVERT(DATETIME, @todate, 103)    
        
             SELECT @employee = isnull(emp_name,'')+' '+isnull(emp_lname,''), @compid = company_id
             FROM   employee
             WHERE  emp_code = @empcode        
             SELECT @compname = company_name
             FROM   company
             WHERE  company_id = @compid    
          
             SELECT @employee employee, @compname company, CONVERT(VARCHAR(15), @startdate, 103) fromdate,
                    CONVERT(VARCHAR(15), @enddate, 103) todate, Type, ISNULL(Leaves_allowed, 0) Leaves_allowed,
                    ISNULL(Leaves_Taken, 0) Leaves_Taken, CASE WHEN ISNULL(Leaves_Available, 0) < 0 THEN 0
                                                               ELSE ISNULL(Leaves_Available, 0)
                                                          END Leaves_Available,
                    CASE WHEN ISNULL(Leaves_Available, 0) < 0 THEN ABS(ISNULL(Leaves_Available, 0))
                         ELSE 0
                    END Unpaid_Leaves
             FROM   (SELECT c.Type, a.Leaves_allowed,
                            (SELECT SUM(ISNULL(dbo.Fn_NoWds(@compid, start_date, end_date), 0)) Leaves_Taken
                             FROM   emp_leaves
                             WHERE  emp_id IN (SELECT   emp_code
                                               FROM     employee
                                               WHERE    emp_code = @empcode) AND
                                    status = 'Approved' AND
                                    leave_type = c.id AND
                                    (CONVERT(DATETIME, CONVERT(VARCHAR(10), [Application Date], 103), 103)) BETWEEN @startdate
                                                                                                        AND
                                                                                                        @enddate
                            ) Leaves_Taken,
                            (a.leaves_allowed -
                             (SELECT    SUM(ISNULL(dbo.Fn_NoWds(@compid, start_date, end_date), 0)) Leaves_Taken
                              FROM      emp_leaves
                              WHERE     emp_id IN (SELECT   emp_code
                                                   FROM     employee
                                                   WHERE    emp_code = @empcode) AND
                                        status = 'Approved' AND
                                        leave_type = c.id AND
                                        (CONVERT(DATETIME, CONVERT(VARCHAR(10), [Application Date], 103), 103)) BETWEEN @startdate
                                                                                                        AND
                                                                                                        @enddate
                             )) Leaves_Available
                     FROM   leaves_allowed a ,
                            leave_types c
                     WHERE  a.leave_type = c.id AND
                            a.group_id IN (SELECT   emp_group_id
                                           FROM     employee
                                           WHERE    emp_code = @empcode)
                    ) a          
          
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_leave_report1]    Script Date: 09/02/2009 11:57:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_leave_report1]   --102,1,2008
       (
        @empcode INT ,
        @month INT ,
        @year INT
       )
AS 
       BEGIN          
             DECLARE @compid AS INT       
             DECLARE @employee AS VARCHAR(50)    
             DECLARE @comppolicy AS VARCHAR(50)    
             DECLARE @startdate AS VARCHAR(50)
             DECLARE @enddate AS VARCHAR(50)    

             SET @startdate = CAST(@year AS VARCHAR) + '/' + CAST(@month AS VARCHAR) + '/' + '01'    
             SET @enddate = CAST(@year AS VARCHAR) + '/' + CAST(@month AS VARCHAR) + '/' + '31'   
        
             SELECT @employee = isnull(emp_name,'')+' '+isnull(emp_lname,''), @compid = company_id
             FROM   employee
             WHERE  emp_code = @empcode        
             SELECT @comppolicy = no_work_days
             FROM   company
             WHERE  company_id = @compid    
          
             SELECT @employee employee, @startdate fromdate, @enddate todate, Type,
                    ISNULL(Leaves_allowed, 0) Leaves_allowed, ISNULL(Leaves_Taken, 0) Leaves_Taken,
                    CASE WHEN ISNULL(Leaves_Available, 0) < 0 THEN 0
                         ELSE ISNULL(Leaves_Available, 0)
                    END Leaves_Available,
                    CASE WHEN ISNULL(Leaves_Available, 0) < 0 THEN ABS(ISNULL(Leaves_Available, 0))
                         ELSE 0
                    END Unpaid_Leaves
             FROM   (SELECT c.Type, a.Leaves_allowed,
                            (SELECT SUM(ISNULL(dbo.fn_GetNoOfWorkingDays(@comppolicy, @month, @year), 0)) Leaves_Taken
                             FROM   emp_leaves
                             WHERE  emp_id IN (SELECT   emp_code
                                               FROM     employee
                                               WHERE    emp_code = @empcode) AND
                                    status = 'Approved' AND
                                    leave_type = c.id AND
                                    (MONTH([Application Date]) = @month AND
                                     YEAR([Application Date]) = @year
                                    )
                            ) 'Leaves_Taken',
                            (a.leaves_allowed -
                             (SELECT    SUM(ISNULL(dbo.fn_GetNoOfWorkingDays(@comppolicy, @month, @year), 0)) Leaves_Taken
                              FROM      emp_leaves
                              WHERE     emp_id IN (SELECT   emp_code
                                                   FROM     employee
                                                   WHERE    emp_code = @empcode) AND
                                        status = 'Approved' AND
                                        leave_type = c.id AND
                                        MONTH([Application Date]) = @month AND
                                        YEAR([Application Date]) = @year
                             )) 'Leaves_Available'
                     FROM   leaves_allowed a ,
                            leave_types c
                     WHERE  a.leave_type = c.id AND
                            a.group_id IN (SELECT   emp_group_id
                                           FROM     employee
                                           WHERE    emp_code = @empcode)
                    ) a          
          
       END
GO
/****** Object:  StoredProcedure [dbo].[sp_LeaveGeneration]    Script Date: 09/02/2009 11:58:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_LeaveGeneration]
       @compid INT ,
       @year VARCHAR(4)
AS --select leave_model from company where company_id=1          
       SELECT   G.company_name, G.Emp_Code, (G.Emp_Name + ' ' + G.Emp_lname) Fullname, G.Type, G.LeavesAvailable,
                LeavesRemaining = CASE WHEN G.Leave_Type = 8 THEN (G.LeavesRemaining)
                                       ELSE (G.LeavesAvailable - G.PaidLeaves)
                                  END, G.PaidLeaves, G.UnPaidLeave
       FROM     (SELECT Co.company_name ,
                        Co.leave_model ,
                        F.Emp_Code ,
                        F.Emp_Name ,
                        F.Emp_lname ,
                        F.Leave_Type ,
                        Lt.Type ,
                        LeavesAvailable = CASE WHEN F.Leave_Type = 8 AND
                                                    Co.leave_model <> 1
                                               THEN (SELECT dbo.get_available_leaves_prorated1(CONVERT(VARCHAR(10), CONVERT(DATETIME, GETDATE()), 103),
                                                                                               @compid, F.UserName)
                                                    )
                                               WHEN F.Leave_Type = 8 AND
                                                    Co.leave_model = 1 THEN LeavesRemaining
                                               ELSE (SELECT SUM(lar.Leaves_Allowed)
                                                     FROM   Leaves_Allowed lar
                                                     WHERE  lar.Leave_Year = @year AND
                                                            lar.Leave_Type = F.Leave_Type AND
                                                            lar.group_id = F.emp_group_id
                                                     GROUP BY lar.Leave_Type
                                                    )
                                          END ,
                        La.LeavesRemaining ,
                        ISNULL(F.PaidLeaves, 0) PaidLeaves ,
                        ISNULL(F.UnpaidLeave, 0) UnpaidLeave
                 FROM   (SELECT *
                         FROM   (SELECT Em.Company_ID, Em.emp_group_id, Em.Emp_Name, Em.Emp_lname, Em.Emp_Code,
                                        Em.Username, Em.Leave_Type
                                 FROM   (SELECT Em.Company_Id, Em.emp_group_id, Em.Emp_Name, Em.Emp_lname, Em.Emp_Code,
                                                em.termination_date, La.Leave_Type, Em.Username
                                         FROM   Employee Em ,
                                                (SELECT Leave_Type
                                                 FROM   Leaves_Allowed
                                                 WHERE  Leave_Year = @year
                                                 GROUP BY Leave_Type
                                                ) La
                                        ) Em
                                 INNER JOIN leave_types Lt ON Em.Leave_Type = Lt.ID
                                 WHERE  (em.termination_date IS NULL OR
                                         YEAR(termination_date) = @year
                                        )
                                 GROUP BY Em.Company_ID, Em.emp_group_id, Em.Emp_Name, Em.Emp_lname, Em.Emp_Code,
                                        Em.Username, Em.Leave_Type
                                ) H
                         LEFT OUTER JOIN (SELECT    El.Emp_ID, El.leave_type LeaveType, SUM(paid_leaves) PaidLeaves,
                                                    SUM(unpaid_leaves) UnPaidLeave
                                          FROM      emp_leaves El
                                          INNER JOIN leave_types Lt ON El.Leave_Type = Lt.ID
                                          WHERE     YEAR(El.[start_date]) = @year AND
                                                    El.Status = 'Approved'
                                          GROUP BY  El.Emp_ID, El.Leave_Type
                                         ) L ON H.Emp_Code = L.Emp_Id AND
                                                H.Leave_Type = L.LeaveType
                        ) F
                 INNER JOIN leave_types Lt ON F.Leave_Type = Lt.ID
                 LEFT OUTER JOIN (SELECT    Emp_id, SUM(leave_remaining) LeavesRemaining
                                  FROM      LEaves_annual
                                  GROUP BY  Emp_id
                                 ) La ON F.Emp_Code = La.Emp_Id
                 INNER JOIN Company Co ON F.Company_Id = Co.Company_Id
                 WHERE  Co.Company_Id = @compid
                ) G
       ORDER BY G.Emp_Name
GO
/****** Object:  StoredProcedure [dbo].[sp_getLeftLeaves]    Script Date: 09/02/2009 11:57:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_getLeftLeaves '2', 2,'15/03/2010' ,'15/03/2010', 8, 2010, '2010-12-31',0    ,'AM'
CREATE PROC [dbo].[Sp_getleftleaves] @userName    VARCHAR(50),    
                                    @compid      INT,    
                                    @stDate      VARCHAR(10),    
                                    @enDate      VARCHAR(10),    
                                    @leave_type  INT,    
                                    @applyyear   INT,    
                                    @applydateon DATETIME,    
                                    @ishalfday   FLOAT = 0,    
                                    @timesession VARCHAR(2)    
AS    
  DECLARE @leavemodel INT    
  DECLARE @isValidWorkerProjectAssign	INT    
  DECLARE @isValidNextYear  INT    
  DECLARE @isValidFromToYOS INT    
  DECLARE @isValidApply INT    
  DECLARE @wdays_per_week FLOAT    
  DECLARE @Remainder FLOAT    
  DECLARE @RemainderFloat FLOAT    
  DECLARE @CountPHRec INT    
  DECLARE @CountPayrollRec INT    
  DECLARE @CountJoinRec INT    
  DECLARE @CountApplyLeave INT    
  DECLARE @LeaveAppliedForDays FLOAT    
  DECLARE @RemainingLeaves FLOAT    
  DECLARE @Year INT    
  DECLARE @FromDate DATETIME    
  DECLARE @Todate DATETIME    
  DECLARE @Emp_Code INT    
  DECLARE @dtAllowed FLOAT    
  DECLARE @currentyear INT    
  DECLARE @dtTaken FLOAT    
    
  SELECT @leavemodel = leave_model    
  FROM   dbo.company AS c    
  WHERE  company_id = @compid    
    
  CREATE TABLE #yostemp    
      (    
           yos     INT,    
           STARTDT DATETIME,    
           ENDDT   DATETIME    
      )    
    
  DECLARE @LEAVEAVAIL TABLE(    
      id                    INT,    
      emp_id                INT,    
      leave_year            INT,    
      [TYPE]                VARCHAR(50),    
      companyleaveallowed   FLOAT,    
      leavesallowed         FLOAT,    
      LY_Leaves_Bal         FLOAT,    
      leavesearned          FLOAT,    
      paidleaves            FLOAT,    
      unpaidleaves          FLOAT,    
      pendingleaves         FLOAT,    
      leavesavailable       FLOAT,    
      totalleavestaken      FLOAT,    
      actualleavesavailable FLOAT,    
      leavesfromly          FLOAT,    
      SHOWLEAVEMODEL        INT )    
    
  SELECT @Emp_Code = emp_code,@wdays_per_week = wdays_per_week    
  FROM   employee    
  WHERE  Emp_Code = @userName    
    
  SET @FromDate = CONVERT(DATETIME, @stDate, 103)    
  SET @Todate = CONVERT(DATETIME, @enDate, 103)    
  SET @Year = YEAR(@FromDate)    
  SET @currentyear = @applyyear    
  SET @FromDate = CONVERT(DATETIME, @stDate, 103)    
  SET @Todate = CONVERT(DATETIME, @enDate, 103)    
  SET @Year = YEAR(@FromDate)    
  SET @isValidFromToYOS = 1    
  SET @isValidNextYear = 1    
  SET @isValidWorkerProjectAssign = 0
    
  IF (@leavemodel = 1    
       OR @leavemodel = 2    
       OR @leavemodel = 5    
       OR @leavemodel = 7)    
      BEGIN    
          IF (YEAR(@FromDate) = YEAR(@Todate))    
              BEGIN    
                  IF (YEAR(@FromDate) > @applyyear)    
                      BEGIN    
                          SET @isValidNextYear = 0    
                      END    
              END    
      END    
    
  IF (@leavemodel = 3    
       OR @leavemodel = 4    
       OR @leavemodel = 6    
       OR @leavemodel = 8)    
     AND @leave_type = 8    
      BEGIN    
          INSERT INTO #yostemp    
          EXEC Sp_getyos @Emp_Code,@applydateon    
    
          SELECT @isValidFromToYOS = Isnull(COUNT(*), 0)    
          FROM   #yostemp    
          WHERE  (@FromDate BETWEEN CONVERT(DATETIME, STARTDT, 103) AND CONVERT(DATETIME, ENDDT, 103))    
             AND (@Todate BETWEEN CONVERT(DATETIME, STARTDT, 103) AND CONVERT(DATETIME, ENDDT, 103))    
      END    
    
  SELECT @isValidApply = CASE    
                           WHEN CONVERT(DATETIME, @FromDate, 103) < CONVERT(DATETIME, ValidApply, 103)    
                                 OR CONVERT(DATETIME, @Todate, 103) < CONVERT(DATETIME, ValidApply, 103) THEN 1    
                           ELSE 0    
                         END    
  FROM   (SELECT ValidApply = CASE    
                                WHEN (c.leave_model = 1    
                                       OR c.leave_model = 2    
                                       OR c.leave_model = 5    
    OR c.leave_model = 7) THEN ('01/01/' + CAST((YEAR(Getdate()) - 1) AS VARCHAR))    
                                ELSE CONVERT(VARCHAR, Dateadd(mm, -12, CONVERT(VARCHAR, '01/'+CAST(MONTH(a.joining_Date) AS VARCHAR)+'/'+CAST(YEAR(Getdate()) AS VARCHAR), 103)), 103)    
                              END    
          FROM   Employee a    
                 LEFT OUTER JOIN Company c ON a.company_id = c.company_id    
          WHERE  a.emp_code = @Emp_Code) D    
    
  SELECT @CountPHRec = COUNT(ID)    
  FROM   public_holidays    
  WHERE  (CONVERT(DATETIME, Holiday_Date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103)) And (CompanyID=@compid Or CompanyID=-1)
    
  SELECT @CountPayrollRec = Isnull(COUNT(trx_id), 0)    
  FROM   prepare_payroll_hdr    
  WHERE  created_by = @Emp_Code    
     AND ((MONTH(start_period) = MONTH(@FromDate)    
           AND YEAR(start_period) = YEAR(@FromDate))    
           OR (MONTH(start_period) = MONTH(@Todate)    
               AND YEAR(start_period) = YEAR(@Todate)))    
     AND trx_id IN (SELECT trx_id    
                    FROM   prepare_payroll_detail    
                    WHERE  emp_id = @Emp_Code    
                       AND (status = 'P'    
                             OR status = 'G'    
                             OR status = 'A')    
                       AND trx_id IN (SELECT trx_id    
                                      FROM   prepare_payroll_hdr    
                                      WHERE  created_by = @Emp_Code    
                                         AND ((MONTH(start_period) = MONTH(@FromDate)    
                                               AND YEAR(start_period) = YEAR(@FromDate))    
                                               OR (MONTH(start_period) = MONTH(@Todate)    
                                                   AND YEAR(start_period) = YEAR(@Todate)))))    
    
  SELECT @CountJoinRec = Isnull(COUNT(emp_code), 0)    
  FROM   employee    
  WHERE  emp_code = @Emp_Code    
     AND (CONVERT(DATETIME, confirmation_date, 103) <= CONVERT(DATETIME, @FromDate, 103)    
          AND CONVERT(DATETIME, confirmation_date, 103) <= CONVERT(DATETIME, @Todate, 103))    

    
  SELECT @isValidWorkerProjectAssign = Isnull(COUNT(Emp_ID), 0)    
  FROM   MultiProjectAssigned
  WHERE  Emp_ID = @Emp_Code    
     AND (CONVERT(DATETIME, EntryDate, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    

  --SET MANUALLY CONFIRMATION rt now in future we will create this modules      
  SET @CountJoinRec = 1000    
    
  IF (@ishalfday = 0.5)    
      BEGIN    
          IF @wdays_per_week = 5.5    
             AND @ishalfday = 0.5    
             AND Datename(dw, @FromDate) = 'Saturday'    
              BEGIN    
                  SELECT @CountApplyLeave = Isnull(COUNT(el.trx_id), 0)    
                  FROM   dbo.emp_leaves_detail eld    
                         INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id    
                  WHERE  (CONVERT(DATETIME, leave_date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    
                     AND emp_id = @Emp_Code    
                     AND el.status != 'Rejected'    
              END    
          ELSE    
              BEGIN    
                  SELECT @CountApplyLeave = Isnull(COUNT(el.trx_id), 0)    
                  FROM   dbo.emp_leaves_detail eld    
                         INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id    
                  WHERE  (CONVERT(DATETIME, leave_date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    
                     AND emp_id = @Emp_Code    
                     AND el.status != 'Rejected'    
                     AND (eld.halfday_leave = 0    
                           OR (eld.halfday_leave = 1    
                               AND (eld.session = @timesession    
                                     OR eld.session = '--')))    
              END    
      END    
  ELSE    
      BEGIN    
          SELECT @CountApplyLeave = Isnull(COUNT(el.trx_id), 0)    
       FROM   dbo.emp_leaves_detail eld    
                 INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id    
          WHERE  (CONVERT(DATETIME, leave_date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    
             AND emp_id = @Emp_Code    
             AND status != 'Rejected'    
 END    
    
  IF (@isValidWorkerProjectAssign > 0)
      BEGIN    
          ---103 MEANS Applly leave in different Payroll year                     
          SELECT 'No' uppaid,'-106' totalleaves,0 CustomField1,0 BalanceLeave    
      END    
  ELSE    
      BEGIN    
	  IF (@isValidNextYear <= 0)    
		  BEGIN    
			  ---103 MEANS Applly leave in different Payroll year                     
			  SELECT 'No' uppaid,'-105' totalleaves,0 CustomField1,0 BalanceLeave    
		  END    
	  ELSE    
		  BEGIN    
			  IF (@isValidFromToYOS <= 0)    
				  BEGIN    
					  ---103 MEANS Applly leave in different Payroll year                     
					  SELECT 'No' uppaid,'-103' totalleaves,0 CustomField1,0 BalanceLeave    
				  END    
			  ELSE    
				  BEGIN    
					  IF @isValidApply = 1    
						  BEGIN    
							  ---104 MEANS no valid year and date                    
							  SELECT 'No' uppaid,'-104' totalleaves,0 CustomField1,0 BalanceLeave    
						  END    
					  ELSE    
						  BEGIN    
							  IF @CountPayrollRec > 1000000000    
								  BEGIN    
									  ---101 MEANS Payroll Already Locked for the Date Range.                              
									  SELECT 'No' uppaid,'-102' totalleaves,0 CustomField1,0 BalanceLeave    
								  END    
							  ELSE    
								  BEGIN    
									  IF @CountApplyLeave > 0    
										  BEGIN    
											  ---101 MEANS Leave Already Applied for the Date Range.                              
											  SELECT 'No' uppaid,'-101' totalleaves,0 CustomField1,0 BalanceLeave    
										  END    
									  ELSE    
										  BEGIN    
											  IF (@CountJoinRec <= 0)    
												  BEGIN    
													  ---100 MEANS Leave Applying before Joining Date                              
													  SELECT 'No' uppaid,'-100' totalleaves,0 CustomField1,0 BalanceLeave    
												  END    
											  ELSE    
												  BEGIN    
													  IF (@ishalfday = 0.5    
														  AND @wdays_per_week = 5.5)    
														  BEGIN    
															  IF Datename(dw, @FromDate) = 'Saturday'    
																  BEGIN    
																	  SET @LeaveAppliedForDays = dbo.Fn_nowds(@Emp_Code, @FromDate, @Todate)    
																  END    
															  ELSE    
																  BEGIN    
																	  SET @LeaveAppliedForDays = dbo.Fn_nowds(@Emp_Code, @FromDate, @Todate) - @ishalfday    
																  END    
														  END    
													  ELSE    
														  BEGIN    
															  SET @LeaveAppliedForDays = dbo.Fn_nowds(@Emp_Code, @FromDate, @Todate) - @ishalfday    
							  END    
	    
													  IF (@LeaveAppliedForDays < 0)    
														  BEGIN    
															  SET @LeaveAppliedForDays = 0    
														  END    
	    
													  IF ((@currentyear - @Year) = 1)    
		   BEGIN    
															  SET @Year = @applyyear    
															  SET @FromDate = Dateadd(yy, 1, @FromDate)    
															  SET @Todate = Dateadd(yy, 1, @Todate)    
															  SET @stDate = CONVERT(VARCHAR, @FromDate, 103)    
															  SET @enDate = CONVERT(VARCHAR, @Todate, 103)    
														  END    
	    
													  INSERT @LEAVEAVAIL    
															 (id,emp_id,leave_year,[TYPE],companyleaveallowed,LY_Leaves_Bal,leavesallowed,leavesearned,paidleaves,unpaidleaves,pendingleaves,leavesavailable,actualleavesavailable,totalleavestaken,SHOWLEAVEMODEL)
	  
	    
													  EXEC Sp_getemployeeleavepolicy @Emp_Code,@applyyear,@applydateon,@leave_type    
	    
													  --   SELECT @RemainingLeaves=Case When isnull((LeavesAvailable-PendingLeaves),0) <= 0 Then 0 Else (LeavesAvailable-PendingLeaves) End                                   
													  --   FROM @LEAVEAVAIL                              
													  SELECT @RemainingLeaves = CASE    
																				  WHEN Isnull((actualleavesavailable), 0) <= 0 THEN 0    
																				  ELSE (actualleavesavailable)    
																				END    
													  FROM   @LEAVEAVAIL    
	    
													  ---ISSUE IN REMAINING LEAVES                                
													  --Select * From @LEAVEAVAIL                              
													  IF (Isnull(@RemainingLeaves, 0) - Isnull(@LeaveAppliedForDays, 0)) >= 0    
														  BEGIN    
															  SELECT 'yes',@LeaveAppliedForDays totalleaves,@CountPHRec CustomField1,BalanceLeave = CASE    
																																					  WHEN (@RemainingLeaves - @LeaveAppliedForDays) < 0 THEN 0    
																																					  ELSE (@RemainingLeaves - @LeaveAppliedForDays)    
																																					END    
														  END    
													  ELSE    
														  BEGIN    
															  IF (@RemainingLeaves - Floor(@RemainingLeaves) >= 0.5)    
																  BEGIN    
																	  --Select @RemainingLeaves-Floor(@RemainingLeaves)                              
																	  SET @Remainder = @LeaveAppliedForDays - (Floor(@RemainingLeaves) + 0.5)    
																  END    
															  ELSE    
																  BEGIN    
																	  SET @Remainder = @LeaveAppliedForDays - Floor(@RemainingLeaves)    
																  END    
	    
					IF (@Remainder > 0 And @CountPayrollRec > 0)    
				   Begin     
					  ---101 MEANS Payroll Already Locked for the Date Range.                              
					  SELECT 'No' uppaid,'-102' totalleaves,0 CustomField1,0 BalanceLeave    
				   End    
				   Else    
				   Begin    
					SELECT @Remainder uppaid,@LeaveAppliedForDays totalleaves,@CountPHRec CustomField1,BalanceLeave = CASE    
											  WHEN (@RemainingLeaves - @LeaveAppliedForDays) < 0 THEN 0    
											  ELSE (@RemainingLeaves - @LeaveAppliedForDays)    
											END    
				   END    
														  END    
												  END    
										  END    
								  END    
						  END    
				  END    
		  END     
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_TimeSheet]    Script Date: 09/02/2009 11:58:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_TimeSheet]
       @companyid INT ,
       @year VARCHAR(4) ,
       @month VARCHAR(4) ,
       @EmpID VARCHAR(10) ,
       @isInOutEmpty INT
AS 
       DECLARE @companyhworkours INT      
       DECLARE @companyworkmins INT      
       DECLARE @where VARCHAR(100)      
       DECLARE @select VARCHAR(8000)      
      
       IF LEN(@EmpID) > 0 
          BEGIN      
                SELECT  @where = 'Where Emp_Code != ' + @EmpID      
          END      
      
       SELECT   *
       INTO     #temp
       FROM     Employee
       WHERE    Company_Id = @companyid
      
-- The Below temp table is getting created for the records which is not tr in ACTATEK DB      
       SELECT   E.Emp_Code, (E.Emp_Name + ' ' + E.Emp_LName) Fullname, D.DateInYear PaySlipDate,
                dbo.[IsHoliday](@companyid, CONVERT(DATETIME, D.DateInYear, 103)) PublicHoliday,
                DATENAME(dw, D.DateInYear) [DayName]
       INTO     #temppayslip
       FROM     Employee E ,
                dateinyear D
       WHERE    YEAR(D.DateInYear) = @year AND
                MONTH(D.DateInYear) = @month AND
                E.Company_Id = @companyid
      
       SELECT   @select = 'Delete From #temp ' + @where      
       EXEC (@select)      
      
       SELECT   @select = 'Delete From #temppayslip ' + @where      
       EXEC (@select)      
      
       SELECT   @companyhworkours = ISNULL(day_hours, 0), @companyworkmins = ISNULL(day_minute, 0)
       FROM     company
       WHERE    company_id = @companyid      
    
       SELECT   *
       FROM     (SELECT T.Emp_Code EmpID ,
                        T.Fullname ,
                        T.PublicHoliday ,
                        CONVERT(VARCHAR, CONVERT(DATETIME, T.PaySlipDate, 105), 103) PaySlipDate ,
                        T.DayName ,
                        E.* ,
                        OT1 = CASE WHEN (OT_Type = 'OT1') THEN Emp_Total_OTWorked_in_HrsMins
                                   ELSE 0
                              END ,
                        OT2 = CASE WHEN (OT_Type = 'OT2') THEN Emp_Total_OTWorked_in_HrsMins
                                   ELSE 0
                              END ,
                        Total_Hours_Worked_WO_OT = CASE WHEN (Pay_Frequency = 'M') THEN 0
                                                        WHEN (Pay_Frequency = 'H')
                                                        THEN Emp_Worked_Time_in_HrsMins - Emp_Total_OTWorked_in_HrsMins
                                                        ELSE 0
                                                   END ,
                        PubHol = CASE WHEN (T.PublicHoliday = 1) THEN 'Yes'
                                      WHEN (T.PublicHoliday = 0) THEN 'No'
                                      ELSE 'N/A'
                                 END ,
                        InOutEmpty = CASE WHEN (Emp_Total_OTWorked_in_Mins IS NULL AND
                                                @isInOutEmpty > 0
                                               ) THEN 0
                                          WHEN (Emp_Total_OTWorked_in_Mins < 0 AND
                                                @isInOutEmpty > 0
                                               ) THEN 1
                                          WHEN (Emp_Total_OTWorked_in_Mins > 0 AND
                                                @isInOutEmpty > 0
                                               ) THEN 2
                                          ELSE 0
                                     END
                 FROM   (SELECT R.* ,
                                Emp_Total_OTWorked_in_HrsMins = CASE WHEN (R.OT = 'Y' AND
                                                                           R.Emp_Total_OTWorked_in_Mins > 0
                                                                          )
                                                                     THEN dbo.ConvertToHours(R.Emp_Total_OTWorked_in_Mins)
                                                                     ELSE 0
                                                                END ,
                                OT_Type = CASE WHEN (Pub_Holiday = 1) THEN 'OT2'
                                               WHEN ([DayNameActa] = 'Sunday') THEN 'OT2'
                                               ELSE 'OT1'
                                          END
                         FROM   (SELECT * ,
                                        Emp_Total_OTWorked_in_Mins = CASE WHEN (Pub_Holiday = 1)
                                                                          THEN Emp_Worked_Time_in_Mins --- IF ITS HOLIDAY THEN FIRST CONISDER STRAIGHT FORWARD AS WHOLE DAY OT2      
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5 AND
                                                                               ([DayNameActa] = 'Saturday' OR
                                                                                [DayNameActa] = 'Sunday'
                                                                               ) THEN (Emp_Worked_Time_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5 AND
                                                                               ([DayNameActa] != 'Saturday' AND
                                                                                [DayNameActa] != 'Sunday'
                                                                               )
                                                                          THEN (Emp_Worked_Time_in_Mins -
                                                                                Set_WorkingTime_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5.5 AND
                                                                               ([DayNameActa] = 'Saturday')
                                                                          THEN (Emp_Worked_Time_in_Mins -
                                                                                (Set_WorkingTime_in_Mins / 2))
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5.5 AND
                                                                               ([DayNameActa] = 'Sunday')
                                                                          THEN (Emp_Worked_Time_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5.5 AND
                                                                               ([DayNameActa] != 'Saturday' AND
                                                                                [DayNameActa] != 'Sunday'
                                                                               )
                                                                          THEN (Emp_Worked_Time_in_Mins -
                                                                                Set_WorkingTime_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 6 AND
                                                                               ([DayNameActa] = 'Sunday')
                                                                          THEN (Emp_Worked_Time_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 6 AND
                                                                               ([DayNameActa] != 'Sunday')
                                                                          THEN (Emp_Worked_Time_in_Mins -
                                                                                Set_WorkingTime_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins > Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 7
                                                                          THEN (Emp_Worked_Time_in_Mins -
                                                                                Set_WorkingTime_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5 AND
                                                                               ([DayNameActa] = 'Saturday' OR
                                                                                [DayNameActa] = 'Sunday'
                                                                               ) THEN (Emp_Worked_Time_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5 AND
                                                                               ([DayNameActa] != 'Saturday' OR
                                                                                [DayNameActa] != 'Sunday'
                                                                               ) THEN (0)
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 6 AND
                                                                               ([DayNameActa] = 'Sunday')
                                                                          THEN (Emp_Worked_Time_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 6 AND
                                                                               ([DayNameActa] != 'Sunday')
                                                                          THEN (Set_WorkingTime_in_Mins -
                                                                                Emp_Worked_Time_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5.5 AND
                                                                               ([DayNameActa] = 'Sunday')
                                                                          THEN (Emp_Worked_Time_in_Mins)
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5.5 AND
                                                                               ([DayNameActa] != 'Saturday' AND
                                                                                [DayNameActa] != 'Sunday'
                                                                               ) THEN (0)
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5.5 AND
                                                                               ([DayNameActa] = 'Saturday') AND
                                                                               ((Emp_Worked_Time_in_Mins -
                                                                                 (Set_WorkingTime_in_Mins / 2)) > 0)
                                                                          THEN (Emp_Worked_Time_in_Mins -
                                                                                (Set_WorkingTime_in_Mins / 2))
                                                                          WHEN (Emp_Worked_Time_in_Mins < Set_WorkingTime_in_Mins) AND
                                                                               WorkingPattern = 5.5 AND
                                                                               ([DayNameActa] = 'Saturday') AND
                                                                               ((Emp_Worked_Time_in_Mins -
                                                                                 (Set_WorkingTime_in_Mins / 2)) <= 0)
                                                                          THEN (0)
                                                                          WHEN (Emp_Worked_Time_in_Mins = Set_WorkingTime_in_Mins)
                                                                          THEN 0
                                                                          ELSE -2
                                                                     END
                                 FROM   (SELECT Em.Emp_Code ,
                                                Em.Pay_Frequency ,
                                                TS.* ,
                                                ot_entitlement OT ,
                                                Em.wdays_per_week WorkingPattern ,
                                                DATENAME(dw, CONVERT(DATETIME, [Actatek_Date], 103)) [DayNameActa] ,
                                                dbo.[IsHoliday](@companyid, CONVERT(DATETIME, [Actatek_Date], 103)) Pub_Holiday ,
                                                ((@companyhworkours) * 60) + @companyhworkours Set_WorkingTime_in_Mins ,
                                                DATEDIFF(minute, inshorttime, outshorttime) Emp_Worked_Time_in_Mins ,
                                                Emp_Worked_Time_in_HrsMins = CASE WHEN (outshorttime > inshorttime)
                                                                                  THEN dbo.ConvertToHours(DATEDIFF(minute,
                                                                                                        inshorttime,
                                                                                                        outshorttime))
                                                                                  ELSE 0
                                                                             END
                                         FROM   (SELECT 'Time_Card_No' = CASE WHEN InUserID IS NULL THEN OutUserId
                                                                              ELSE InUserID
                                                                         END , --'TranID' = CASE  WHEN InTranID IS NULL THEN OutTranID Else InTranID END,  
                                                        'Actatek_Date' = CASE WHEN InMonth IS NULL THEN OutMonth
                                                                              ELSE InMonth
                                                                         END ,
                                                        InTime ,
                                                        OutTime ,
                                                        CONVERT(CHAR(5), CONVERT(DATETIME, InTime, 105), 108) InShortTime ,
                                                        CONVERT(CHAR(5), CONVERT(DATETIME, OutTime, 105), 108) OutShortTime
                                                 FROM   (SELECT TSIN.UserId InUserID ,  
--TSIN.TranID InTranID,  
                                                                TSIN.[Actatek_Date] InMonth ,
                                                                TSIN.TimeEntry AS [InTime] ,
                                                                TSOUT.UserId OutUserID ,  
--TSOUT.TranID OutTranID,  
                                                                TSOUT.[Actatek_Date] OutMonth ,
                                                                TSOut.TimeEntry AS [OutTime]
                                                         FROM   (SELECT [Actatek_Date],  
--TranID,  
                                                                        UserID, EventID,
                                                                        MIN(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                 FROM   (SELECT
                                                                                *,
                                                                                CONVERT( VARCHAR,
                                                                                CONVERT( DATETIME, A.TimeEntry, 105),
                                                                                103) [Actatek_Date] FROM ACTATEK_LOGS A
                                                                        ) AS Ts
                                                                 WHERE  softdelete = 0 AND
                                                                        UPPER(EventID) LIKE '%IN%'
                                                                 GROUP BY   
--TranID,  
                                                                        USerID, EventID, [Actatek_Date]
                                                                ) TSIN
                                                         FULL OUTER JOIN (SELECT    [Actatek_Date],  
--TranID,  
                                                                                    UserID, EventID,
                                                                                    MAX(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                          FROM      (SELECT
                                                                                            *,
                                                                                            CONVERT( VARCHAR,
                                                                                            CONVERT( DATETIME,
                                                                                            A.TimeEntry, 105), 103)
                                                                                            [Actatek_Date]
                                                                                            FROM ACTATEK_LOGS A
                                                                                    ) AS Ts
                                                                          WHERE     UPPER(EventID) LIKE '%OUT%' AND
                                                                                    softdelete = 0
                                                                          GROUP BY   
--TranID,  
                                                                                    USerID, EventID, [Actatek_Date]
                                                                         ) TSOUT ON --TSIN.TranID=TSOUT.TranID And   
TSIN.UserID = TSOUT.UserID AND
                                                                                    TSIN.[Actatek_Date] = TSOUT.[Actatek_Date]
                                                        ) TSOutPut
                                                ) TS
                                         INNER JOIN #temp Em ON TS.Time_Card_No = Em.Time_Card_No
                                        ) Res
                                 WHERE  YEAR(CONVERT(DATETIME, Res.[Actatek_Date], 103)) = @year AND
                                        MONTH(CONVERT(DATETIME, Res.[Actatek_Date], 103)) = @month
                                ) R
                         LEFT OUTER JOIN (SELECT    Res.Emp_Code ,
                                                    DAY(CONVERT(DATETIME, Res.[Actatek_Date], 103)) [date]
                                          FROM      (SELECT Em.Emp_Code ,
                                                            TS.*
                                                     FROM   (SELECT 'Time_Card_No' = CASE WHEN InUserID IS NULL
                                                                                          THEN OutUserId
                                                                                          ELSE InUserID
                                                                                     END ,   
--'TranID' = CASE  WHEN InTranID IS NULL THEN OutTranID Else InTranID END,   
                                                                    'Actatek_Date' = CASE WHEN InMonth IS NULL
                                                                                          THEN OutMonth
                                                                                          ELSE InMonth
                                                                                     END ,
                                                                    InTime ,
                                                                    OutTime ,
                                                                    CONVERT(CHAR(5), CONVERT(DATETIME, InTime, 105), 108) InShortTime ,
                                                                    CONVERT(CHAR(5), CONVERT(DATETIME, OutTime, 105), 108) OutShortTime
                                                             FROM   (SELECT TSIN.UserId InUserID ,  
--TSIN.TranID InTranID,  
                                                                            TSIN.[Actatek_Date] InMonth ,
                                                                            TSIN.TimeEntry AS [InTime] ,
                                                                            TSOUT.UserId OutUserID ,  
--TSOUT.TranID OutTranID,  
                                                                            TSOUT.[Actatek_Date] OutMonth ,
                                                                            TSOut.TimeEntry AS [OutTime]
                                                                     FROM   (SELECT [Actatek_Date],  
--TranID,  
                                                                                    UserID, EventID,
                                                                                    MIN(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                             FROM   (SELECT
                                                                                            *,
                                                                                            CONVERT( VARCHAR,
                                                                                            CONVERT( DATETIME,
                                                                                            A.TimeEntry, 105), 103)
                                                                                            [Actatek_Date]
                                                                                            FROM ACTATEK_LOGS A
                                                                                    ) AS Ts
                                                                             WHERE  softdelete = 0 AND
                                                                                    UPPER(EventID) LIKE '%IN%'
                                                                             GROUP BY   
--TranID,  
                                                                                    USerID, EventID, [Actatek_Date]
                                                                            ) TSIN
                                                                     FULL OUTER JOIN (SELECT    [Actatek_Date],  
--TranID,  
                                                                                                UserID, EventID,
                                                                                                MAX(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                                      FROM      (SELECT
                                                                                                        *,
                                                                                                        CONVERT( VARCHAR,
                                                                                                        CONVERT(
                                                                                                        DATETIME,
                                                                                                        A.TimeEntry, 105),
                                                                                                        103)
                                                                                                        [Actatek_Date]
                                                                                                        FROM
                                                                                                        ACTATEK_LOGS A
                                                                                                ) AS Ts
                                                                                      WHERE     UPPER(EventID) LIKE '%OUT%' AND
                                                                                                softdelete = 0
                                                                                      GROUP BY   
--TranID,  
                                                                                                USerID, EventID,
                                                                                                [Actatek_Date]
                                                                                     ) TSOUT ON --TSIN.TranID=TSOUT.TranID And --   
TSIN.UserID = TSOUT.UserID AND
                                                                                                TSIN.[Actatek_Date] = TSOUT.[Actatek_Date]
                                                                    ) TSOutPut
                                                            ) TS
                                                     INNER JOIN #temp Em ON TS.Time_Card_No = Em.Time_Card_No
                                                    ) [Res]
                                          WHERE     YEAR(CONVERT(DATETIME, Res.[Actatek_Date], 103)) = @year AND
                                                    MONTH(CONVERT(DATETIME, Res.[Actatek_Date], 103)) = @month
                                         ) Pub ON R.Emp_code = Pub.Emp_Code AND
                                                  DAY(r.[INTIME]) = Pub.Date
                        ) E
                 RIGHT OUTER JOIN (SELECT * FROM #temppayslip
                                  ) T ON E.Emp_Code = T.Emp_Code AND
                                         CONVERT(DATETIME, E.Actatek_Date, 103) = T.PaySlipDate
                ) result
       WHERE    result.InOutEmpty = @isInOutEmpty
       ORDER BY result.EmpID, result.PaySlipDate      
      
       DROP TABLE #temp      
       DROP TABLE #temppayslip

GO

  
CREATE PROCEDURE [dbo].[sp_GetManualTimeSheetRecCompare]
       (
        @start_date VARCHAR(10) ,
        @end_date VARCHAR(10) ,
        @compid INT ,
        @empid VARCHAR(10) ,
        @subprojid VARCHAR(50) ,
        @isEmpty VARCHAR(3)
       )
AS 
       DECLARE @workinghrs INT      
       BEGIN                        
      
             SELECT @workinghrs = (day_hours * 60) + day_minute
             FROM   Company
             WHERE  Company_ID = @compid      
      
             SELECT E.*, 'NH' = CASE WHEN (HrsinMins - CompanyWorkHours) > 0 THEN dbo.ConvertToHours(CompanyWorkHours)
                                     ELSE dbo.ConvertToHours(HrsinMins)
                                END,
                    'OT1' = CASE WHEN PH = 0 AND
                                      (HrsinMins - CompanyWorkHours) > 0
                                 THEN dbo.ConvertToHours(HrsinMins - CompanyWorkHours)
                                 ELSE 0
                            END,
                    'OT2' = CASE WHEN PH = 1 AND
                                      (HrsinMins - CompanyWorkHours) > 0
                                 THEN dbo.ConvertToHours(HrsinMins - CompanyWorkHours)
                                 ELSE 0
                            END
             INTO   #AutoInsert
             FROM   (SELECT F.Emp_Code ,
                            F.Emp_Name ,
                            F.Time_Card_No ,
                            F.Sub_Project_ID ,
                            F.Sub_Project_Name ,
                            F.TSDate ,
                            F.InShortTime ,
                            F.OutShortTime ,
                            F.PH ,
                            'HoursWorked' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                                 ELSE HoursWorked
                                            END ,
                            'CompanyWorkHours' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                                      ELSE Ro.CompanyWorkHours
                                                 END ,
                            'HrsinMins' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                               ELSE dbo.ConvertToMinutes(HoursWorked)
                                          END
                     FROM   (SELECT EM.Emp_Code ,
                                    Em.Emp_Name ,
                                    Em.Time_Card_No ,
                                    SP.Sub_Project_ID ,
                                    Sub_Project_Name ,
                                    TS.TSDate ,
                                    TS.InShortTime ,
                                    TS.OutShortTime ,
                                    'HoursWorked' = CASE WHEN TS.InTime IS NOT NULL AND
                                                              TS.OutTime IS NOT NULL
                                                         THEN dbo.ConvertToHours(DATEDIFF(mi, TS.InTime, TS.OutTime))
                                                         ELSE 0
                                                    END ,
                                    'PH' = CASE WHEN DATENAME(dw, CONVERT(DATETIME, '01/01/2009', 103)) = 'Sunday'
                                                THEN 1
                                                ELSE dbo.IsHoliday(1, CONVERT(DATETIME, TS.TSDATE, 103))
                                           END
                             FROM   (SELECT E.Company_Id ,
                                            E.Emp_Code ,
                                            (E.Emp_Name + ' ' + E.Emp_LName) Emp_Name ,
                                            E.Time_Card_No ,
                                            E.Joining_Date
                                     FROM   Employee E
                                    ) EM
                             LEFT OUTER JOIN (SELECT    INPROJ ,
                                                        OUTPROJ ,
                                                        'Time_Card_No' = CASE WHEN InUserID IS NULL THEN OutUserId
                                                                              ELSE InUserID
                                                                         END ,
                                                        'TSDate' = CASE WHEN InMonth IS NULL THEN OutMonth
                                                                        ELSE InMonth
                                                                   END ,
                                                        InTime ,
                                                        OutTime ,
                                                        CONVERT(CHAR(5), CONVERT (DATETIME, InTime, 105), 108) InShortTime ,
                                                        CONVERT(CHAR(5), CONVERT(DATETIME, OutTime, 105), 108) OutShortTime ,
                                                        'Terminal' = CASE WHEN INPROJ IS NULL AND
                                                                               OutPROJ IS NULL THEN NULL
                                                                          WHEN INPROJ IS NOT NULL AND
                                                                               OutPROJ IS NOT NULL THEN INPROJ
                                                                          WHEN INPROJ IS NULL AND
                                                                               OutPROJ IS NOT NULL THEN OUTPROJ
                                                                          WHEN INPROJ IS NOT NULL AND
                                                                               OutPROJ IS NULL THEN INPROJ
                                                                     END
                                              FROM      (SELECT TSIN.TerminalSN INPROJ ,
                                                                TSOUT.TerminalSN OUTPROJ ,
                                                                TSIN.UserId InUserID ,
                                                                TSIN.TranID InTranID ,
                                                                TSIN.[PunchTime] InMonth ,
                                                                TSIN.TimeEntry AS [InTime] ,
                                                                TSOUT.UserId OutUserID ,
                                                                TSOUT.TranID OutTranID ,
                                                                TSOUT.[PunchTime] OutMonth ,
                                                                TSOut.TimeEntry AS [OutTime]
                                                         FROM   (SELECT [PunchTime], TranID, TerminalSN, UserID, EventID,
                                                                        MIN(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                 FROM   (SELECT
                                                                                *,
                                                                                CONVERT( VARCHAR,
                                                                                CONVERT( DATETIME, A.TimeEntry, 105),
                                                                                103) [PunchTime] FROM ACTATEK_LOGS A
                                                                        ) AS Ts
                                                                 WHERE  UPPER(EventID) LIKE '%IN%' AND
                                                                        Inserted = 'A'/*And TerminalSN=@projectid*/
                                                                 GROUP BY TranID, TerminalSN, USerID, EventID,
                                                                        [PunchTime]
                                                                ) TSIN
                                                         FULL OUTER JOIN (SELECT    [PunchTime], TranID, TerminalSN,
                                                                                    UserID, EventID,
                                                                                    MAX(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                          FROM      (SELECT
                                                                                            *,
                                                                                            CONVERT( VARCHAR,
                                                                                            CONVERT( DATETIME,
                                                                                            A.TimeEntry, 105), 103)
                                                                                            [PunchTime]
                                                                                            FROM ACTATEK_LOGS A
                                                                                    ) AS Ts
                                                                          WHERE     UPPER(EventID) LIKE '%OUT%' AND
                                                                                    Inserted = 'A' /*And TerminalSN=@projectid*/
                                                                          GROUP BY  TranID, TerminalSN, USerID, EventID,
                                                                                    [PunchTime]
                                                                         ) TSOUT ON TSIN.TranID = TSOUT.TranID AND
                                                                                    TSIN.UserID = TSOUT.UserID AND
                                                                                    TSIN.TerminalSN = TSOUT.TerminalSN AND
                                                                                    TSIN.[PunchTime] = TSOUT.[PunchTime]
                                                        ) TSOutPut
                                             ) TS ON Em.Time_Card_No = TS.Time_Card_No --And convert(datetime, Em.DateInYear, 103) = convert(datetime, TS.TSDate, 103)                      
                             INNER JOIN SubProject SP ON TS.Terminal = SP.Sub_Project_ID
                             WHERE  CONVERT(DATETIME, TS.TSDATE, 103) BETWEEN CONVERT(DATETIME, @start_date, 103)
                                                                      AND     CONVERT(DATETIME, @end_date, 103)
                            ) F
                     LEFT OUTER JOIN (SELECT    E.Emp_ID ,
                                                R.* ,
                                                dbo.ConvertToMinutes(dbo.ConvertToHours(DATEDIFF(mi, R.InTime, R.OutTime))) CompanyWorkHours
                                      FROM      RosterDetail R
                                      INNER JOIN EmployeeAssignedToRoster E ON R.Roster_ID = E.Roster_ID
                                     ) Ro ON F.Emp_Code = Ro.Emp_ID AND
                                             CONVERT(DATETIME, F.TSDate, 103) = CONVERT(DATETIME, RO.Roster_Date, 103)
                    ) E
             ORDER BY Emp_Code, CONVERT(DATETIME, TSDate, 103)            
          
  
             SELECT E.*, 'NH' = CASE WHEN (HrsinMins - CompanyWorkHours) > 0 THEN dbo.ConvertToHours(CompanyWorkHours)
                                     ELSE dbo.ConvertToHours(HrsinMins)
                                END,
                    'OT1' = CASE WHEN PH = 0 AND
                                      (HrsinMins - CompanyWorkHours) > 0
                                 THEN dbo.ConvertToHours(HrsinMins - CompanyWorkHours)
                                 ELSE 0
                            END,
                    'OT2' = CASE WHEN PH = 1 AND
                                      (HrsinMins - CompanyWorkHours) > 0
                                 THEN dbo.ConvertToHours(HrsinMins - CompanyWorkHours)
                                 ELSE 0
                            END
             INTO   #ManualInsert
             FROM   (SELECT F.Emp_Code ,
                            F.Emp_Name ,
                            F.Time_Card_No ,
                            F.Sub_Project_ID ,
                            F.Sub_Project_Name ,
                            F.TSDate ,
                            F.InShortTime ,
                            F.OutShortTime ,
                            F.PH ,
                            'HoursWorked' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                                 ELSE HoursWorked
                                            END ,
                            'CompanyWorkHours' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                                      ELSE Ro.CompanyWorkHours
                                                 END ,
                            'HrsinMins' = CASE WHEN Ro.CompanyWorkHours IS NULL THEN 0
                                               ELSE dbo.ConvertToMinutes(HoursWorked)
                                          END
                     FROM   (SELECT EM.Emp_Code ,
                                    Em.Emp_Name ,
                                    Em.Time_Card_No ,
                                    SP.Sub_Project_ID ,
                                    Sub_Project_Name ,
                                    TS.TSDate ,
                                    TS.InShortTime ,
                                    TS.OutShortTime ,
                                    'HoursWorked' = CASE WHEN TS.InTime IS NOT NULL AND
                                                              TS.OutTime IS NOT NULL
                                                         THEN dbo.ConvertToHours(DATEDIFF(mi, TS.InTime, TS.OutTime))
                                                         ELSE 0
                                                    END ,
                                    'PH' = CASE WHEN DATENAME(dw, CONVERT(DATETIME, '01/01/2009', 103)) = 'Sunday'
                                                THEN 1
                                                ELSE dbo.IsHoliday(1, CONVERT(DATETIME, TS.TSDATE, 103))
                                           END
                             FROM   (SELECT E.Company_Id ,
                                            E.Emp_Code ,
                                            (E.Emp_Name + ' ' + E.Emp_LName) Emp_Name ,
                                            E.Time_Card_No ,
                                            E.Joining_Date
                                     FROM   Employee E
                                    ) EM
                             LEFT OUTER JOIN (SELECT    INPROJ ,
                                                        OUTPROJ ,
                                                        'Time_Card_No' = CASE WHEN InUserID IS NULL THEN OutUserId
                                                                              ELSE InUserID
                                                                         END ,
                                                        'TSDate' = CASE WHEN InMonth IS NULL THEN OutMonth
                                                                        ELSE InMonth
                                                                   END ,
                                                        InTime ,
                                                        OutTime ,
                                                        CONVERT(CHAR(5), CONVERT (DATETIME, InTime, 105), 108) InShortTime ,
                                                        CONVERT(CHAR(5), CONVERT(DATETIME, OutTime, 105), 108) OutShortTime ,
                                                        'Terminal' = CASE WHEN INPROJ IS NULL AND
                                                                               OutPROJ IS NULL THEN NULL
                                                                          WHEN INPROJ IS NOT NULL AND
                                                                               OutPROJ IS NOT NULL THEN INPROJ
                                                                          WHEN INPROJ IS NULL AND
                                                                               OutPROJ IS NOT NULL THEN OUTPROJ
                                                                          WHEN INPROJ IS NOT NULL AND
                                                                               OutPROJ IS NULL THEN INPROJ
                                                                     END
                                              FROM      (SELECT TSIN.TerminalSN INPROJ ,
                                                                TSOUT.TerminalSN OUTPROJ ,
                                                                TSIN.UserId InUserID ,
                                                                TSIN.TranID InTranID ,
                                                                TSIN.[PunchTime] InMonth ,
                                                                TSIN.TimeEntry AS [InTime] ,
                                                                TSOUT.UserId OutUserID ,
                                                                TSOUT.TranID OutTranID ,
                                                                TSOUT.[PunchTime] OutMonth ,
                                                                TSOut.TimeEntry AS [OutTime]
                                                         FROM   (SELECT [PunchTime], TranID, TerminalSN, UserID, EventID,
                                                                        MIN(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                 FROM   (SELECT
                                                                                *,
                                                                                CONVERT( VARCHAR,
                                                                                CONVERT( DATETIME, A.TimeEntry, 105),
                                                                                103) [PunchTime] FROM ACTATEK_LOGS A
                                                                        ) AS Ts
                                                                 WHERE  softdelete = 0 AND
                                                                        UPPER(EventID) LIKE '%IN%' AND
                                                                        Inserted = 'M'/*And TerminalSN=@projectid*/
                                                                 GROUP BY TranID, TerminalSN, USerID, EventID,
                                                                        [PunchTime]
                                                                ) TSIN
                                                         FULL OUTER JOIN (SELECT    [PunchTime], TranID, TerminalSN,
                                                                                    UserID, EventID,
                                                                                    MAX(CONVERT(DATETIME, TimeEntry, 103)) TimeEntry
                                                                          FROM      (SELECT
                                                                                            *,
                                                                                            CONVERT( VARCHAR,
                                                                                            CONVERT( DATETIME,
                                                                                            A.TimeEntry, 105), 103)
                                                                                            [PunchTime]
                                                                                            FROM ACTATEK_LOGS A
                                                                                    ) AS Ts
                                                                          WHERE     UPPER(EventID) LIKE '%OUT%' AND
                                                                                    softdelete = 0 AND
                                                                                    Inserted = 'M' /*And TerminalSN=@projectid*/
                                                                          GROUP BY  TranID, TerminalSN, USerID, EventID,
                                                                                    [PunchTime]
                                                                         ) TSOUT ON TSIN.TranID = TSOUT.TranID AND
                                                                                    TSIN.UserID = TSOUT.UserID AND
                                                                                    TSIN.TerminalSN = TSOUT.TerminalSN AND
                                                                                    TSIN.[PunchTime] = TSOUT.[PunchTime]
                                                        ) TSOutPut
                                             ) TS ON Em.Time_Card_No = TS.Time_Card_No --And convert(datetime, Em.DateInYear, 103) = convert(datetime, TS.TSDate, 103)                      
                             INNER JOIN SubProject SP ON TS.Terminal = SP.Sub_Project_ID
                             WHERE  CONVERT(DATETIME, TS.TSDATE, 103) BETWEEN CONVERT(DATETIME, @start_date, 103)
                                                                      AND     CONVERT(DATETIME, @end_date, 103)
                            ) F
                     LEFT OUTER JOIN (SELECT    E.Emp_ID ,
                                                R.* ,
                                                dbo.ConvertToMinutes(dbo.ConvertToHours(DATEDIFF(mi, R.InTime, R.OutTime))) CompanyWorkHours
                                      FROM      RosterDetail R
                                      INNER JOIN EmployeeAssignedToRoster E ON R.Roster_ID = E.Roster_ID
                                     ) Ro ON F.Emp_Code = Ro.Emp_ID AND
                                             CONVERT(DATETIME, F.TSDate, 103) = CONVERT(DATETIME, RO.Roster_Date, 103)
                    ) E
             ORDER BY Emp_Code, CONVERT(DATETIME, TSDate, 103)    
          
             IF ((@empid != '-1') AND
                 (@subprojid != '-1')
                ) 
                BEGIN            
                      DELETE    FROM #AutoInsert
                      WHERE     Time_Card_No != @empid OR
                                Sub_PRoject_ID != @subprojid                
                      DELETE    FROM #ManualInsert
                      WHERE     Time_Card_No != @empid OR
                                Sub_PRoject_ID != @subprojid                
                END            
            
             IF (@empid = '-1' AND
                 @subprojid != '-1'
                ) 
                BEGIN            
                      DELETE    FROM #AutoInsert
                      WHERE     Sub_PRoject_ID != @subprojid            
                      DELETE    FROM #ManualInsert
                      WHERE     Sub_PRoject_ID != @subprojid            
                END            
            
             IF (@empid != '-1' AND
                 @subprojid = '-1'
                ) 
                BEGIN            
                      DELETE    FROM #AutoInsert
                      WHERE     Time_Card_No != @empid            
                      DELETE    FROM #ManualInsert
                      WHERE     Time_Card_No != @empid            
                END            
            
               
             IF @isEmpty = 'Yes' 
                BEGIN                      
                      DELETE    FROM #AutoInsert
                      WHERE     InShortTime IS NOT NULL AND
                                OutShortTime IS NOT NULL                      
                      DELETE    FROM #ManualInsert
                      WHERE     InShortTime IS NOT NULL AND
                                OutShortTime IS NOT NULL                      
                END                
                
             SELECT A.Emp_CODE, A.Emp_Name, A.Time_Card_No, A.Sub_Project_ID, A.Sub_Project_Name, A.TSDATE,
                    A.InshortTime AutoIn, A.OutShortTime AutoOut, M.InshortTime ManualIn, M.OutShortTime ManualOut
             FROM   #AutoInsert A
             INNER JOIN #ManualInsert M ON A.Emp_Code = M.Emp_Code AND
                                           A.TSDATE = M.TSDATE  
  
             DROP TABLE #AutoInsert                      
             DROP TABLE #ManualInsert                      
       END    
  
Go

/****** Object:  StoredProcedure [dbo].[sp_ProcessTimesheet]    Script Date: 09/02/2009 11:58:28 ******/
--sp_ProcessTimesheet '25/12/2009', '28/12/2009',3,'-1',2,'No',0
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_ProcessTimesheet '01/06/2010', '05/06/2010', 2, '-1', '7', 'No', 0, 0
CREATE PROCEDURE [dbo].[Sp_processtimesheet] (@start_date VARCHAR(10),
                                             @end_date   VARCHAR(10),
                                             @compid     VARCHAR(10),
                                             @empid      VARCHAR(8000),
                                             @subprojid  VARCHAR(8000),
                                             @isEmpty    VARCHAR(3),
                                             @sessid     FLOAT,
                                             @REPID      INT=0)
AS
    BEGIN
        DECLARE @colname VARCHAR(8000)
        DECLARE @select VARCHAR(8000)
        DECLARE @whereproj VARCHAR(8000)
        DECLARE @whereemp VARCHAR(8000)
        DECLARE @wheresessid VARCHAR(100)
        DECLARE @startdate AS DATETIME
        DECLARE @enddate AS DATETIME
        DECLARE @ConsEarlyInBy AS INT
        DECLARE @softdelete AS INT

        SET @ConsEarlyInBy = 0
        SET @startdate = CONVERT(DATETIME, @start_date, 103)
        SET @enddate = CONVERT(DATETIME, @end_date, 103)

		 SELECT *                
		 INTO   #ActLogsTemp                
		 FROM   Actatek_Logs                             
			WHERE  CONVERT(DATETIME, TimeEntry, 103) BETWEEN @startdate AND @enddate
			Order By  CONVERT(DATETIME, TimeEntry, 103)


        IF (@sessid > 0)
            BEGIN
                SET @softdelete=2
            --                      SELECT    @wheresessid = 'Where SessionID Not In (' + CONVERT(VARCHAR, @sessid) + ')'                                        
            --                      SELECT    @select = 'Delete From #ActLogsTemp ' + @wheresessid                                        
            --                      EXEC (@select)                                    
            END
        ELSE
            BEGIN
                SET @softdelete=0
            END

        SELECT ROWID = IDENTITY(INT, 1, 1),'NH' = CASE
                                                    WHEN TodayPH = 1 THEN 0
                                                    WHEN Wdays_Per_week != 7
                                                         AND Roster_Day = 'Sun' THEN 0
                                                    WHEN Wdays_Per_week <= 7
                                                         AND TodayPH = 0
                                                         AND (HrsinMins - CompanyWorkHours) >= 0 THEN CompanyWorkHours
                                                    WHEN Wdays_Per_week <= 7
                                                         AND TodayPH = 0
                                                         AND (HrsinMins - CompanyWorkHours) < 0 THEN HrsinMins
                                                    ELSE 0
                                                  END,'OT1' = CASE
                                                                WHEN TodayPH = 1 THEN 0
                                                                WHEN Wdays_Per_week != 7
                                                                     AND Roster_Day = 'Sun' THEN 0
                                                                WHEN Wdays_Per_week <= 7
                                                                     AND TodayPH = 0
                                                                     AND (HrsinMins - CompanyWorkHours) > 0 THEN (HrsinMins - CompanyWorkHours)
                                                                ELSE 0
                                                              END,'OT2' = CASE
                                                                            WHEN Wdays_Per_week != 7
                                                                                 AND Roster_Day = 'Sun' THEN HrsinMins
                                                                            WHEN Wdays_Per_week <= 7
                                                                                 AND TodayPH = 1 THEN HrsinMins
                                                                            ELSE 0
                                                                          END,*,0 AS RecordFound
        INTO   #RD
        FROM   (SELECT CompanyWorkHours=CASE
                                          WHEN RosterType = 'NORMAL' THEN dbo.Converttominutes(dbo.Converttohours(Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin)))
                                          WHEN RosterType = 'FLEXIBLE' THEN (FlexibleWorkingHr - BreakTimeNHInMin)
                                          ELSE 0
                                        END,HoursWorked HrsinMins,*
                FROM   (SELECT Wdays_per_Week,ID,Emp_ID Emp_Code,Emp_Name,Roster_ID,Roster_Name,Roster_Date TSDate,LEFT(Datename(dw, CONVERT(DATETIME, Roster_Date, 103)), 3) Roster_Day,TimeStart,TimeEnd,CoTimeStart,CoTimeEnd,FirstIn,LastOut,InShortTime,OutShortTime,HoursWorked = CASE
                                                                                                                                                                                                                                                                                          WHEN RosterType = 'NORMAL'
                                                                                                                                                                                                                                                                                               AND FirstIn IS NOT NULL
                                                                                                                                                                                                                                                                                               AND LastOut IS NOT NULL
                                                                                                                                                                                                                                                                                               AND @ConsEarlyInBy = 0
                                                                                                                                                                                                                                                                                               AND (FirstIn BETWEEN TimeStart AND TimeLateInBy)
                                                                                                                                                                                                                                                                                               AND (LastOut BETWEEN TimeEarlyOutBy AND CoTimeend) THEN (Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin + BreakTimeOTInMin))
                                                                                                                                                                                                                                                                                          WHEN RosterType = 'NORMAL'
                                                                                                                                                                                                                                                                                               AND FirstIn IS NOT NULL
                                                                                                                                                                                                                                                                                               AND LastOut IS NOT NULL
                                                                                                                                                                                                                                                                                               AND @ConsEarlyInBy = 1
                                                                                                                                                                                                                                                                                               AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))
                                                                                                                                                                                                                                                                                          WHEN RosterType = 'NORMAL'
                                                                                                                                                                                                                                                                                               AND FirstIn IS NOT NULL
                                                                                                                                                                                                                                                                                               AND LastOut IS NOT NULL
                                                                                                                                                                                                                                                                                               AND @ConsEarlyInBy = 0
                                                                                                                                                                                                                                                                                               AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, CoTimeStart, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))
                                                                                                                                                                                                                                                                                          WHEN RosterType='FLEXIBLE' Then (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))
                                                                                                                                                                                                                                                                                          ELSE 0
                                                                                                                                                                                                                                                                                        END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Sub_Project_Name,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,TimeLateInBy,TimeEarlyOutBy,TimeBreakTimeNHAfter,TimeBreakTimeOTAfter,BreakTimeNHInMin,BreakTimeOTInMin,RosterType,FlexibleWorkinghr,PullWorkTimein,Remarks=CASE
nRemarks IS NULL
utRemarks IS NULL THEN ''
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     WHEN InRemarks IS NOT NULL
utRemarks IS NULL THEN InRemarks
nRemarks IS NULL
utRemarks IS NOT NULL THEN OutRemarks
nRemarks IS NOT NULL
utRemarks IS NOT NULL THEN InRemarks

                        FROM   (SELECT BreakTimeNHInMin = CASE
                                                            WHEN RosterType = 'FLEXIBLE' THEN BreakTimeNH
                                                            WHEN RosterType = 'NORMAL'
                                                                 AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeNHAfter, 103) + ' ' + BreakTimeNHhr), 103) THEN BreakTimeNH
                                                            ELSE 0
                                                          END,BreakTimeOTInMin = CASE
                                                                                   WHEN RosterType = 'FLEXIBLE' THEN BreakTimeOT
                                                                                   WHEN RosterType = 'NORMAL'
                                                                                        AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeOTAfter, 103) + ' ' + BreakTimeOThr), 103) THEN BreakTimeOT
                                                                                   ELSE 0
                                                                                 END,CONVERT(CHAR(5), CONVERT (DATETIME, FirstIn, 105), 108) InShortTime,CONVERT(CHAR(5), CONVERT (DATETIME, LastOut, 105), 108) OutShortTime,*
                                FROM   (SELECT CoTimeEnd = CASE
                                                             WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + OutTime), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT( VARCHAR, TimeEnd, 103) + ' ' + OutTime), 103)
                                                             ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + OutTime), 103)
                                                           END,FirstIn=CASE
                                                                         WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
                                                                                                          FROM   #ActLogsTemp AL
                                                                                                          WHERE  AL.SoftDelete = @softdelete
                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID
                                                                                                             AND AL.UserID = R.Time_Card_No
                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
                                                                                                             AND Upper(AL.EventID) = 'IN'
                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)
                                                                         WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
                                                                                                            FROM   #ActLogsTemp AL
                                                                                                            WHERE  AL.SoftDelete = @softdelete
                                                                                                               AND AL.TerminalSN = R.Sub_Project_ID
                                                                                                               AND AL.UserID = R.Time_Card_No
                                                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))
                                                                                                               AND Upper(AL.EventID) = 'IN'
                                                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)
                                                                         ELSE NULL
                                                                       END,LastOut= CASE WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
                                                                            FROM   #ActLogsTemp AL
                                                                            WHERE  AL.SoftDelete = @softdelete
                                                                               AND AL.TerminalSN = R.Sub_Project_ID
                                                                               AND AL.UserID = R.Time_Card_No
                                                                               AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
                                                                               AND Upper(AL.EventID) = 'OUT'
                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC)
																			WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
                                                                            FROM   #ActLogsTemp AL
                                                                            WHERE  AL.SoftDelete = @softdelete
                                                                               AND AL.TerminalSN = R.Sub_Project_ID
                                                                               AND AL.UserID = R.Time_Card_No
                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))
                                                                               AND Upper(AL.EventID) = 'OUT'
                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) Else Null END,(SELECT TOP 1 AL.Remarks
                                                                                                                                          FROM   #ActLogsTemp AL
                                                                                                                                          WHERE  AL.SoftDelete = @softdelete
                                                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID
                                                                                                                                             AND AL.UserID = R.Time_Card_No
                                                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
                                                                                                                                             AND Upper(AL.EventID) = 'IN'
                                                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC) InRemarks,(SELECT TOP 1 AL.Remarks
                                                                                                                                                                                                         FROM   #ActLogsTemp AL
                                                                                                                                                                                                         WHERE  AL.SoftDelete = @softdelete
                                                                                                                                                                                                            AND AL.TerminalSN = R.Sub_Project_ID
                                                                                                                                                                                                            AND AL.UserID = R.Time_Card_No
                                                                                                                                                                                                            AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
                                                                                                                                                                                                            AND Upper(AL.EventID) = 'OUT'
                                                                                                                                                                                                         ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) OutRemarks,*
                                        FROM   (SELECT ID,Emp_ID,Emp_Name,Roster_ID,Roster_Name,Roster_Date,TimeStart,TimeEnd = CASE
                                                                                                                                  WHEN TimeEnd IS NULL THEN Dateadd(MINUTE, 1410, TimeStart)
                                                                                                                                  ELSE TimeEnd
                                                                                                                                END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,Sub_Project_Name,CoTimeStart,Wdays_per_Week,TimeLateInBy,TimeEarlyOutBy = CASE
                                                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + EarlyOutBy), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + EarlyOutBy), 103)
                                                                                                                                                                                                                                                                                                                                                                                                                                                          ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + EarlyOutBy), 103)
                                                                                                                                                                                                                                                                                                                                                                                                                                                        END,TimeBreakTimeNHAfter = CASE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + BreakTimeNHHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeNHHr), 103)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + BreakTimeNHHr), 103)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   END,TimeBreakTimeOTAfter = CASE
reakTimeOTHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeOTHr), 103)
imeStart, 103) + ' ' + BreakTimeOTHr), 103)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              END,RosterType,FlexibleWorkinghr,PullWorkTimein
                                                FROM   (SELECT EY.Wdays_per_Week,Isnull(EY.emp_name, '') + ' ' + Isnull(EY.emp_lname, '') Emp_Name,RD.Roster_ID,RO.Roster_Name,CONVERT(VARCHAR, RD.Roster_Date, 103) Roster_Date,TimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyInBy),TimeLateInBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.LateInBy),TimeEarlyOutBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyOutBy),CoTimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.InTime),Dateadd(MINUTE, -30, CONVERT(DATETIME, (SELECT TOP 1 CONVERT(VARCHAR, RDD.Roster_Date, 101) + ' ' + RDD.EarlyInBy FROM RosterDETail RDD WHERE CONVERT(DATETIME, RDD.Roster_Date, 103) > CONVERT(DATETIME, RD.Roster_Date, 103) ORDER BY RDD.Roster_Date ASC ), 101)) TimeEnd,RD.ID,TodayPH = dbo.Isholiday(@compid, RD.Roster_Date),TomorrowPH = dbo.Isholiday(@compid, RD.Roster_Date + 1),ER.Emp_ID,EY.Time_Card_No,
                                                               EP.Sub_Project_ID SubProjectID,
                                                                       SP.Sub_Project_ID Sub_Project_ID,
                                                                       RD.Intime,RD.Outtime,RD.EarlyInBy,RD.LateInBy,RD.EarlyOutBy,RD.LateOutBy,RD.ClockInBefore,RD.ClockInAfter,RD.ClockOutBefore,RD.ClockOutAfter,RD.BreakTimeNHHr,RD.BreakTimeOThr,RD.BreakTimeNH,RD.BreakTimeOT,RD.NightShift,SP.Sub_Project_Name,RD.RosterType,RD.FlexibleWorkinghr,RD.PullWorkTimein
                                                        FROM   RosterDetail RD
                                                               INNER JOIN (SELECT DISTINCT Roster_ID,Emp_ID
                                                                           FROM   EmployeeAssignedToRoster) ER ON RD.Roster_ID = ER.Roster_ID
                                                               INNER JOIN Employee EY ON ER.Emp_ID = EY.Emp_Code
                                                               INNER JOIN (SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID
                                                                           FROM   ApprovedTimesheet A
                                                                                  INNER JOIN SubProject S ON A.Sub_Project_ID = S.Sub_Project_ID
                                                                                  INNER JOIN Employee E ON A.Time_Card_No = E.time_card_no
                                                                           WHERE  A.SoftDelete = 0
                                                                           UNION
                                                                           SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID
                                                                           FROM   #ActLogsTemp A
                                                                                  INNER JOIN SubProject S ON A.TerminalSn = S.Sub_Project_ID
                                                                                  INNER JOIN Employee E ON A.UserID = E.time_card_no
                                                                           WHERE  A.SoftDelete = 0
                                                                           UNION
                                                                           SELECT DISTINCT Sub_Project_ID,Emp_ID
                                                                           FROM   EmployeeAssignedToProject)
                                                                          --                  (SELECT DISTINCT                        
                                                                          --                   Sub_Project_ID, Emp_ID                        
                                                                          --                   FROM   EmployeeAssignedToProject)             
                                                                          EP ON EP.Emp_ID = EY.Emp_Code
                                                               INNER JOIN SubProject SP ON EP.Sub_Project_ID = SP.ID
                                                               INNER JOIN Roster RO ON RD.Roster_ID = RO.ID
                                                        --Inner Join #ActLogsTemp AL                                        
                                                        --On SP.Sub_Project_ID = AL.TerminalSN And  convert(varchar,RD.Roster_Date,103) = convert(Varchar,convert(datetime,AL.TimeEntry,103),103)                                        
                                                        WHERE  (RD.Roster_Date BETWEEN @startdate AND @enddate)
                                                           AND EY.Company_ID = @compid) DE) R) E) E) E) E --Where (E.FirstIn is not null Or E.LastOut is not null)                                        
        ORDER  BY E.Emp_Code,E.TSDate,E.SubProjectID

        IF Rtrim(@empid) != '-1'
            BEGIN
                SELECT @whereemp = 'Where Emp_Code Not In (' + @empid + ')'

                SELECT @select = 'Delete From #RD ' + @whereemp

                EXEC (@select)
            END

        IF Rtrim(@subprojid) != '-1'
            BEGIN
                SELECT @whereproj = 'Where SubProjectID Not In (' + @subprojid + ')'

                SELECT @select = 'Delete From #RD ' + @whereproj

                EXEC (@select)
            END

        IF Rtrim(@isEmpty) = 'Yes'
            BEGIN
                SELECT @select = 'Delete From #RD Where InShortTime is not null Or OutShortTime is not null'

                EXEC (@select)
            END

        DECLARE @ROWID          INT,
                @Time_Card_No   VARCHAR(10),
                @Sub_Project_ID VARCHAR(20),
                @Roster_ID      INT,
                @TSDate         VARCHAR(10),
                @LastOut        DATETIME,
                @UDate          DATETIME
        DECLARE TempCurs CURSOR FOR
            SELECT ROWID,Time_Card_No,Sub_Project_ID,Roster_ID,TSDate
            FROM   #RD

        OPEN TempCurs

        FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate

        WHILE @@FETCH_STATUS = 0
            BEGIN
                SELECT @UDate = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)
                                 FROM   #ActLogsTemp
                                 WHERE  Upper(TERMINALSN) = @Sub_Project_ID
                                    AND EventID LIKE '%IN%'
                                    AND CONVERT(CHAR(10), TimeEntry, 108) = @TSDATE
                                    AND SoftDelete = @softdelete
                                    AND UserID = @Time_Card_No
                                    AND Roster_ID = @Roster_ID
                                 ORDER  BY CONVERT(DATETIME, TimeEntry, 103) ASC)

                IF Len(Isnull(@UDate, 0)) > 1
                    BEGIN
                        UPDATE #RD
                        SET    FirstIn = @UDate
                        WHERE  ROWID = @ROWID
                           AND FirstIn IS NOT NULL    And @UDate != '1900-01-01 00:00:00.000'
                    END

                SELECT @LastOut = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)
                                   FROM   #ActLogsTemp
                                   WHERE  Upper(TERMINALSN) = @Sub_Project_ID
                                      AND EventID LIKE '%OUT%'
                                      AND SoftDelete = @softdelete
                                      AND UserID = @Time_Card_No
                                      AND Roster_ID = @Roster_ID
                                   ORDER  BY CONVERT(DATETIME, TimeEntry, 103) DESC)

                -- IF len(isnull(@LastOut,0)) > 1                              
                -- Begin                              
                --  Update #RD Set LastOut= @LastOut Where ROWID = @ROWID  And LastOut is not null                               
                -- End                              
                UPDATE #RD
                SET    InShortTime = LEFT(CONVERT(CHAR(10), FirstIn, 108), 5)
                WHERE  ROWID = @ROWID
                   AND FirstIn IS NOT NULL

                UPDATE #RD
                SET    OutShortTime = LEFT(CONVERT(CHAR(10), LastOut, 108), 5)
                WHERE  ROWID = @ROWID
                   AND LastOut IS NOT NULL

                FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate
            END

        CLOSE TempCurs

        DEALLOCATE TempCurs

        UPDATE #RD
        SET    OT1 = NH,
               NH = 0
        WHERE  PullWorkTimein = 1

        UPDATE #RD
        SET    OT2 = NH,
               NH = 0
        WHERE  PullWorkTimein = 2

        UPDATE #RD
        SET    NH = OT1,
               OT1 = 0
        WHERE  PullWorkTimein = 3

        UPDATE #RD
        SET    OT2 = OT1,
               OT1 = 0
        WHERE  PullWorkTimein = 4

        UPDATE #RD
        SET    NH = OT2,
               OT2 = 0
        WHERE  PullWorkTimein = 5

        UPDATE #RD
        SET    OT1 = OT2,
               OT2 = 0
        WHERE  PullWorkTimein = 6

        UPDATE #RD
        SET    NH = NH + OT1,
               OT1 = 0
        WHERE  PullWorkTimein = 7

        UPDATE #RD
        SET    OT1 = NH + OT1,
               NH = 0
        WHERE  PullWorkTimein = 8

        UPDATE #RD
        SET    OT2 = NH + OT1,
               NH = 0,
               OT1 = 0
        WHERE  PullWorkTimein = 9

        UPDATE #RD
        SET    OT1 = NH + OT2,
               NH = 0,
               OT2 = 0
        WHERE  PullWorkTimein = 10

        UPDATE #RD
        SET    OT2 = NH + OT2,
               NH = 0
        WHERE  PullWorkTimein = 11

        UPDATE #RD
        SET    NH = NH + OT2,
               OT2 = 0
        WHERE  PullWorkTimein = 12

        UPDATE #RD
        SET    NH = OT1 + OT2,
               OT1 = 0,
               OT2 = 0
        WHERE  PullWorkTimein = 13

        UPDATE #RD
        SET    OT1 = OT1 + OT2,
               OT2 = 0
        WHERE  PullWorkTimein = 14

        UPDATE #RD
        SET    OT2 = OT1 + OT2,
               OT1 = 0
        WHERE  PullWorkTimein = 15

        UPDATE #RD
        SET    NH = NH + OT1 + OT2,
               OT1 = 0,
               OT2 = 0
        WHERE  PullWorkTimein = 16

        UPDATE #RD
        SET    OT1 = NH + OT1 + OT2,
               NH = 0,
               OT2 = 0
        WHERE  PullWorkTimein = 17

        UPDATE #RD
        SET    OT2 = NH + OT1 + OT2,
               NH = 0,
               OT1 = 0
        WHERE  PullWorkTimein = 18

        UPDATE #RD
        SET    HoursWorked = (NH + OT1 + OT2)
        WHERE  PullWorkTimein > 0

        IF (@sessid != -1)
            BEGIN
                SELECT RES.*,E.Email EmailSuper
                FROM   (SELECT RecordLock = Isnull((SELECT TOP 1 ID
                                                    FROM   ApprovedTimeSheet AT
                                                    WHERE  AT.SoftDelete = @softdelete
                                                       AND AT.Roster_ID = R.Roster_ID
                                                       AND AT.Time_Card_No = R.Time_Card_No
                                                       AND AT.Sub_Project_ID = R.Sub_Project_ID
                                                       AND AT.TimeEntryStart = R.FirstIn
                                                       AND AT.TimeEntryEnd = R.LastOut), 0),dbo.Converttohours(R.HoursWorked) HoursWorked,
														dbo.Converttohours(R.NH) NH,dbo.Converttohours(R.OT1) OT1,dbo.Converttohours(R.OT2) OT2,
														R.CompanyWorkHours,R.HrsinMins,R.Wdays_per_Week,R.ID,R.Emp_Code,R.Emp_Name,R.Roster_ID,
														R.Roster_Name,R.TSDate,R.Roster_Day,R.TimeStart,R.TimeEnd,R.CoTimeStart,R.CoTimeEnd,
														R.FirstIn,R.LastOut,R.InShortTime,R.OutShortTime,R.TodayPH,R.TomorrowPH,R.Time_Card_No,
														R.Sub_Project_ID,R.SubProjectID,R.Sub_Project_Name,R.Intime,R.Outtime,R.EarlyInBy,
														R.LateInBy,R.EarlyOutBy,R.LateOutBy,R.ClockInBefore,R.ClockInAfter,R.ClockOutBefore,
														R.ClockOutAfter,R.BreakTimeNHHr,R.BreakTimeOThr,R.BreakTimeNH,R.BreakTimeOT,R.NightShift,
														R.TimeLateInBy,R.TimeEarlyOutBy,R.TimeBreakTimeNHAfter,R.TimeBreakTimeOTAfter,
														R.BreakTimeNHInMin,R.BreakTimeOTInMin,R.RosterType,R.FlexibleWorkinghr,
														R.PullWorkTimein,R.HoursWorked HoursWorkedMin,R.NH NHMin,R.OT1 OT1Min,
														R.OT2 OT2Min,R.Remarks,TSSup =
																				  CASE
																					WHEN (E.TimeSupervisor IS NULL
																						   OR E.TimeSupervisor = 0) THEN
																					S.TimeSupervisor
																					ELSE E.TimeSupervisor
																				  END,E.Email MyEmail
                        FROM   #RD R
                               INNER JOIN Employee E ON R.Emp_Code = E.Emp_Code
                               INNER JOIN SubProject S ON R.SubProjectID = S.ID) RES
                       LEFT OUTER JOIN Employee E ON RES.TSSup = E.Emp_Code
                ORDER  BY RES.Emp_Name
            END

        IF (@REPID = 99) --SUMMARY PROJECT Then Employe Wise          
            BEGIN
                SELECT RD.Time_Card_No,E.Emp_name [Full_Name],Sub_Project_Name,dbo.Converttohours(RD.HoursWorked) [Hours_Worked],dbo.Converttohours(RD.NH) NH,dbo.Converttohours(RD.OT1) OT1,dbo.Converttohours(RD.OT2) OT2,(E.Hourly_Rate) [Hourly_Rate],((E.Hourly_Rate * E.OT1Rate)) [OT1_Rate],((E.Hourly_Rate * E.OT2Rate)) [OT2_Rate],((E.Hourly_Rate) * dbo.Converttohours(RD.NH)) [Tot_NH],(((E.Hourly_Rate * E.OT1Rate)) * dbo.Converttohours(RD.OT1)) [TotOT1],(((E.Hourly_Rate * E.OT2Rate)) * dbo.Converttohours(RD.OT2)) [TotOT2],RD.HoursWorked [HoursWorked In Min],RD.NH [NH in Min],RD.OT1 [OT1 in Min],RD.OT2 [OT2 in Min],(E.Hourly_Rate / 60) [Hourly Rate in Min],((E.Hourly_Rate * E.OT1Rate) / 60) [OT1Rate in Min],((E.Hourly_Rate * E.OT2Rate) / 60) [OT2Rate in Min],((E.Hourly_Rate / 60) * RD.NH) [TotNH in Min],(((E.Hourly_Rate * E.OT1Rate) / 60) * RD.OT1) [Tot OT1 in Min],(((E.Hourly_Rate * E.OT2Rate) / 60) * RD.OT2) [Tot OT2 in Min],Emp_Code
                FROM   (SELECT RD.Time_Card_No,SUM(HoursWorked) HoursWorked,CAST(SUM(NH) AS VARCHAR) NH,SUM(OT1) OT1,SUM(OT2) OT2,RD.Sub_Project_Name
                        FROM   #RD RD
                        GROUP  BY RD.Sub_Project_Name,RD.Time_Card_No) RD
                       INNER JOIN Employee E ON RD.Time_Card_No = E.Time_Card_No
                ORDER  BY Emp_Name
            END

        IF (@REPID = 100)
            BEGIN
                SELECT Time_Card_No,Emp_Name Full_Name,Sub_Project_Name,TSDate [Date],InShortTime [In_Time],OutShortTime [Out_Time],dbo.Converttohours(HoursWorked) [Hours_Worked],dbo.Converttohours(NH) NH,dbo.Converttohours(OT1) OT1,dbo.Converttohours(OT2) OT2,Emp_Code,Remarks
                FROM   #RD
                ORDER  BY Emp_Name,TSDATE
            END

        DROP TABLE #RD

        DROP TABLE #ActLogsTemp
    END

GO

/****** Object:  StoredProcedure [dbo].[sp_GetRosterLockedDate]    Script Date: 09/02/2009 11:58:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_GetRosterLockedDate] (@RosterCurID INT)
AS --Select * From   
--(  
-- Select (Roster_Name+ ' '+Roster_Date) RosterName,Roster_ID,Roster_Date,(CurRowIn+CurRowOUt+OTRRowIn+OTRRowOut) ValidRow From  
-- (  
-- Select Roster_Name,Roster_ID,Cur.Roster_Date,Cur.EarlyInBy CurEarlyInBy,Cur.OutTime CurOutTime,   
--     OTR.EarlyInBy OTREarlyInBy,OTR.OutTime OTROutTime,  
--     CURRowIn=Case When CUR.EarlyInBy Between OTR.EarlyInBy And OTR.OutTime Then 1 Else 0 End,  
--     CURRowOut=Case When CUR.OutTime Between OTR.EarlyInBy And OTR.OutTime Then 1 Else 0 End,  
--     OTRRowIn=Case When OTR.EarlyInBy Between Cur.EarlyInBy And Cur.OutTime Then 1 Else 0 End,  
--     OTRRowOut=Case When OTR.OutTime Between Cur.EarlyInBy And Cur.OutTime Then 1 Else 0 End  
--     From (Select Roster_ID,Convert(varchar,Roster_Date,103) Roster_Date,  
--     Convert(DateTime,(Convert(varchar,Roster_Date,103) + ' ' + EarlyInBy),103) EarlyInBy,  
--     OutTime=Case When NightShift=0 Then Convert(DateTime,(Convert(varchar,Roster_Date,103) + ' ' + OutTime),103)   
--     Else Convert(DateTime,(Convert(varchar,Roster_Date,103) + ' ' + OutTime),103)+1 End  
--     From RosterDetail Where Roster_ID=@RosterCurID) CUR   
-- Inner Join  
-- (Select Convert(varchar,Roster_Date,103) Roster_Date,  
--     Convert(DateTime,(Convert(varchar,Roster_Date,103) + ' ' + EarlyInBy),103) EarlyInBy,  
--     OutTime=Case When NightShift=0 Then Convert(DateTime,(Convert(varchar,Roster_Date,103) + ' ' + OutTime),103)   
--     Else Convert(DateTime,(Convert(varchar,Roster_Date,103) + ' ' + OutTime),103)+1 End  
--     From RosterDetail Where Roster_ID!=@RosterCurID) OTR   
-- On CUR.Roster_Date = OTR.Roster_Date  
-- Inner Join Roster R On Cur.Roster_ID = R.ID  
-- ) Cur  
--) Cur  
--Where Cur.ValidRow > 0  
--Order By Cur.Roster_ID,Cur.Roster_Date  

       SELECT   *
       FROM     (SELECT isnull(EY.emp_name,'')+' '+isnull(EY.emp_lname,'') Emp_Name ,
                        Roster_ID ,
                        Emp_ID ,
                        ISNULL((SELECT TOP 1
                                        ValidRow
                                FROM    (SELECT (Roster_Name + ' ' + Roster_Date) RosterName ,
                                                Roster_ID ,
                                                Roster_Date ,
                                                (CurRowIn + CurRowOUt + OTRRowIn + OTRRowOut) ValidRow
                                         FROM   (SELECT Roster_Name ,
                                                        Roster_ID ,
                                                        Cur.Roster_Date ,
                                                        Cur.EarlyInBy CurEarlyInBy ,
                                                        Cur.OutTime CurOutTime ,
                                                        OTR.EarlyInBy OTREarlyInBy ,
                                                        OTR.OutTime OTROutTime ,
                                                        CURRowIn = CASE WHEN CUR.EarlyInBy BETWEEN OTR.EarlyInBy AND OTR.OutTime
                                                                        THEN 1
                                                                        ELSE 0
                                                                   END ,
                                                        CURRowOut = CASE WHEN CUR.OutTime BETWEEN OTR.EarlyInBy AND OTR.OutTime
                                                                         THEN 1
                                                                         ELSE 0
                                                                    END ,
                                                        OTRRowIn = CASE WHEN OTR.EarlyInBy BETWEEN Cur.EarlyInBy AND Cur.OutTime
                                                                        THEN 1
                                                                        ELSE 0
                                                                   END ,
                                                        OTRRowOut = CASE WHEN OTR.OutTime BETWEEN Cur.EarlyInBy AND Cur.OutTime
                                                                         THEN 1
                                                                         ELSE 0
                                                                    END
                                                 FROM   (SELECT Roster_ID ,
                                                                CONVERT(VARCHAR, Roster_Date, 103) Roster_Date ,
                                                                CONVERT(DATETIME, (CONVERT(VARCHAR, Roster_Date, 103) +
                                                                                   ' ' + EarlyInBy), 103) EarlyInBy ,
                                                                OutTime = CASE WHEN NightShift = 0
                                                                               THEN CONVERT(DATETIME, (CONVERT(VARCHAR, Roster_Date, 103) +
                                                                                                       ' ' + OutTime), 103)
                                                                               ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, Roster_Date, 103) +
                                                                                                       ' ' + OutTime), 103) +
                                                                                    1
                                                                          END
                                                         FROM   RosterDetail
                                                         WHERE  Roster_ID = ER.Roster_ID
                                                        ) CUR
                                                 INNER JOIN (SELECT CONVERT(VARCHAR, Roster_Date, 103) Roster_Date ,
                                                                    CONVERT(DATETIME, (CONVERT(VARCHAR, Roster_Date, 103) +
                                                                                       ' ' + EarlyInBy), 103) EarlyInBy ,
                                                                    OutTime = CASE WHEN NightShift = 0
                                                                                   THEN CONVERT(DATETIME, (CONVERT(VARCHAR, Roster_Date, 103) +
                                                                                                        ' ' + OutTime), 103)
                                                                                   ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, Roster_Date, 103) +
                                                                                                        ' ' + OutTime), 103) +
                                                                                        1
                                                                              END
                                                             FROM   RosterDetail
                                                             WHERE  Roster_ID != ER.Roster_ID
                                                            ) OTR ON CUR.Roster_Date = OTR.Roster_Date
                                                 INNER JOIN Roster R ON Cur.Roster_ID = R.ID
                                                ) Cur
                                        ) Cur
                                WHERE   Cur.ValidRow > 0
                               ), 0) ValidRow
                 FROM   EmployeeAssignedToRoster ER
                 INNER JOIN Employee EY ON ER.Emp_ID = EY.Emp_Code
                ) ER
       WHERE    ValidRow > 0

Go
/****** Object:  StoredProcedure [dbo].[sp_NRIC_Check]    Script Date: 09/02/2009 11:58:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SP_ClaimSupervisor_Assignment]
       (
        @Company_ID INT ,
        @SUPERVISOR_ID VARCHAR(4) ,
        @Remarks VARCHAR(50) ,
        @EmpID VARCHAR(8000) ,
        @Action INT ,
        @retval INT OUTPUT        
       )
AS 
       DECLARE @select VARCHAR(8000)        
       DECLARE @where VARCHAR(8000)         
      
       SET @where = ''
       SET @select = ''
  
       BEGIN    
        
             IF LEN(@EmpID) > 0 
                BEGIN                                                                                      
                      IF (@Action = 0) 
                         BEGIN  
                               SELECT   @where = 'WHERE Emp_Code IN (' + @EmpID + ')'                                                                                
                         END  
                      IF (@Action = 1) 
                         BEGIN  
                               SELECT   @where = 'WHERE Emp_Code IN (' + @EmpID + ')' + @where
                         END  
                END        
  
             IF (@Action = 0) 
                BEGIN  
 
                      SELECT    @select = 'UPDATE dbo.EMPLOYEE SET EMP_CLSUPERVISOR= ''' + @SUPERVISOR_ID + ''' ' +
                                @where

                END  
  
             IF (@Action = 1 AND
                 LEN(@EmpID) > 0
                ) 
                BEGIN  
                      SELECT    @select = 'UPDATE dbo.EMPLOYEE SET EMP_CLSUPERVISOR=  null ' + @where 

                END  
  
             EXEC (@select)             
        
             RETURN        
       END 

Go

/****** Object:  StoredProcedure [dbo].[sp_Department_Assigned]    Script Date: 10/19/2009 11:30:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_Department_Assigned]  
       (  
        @Company_ID INT ,  
        @DEPT_ID VARCHAR(4) ,  
        @Remarks VARCHAR(50) ,  
        @EmpID VARCHAR(8000) ,  
        @Action INT ,  
        @retval INT OUTPUT          
       )  
AS   
       DECLARE @select VARCHAR(8000)          
       DECLARE @where VARCHAR(8000)           
        
       SET @where = ''  
       SET @select = ''  
    
       BEGIN      
          
             IF LEN(@EmpID) > 0   
                BEGIN                                                                                        
                      IF (@Action = 0)   
                         BEGIN    
                               SELECT   @where = 'Where Emp_Code In (' + @EmpID + ')'                                                                                  
                         END    
                      IF (@Action = 1)   
                         BEGIN    
                               SELECT   @where = 'Where Emp_Code In (' + @EmpID + ')' + @where  
                         END    
                END          
    
             IF (@Action = 0)   
                BEGIN    
   
                      SELECT    @select = 'UPDATE dbo.employee SET DEPT_ID= ''' + @DEPT_ID + ''' ' + @where  
  
                END    
    
             IF (@Action = 1 AND  
                 LEN(@EmpID) > 0  
                )   
                BEGIN    
                      SELECT    @select = 'UPDATE dbo.employee SET DEPT_ID=  null ' + @where   
  
                END    

				DECLARE @sTemp VARCHAR(10)
				DECLARE @iCnt int
				WHILE LEN(@EmpID) > 0
				BEGIN
					SET @sTemp = LEFT(@EmpID, ISNULL(NULLIF(CHARINDEX(',', @EmpID) - 1, -1),LEN(@EmpID)))
					SET @EmpID = SUBSTRING(@EmpID,ISNULL(NULLIF(CHARINDEX(',', @EmpID), 0),LEN(@EmpID)) + 1, LEN(@EmpID))
					Select @iCnt=Count(ID) From EmployeePayHistory Where Emp_ID=@sTemp
					IF (@iCnt = 0)
					BEGIN
						IF (@Action = 0)
						BEGIN
							Insert Into EmployeePayHistory
							(Emp_ID, FromDate, ToDate, ConfirmationDate, DepartmentID, DesignationID, OT_Entitlement, CPF_Entitlement, OT1Rate, OT2Rate, Pay_Frequency, 
							 WDays_Per_Week, PayRate, Hourly_Rate_Mode, Hourly_Rate, Daily_Rate_Mode, Daily_Rate)
							Values (@sTemp, GetDate(), null, null,@DEPT_ID,null,null,null,1.5,2.0,null,null,null,'A',null,'A',null)
						END
						ELSE
						BEGIN
							Insert Into EmployeePayHistory
							(Emp_ID, FromDate, ToDate, ConfirmationDate, DepartmentID, DesignationID, OT_Entitlement, CPF_Entitlement, OT1Rate, OT2Rate, Pay_Frequency, 
							 WDays_Per_Week, PayRate, Hourly_Rate_Mode, Hourly_Rate, Daily_Rate_Mode, Daily_Rate)
							Values (@sTemp, GetDate(), null, null,@DEPT_ID,null,null,null,1.5,2.0,null,null,null,null,null,null,null)
						END
					END
					ELSE
					BEGIN
						IF (@Action = 0)
						BEGIN
							Update EmployeePayHistory Set ToDate=GetDate()-1 Where Emp_ID=@sTemp And ToDate is null
							Insert Into EmployeePayHistory
							(Emp_ID, FromDate, ToDate, ConfirmationDate, DepartmentID, DesignationID, OT_Entitlement, CPF_Entitlement, OT1Rate, OT2Rate, Pay_Frequency, 
							 WDays_Per_Week, PayRate, Hourly_Rate_Mode, Hourly_Rate, Daily_Rate_Mode, Daily_Rate)
							Select Top 1 Emp_ID, GetDate(), null, ConfirmationDate, @DEPT_ID, DesignationID, OT_Entitlement, CPF_Entitlement, OT1Rate, OT2Rate, Pay_Frequency, 
							 WDays_Per_Week, PayRate, Hourly_Rate_Mode, Hourly_Rate, Daily_Rate_Mode, Daily_Rate From EmployeePayHistory Where Emp_ID=@sTemp Order By CreatedDate Desc
						END
						ELSE
						BEGIN
							Update EmployeePayHistory Set ToDate=GetDate()-1 Where Emp_ID=@sTemp And ToDate is  null
							Insert Into EmployeePayHistory
							(Emp_ID, FromDate, ToDate, ConfirmationDate, DepartmentID, DesignationID, OT_Entitlement, CPF_Entitlement, OT1Rate, OT2Rate, Pay_Frequency, 
							 WDays_Per_Week, PayRate, Hourly_Rate_Mode, Hourly_Rate, Daily_Rate_Mode, Daily_Rate)
							Select Top 1 Emp_ID, GetDate(), null, ConfirmationDate, null, DesignationID, OT_Entitlement, CPF_Entitlement, OT1Rate, OT2Rate, Pay_Frequency, 
							 WDays_Per_Week, PayRate, Hourly_Rate_Mode, Hourly_Rate, Daily_Rate_Mode, Daily_Rate From EmployeePayHistory Where Emp_ID=@sTemp Order By CreatedDate Desc
						END
					END
				END
    
             EXEC (@select)               
             RETURN          
       END   
GO

/****** Object:  StoredProcedure [dbo].[SP_LeaveSupervisor_Assignment]    Script Date: 10/19/2009 11:31:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SP_LeaveSupervisor_Assignment]
       (
        @Company_ID INT ,
        @SUPERVISOR_ID VARCHAR(4) ,
        @Remarks VARCHAR(50) ,
        @EmpID VARCHAR(8000) ,
        @Action INT ,
        @retval INT OUTPUT        
       )
AS 
       DECLARE @select VARCHAR(8000)        
       DECLARE @where VARCHAR(8000)         
      
       SET @where = ''
       SET @select = ''
  
       BEGIN    
        
             IF LEN(@EmpID) > 0 
                BEGIN                                                                                      
                      IF (@Action = 0) 
                         BEGIN  
                               SELECT   @where = 'WHERE Emp_Code IN (' + @EmpID + ')'                                                                                
                         END  
                      IF (@Action = 1) 
                         BEGIN  
                               SELECT   @where = 'WHERE Emp_Code IN (' + @EmpID + ')' + @where
                         END  
                END        
  
             IF (@Action = 0) 
                BEGIN  
 
                      SELECT    @select = 'UPDATE dbo.EMPLOYEE SET EMP_SUPERVISOR= ''' + @SUPERVISOR_ID + ''' ' + @where
                END  
  
             IF (@Action = 1 AND
                 LEN(@EmpID) > 0
                ) 
                BEGIN  
                      SELECT    @select = 'UPDATE dbo.EMPLOYEE SET EMP_SUPERVISOR=  null ' + @where 

                END  
  
             EXEC (@select)             
        
             RETURN        
       END 

Go

/****** Object:  StoredProcedure [dbo].[SP_PayrollWorkflow_Assignment]    Script Date: 10/29/2009 15:46:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SP_PayrollWorkflow_Assignment]
       (
        @Company_ID INT ,
        @SUPERVISOR_ID VARCHAR(4) ,
        @Remarks VARCHAR(50) ,
        @EmpID VARCHAR(8000) ,
        @Action INT ,
        @retval INT OUTPUT        
       )
AS 
       DECLARE @select VARCHAR(8000)        
       DECLARE @where VARCHAR(8000)         
      
       SET @where = ''
       SET @select = ''
  
       BEGIN    
        
             IF LEN(@EmpID) > 0 
                BEGIN                                                                                      
                      IF (@Action = 0) 
                         BEGIN  
                               SELECT   @where = 'WHERE Emp_Code IN (' + @EmpID + ')'                                                                                
                         END  
                      IF (@Action = 1) 
                         BEGIN  
                               SELECT   @where = 'WHERE Emp_Code IN (' + @EmpID + ')' + @where
                         END  
                END        
  
             IF (@Action = 0) 
                BEGIN  
 
                      SELECT    @select = 'UPDATE dbo.EMPLOYEE SET PAY_SUPERVISOR= ''' + @SUPERVISOR_ID + ''' ' + @where

                END  
  
             IF (@Action = 1 AND
                 LEN(@EmpID) > 0
                ) 
                BEGIN  
                      SELECT    @select = 'UPDATE dbo.EMPLOYEE SET PAY_SUPERVISOR=  null ' + @where 

                END  
  
             EXEC (@select)             
        
             RETURN        
       END 

Go


/****** Object:  StoredProcedure [dbo].[Sp_RightsMenuHeader]    Script Date: 10/30/2009 10:25:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Sp_RightsMenuHeader]      
       @adminId AS NVARCHAR(30) ,      
       @comp_id AS NVARCHAR(5),      
       @ANBPRODUCT as varchar(3),
       @MasterComp  as varchar(3)  
  AS     
		BEGIN
		
			 DECLARE @isMaster VARCHAR(3)
			 
			 SET @isMaster = @MasterComp 
			  
			 Select * Into #U From UserRights  
			  
			 if (@comp_id  != 1)  
				 BEGIN  
				  Delete From #U Where RightName Like '%Consolidate%'  
				 END 
				 
			 --PRINT @isMaster
			 	  
			 IF (@isMaster!=1) 
			    
				 BEGIN
				 	--PRINT 'No Master'
						 IF (@ANBPRODUCT = 'SME')    
								 BEGIN    
									   SELECT   RH.RIGHTID, RIGHTHEADER, UPPER(RightName) AS RightName      
									   FROM     EMPLOYEE E      
									   INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID      
									   INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID      
									   INNER JOIN #U UR ON GR.RightID = UR.RightID      
									   RIGHT OUTER JOIN RightsHeader RH ON UR.HEADERID = RH.RIGHTID      
									   INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID      
									   WHERE    E.UserName = @adminId AND      
												RH.RIGHTID IS NOT NULL AND      
												C.COMPANY_ID = @comp_id  And (UR.Product = 0 OR UR.Product = 2 OR UR.Product is null)    
									   GROUP BY RIGHTHEADER, RightName, RH.RIGHTID, RightOrder      
									   ORDER BY RH.RIGHTID, RightOrder       
								 END    
						  IF ((@ANBPRODUCT = 'WMS')OR(@ANBPRODUCT = 'WMSI'))
								 BEGIN    
									   SELECT   RH.RIGHTID, RIGHTHEADER, UPPER(RightName) AS RightName      
										   FROM     EMPLOYEE E      
										   INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID      
										   INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID      
										   INNER JOIN #U UR ON GR.RightID = UR.RightID      
										   RIGHT OUTER JOIN RightsHeader RH ON UR.HEADERID = RH.RIGHTID      
										   INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID      
										   WHERE    E.UserName = @adminId AND      
													RH.RIGHTID IS NOT NULL AND      
													C.COMPANY_ID = @comp_id  And (UR.Product = 1 OR UR.Product = 2)    
										   GROUP BY RIGHTHEADER, RightName, RH.RIGHTID, RightOrder      
										   ORDER BY RH.RIGHTID, RightOrder       
								 END  
					END	
					---Check if company is Master Company
				ELSE IF (@isMaster=1)
					
					BEGIN
						--PRINT 'Yes Master'
  						--SELECT * Into #U From UserRights 
						 IF ((@ANBPRODUCT = 'WMS')OR (@ANBPRODUCT = 'WMSI'))
								BEGIN
									SELECT  RH.RIGHTID, RIGHTHEADER, UPPER(RightName) AS RightName  
									FROM  EMPLOYEE E      
									INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID      
									INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID      
									INNER JOIN #U UR ON GR.RightID = UR.RightID       
									RIGHT OUTER JOIN RightsHeader RH ON UR.HEADERID = RH.RIGHTID      
									--INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID
									INNER JOIN MasterCompany_User Mu ON E.emp_code = Mu.UserID
									WHERE    E.UserName = @adminId AND      
										RH.RIGHTID IS NOT NULL AND      
										Mu.CompanyId = @comp_id And (UR.Product = 1 OR UR.Product = 2)    
										GROUP BY RIGHTHEADER, RightName, RH.RIGHTID, RightOrder      
										ORDER BY RH.RIGHTID, RightOrder
								END 
								   
						IF (@ANBPRODUCT = 'SME')
								BEGIN
								   SELECT  RH.RIGHTID, RIGHTHEADER, UPPER(RightName) AS RightName      
								   FROM    EMPLOYEE E      
										   INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID      
										   INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID      
										   INNER JOIN #U UR ON GR.RightID = UR.RightID      
										   RIGHT OUTER JOIN RightsHeader RH ON UR.HEADERID = RH.RIGHTID      
										   --INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID      
										   INNER JOIN MasterCompany_User Mu ON E.emp_code = Mu.UserID
										   WHERE    E.UserName = @adminId AND      
													RH.RIGHTID IS NOT NULL AND      
													Mu.CompanyId = @comp_id  And (UR.Product = 0 OR UR.Product = 2 OR UR.Product is null)    
										   GROUP BY RIGHTHEADER, RightName, RH.RIGHTID, RightOrder      
										   ORDER BY RH.RIGHTID, RightOrder
								END 
  					END
					  
			Drop Table #U  
	END
GO



/****** Object:  StoredProcedure [dbo].[Sp_RightsMenuHeader]    Script Date: 10/30/2009 10:25:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_GetEmployees 2,3, 2  
CREATE PROCEDURE [dbo].[Sp_getemployees] @company_id INT,
                                         @show       INT,
                                         @UserID     INT
AS
    BEGIN
        DECLARE @select VARCHAR(8000)
        DECLARE @where VARCHAR(100)

        SELECT *
        INTO   #EmployeeTemp
        FROM   Employee

        DECLARE @ID AS INT
        DECLARE @WorkFlowID AS INT
        DECLARE @RowID AS INT

        CREATE TABLE #Temp1
            (
                 ID             INT,
                 WORKFLOWID     INT,
                 ROWID          INT,
                 PAYROLLGROUPID INT
            )

        DECLARE @grpname AS VARCHAR(20)

        SELECT @grpname = GroupName
        FROM   UserGroups
        WHERE  GroupID IN (SELECT GroupID
                           FROM   Employee
                           WHERE  Emp_Code = @UserID)

        SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID
        INTO   #Temp
        FROM   Employee EM
               INNER JOIN (SELECT WL.*
                           FROM   EmployeeWorkFlowLevel WL
                           WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID

        DECLARE curse CURSOR FOR
            SELECT *
            FROM   #Temp

        OPEN curse

        FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID

        WHILE @@FETCH_STATUS = 0
            BEGIN
                --PRINT @RowID                  
                INSERT INTO #Temp1
                SELECT @ID,@WorkFlowID,RowID,PayrollGroupID
                FROM   EmployeeWorkFlowLevel
                WHERE  WorkFLowID = @WorkFLowID
                   AND RowID <= @RowID

                FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
            END

        SELECT DISTINCT Te.ID,EG.Emp_ID
        INTO   #Temp2
        FROM   #Temp1 Te
               INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID
        WHERE  EG.Emp_ID = @UserID

        CLOSE curse

        DEALLOCATE curse

        IF (@grpname != 'Super Admin')
            BEGIN
                DELETE FROM #EmployeeTemp
                WHERE  Pay_supervisor NOT IN (SELECT ID
                                              FROM   #Temp2)
                   AND (Pay_supervisor > 0)
            END

        SET @select='SELECT Pay_supervisor, emp_code, emp_name + '' '' + emp_lname AS emp_name,(SELECT DeptName FROM department WHERE id= dept_id) Department, time_card_no, empcpftype, emp_alias, emp_type, ic_pp_number, wp_exp_date,pr_date, address, pay_frequency, payrate, postal_code, phone, hand_phone, email,time_card_no, sex, marital_status, place_of_birth, date_of_birth, education,income_taxid, termination_reason, giro_bank, giro_code, giro_branch, giro_acct_number,joining_date, probation_period, confirmation_date, termination_date, cpf_entitlement,cpf_employer, cpf_employee, employee_cpf_acct, employer_cpf_acct, emp_supervisor,ot_entitlement, payment_mode, fw_code, fw_levy, sdf_required, cdac_fund, mbmf_fund,sinda_fund, ecf_fund, cchest_fund, email_payslip, wh_tax_pct, wh_tax_amt, remarks,images, Insurance_number, insurance_expiry, CSOC_number, CSOC_expiry, passport,passport_expiry, nationality_id, country_id, religion_id, race_id, desig_id, dept_id,emp_group_id, (SELECT empgroupname FROM emp_group WHERE [id]= e.emp_group_id) empgroupname, (SELECT Designation FROM Designation WHERE id= desig_id) Designation From #EmployeeTemp e '

        IF (@show = 1
             OR @show = 0)
            BEGIN
                SELECT @where = ' Where StatusID=1 And Termination_Date is null And Company_ID=' + CAST(@company_id AS VARCHAR)
            END

        IF (@show = 2)
            BEGIN
                SELECT @where = ' Where Termination_Date is not null  And Company_ID=' + CAST(@company_id AS VARCHAR)
            END

        IF (@show = 3)
            BEGIN
                SELECT @where = ' Where 1=1  And Company_ID=' + CAST(@company_id AS VARCHAR)
            END

        IF (@show = 4)
            BEGIN
                SELECT @where = ' Where StatusID=3 And Company_ID=' + CAST(@company_id AS VARCHAR)
            END

        SET @select = @select + @where + ' Order By Emp_Name'

        EXEC (@select)

        DROP TABLE #EmployeeTemp

        DROP TABLE #Temp1

        DROP TABLE #Temp2
    END 
GO

/****** Object:  StoredProcedure [dbo].[sp_EMP_IR8A_DETAILS]    Script Date: 12/03/2009 22:08:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--EXEC [dbo].sp_EMP_IR8A_DETAILS  2009,1,'102'
--EXEC [dbo].sp_EMP_IR8A_DETAILS  2009,1,'102' 
---exec sp_EMP_IR8A_DETAILS_All  2010,3,'11','20100310','20101211'
----EXEC [dbo].sp_EMP_IR8A_DETAILS  2009,1,'102' 
---exec sp_EMP_IR8A_DETAILS  2010,3,'3','20100310','20101211'
create PROCEDURE [dbo].[sp_EMP_IR8A_DETAILS]
	@year INT ,      
	@companyid INT ,      
	@EmpCode VARCHAR(8000),
	@BonusDate VARCHAR (50),
	@DirectorsFeesDate VARCHAR (50)
AS --declare @year int        
--declare @companyid int                                  
--declare @EmpCode varchar(8000)       
       DECLARE @companyname VARCHAR(100)                    
       DECLARE @CompnayPhone VARCHAR(100)                    
       DECLARE @AuthPerson VARCHAR(100)                    
       DECLARE @Designation_company VARCHAR(100)                    
       DECLARE @companyroc VARCHAR(100)                    
       DECLARE @company_type VARCHAR(100)          
       DECLARE @AuthPersonEmail VARCHAR(100)                 
       DECLARE @companyaddress1 VARCHAR(100)                    
       DECLARE @companyaddress2 VARCHAR(100)                    
       DECLARE @comppostalcode VARCHAR(100)      
       Declare @countryId varchar(5)      
      
      
       SELECT   @companyname = company_name, @CompnayPhone = phone, @AuthPerson = auth_person,      
                @Designation_company = Left(designation,30), @companyroc = company_roc, @company_type = company_type,      
                @companyaddress1 = [address], @companyaddress2 = address2, @comppostalcode = postal_code,@countryId=Country,      
                @AuthPersonEmail = Left(Auth_Email,50)    
       FROM     company      
       WHERE    company_id = @companyid       
      
      
       SELECT TOP 1  '' AS RecordType, '' AS Source, '' BasisYear, '' AS PaymentType, @company_type AS OrganizationID,      
                @companyroc AS OrganizationIDNo, @AuthPerson AS AuthorisedPersonName,      
                @Designation_company AS AuthorisedPersonDesignation, @companyname AS EmployerName, @CompnayPhone AS Telephone,      
                @AuthPersonEmail AS AuthorisedPersonEmail, '0' AS BatchIndicator, '' AS BatchDate,      
                '' AS DivisionOrBranchName,        
-- "Details Tag"  Details      
               Case Marital_status When 'M' Then 'Married' When 'S' Then 'Single'  When 'D' Then 'Divorce' End as  Marital_status,  @companyaddress1 + ',' + @companyaddress2 + ',' + (Select Country from Country Where Id =@countryId)+ ',' + @comppostalcode
  
    
  As CompanyAddress, '1' AS RecordType, CASE EMP_REF_NO      
                                     WHEN '1' THEN '1'      
                                     WHEN '2' THEN '2'      
                                     WHEN '3' THEN '3'      
                                     WHEN '4' THEN '4'      
                                     WHEN '5' THEN '5'      
                                     WHEN '6' THEN '6'      
                                   END AS IDType,      
--emp_type,      
                IC_PP_NUMBER AS IDNo, EMP_NAME AS NameLine1, EMP_LNAME AS NameLine2, EIR.[ADDR_TYPE] AS AddressType,      
                CASE [ADDR_TYPE]      
                  WHEN 'L' THEN BLOCK_NO      
                  ELSE ''      
                END AS BlockNo, CASE [ADDR_TYPE]      
                                  WHEN 'L' THEN STREET_NAME      
                                  ELSE ''      
                                END AS StName, CASE [ADDR_TYPE]      
                                                 WHEN 'L' THEN LEVEL_NO      
                                                 ELSE ''      
                                               END AS LevelNo, CASE [ADDR_TYPE]      
                                                                 WHEN 'L' THEN UNIT_NO      
                                                                 ELSE ''      
                                                               END AS UnitNo, CASE [ADDR_TYPE]      
                                                                                WHEN 'L' THEN POSTAL_CODE      
                                                                                ELSE ''      
                                                                              END AS PostalCode,      
                CASE [ADDR_TYPE]      
                  WHEN 'F' THEN FOREIGNADDRESS1      
                  WHEN 'C' THEN FOREIGNADDRESS1      
                  ELSE ''      
                END AS AddressLine1, CASE [ADDR_TYPE]      
             WHEN 'F' THEN FOREIGNADDRESS2      
                                       WHEN 'C' THEN FOREIGNADDRESS2      
                                       ELSE ''      
                                     END AS AddressLine2, '' AS AddressLine3, CASE [ADDR_TYPE]      
                                                                                WHEN 'F' THEN FOREIGNPOSTALCODE      
                                                                                WHEN 'C' THEN FOREIGNPOSTALCODE      
                                                                                ELSE ''      
                                                                              END AS TX_UF_POSTAL_CODE,      
                CASE [ADDR_TYPE]      
                  WHEN 'F' THEN CAST(C.[IR8A_CODE] AS NVARCHAR)      
                  ELSE ''      
                END AS CountryCode, C.[IR8A_CODE] AS Nationality, Sex,      
                CONVERT(NVARCHAR(10), DATE_OF_BIRTH, 112) AS DateOfBirth,      
   ISnull(cast([dbo].fn_Salary(@EmpCode, @year)as int),0)+      
   ISnull(cast([dbo].fn_additionalSalary(@EmpCode, @year)as int),0) +       
   ISnull(cast([dbo].[fn_Bonus](@EmpCode, @year)as int),0) +      
   ISnull(cast([dbo].[fn_DirectorsFee](@EmpCode, @year)as int),0) +      
   ISnull(cast(round([dbo].[fn_GrossCommissionAmount](e.emp_code, @year),0)as int),0) +       
   ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 4)as int),0) +      
   ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 5)as int),0) +      
   ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 6)as int),0) +      
   ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 7)as int),0) +      
   ISnull(cast([dbo].[fn_GratuityNoticePayment](e.emp_code, @year)as int),0) +       
  -- ISnull(cast([dbo].[fn_CompensationRetrenchmentbenefitsAmount](e.emp_code, @year)as int),0) +      
   ISnull(cast(Pension_Out_Singapore_Amount as int),0) +       
   ISnull(cast(Excess_Voluntary_Cpf_Employer_Amount as int),0) +      
            ISnull(cast (BENEFITS_IN_KIND_AMOUNT as int),0) +      
   ISnull(cast (retirement_benefits_amount as int),0) +      
   ISnull(cast (stock_options_amount as int),0) AS [Amount] ,      
      
                CASE WHEN CAST(YEAR(JOINING_DATE) AS INT)  < CAST(@year AS int)      
                     THEN CAST(CAST(CAST(@year AS NVARCHAR) + '0101' AS NVARCHAR) AS NVARCHAR)      
                     ELSE REPLACE(CONVERT(NVARCHAR(10), JOINING_DATE, 120), '-', '')      
                END AS PaymentPeriodFromDate,      
                CASE WHEN TERMINATION_DATE IS NULL THEN CAST(CAST(@year AS NVARCHAR) + '1231' AS NVARCHAR)      
                     ELSE REPLACE(CONVERT(NVARCHAR(10), TERMINATION_DATE, 120), '-', '')      
                END AS PaymentPeriodToDate,       
[dbo].[fn_getFundDetailsMBMF](@EmpCode, @year) As MBF,       
                 [dbo].[fn_getFundDetails](@EmpCode, @year) AS Donation,      
                [dbo].[fn_getSumCPF](@EmpCode, @year) AS CPF , '' AS Insurance,ISnull(cast([dbo].fn_Salary(@EmpCode, @year) as int),0)+ISnull( cast([dbo].fn_additionalSalary(@EmpCode, @year)as int),0) AS [Salary],      
                
                CASE WHEN [dbo].[fn_Bonus](@EmpCode, @year)>0 THEN
					 [dbo].[fn_Bonus](@EmpCode, @year)
                ELSE
					NULL
                END  AS Bonus,
                
                ---CASE WHEN [dbo].[fn_Bonus](@EmpCode, @year) >0  THEN     @BonusDate  ELSE '' END AS [BonusDecalrationDate],
                
                --- [dbo].[fn_DirectorsFee](@EmpCode, @year) AS DirectorsFees, 
                CASE WHEN [dbo].[fn_DirectorsFee](@EmpCode, @year)>0 THEN
					 [dbo].[fn_DirectorsFee](@EmpCode, @year)
                ELSE
					NULL
                END  AS DirectorsFees,
                     
             ISnull(cast(round([dbo].[fn_GrossCommissionAmount](e.emp_code, @year),0)as int),0)+       
    ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 4)as int),0) +      
    ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 5)as int),0) +      
    ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 6)as int),0) +      
    ISnull(cast([dbo].[fn_GetOtherInfo](e.emp_code, @year, 7)as int),0) +      
    ISnull(cast([dbo].[fn_GratuityNoticePayment](e.emp_code, @year)as int),0) +       
   -- ISnull(cast([dbo].[fn_CompensationRetrenchmentbenefitsAmount](e.emp_code, @year)as int),0) +      
    ISnull(cast(Pension_Out_Singapore_Amount as int),0) +       
    ISnull(cast(Excess_Voluntary_Cpf_Employer_Amount as int),0) +      
                ISnull(cast (BENEFITS_IN_KIND_AMOUNT as int),0) +      
    ISnull(cast (retirement_benefits_amount as int),0) +      
                ISnull(cast (stock_options_amount as int),0)  AS [Others],-- need clarity      
                '' AS [ShareOptionGainsS101g], '' AS ExemptIncome, CASE [TAX_BORNE_EMPLOYER_OPTIONS]      
                                                                     WHEN 'P' THEN tax_borne_employer_amount      
                                                                     ELSE NULL     
                                                                   END AS IncomeForTaxBorneByEmployer,      
                CASE [TAX_BORNE_EMPLOYER_OPTIONS]      
                  WHEN 'H' THEN tax_borne_employee_amount      
                  ELSE NULL      
                END AS IncomeForTaxBorneByEmployee, CASE [benefits_in_kind]      
                                                      WHEN 'YES' THEN 'Y'      
                                                      WHEN 'NO' THEN 'N'      
                                                      ELSE ''      
                                                    END AS BenefitsInKind, CASE s45_tax_on_directorfee      
                                                                             WHEN 'YES' THEN 'Y'      
                                                                             WHEN 'NO' THEN 'N'      
                                                                             ELSE ''      
                                                                           END AS S45Applicable,      
                TAX_BORNE_EMPLOYER_OPTIONS AS IncomeTaxBorneByEmployer,      
                [dbo].[fn_GratuityNoticePymExGratiaPaid](@EmpCode, @year) AS GratuityNoticePymExGratiaPaid,      
                [dbo].[fn_CompensationRetrenchmentBenefitsPaid](@EmpCode, @year) AS CompensationRetrenchmentBenefitsPaid,      
                [dbo].[fn_ApprovalObtainedFromIRAS](@EmpCode, @year) AS ApprovalObtainedFromIRAS,      
                [dbo].[fn_ApprovalObtainedFromIRASApproveDate](@EmpCode, @year) AS ApprovalDate,      
--dateofcessation as CessationProvisions,      
                [dbo].[fn_CessationProvisions](@EmpCode, @year) AS CessationProvisions, '' AS IR8SApplicable,      
                '' AS ExemptOrRemissionIncomeIndicator, '' AS CompensationAndGratuity,      
                round([dbo].[fn_GrossCommissionAmount](@EmpCode, @year),0) AS GrossCommissionAmount,      
                [dbo].[fn_GrossCommissionAmountStart](@EmpCode, @year) AS GrossCommissionPeriodFrom, [dbo].[fn_GrossCommissionAmountEnd](@EmpCode, @year) AS GrossCommissionPeriodTo, [dbo].[fn_GrossCommissionIndicator] (@EmpCode, @year) AS GrossCommissionIndicator,      
                isnull([dbo].[fn_GetOtherInfo](e.emp_code, @year, 4),0) AS Pension,      
                ISnull([dbo].[fn_GetOtherInfo](e.emp_code, @year, 5),0) AS TransportAllowance,      
                ISnull([dbo].[fn_GetOtherInfo](e.emp_code, @year, 6),0) AS EntertainmentAllowance,      
                ISnull([dbo].[fn_GetOtherInfo](e.emp_code, @year, 7),0) AS OtherAllowance,      
                ISnull([dbo].[fn_GratuityNoticePayment](e.emp_code, @year),0) AS GratuityNoticePymExGratia,      
                isnull([dbo].[fn_CompensationRetrenchmentbenefitsAmount](e.emp_code, @year) ,0)AS RetrenchmentBenefits,       
    '' AS RetrenchmentBenefitsUpto311292,       
    isnull(retirement_benefits_amount,0) AS RetrenchmentBenefitsFrom1993,      
                isnull(Pension_Out_Singapore_Amount,0) AS EmployerContributionToPensionOrPFOutsideSg,      
                isnull(Excess_Voluntary_Cpf_Employer_Amount,0) AS ExcessEmployerContributionToCPF,       
    isnull(stock_options_amount,0) AS ShareOptionGainsS101b,      
                CASE [benefits_in_kind]      
                  WHEN 'YES' THEN isnull(BENEFITS_IN_KIND_AMOUNT,0)      
                  ELSE 0      
                END AS BenefitsInKindValue, '' AS EmployeesVoluntaryContributionToCPF, (SELECT Left(Designation,30) FROM Designation Where Id =DESIG_ID and Company_id=company_id) AS Designation,      
    CASE WHEN CAST(YEAR(JOINING_DATE) AS INT)  < CAST(@year AS int)       
   THEN       
case when  DATEOFCOMMENCEMENT is  null or year(DATEOFCOMMENCEMENT)='1900' then null else      
 REPLACE(CONVERT(NVARCHAR(10), DATEOFCOMMENCEMENT, 120), '-', '')         end           ELSE REPLACE(CONVERT(NVARCHAR(10), JOINING_DATE, 120), '-', '') END AS CommencementDate,      
--   CASE WHEN CAST(YEAR(TERMINATION_DATE) AS INT)  < CAST(@year AS int) THEN CONVERT(NVARCHAR(10),DATEOFCESSATION,112)      
--                     ELSE REPLACE(CONVERT(NVARCHAR(10), TERMINATION_DATE, 120), '-', '') END AS [CessationDate],    

   CASE WHEN CAST(YEAR(TERMINATION_DATE) AS INT)  = CAST(@year AS int) THEN CONVERT(NVARCHAR(10),TERMINATION_DATE,112)      
                     ELSE '' END AS [CessationDate],
                     
		CASE WHEN [dbo].[fn_Bonus](@EmpCode, @year) >0  THEN     @BonusDate  ELSE '' END AS [BonusDecalrationDate],      
		CASE WHEN [dbo].[fn_DirectorsFee](@EmpCode, @year) >0  THEN     @DirectorsFeesDate  ELSE '' END AS [DirectorsFeesApprovalDate],      
                
		RETIREMENT_BENEFITS_FUNDNAME AS RetirementBenefitsFundName,      
                '' AS DesignatedPensionOrProvidentFundName, '' AS BankName, '' AS PayrollDate, '' AS Filler,      
                '' AS GratuityOrCompensationDetailedInfo, stock_options AS ShareOptionGainsDetailedInfo, '' AS Remarks,      
-- IR8A Trailer Stars From Here --- Need Not Get The Query from Query      
                '' AS RecordType, '' AS NoOfReCords, '' AS TotalPayment, '' AS TotalSalary, '' AS TotalBonus,      
                '' AS TotalDirectorsFees, '' AS TotalOthers, '' AS TotalExemptIncome,      
                '' AS TotalIncomeForTaxBorneByEmployer, '' AS TotalIncomeForTaxBorneByEmployee, '' AS TotalDonation,      
                '' AS TotalCPF, '' AS TotalInsurace, '' AS TotalMBF, '' AS Filler      
       FROM     EMPLOYEE E      
       INNER JOIN PREPARE_PAYROLL_DETAIL PPD ON E.EMP_CODE = PPD.EMP_ID      
       LEFT OUTER JOIN Employee_IR8a EIR ON E.EMP_CODE = EIR.EMP_ID      
       INNER JOIN NATIONALITY N ON E.NATIONALITY_ID = N.ID      
       LEFT OUTER JOIN EMP_ADDITIONS EA ON E.EMP_CODE = EA.EMP_CODE      
       LEFT OUTER JOIN ADDITIONS_TYPES A ON EA.TRX_TYPE = A.ID      
       INNER JOIN COUNTRY C ON E.COUNTRY_ID = C.ID      
       INNER JOIN PREPARE_PAYROLL_HDR PPH ON PPD.trx_id = PPH.trx_id      
       WHERE    E.EMP_CODE IN (@EmpCode) and e.company_id=@companyid      
    AND YEAR(START_PERIOD) = @year AND IR8A_YEAR=@year-- AND ADDITIONSFORYEAR = @year      
       GROUP BY EMP_REF_NO, IC_PP_NUMBER, EMP_NAME, EMP_LNAME, ADDR_TYPE, BLOCK_NO, STREET_NAME, LEVEL_NO, UNIT_NO,      
                POSTAL_CODE, FOREIGNADDRESS1, FOREIGNADDRESS2, FOREIGNPOSTALCODE, SEX, DATE_OF_BIRTH, JOINING_DATE,      
                TERMINATION_DATE, FUND_TYPE,  DESIG_ID, DATEOFCESSATION, C.IR8A_CODE, tax_borne_employer_amount,      
                TAX_BORNE_EMPLOYER_OPTIONS, BENEFITS_IN_KIND, S45_TAX_ON_DIRECTORFEE, Pension_Out_Singapore_Amount,      
                Excess_Voluntary_Cpf_Employer_Amount, BENEFITS_IN_KIND_AMOUNT, DATEOFCOMMENCEMENT,      
                RETIREMENT_BENEFITS_FUNDNAME, e.emp_code, IRAS_APPROVAL_DATE, IRAS_APPROVAL, emp_type,      
                tax_borne_employee_amount,START_PERIOD,ADDITIONSFORYEAR,marital_status,stock_options_amount,stock_options,retirement_benefits_amount      
GO


/****** Object:  StoredProcedure [dbo].[sp_EMP_IR8A_DETAILS_All]    Script Date: 01/18/2010 20:00:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_EMP_IR8A_DETAILS_All]  
       @year INT ,  
       @companyid INT ,         
       @EmpCode VARCHAR(8000),
       @BonusDate VARCHAR (50),
       @DirectorsFeesDate VARCHAR (50)
AS   
       BEGIN  
   DECLARE @separator AS VARCHAR(1) ;  
   DECLARE @StringToInsert AS VARCHAR(10) ;  
   DECLARE @StringToVerify AS VARCHAR(10) ;  
   SET @separator = ',' ;  
  
CREATE TABLE #InsertDataTemp(  
 [RecordType1] [varchar](50) NULL,  
 [Source] [varchar](50) NULL,  
 [BasisYear] [varchar](50) NULL,  
 [PaymentType] [varchar](50) NULL,  
 [OrganizationID] [varchar](50) NULL,  
 [OrganizationIDNo] [varchar](50) NULL,  
 [AuthorisedPersonName] [varchar](250) NULL,  
 [AuthorisedPersonDesignation] [varchar](250) NULL,  
 [EmployerName] [varchar](250) NULL,  
 [Telephone] [varchar](50) NULL,  
 [AuthorisedPersonEmail] [varchar](150) NULL,  
 [BatchIndicator] [varchar](50) NULL,  
 [BatchDate] [varchar](50) NULL,  
 [DivisionOrBranchName] [varchar](250) NULL,  
 [Marital_status] [nvarchar](50) NULL,  
 [CompanyAddress] [nvarchar](250) NULL,  
 [RecordType] [varchar](50) NULL,  
 [IDType] [varchar](50) NULL,  
 [IDNo] [varchar](50) NULL,  
 [NameLine1] [varchar](250) NULL,  
 [NameLine2] [varchar](250) NULL,  
 [AddressType] [varchar](250) NULL,  
 [BlockNo] [varchar](50) NULL,  
 [StName] [varchar](250) NULL,  
 [LevelNo] [varchar](250) NULL,  
 [UnitNo] [varchar](250) NULL,  
 [PostalCode] [varchar](250) NULL,  
 [AddressLine1] [varchar](250) NULL,  
 [AddressLine2] [varchar](250) NULL,  
 [AddressLine3] [varchar](250) NULL,  
 [TX_UF_POSTAL_CODE] [varchar](50) NULL,  
 [CountryCode] [varchar](50) NULL,  
 [Nationality] [varchar](50) NULL,  
 [Sex] [varchar](50) NULL,  
 [DateOfBirth] [varchar](50) NULL,  
 [Amount] [varchar](50) NULL,  
 [PaymentPeriodFromDate] [varchar](50) NULL,  
 [PaymentPeriodToDate] [varchar](50) NULL,  
 [MBF] [varchar](50) NULL,  
 [Donation] [varchar](50) NULL,  
 [CPF] [varchar](50) NULL,  
 [Insurance] [varchar](50) NULL,  
 [Salary] [varchar](50) NULL,  
 [Bonus] [varchar](50) NULL,  
 [DirectorsFees] [varchar](50) NULL,  
 [Others] [varchar](50) NULL,  
 [ShareOptionGainsS101g] [varchar](50) NULL,  
 [ExemptIncome] [varchar](50) NULL,  
 [IncomeForTaxBorneByEmployer] [varchar](50) NULL,  
 [IncomeForTaxBorneByEmployee] [varchar](50) NULL,  
 [BenefitsInKind] [varchar](50) NULL,  
 [S45Applicable] [varchar](50) NULL,  
 [IncomeTaxBorneByEmployer] [varchar](50) NULL,  
 [GratuityNoticePymExGratiaPaid] [varchar](50) NULL,  
 [CompensationRetrenchmentBenefitsPaid] [varchar](50) NULL,  
 [ApprovalObtainedFromIRAS] [varchar](50) NULL,  
 [ApprovalDate] [varchar](50) NULL,  
 [CessationProvisions] [varchar](50) NULL,  
 [IR8SApplicable] [varchar](50) NULL,  
 [ExemptOrRemissionIncomeIndicator] [varchar](50) NULL,  
 [CompensationAndGratuity] [varchar](50) NULL,  
 [GrossCommissionAmount] [varchar](50) NULL,  
 [GrossCommissionPeriodFrom] [varchar](50) NULL,  
 [GrossCommissionPeriodTo] [varchar](50) NULL,  
 [GrossCommissionIndicator] [varchar](50) NULL,  
 [Pension] [varchar](50) NULL,  
 [TransportAllowance] [varchar](50) NULL,  
 [EntertainmentAllowance] [varchar](50) NULL,  
 [OtherAllowance] [varchar](50) NULL,  
 [GratuityNoticePymExGratia] [varchar](50) NULL,  
 [RetrenchmentBenefits] [varchar](50) NULL,  
 [RetrenchmentBenefitsUpto311292] [varchar](50) NULL,  
 [RetrenchmentBenefitsFrom1993] [varchar](50) NULL,  
 [EmployerContributionToPensionOrPFOutsideSg] [varchar](50) NULL,  
 [ExcessEmployerContributionToCPF] [varchar](50) NULL,  
 [ShareOptionGainsS101b] [varchar](50) NULL,  
 [BenefitsInKindValue] [varchar](50) NULL,  
 [EmployeesVoluntaryContributionToCPF] [varchar](50) NULL,  
 [Designation] [varchar](50) NULL,  
 [CommencementDate] [varchar](50) NULL,  
 [CessationDate] [varchar](50) NULL,  
 [BonusDecalrationDate] [varchar](50) NULL,  
 [DirectorsFeesApprovalDate] [varchar](50) NULL,  
 [RetirementBenefitsFundName] [varchar](250) NULL,  
 [DesignatedPensionOrProvidentFundName] [varchar](50) NULL,  
 [BankName] [varchar](150) NULL,  
 [PayrollDate] [varchar](50) NULL,  
 [Filler] [varchar](50) NULL,  
 [GratuityOrCompensationDetailedInfo] [varchar](50) NULL,  
 [ShareOptionGainsDetailedInfo] [varchar](50) NULL,  
 [Remarks] [varchar](150) NULL,  
 [RecordType2] [varchar](50) NULL,  
 [NoOfReCords] [varchar](50) NULL,  
 [TotalPayment] [varchar](50) NULL,  
 [TotalSalary] [varchar](50) NULL,  
 [TotalBonus] [varchar](50) NULL,  
 [TotalDirectorsFees] [varchar](50) NULL,  
 [TotalOthers] [varchar](50) NULL,  
 [TotalExemptIncome] [varchar](50) NULL,  
 [TotalIncomeForTaxBorneByEmployer] [varchar](50) NULL,  
 [TotalIncomeForTaxBorneByEmployee] [varchar](50) NULL,  
 [TotalDonation] [varchar](50) NULL,  
 [TotalCPF] [varchar](50) NULL,  
 [TotalInsurace] [varchar](50) NULL,  
 [TotalMBF] [varchar](50) NULL,  
 [Filler2] [varchar](50) NULL  
) ON [PRIMARY]  
   SET @StringToVerify = LEFT(@EmpCode,  
               ISNULL(NULLIF(CHARINDEX(@separator, @EmpCode) - 1, -1),  
                   LEN(@EmpCode)))  
  
  IF @StringToVerify = -1   
    BEGIN   
     DECLARE @text AS VARCHAR(5) ;  
     SET @EmpCode = 0;  
     SELECT EMP_CODE  INTO #TEMP FROM  EMPLOYEE  WHERE COMPANY_ID=@companyid AND (TERMINATION_DATE IS NULL OR YEAR(TERMINATION_DATE)= @year) ORDER BY EMP_CODE  
     DECLARE text_cursor CURSOR FORWARD_ONLY FOR SELECT * FROM #TEMP   
     OPEN text_cursor  
     FETCH NEXT FROM text_cursor INTO @text  
     WHILE @@FETCH_STATUS = 0  
     BEGIN  
                 SET @EmpCode =  @EmpCode + ',' + @text;  
        FETCH NEXT FROM text_cursor INTO @text  
     END  
      DROP TABLE #TEMP  
                END  
                   DELETE FROM #InsertDataTemp  
  
      WHILE LEN(@EmpCode) > 0   
         BEGIN  
         SET @StringToInsert = LEFT(@EmpCode,  
               ISNULL(NULLIF(CHARINDEX(@separator, @EmpCode) - 1, -1),  
                   LEN(@EmpCode)))  
          
         SET @EmpCode = SUBSTRING(@EmpCode,  
                ISNULL(NULLIF(CHARINDEX(@separator, @EmpCode), 0), LEN(@EmpCode)) + 1,  
                LEN(@EmpCode))  
  
          
         INSERT #InsertDataTemp  
          EXEC [dbo].[sp_EMP_IR8A_DETAILS] @year, @companyid, @StringToInsert,@BonusDate,@DirectorsFeesDate  
  
         END  
      SELECT *  
      FROM   #InsertDataTemp  
  END   
  
GO
--/****** Object:  StoredProcedure [dbo].[SP_CLAIM_CAPING_New]    Script Date: 12/03/2009 22:23:27 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
--
--CREATE PROC [dbo].[SP_CLAIM_CAPING_New]
--       @company_id INT ,
--       @year INT ,
--       @month INT
--AS 
--       SELECT   emp_name, a.emp_code, Description, a.id, CASE WHEN SUM(CAST(claimAmount AS INT)) IS NULL THEN 0
--                                                              ELSE SUM(CAST(claimAmount AS INT))
--                                                         END AS claimAmount
--       FROM     (SELECT emp_name ,
--                        emp_code ,
--                        [DESC] AS Description ,
--                        id ,
--                        e.company_id
--                 FROM   employee e
--                 CROSS JOIN additions_types
--                 WHERE  code != [desc] AND
--                        OptionSelection LIKE 'Claim%' AND
--                        termination_date IS NULL
--                ) a
--       LEFT OUTER JOIN (SELECT * FROM claimCaping WHERE Txt_Month= @month AND trx_year = @year
--                       ) C ON (a.id = C.ClaimID AND
--                               a.emp_code = C.emp_code
--                              )
--       WHERE    a.company_id = @company_id
--       GROUP BY emp_name, a.emp_code, Description, a.id
--
--GO
--
--GO
--/****** Object:  StoredProcedure [dbo].[SP_CLAIM_CAPING]    Script Date: 12/03/2009 22:23:27 ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
--CREATE PROC [dbo].[SP_CLAIM_CAPING]
--       @company_id INT ,
--       @year INT
--AS 
--       SELECT   e.emp_code, emp_name + '' + emp_lname AS empname, trx_date, trx_year, CASE WHEN claim1 IS NULL THEN 0
--                                                                                           ELSE claim1
--                                                                                      END AS Claim1,
--                CASE WHEN claim2 IS NULL THEN 0
--                     ELSE claim1
--                END AS Claim2, CASE WHEN claim3 IS NULL THEN 0
--                                    ELSE claim1
--                               END AS Claim3, CASE WHEN claim4 IS NULL THEN 0
--                                                   ELSE claim1
--                                              END AS Claim4, CASE WHEN claim5 IS NULL THEN 0
--                                                                  ELSE claim1
--                                                             END AS Claim5, CASE WHEN claim6 IS NULL THEN 0
--                                                                                 ELSE claim1
--                                                                            END AS Claim6,
--                CASE WHEN claim7 IS NULL THEN 0
--                     ELSE claim1
--                END AS Claim7, CASE WHEN claim8 IS NULL THEN 0
--                                    ELSE claim1
--                               END AS Claim8, CASE WHEN claim9 IS NULL THEN 0
--                                                   ELSE claim1
--                                              END AS Claim9, CASE WHEN claim10 IS NULL THEN 0
--                                                                  ELSE claim1
--                                                             END AS Claim10
--       FROM     claimCaping c
--       RIGHT OUTER JOIN employee e ON c.emp_code = e.emp_code
--       LEFT OUTER JOIN additions_types a ON c.id = a.id
--       WHERE    e.company_id = @company_id AND
--                e.termination_date IS NULL
--       ORDER BY e.emp_code
--
--GO

GO
/****** Object:  StoredProcedure [dbo].[SP_CLAIM_CAPING]    Script Date: 12/03/2009 22:23:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_password_update]
       @password VARCHAR(128) ,
       @ucode INT
AS 
       BEGIN  
             UPDATE employee
             SET    password = @password
             WHERE  emp_code = @ucode     
       END  

GO

/****** Object:  StoredProcedure [dbo].[sp_GetLeaveSumDet]    Script Date: 12/03/2009 22:23:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Exec sp_GetLeaveSumDet 2010, '0,89,6,176,178,53,18,68,54,79,92,55,222,3,103,11,217,104,106,107,108,109,111,112,216,113,114,4,115,35,225,116,17,26,247,56,117,118,90,134,105,119,231,120,121,122,57,123,124,238,13,80,125,126,127,160,128,234,240,51,167,14,2,91,5,12,24,242,93,165,101,226,221,142,130,131,132,133,81,69,168,135,136,137,138,139,140,44,220,141,23,143,164,144,230,145,146,147,148,149,159,150,151,152,70,153,154,155,156,78,248,58,232,71,60,7,72,94,243,172,173,236,25,241,20,180,179,181,182,183,184,185,61,186,187,188,189,190,227,166,191,208,192,73,16,193,194,195,196,197,198,199,200,177,15,67,215,52,233,201,213,98,252,298,82,202,203,204,62,224,110,214,205,74,206,169,223,239,251,100,207,246,245,281,229,219,75,235,36,95,63,171,129,41,99,64,228,19,8,83,84,10,85,47,86,87,48,170,96,244,49,218,50,175,157,237,65,76,40,9,88,97,66,77', '0,8,21,12,14,13,16,15,10,19,11,9,18', 2, 1, 12
CREATE PROC [dbo].[Sp_getleavesumdet] @year       INT,
                                     @EmpID      VARCHAR(8000),
                                     @LeaveID    VARCHAR(8000),
                                     @ReportType INT = 0,
                                     @frommonth  INT = -1,
                                     @endmonth   INT = -1
AS
    BEGIN
        IF (@ReportType = 1)
            BEGIN
                SET @endmonth = -1

                IF (@frommonth = 0)
                    BEGIN
                        SET @frommonth = 12
                    END
            END

        DECLARE @select AS VARCHAR(8000)
        DECLARE @where VARCHAR(8000)
        DECLARE @where1 VARCHAR(8000)
        DECLARE @leaves AS INT
        DECLARE @appliedon DATETIME
        DECLARE @LEAVEAVAIL TABLE (
            ID                    INT,
            EMP_ID                INT,
            LEAVE_YEAR            FLOAT,
            [TYPE]                VARCHAR(50),
            CompanyLeaveAllowed   FLOAT,
            LeavesAllowed         FLOAT,
            LY_Leaves_Bal         FLOAT,
            LeavesEarned          FLOAT,
            PaidLeaves            FLOAT,
            UnpaidLeaves          FLOAT,
            PendingLeaves         FLOAT,
            LeavesAvailable       FLOAT,
            TotalLeavesTaken      FLOAT,
            ActualLeavesAvailable FLOAT,
            leavesfromly          FLOAT,
            SHOWLEAVEMODEL        INT )

        SELECT EMP_CODE,Company_ID
        INTO   ##EmployeeTemp
        FROM   Employee

        IF Len(@EmpID) > 0
            BEGIN
                SELECT @where = 'Where Emp_Code Not In (' + @EmpID + ')'
            END

        IF Len(@LeaveID) > 0
            BEGIN
                SELECT @where1 = 'Where ID Not In (' + @LeaveID + ')'
            END

        SELECT @select = 'Delete From ##EmployeeTemp ' + @where

        EXEC (@select)

        SELECT TOP 1 @appliedon = DateInYear
        FROM   dbo.DateInYear AS diy
        WHERE  YEAR(DateInYear) = @year
           AND MONTH(DateInYear) = @frommonth
        ORDER  BY DateInYear DESC

        --SET @today = CONVERT(VARCHAR(10), @appliedon, 103)                      
        IF (@ReportType = 1)
            BEGIN
                DECLARE db_cursor CURSOR FOR
                    SELECT Emp_Code
                    FROM   ##EmployeeTemp

                OPEN db_cursor

                FETCH NEXT FROM db_cursor INTO @EmpID

                WHILE @@FETCH_STATUS = 0
                    BEGIN
                        INSERT @LEAVEAVAIL
                               (id,emp_id,leave_year,[TYPE],companyleaveallowed,LY_Leaves_Bal,leavesallowed,leavesearned,paidleaves,unpaidleaves,pendingleaves,leavesavailable,actualleavesavailable,totalleavestaken,SHOWLEAVEMODEL)
                        EXEC Sp_getemployeeleavepolicy @EmpID,@year,@appliedon,0

                        FETCH NEXT FROM db_cursor INTO @EmpID
                    END

                CLOSE db_cursor

                DEALLOCATE db_cursor

                SELECT *
                INTO   ##Temp
                FROM   @LEAVEAVAIL

                SELECT @select = 'Delete From ##Temp ' + @where1

                EXEC (@select)

                SELECT C.Company_Name,Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') [Full_Name],DeptName,T.TYPE [Leave_Type],T.CompanyLeaveAllowed CAL,Isnull(T.LeavesAllowed, 0) CYL,T.LY_Leaves_Bal LYCF,T.LeavesEarned CYLE,T.PaidLeaves [Paid_Leaves],T.UnpaidLeaves [Unpaid_Leaves],T.PendingLeaves [Pending_Leaves],T.TotalLeavesTaken [Leaves_Taken],T.ActualLeavesAvailable [Balance_Leaves]
                FROM   ##Temp T
                       LEFT OUTER JOIN Employee E ON T.Emp_ID = E.Emp_CODE
                       INNER JOIN Company C ON E.Company_ID = C.Company_ID
					   Left Outer join department d on E.dept_id = d.id
                ORDER  BY C.Company_name,e.emp_name,T.TYPE

                DROP TABLE ##EmployeeTemp

                DROP TABLE ##Temp
            END
        ELSE
            BEGIN
                SELECT lt.id,Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') emp_name,DeptName,lt.TYPE,el.start_date,el.end_date,res.paidleaves,res.unpaidleaves,el.approver,el.remarks,e.emp_code,E.Company_ID
                INTO   ##TempNew
                FROM   (SELECT Res.emp_id,Res.trx_id,Res.leave_type id,Res.Mth,SUM(Res.PaidLeaves) PaidLeaves,SUM(Res.UnPaidLeaves) UnPaidLeaves
                        FROM   (SELECT emp_id,trx_id,leave_type,Mth,PaidLeaves,0 UnPaidLeaves
                                FROM   (SELECT El.Emp_ID,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) PaidLeaves
                                        FROM   Emp_Leaves el
                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
                                        WHERE  --El.Emp_ID = @empid AND                      
                                        (MONTH(Eld.Leave_Date) >= @frommonth
                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
                                        AND YEAR(eld.leave_date) = @year
                                        AND (Eld.unpaid_leave = 0
                                         AND eld.halfday_leave = 1)
                                        AND El.Status = 'Approved'
                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)
                                        UNION ALL
                                        SELECT El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,COUNT(Eld.unpaid_leave) PaidLeaves
                                        FROM   Emp_Leaves el
                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
                                        WHERE  --El.Emp_ID = @empid AND                      
                                        (MONTH(Eld.Leave_Date) >= @frommonth
                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
                                        AND YEAR(eld.leave_date) = @year
                                        AND (Eld.unpaid_leave = 0
                                         AND eld.halfday_leave = 0)
                                        AND El.Status = 'Approved'
                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)) R
                                UNION
                                SELECT emp_id,trx_id,leave_type,Mth,0 PaidLeaves,UnPaidLeaves
                                FROM   (SELECT El.Emp_ID,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) UnPaidLeaves
                                        FROM   Emp_Leaves el
                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
                                        WHERE  --El.Emp_ID = @empid AND                      
                                        (MONTH(Eld.Leave_Date) >= @frommonth
                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
                                        AND YEAR(eld.leave_date) = @year
                                        AND (Eld.unpaid_leave = 1
                                         AND eld.halfday_leave = 1)
                                        AND El.Status = 'Approved'
                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)
                                        UNION ALL
                                        SELECT El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,COUNT(Eld.unpaid_leave) UnPaidLeaves
                                        FROM   Emp_Leaves el
                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
                                        WHERE  --El.Emp_ID = @empid AND                      
                                        (MONTH(Eld.Leave_Date) >= @frommonth
                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
                                        AND YEAR(eld.leave_date) = @year
                                        AND (Eld.unpaid_leave = 1
                                         AND eld.halfday_leave = 0)
                                        AND El.Status = 'Approved'
                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)) Res) Res
                        GROUP  BY Res.emp_id,Res.trx_id,Res.leave_type,Res.Mth) Res
                       INNER JOIN Emp_Leaves El ON Res.trx_ID = El.trx_ID
                       INNER JOIN leave_types lt ON Res.id = lt.id
                       INNER JOIN Employee E ON Res.Emp_ID = E.Emp_CODE
						Left Outer join department d on E.dept_id = d.id
                SELECT @select = 'Delete From ##TempNew ' + @where

                EXEC (@select)

                SELECT @select = 'Delete From ##TempNew ' + @where1

                EXEC (@select)

                SELECT C.Company_Name,T.Emp_name [Full_Name],DeptName,[Type] [Leave_Type],[start_date] [From_Date],[end_date] [Till_Date],[paidleaves] [Paid_Leaves],[unpaidleaves] [Unpaid_Leaves],[Approver],T.[Remarks]
                FROM   ##TempNew T
                       INNER JOIN Company C ON T.Company_ID = C.Company_ID
                ORDER  BY C.Company_Name,T.Emp_Name,[start_date]

                DROP TABLE ##EmployeeTemp

                DROP TABLE ##TempNew
            END
    END 

GO

/****** Object:  StoredProcedure [dbo].SP_UserRightsAll    Script Date: 12/03/2009 22:23:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_userrightsall] 
				(
					@userid     AS NVARCHAR(30),  
                    @compId     AS INT,  
                    @ANBPRODUCT AS VARCHAR(3) ,
                    @MasterComp  as varchar(3)
                )   
AS  
  BEGIN
					 DECLARE @isMaster VARCHAR(3)
					 					 
					 SET @isMaster = @MasterComp
					 
					 Select * Into #U From UserRights  
						  
					 if (@compId  != 1)  
							 BEGIN  
							  Delete From #U Where RightName Like '%Consolidate%'  
							 END  
							 
					 IF (@isMaster=1) 
						BEGIN
									IF (@ANBPRODUCT = 'SME')  
									  BEGIN  
										  SELECT GR.RIGHTID,Upper(RightName) AS RightName  
										  FROM   EMPLOYEE E  
												 INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID  
												 INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID  
												 INNER JOIN #U UR ON GR.RightID = UR.RightID  
												 --INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID  
												 INNER JOIN MasterCompany_User Mu ON E.emp_code = Mu.UserID
										  WHERE  (E.UserName = @userid  
												   OR emp_alias = @userid)  
											 AND Mu.CompanyId  = @compId  
											 AND (UR.Product = 0  
												   OR UR.Product = 2  
												   OR UR.Product IS NULL)  
										  GROUP  BY RightName,GR.RIGHTID,RightOrder  
										  ORDER  BY GR.RightID  
								  
									  END  
								  
								  IF ((@ANBPRODUCT = 'WMS')OR (@ANBPRODUCT = 'WMSI'))
									  BEGIN  
										  SELECT GR.RIGHTID,Upper(RightName) AS RightName  
										  FROM   EMPLOYEE E  
												 INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID  
												 INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID  
												 INNER JOIN #U UR ON GR.RightID = UR.RightID  
												 --INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID  
												 INNER JOIN MasterCompany_User Mu ON E.emp_code = Mu.UserID
										  WHERE  (E.UserName = @userid  
												   OR emp_alias = @userid)  
											 AND Mu.CompanyId  = @compId  
											 AND (UR.Product = 1  
												   OR UR.Product = 2)  
										  GROUP  BY RightName,GR.RIGHTID,RightOrder  
										  ORDER  BY GR.RightID  
									  END 
						END	  
						  
					ELSE IF (@isMaster!=1)
							BEGIN
								IF (@ANBPRODUCT = 'SME')  
									  BEGIN  
										  SELECT GR.RIGHTID,Upper(RightName) AS RightName  
										  FROM   EMPLOYEE E  
												 INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID  
												 INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID  
												 INNER JOIN #U UR ON GR.RightID = UR.RightID  
												 INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID  
										  WHERE  (E.UserName = @userid  
												   OR emp_alias = @userid)  
											 AND C.COMPANY_ID = @compId  
											 AND (UR.Product = 0  
												   OR UR.Product = 2  
												   OR UR.Product IS NULL)  
										  GROUP  BY RightName,GR.RIGHTID,RightOrder  
										  ORDER  BY GR.RightID  
								  
									  END  
								  
								  IF ((@ANBPRODUCT = 'WMS') OR(@ANBPRODUCT = 'WMSI'))
									  BEGIN
									  	--PRINT 'WMS '  
										  SELECT GR.RIGHTID,Upper(RightName) AS RightName  
										  FROM   EMPLOYEE E  
												 INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID  
												 INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID  
												 INNER JOIN #U UR ON GR.RightID = UR.RightID  
												 INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID  
										  WHERE  (E.UserName = @userid  
												   OR emp_alias = @userid)  
											 AND C.COMPANY_ID = @compId  
											 AND (UR.Product = 1  
												   OR UR.Product = 2)  
										  GROUP  BY RightName,GR.RIGHTID,RightOrder  
										  ORDER  BY GR.RightID  
									  END 
								
							END	  
							  
					  
						 Drop Table #U  
 
 END
GO

/****** Object:  StoredProcedure [dbo].InsertGenerator    Script Date: 12/03/2009 22:23:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC InsertGenerator
       (
        @tableName VARCHAR(100)
       )
AS --Declare a cursor to retrieve column specific information   
--for the specified table  
       DECLARE cursCol CURSOR FAST_FORWARD FOR   
       SELECT column_name,data_type FROM information_schema.columns   
       WHERE table_name = @tableName  
       OPEN cursCol  
       DECLARE @string NVARCHAR(3000) --for storing the first half   
                               --of INSERT statement  
       DECLARE @stringData NVARCHAR(3000) --for storing the data   
                                   --(VALUES) related statement  
       DECLARE @dataType NVARCHAR(1000) --data types returned   
                                 --for respective columns  
       SET @string = 'INSERT ' + @tableName + '('  
       SET @stringData = ''  
  
       DECLARE @colName NVARCHAR(50)  
  
       FETCH NEXT FROM cursCol INTO @colName,@dataType  
  
       IF @@fetch_status <> 0 
          BEGIN  
                PRINT 'Table ' + @tableName + ' not found, processing skipped.'  
                CLOSE curscol  
                DEALLOCATE curscol  
                RETURN  
          END  
  
       WHILE @@FETCH_STATUS = 0 
             BEGIN  
                   IF @dataType IN ('varchar', 'char', 'nchar', 'nvarchar') 
                      BEGIN  
                            SET @stringData = @stringData + '''''''''+  
            isnull(' + @colName + ','''')+'''''',''+'  
                      END  
                   ELSE 
                      IF @dataType IN ('text', 'ntext') --if the datatype   
                                 --is text or something else   
                         BEGIN  
                               SET @stringData = @stringData + '''''''''+  
          isnull(cast(' + @colName + ' as varchar(2000)),'''')+'''''',''+'  
                         END  
                      ELSE 
                         IF @dataType = 'money' --because money doesn't get converted   
                       --from varchar implicitly  
                            BEGIN  
                                  SET @stringData = @stringData + '''convert(money,''''''+  
        isnull(cast(' + @colName + ' as varchar(200)),''0.0000'')+''''''),''+'  
                            END  
                         ELSE 
                            IF @dataType = 'datetime' 
                               BEGIN  
                                     SET @stringData = @stringData + '''convert(datetime,''''''+  
        isnull(cast(' + @colName + ' as varchar(200)),''0'')+''''''),''+'  
                               END  
                            ELSE 
                               IF @dataType = 'image' 
                                  BEGIN  
                                        SET @stringData = @stringData + '''''''''+  
       isnull(cast(convert(varbinary,' + @colName + ')   
       as varchar(6)),''0'')+'''''',''+'  
                                  END  
                               ELSE --presuming the data type is int,bit,numeric,decimal   
                                  BEGIN  
                                        SET @stringData = @stringData + '''''''''+  
          isnull(cast(' + @colName + ' as varchar(200)),''0'')+'''''',''+'  
                                  END  
  
                   SET @string = @string + @colName + ','  
  
                   FETCH NEXT FROM cursCol INTO @colName,@dataType  
  
                   DECLARE @Query NVARCHAR(4000) -- provide for the whole query,   
                              -- you may increase the size  
  
                   SET @query = 'SELECT ''' + SUBSTRING(@string, 0, LEN(@string)) + ')   
    VALUES(''+ ' + SUBSTRING(@stringData, 0, LEN(@stringData) - 2) + '''+'')''   
    FROM ' + @tableName  
                   EXEC sp_executesql @query --load and run the built query  
             END  
GO

/****** Object:  StoredProcedure [dbo].sp_CalculateCPFAW    Script Date: 12/03/2009 22:23:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[sp_CalculateCPFAW]
       @company_id FLOAT ,
       @month INT ,
       @cuyear INT ,
       @empid INT ,
       @basicascmow FLOAT
AS --       DECLARE @CPFAWCALC TABLE  
--       (  
--        EMP_ID INT ,  
--        CMOW INT ,  
--        LYOW INT ,  
--        CYOW INT ,  
--        CPFAWCIL INT ,  
--        EST_AWCIL INT ,  
--        ACTCIL INT ,  
--        AWCM INT ,  
--        AWB4CM INT ,  
--        AWCM_AWB4CM INT ,  
--        AWCPF INT  
--       ) 
       
       DECLARE @startsubpay VARCHAR(10)                                                                                            
       DECLARE @endsubpay VARCHAR(10)                                                                                            
       DECLARE @startdtsub DATETIME                                                                                            
       DECLARE @enddtsub DATETIME                                                                                            

       DECLARE @layear INT      
       DECLARE @AWCIL FLOAT      
       DECLARE @cpfawcil FLOAT      
       DECLARE @LYOW FLOAT      
       DECLARE @CYOW FLOAT      
       DECLARE @CMOW FLOAT      
       DECLARE @cpfceil FLOAT      
       DECLARE @AWCM FLOAT      
       DECLARE @AWB4CM FLOAT      
       DECLARE @retval FLOAT      
       DECLARE @monthid INT      
       DECLARE @awinloop FLOAT      
       DECLARE @awinloopsum FLOAT      
       DECLARE @leftcumonth INT      
       DECLARE @ACTCIL FLOAT     
       DECLARE @lastdaymonth VARCHAR(2)                                                                            

       SELECT TOP 1
                @lastdaymonth = dateinyear
       FROM     (SELECT CONVERT(FLOAT, DATENAME(dd, DateInYear)) dateinyear
                 FROM   DateInYear
                 WHERE  MONTH(DateInYear) = @month AND
                        DATENAME(yy, DateInYear) = @cuyear
                ) DY
       ORDER BY dateinyear DESC                                                                            
        

       SET @startsubpay = '01/' + CAST(@month AS VARCHAR) + '/' + CAST(@cuyear AS VARCHAR)                                                                                            
       SET @endsubpay = @lastdaymonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@cuyear AS VARCHAR)                                                                                  
       SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)                                                                                            
       SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)                                                    
        

       SELECT   EMP_CODE
       INTO     #Employee
       FROM     EMPLOYEE EM
       WHERE    (Em.Payrate IS NOT NULL) AND
                (Em.Joining_Date <= @enddtsub) AND
                (Em.Termination_Date IS NULL OR
                 (Em.termination_date >= @startdtsub)
                ) AND
                (Em.Company_id = @company_id) AND
                (Em.StatusID = 1 OR
                 (Em.StatusID = 2 AND
                  @enddtsub <= Em.termination_date
                 ) OR
                 (Em.StatusID = 2 AND
                  Em.termination_date >= @startdtsub AND
                  Em.termination_date <= @enddtsub
                 )
                )
			
--		DECLARE db_cursor_old CURSOR FOR SELECT Emp_Code FROM #Employee
--		OPEN db_cursor_old                                                                                               
--		FETCH NEXT FROM db_cursor_old INTO @empid
--		WHILE @@FETCH_STATUS = 0     
--		BEGIN                                                                                               

       SET @layear = @cuyear - 1      
       SET @awinloopsum = 0      
       SET @awinloop = 0      
       SET @cpfceil = 4500      
       SET @cpfawcil = 76500  --Additional Wages  ceiling   
       SET @AWCIL = 0      
       SET @retval = 0 

			
       SELECT   @leftcumonth = MONTH(termination_date)
       FROM     Employee
       WHERE    Emp_Code = @empid AND
                MONTH(termination_date) < 12      
	--Calculate Last Year Ordinary Wage CPF, Ordinary CPF Ceiling      
       SELECT   @LYOW = D.OrdinaryWagesLY
       FROM     (SELECT SUM(T.OrdinaryWagesLY) OrdinaryWagesLY
                 FROM   (SELECT Emp_ID, SUM(OrdinaryWagesLY) OrdinaryWagesLY
                         FROM   (SELECT Emp_ID ,
                                        OrdinaryWagesLY = CASE WHEN OrdinaryWagesLY >= @cpfceil THEN @cpfceil
                                                               ELSE ISNULL(OrdinaryWagesLY, 0)
                                                          END
                                 FROM   (SELECT Te.Emp_ID ,
                                                OrdinaryWagesLY OrdinaryWagesLY
                                         FROM   (SELECT pd.emp_id ,
                                                        MONTH(ph.start_period) Mth ,
                                                        (pd.cpfnet - pd.cpfAdd_Additional) OrdinaryWagesLY
                                                 FROM   prepare_payroll_hdr ph
                                                 INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id
                                                 WHERE  pd.status = 'G' AND
                                                        YEAR(ph.start_period) = @layear AND
                                                        pd.CPFNet > 0 AND
                                                        pd.emp_id = @empid
                                                ) TE
                                        ) R
                                ) D
                         GROUP BY Emp_ID
                         UNION
                         SELECT Emp_Code Emp_ID, ISNULL(LYTotalOW, 0) OrdinaryWagesLY
                         FROM   Employee
                         WHERE  Emp_Code = @empid AND
                                OWLastYear = @cuyear
                        ) T
                 GROUP BY Emp_ID
                ) D      
	      
	--Calculate Current Year Ordinary Wage CPF, Ordinary CPF Ceiling      
       SELECT   @CYOW = D.OrdinaryWagesCY
       FROM     (SELECT SUM(T.OrdinaryWagesCY) OrdinaryWagesCY
                 FROM   (SELECT Emp_ID ,
                                OrdinaryWagesCY = CASE WHEN OrdinaryWagesCY >= @cpfceil THEN @cpfceil
                                                       ELSE ISNULL(OrdinaryWagesCY, 0)
                                                  END
                         FROM   (SELECT pd.emp_id ,
                                        MONTH(ph.start_period) Mth ,
                                        (pd.cpfnet - pd.cpfAdd_Additional) OrdinaryWagesCY
                                 FROM   prepare_payroll_hdr ph
                                 INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id
                                 WHERE  pd.status = 'G' AND
                                        MONTH(ph.start_period) < @month AND
                                        YEAR(ph.start_period) = @cuyear AND
                                        pd.CPFNet > 0 AND
                                        pd.emp_id = @empid
                                ) R
                        ) T
                 GROUP BY Emp_ID
                ) D      
	      
	      
	----Calculate Current Year Current Month Ordinary Wages.       
       SELECT   @CMOW = CASE WHEN R.AWPaidCYMonth >= @cpfceil THEN @cpfceil
                             ELSE ISNULL(R.AWPaidCYMonth, 0)
                        END
       FROM     (SELECT R.Emp_Code, SUM(R.AWPaidCYMonth) AWPaidCYMonth
                 FROM   (SELECT Emp_Code, MONTH(trx_period) [Mth], SUM(trx_amount) AWPaidCYMonth
                         FROM   emp_additions EA
                         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
                         WHERE  --Status='L' And       
                                (MONTH(trx_period) = @month AND
                                 YEAR(trx_period) = @cuyear
                                ) AND
                                AT.CPF = 'Yes' AND
                                (AT.Type_Of_Wage = 'O' OR
                                 AT.Type_Of_Wage IS NULL
                                ) AND
                                Emp_Code = @empid
                         GROUP BY Emp_Code, MONTH(trx_period)
                        ) AS R
                 GROUP BY R.Emp_Code
                ) R      
	      
	  --'CMOW if null or no record found then set it to zero'  
       SET @CMOW = ISNULL(@CMOW, 0)  
	  
       IF @LYOW <= 0 
          BEGIN      
		 --Change on December 8th 2009  
	--                 IF @basicascmow >= 4500   
	--                    BEGIN      
	--                          SET @basicascmow = 4500      
	--                    END      
	--                 IF @basicascmow <= 0   
	--                    BEGIN      
	--                          SET @basicascmow = 0      
	--                    END      
	--                 SET @CYOW = ISNULL(@CYOW, 0) + ISNULL(@CMOW, 0) + ISNULL(@basicascmow, 0)      
	  
                IF (ISNULL(@CMOW, 0) + ISNULL(@basicascmow, 0)) >= 4500 
                   BEGIN      
                         SET @basicascmow = 4500      
                   END      
                IF ISNULL(@CMOW, 0) + ISNULL(@basicascmow, 0) <= 0 
                   BEGIN      
                         SET @basicascmow = 0      
                   END  
                SET @CYOW = ISNULL(@CYOW, 0) + ISNULL(@basicascmow, 0)      
          END      
	      
	      
	--Calculate Current Year Addition Wages Paid of current month.      
       SELECT   @AWCM = R.AWPaidCYMonth
       FROM     (SELECT R.Emp_Code, SUM(R.AWPaidCYMonth) AWPaidCYMonth
                 FROM   (SELECT Emp_Code, MONTH(trx_period) [Mth], SUM(trx_amount) AWPaidCYMonth
                         FROM   emp_additions EA
                         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
                         WHERE  --Status='L' And       
                                (MONTH(trx_period) = @month AND
                                 YEAR(trx_period) = @cuyear
                                ) AND
                                AT.CPF = 'Yes' AND
                                AT.Type_Of_Wage = 'A' AND
                                Emp_Code = @empid
                         GROUP BY Emp_Code, MONTH(trx_period)
                        ) AS R
                 GROUP BY R.Emp_Code
                ) R      
	      
	      
	--Calculate Current Year Addition Wages Paid Less than current month.      
       SELECT   @AWB4CM = R.AWPaidCY
       FROM     (SELECT R.Emp_Code, SUM(R.AWPaidCY) AWPaidCY
                 FROM   (SELECT Emp_Code, MONTH(trx_period) [Mth], SUM(trx_amount) AWPaidCY
                         FROM   emp_additions EA
                         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
                         WHERE  Status = 'L' AND
                                (MONTH(trx_period) < @month AND
                                 YEAR(trx_period) = @cuyear
                                ) AND
                                AT.CPF = 'Yes' AND
                                AT.Type_Of_Wage = 'A' AND
                                Emp_Code = @empid
                         GROUP BY Emp_Code, MONTH(trx_period)
                        ) AS R
                 GROUP BY R.Emp_Code
                ) R      
	      
       SET @LYOW = ISNULL(@LYOW, 0)      
       SET @CYOW = ISNULL(@CYOW, 0)      
       SET @AWCM = ISNULL(@AWCM, 0)      
       SET @AWB4CM = ISNULL(@AWB4CM, 0)      
       SET @leftcumonth = ISNULL(@leftcumonth, 0)      
	      
	      
	--        IF @month < 12 AND  
	--           @AWCM <= 0 AND  
	--           @leftcumonth != @month   
	--           BEGIN      
	--                 RETURN @retval      
	--           END      
	      
       IF (@LYOW = 0 AND
           @CYOW >= 0 AND
           @AWCM > 0 AND
           @AWB4CM = 0
          ) 
          BEGIN       
                SET @AWCIL = @cpfawcil - @CYOW      
                IF (@AWCIL <= @AWCM) 
                   BEGIN      
                         SET @retval = @AWCIL      
                   END       
                ELSE 
                   BEGIN      
                         SET @retval = @AWCM      
                   END      
          END      
	      
       IF (@LYOW > 0 AND
           @CYOW > 0 AND
           @AWCM > 0 AND
           @AWB4CM = 0 AND
           @month < 12
          ) 
          BEGIN       
                SET @AWCIL = @cpfawcil - @LYOW      
                IF (@AWCIL <= @AWCM) 
                   BEGIN      
                         SET @retval = @AWCIL      
                   END       
                ELSE 
                   BEGIN      
                         SET @retval = @AWCM      
                   END      
          END      
	      
	      
	      
       IF (@LYOW >= 0 AND
           @CYOW >= 0 AND
           @AWCM >= 0 AND
           @AWB4CM >= 0 AND
           @month <= 12
          ) 
          BEGIN      
	 --Print 'Loop Start'      
	      
                DECLARE db_cursor CURSOR FOR        
                SELECT MONTH(trx_period) [Mth]      
                FROM emp_additions EA      
                INNER JOIN Additions_types AT      
                ON EA.Trx_Type=AT.ID      
                WHERE Status='L'      
                AND (MONTH(trx_period) < @month AND YEAR(trx_period) = @cuyear)      
                AND AT.CPF='Yes' AND AT.Type_Of_Wage = 'A' AND Emp_Code = @empid      
                GROUP BY Emp_Code, MONTH(trx_period)       
                OPEN db_cursor         
                FETCH NEXT FROM db_cursor INTO @monthid      
	    
	    
                WHILE @@FETCH_STATUS = 0 
                      BEGIN    
                            SELECT  @awinloop = dbo.fn_CalculateAdditionWagesBetMonth(@monthid, @cuyear, @empid)      
                            SET @awinloopsum = @awinloopsum + ISNULL(@awinloop, 0)    
                            FETCH NEXT FROM db_cursor INTO @monthid      
                      END         
	      
	 --Print @awinloopsum      
                CLOSE db_cursor         
                DEALLOCATE db_cursor       
	      
	 --Print 'Loop End'      
                IF @month < 12 AND
                   @LYOW > 0 
                   BEGIN      
                         SET @ACTCIL = @cpfawcil - @LYOW      
                   END      
                ELSE 
                   BEGIN      
                         SET @ACTCIL = @cpfawcil - @CYOW      
                   END      
	      
                IF @month < 12 
                   BEGIN      
                         SET @AWCIL = @cpfawcil - @LYOW      
                   END       
	      
                IF @month = 12 AND
                   @LYOW > 0 
                   BEGIN      
                         SET @AWCIL = @cpfawcil - @LYOW      
                   END      
                IF @month = 12 AND
                   @LYOW <= 0 
                   BEGIN      
                         SET @AWCIL = @cpfawcil - @CYOW      
                   END      
	      
                IF @leftcumonth = @month 
                   BEGIN      
                         SET @AWCIL = @AWCIL - @AWB4CM      
                   END      
	      
	      
                IF @month < 12 
                   BEGIN      
                         IF @LYOW <= 0 
                            BEGIN      
                                  SET @retval = (@AWCIL - @CYOW) - ISNULL(@awinloopsum, 0)      
                                  IF (@retval > @AWCM) 
                                     BEGIN      
                                           SET @retval = @AWCM      
                                     END      
                            END      
                         ELSE 
                            BEGIN      
                                  IF @LYOW > 0 --And @leftcumonth = @month Removed if Left Current Month...      
                                     BEGIN      
                                           IF @ACTCIL <= (@AWB4CM + @AWCM) 
                                              BEGIN       
                                                    SET @retval = @ACTCIL - ISNULL(@awinloopsum, 0)      
                                              END      
                                           IF @ACTCIL > (@AWB4CM + @AWCM) 
                                              BEGIN       
                                                    SET @retval = (@AWB4CM + @AWCM) - ISNULL(@awinloopsum, 0)  
                                              END      
	      
                                           IF @retval >= @AWCIL 
                                              BEGIN       
                                                    SET @retval = @AWCIL      
                                              END      
                                     END      
                            END      
                   END      
	      
                IF @month = 12 
                   BEGIN     
		   --change on dec 8 2009 for goodwood   
	--                          SET @retval = @AWCIL - ISNULL(@awinloopsum, 0)      
	--                          IF @ACTCIL > (@AWCM + @AWB4CM)   
	--                             BEGIN      
	--                                   SET @retval = (@AWCM + @AWB4CM)      
	--                             END      
	--                          ELSE   
	--                             BEGIN      
	--                                   IF (@cpfawcil - (@CMOW + @CYOW)) < (@AWCM + @AWB4CM) AND  
	--                                      @LYOW > 0   
	--                                      BEGIN      
	--                                            IF (@AWCIL >= @ACTCIL)   
	--                                               BEGIN      
	--                                                     SET @retval = 0      
	--                                               END      
	--                                      END       
	--                             END  
	  
                         IF (ISNULL(@CMOW, 0) + ISNULL(@basicascmow, 0)) >= 4500 
                            BEGIN      
                                  SET @basicascmow = 4500      
                            END      
                         IF ISNULL(@CMOW, 0) + ISNULL(@basicascmow, 0) <= 0 
                            BEGIN      
                                  SET @basicascmow = 0      
                            END  
	  
                         SET @CYOW = ISNULL(@CYOW, 0) + ISNULL(@basicascmow, 0)   
                         SET @ACTCIL = @cpfawcil - @CYOW  
--                         IF (@ACTCIL >= (@AWCM + @AWB4CM) AND
--                             @AWCM > 0
--                            ) 
--                            BEGIN      
--                                  SET @retval = @AWCM 
--                            END    
--                         IF (@ACTCIL >= (@AWCM + @AWB4CM) AND
--                             @AWCM <= 0
--                            ) 
--                            BEGIN      
--                                  SET @retval = 0  
--                            END    
--                         IF (@ACTCIL < (@AWCM + @AWB4CM) AND
--                             @AWCM >= 0
--                            ) 
--                            BEGIN      
--                                  SET @retval = @ACTCIL - (@AWCM + @AWB4CM)  
--                            END    
--                         IF (@ACTCIL < (@AWCM + @AWB4CM) AND
--                             @AWCM < 0
--                            ) 
--                            BEGIN      
--                                  SET @retval = 0  
--                            END     

                         IF (@ACTCIL < @AWB4CM) 
                            BEGIN
                                  SET @retval = @ACTCIL - @AWB4CM
                            END
                         IF (@ACTCIL >= @AWB4CM) 
                            BEGIN
                                  IF ((@ACTCIL - @AWB4CM) > @AWCM) 
                                     BEGIN
                                           SET @retval = @AWCM
                                     END
                                  IF ((@ACTCIL - @AWB4CM) <= @AWCM) 
                                     BEGIN
                                           SET @retval = @ACTCIL - @AWB4CM
                                     END
                            END 
                   END      
          END      
	      
       IF (@AWCM + @AWB4CM) > 0 
          BEGIN      
                SET @retval = ISNULL(@retval, 0)      
          END      
       ELSE 
          BEGIN      
                SET @retval = 0      
          END     
       SELECT   @empid EMP_ID, @CMOW CMOW, @LYOW LYOW, @CYOW CYOW, @cpfawcil CPFAWCIL, @AWCIL EST_AWCIL, @ACTCIL ACTCIL,
                @AWCM AWCM, @AWB4CM AWB4CM, (@AWCM + @AWB4CM) AWCM_AWB4CM, @retval AWCPF  
--			INSERT INTO @CPFAWCALC
--			(
--				EMP_ID,CMOW,LYOW,CYOW,CPFAWCIL ,EST_AWCIL ,ACTCIL  ,  AWCM ,  AWB4CM ,  AWCM_AWB4CM ,  AWCPF 
--			)  Values
--			(@empid , @CMOW , @LYOW , @CYOW , @cpfawcil ,@AWCIL , @ACTCIL , @AWCM , @AWB4CM ,  
--			(@AWCM + @AWB4CM) , @retval)

	  
	--Print 'LY   OW:' + Convert(varchar,isnull(@LYOW,0))      
	--Print 'CY   OW:' + Convert(varchar,isnull(@CYOW,0))      
	--Print 'CM   AW:' + Convert(varchar,isnull(@AWCM,0))      
	--Print 'B4CM AW:' + Convert(varchar,isnull(@AWB4CM,0))      
	--Print 'Est AW Ceiling:' + Convert(varchar,isnull(@AWCIL,0))      
	--Print 'Actual Ceiling:' + Convert(varchar,isnull(@ACTCIL,0)) + ' Applies only on Last Month'      
	--Print 'AW CPF Subject:' + Convert(varchar,isnull(@retval,0))      
	      
	--        IF @retval < 0 AND  
	--           @leftcumonth != @month   
	--           BEGIN      
	--                 SET @retval = 0      
	--           END      
	--      
	--        IF @retval < 0 AND  
	--           @leftcumonth = @month   
	--           BEGIN      
	--    SET @retval = ABS(@retval)      
	--           END  
--			FETCH NEXT FROM db_cursor_old INTO @empid
--		END                                                                                               
--		                                                                          
--		CLOSE db_cursor_old                                                                                               
--		DEALLOCATE db_cursor_old                                                                   
       DROP TABLE #Employee
GO

/****** Object:  StoredProcedure [dbo].[sp_EMP_IR8A_AppendixA_DETAILS]    Script Date: 12/20/2009 21:15:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_EMP_IR8A_AppendixA_DETAILS 2009,2,'17,18'
CREATE  PROCEDURE [dbo].[sp_EMP_IR8A_AppendixA_DETAILS]
       @year INT ,
       @companyid INT ,
       @EmpCode VARCHAR(8000)
AS
SELECT '1' RecordType,'1' IDType,IDNo ,emp_name + ' ' + emp_lname as NameLine1,NameLine2,ResidencePlaceValue,ResidenceAddressLine1,ResidenceAddressLine2,ResidenceAddressLine3,OccupationFromDate,OccupationToDate,NoOfDays,AVOrRentByEmployer,RentByEmployee,FurnitureValue,HardOrsoftFurnitureItemsValue,RefrigeratorValue,NoOfRefrigerators,VideoRecorderValue,NoOfVideoRecorders,WashingMachineDryerDishWasherValue,NoOfWashingMachines,NoOfDryers,NoOfDishWashers,AirConditionerValue,NoOfAirConditioners,NoOfCentralACDining,NoOfCentralACSitting,NoOfCentralACAdditional,TVRadioAmpHiFiStereoElectriGuitarValue,NoOfTVs,NoOfRadios,NoOfAmplifiers,NoOfHiFiStereos,NoOfElectriGuitar,ComputerAndOrganValue,NoOfComputers,NoOfOrgans,SwimmingPoolValue,NoOfSwimmingPools,PublicUtilities,Telephone,Pager,Suitcase,GolfBagAndAccessories,Camera,Servant,Driver,GardenerOrCompoundUpkeep,OtherBenefitsInKindValue,HotelAccommodationValue,SelfWifeChildAbove20NoOfPersons,SelfWifeChildAbove20NoOfDays,SelfWifeChildAbove20Value,ChildBetween8And20NoOfPersons,ChildBetween8And20NoOfDays,ChildBetween8And20Value,ChildBetween3And7NoOfPersons,ChildBetween3And7NoOfDays,ChildBetween3And7Value,ChildBelow3NoOfPersons,ChildBelow3NoOfDays,ChildBelow3Value,Percent2OfBasic,CostOfLeavePassageAndIncidentalBenefits,NoOfLeavePassageSelf,NoOfLeavePassageWife,NoOfLeavePassageChildren,CASE OHQStatus WHEN 'YES' THEN 'Y' ELSE 'N' END AS OHQStatus,InterestPaidByEmployer,LifeInsurancePremiumsPaidByEmployer,FreeOrSubsidisedHoliday,EducationalExpenses,NonMonetaryAwardsForLongService,EntranceOrTransferFeesToSocialClubs,GainsFromAssets,FullCostOfMotorVehicle,CarBenefit,OthersBenefits,TotalBenefitsInKind,NoOfEmployeesSharingQRS,Filler,i.Remarks from IR8AAPENDIX_EMPLOYEE  i
inner join employee e
on i.emp_id= e.emp_code 
where i.[year]=@year and company_id=@companyid --and emp_id in (@EmpCode)
GO


/****** Object:  StoredProcedure [dbo].[sp_EMP_IR8A_AppendixA_DETAILS]    Script Date: 12/20/2009 21:15:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Sp_IR8A_AppendixB_New 2,18,2009  
CREATE Procedure [dbo].[Sp_IR8A_AppendixB_New]   
@CompId int,  
@EmpCode nvarchar(10),  
@year nvarchar(10)  
As  
Declare @count as int  
  
SELECT   EMP_NAME,EMP_LNAME ,EMP_ALIAS,N.IR8A_CODE AS NATIONALITY,E.SEX,EMP_TYPE,ic_pp_number ,C.IR8A_CODE AS Country,e.[Emp_Code] ,[NRIC] ,[CompanyCode],Co.Company_Name,case [TypeOfPlan] when 1 then 'ESOP' else 'ESOW' end as [TypeOfPlan] ,
REPLACE(CONVERT(VARCHAR(10), [DateOfGrant], 111), '/', '') as [DateOfGrant],REPLACE(CONVERT(VARCHAR(10), [DateOfExcercise], 111), '/', '')as [DateOfExcercise],[ExcercisePrice],[OpenMarketShareValueAtDateGrant],[OpenMarketShareValue],[NoOfSharesAcquired],
[GrossAmountQualifyingForIncomeTax],[GrossAmountNotQualifyingForTaxExemption],[GrossAmountOfGainsFromPlans],[Year],REPLACE(CONVERT(VARCHAR(10), E.Date_Of_Birth, 111), '/', '')AS BirthDate,auth_person as AuthorisedPersonName , designation as AuthorisedPersonDesignation,Company_Roc as OrganizationIDNo , co.phone as Telephone ,co.email as AuthorisedPersonEmail,SectionType as [Section]  
  from employee e   
INNER JOIN IR8AppendixB i   
on e.emp_code= i.emp_code    
Inner JOIN COMPANY  Co   
on e.Company_id = Co.Company_id and CompanyCode = e.Company_id  
LEFT OUTER JOIN  NATIONALITY N   
ON E.NATIONALITY_ID = N.IR8A_CODE   
LEFT OUTER  JOIN COUNTRY C   
ON E.Country_id = C.IR8A_CODE   
WHERE e.Company_Id=@CompId AND Year= @year and I.Emp_code=@EmpCode  
  
SELECT  SectionType as [Section],YEAR(DATEOFGRANT) AS DATEOFGRANT,SUM(CAST ([GrossAmountQualifyingForIncomeTax]AS NUMERIC)) AS [GrossAmountQualifyingForIncomeTax]  
,SUM(CAST( [GrossAmountNotQualifyingForTaxExemption] AS NUMERIC)) AS [GrossAmountNotQualifyingForTaxExemption],  
SUM(CAST( GrossAmountOfGainsFromPlans AS NUMERIC)) AS GrossAmountOfGainsFromPlans  
Into #Temp from employee e   
INNER JOIN IR8AppendixB i   
on e.emp_code= i.emp_code    
Inner JOIN COMPANY  Co   
on e.Company_id = Co.Company_id and CompanyCode = e.Company_id  
LEFT OUTER JOIN  NATIONALITY N   
ON E.NATIONALITY_ID = N.IR8A_CODE   
LEFT OUTER  JOIN COUNTRY C   
ON E.Country_id = C.IR8A_CODE   
WHERE e.Company_Id=@CompId AND Year= @year and I.Emp_code=@EmpCode  
GROUP BY SectionType,DATEOFGRANT  
  
Select @count=Count(*) From #Temp Where Section=1  
if (@count is null or @count=0)  
BEGIN  
 Insert Into #Temp Values(1,@year,0,0,0)  
END  
  
Select @count=Count(*) From #Temp Where Section=2  
if (@count is null or @count=0)  
BEGIN  
 Insert Into #Temp Values(2,@year,0,0,0)  
END  
Select @count=Count(*) From #Temp Where Section=3  
if (@count is null or @count=0)  
BEGIN  
 Insert Into #Temp Values(3,@year,0,0,0)  
END  
Select @count=Count(*) From #Temp Where Section=4  
if (@count is null or @count=0)  
BEGIN  
 Insert Into #Temp Values(4,@year,0,0,0)  
END  
Select @count=Count(*) From #Temp Where Section=5  
if (@count is null or @count=0)  
BEGIN  
 Insert Into #Temp Values(5,@year,0,0,0)  
END  
  
Select * From #Temp order by section  
  
Select SUM(GrossAmountNotQualifyingForTaxExemption) as GrossAmountNotQualifyingForTaxExemption,  
SUM(GrossAmountOfGainsFromPlans) as GrossAmountOfGainsFromPlans,DateOfGrant  
 From #Temp   
group by DateOfGrant  
Drop Table #Temp  
GO


CREATE PROC [dbo].[Sp_generatepayrolladvfullmonth] @company_id     INT,  
                                                  @month          INT,  
                                                  @year           INT,  
                                                  @UserID         INT,  
                                                  @EmpPassID      VARCHAR(200) ='',  
                                                  @stdatemonth    VARCHAR(2),  
                                                  @endatemonth    VARCHAR(2),  
                                                  @stdatesubmonth VARCHAR(2),  
                                                  @endatesubmonth VARCHAR(2),  
                                                  @monthidintbl   INT=0  
AS  
  DECLARE @CPFCalculate INT  
  DECLARE @INTendatesubmonth INT  
  DECLARE @EmployerCPFAmt VARCHAR(200)  
  DECLARE @EmployeeCPFAmt VARCHAR(200)  
  DECLARE @cpfamtemployer FLOAT  
  DECLARE @cpfamtemployee FLOAT  
  DECLARE @select VARCHAR(8000)  
  DECLARE @where VARCHAR(200)  
  DECLARE @compute NVARCHAR(150)  
  DECLARE @param1 NVARCHAR(150)  
  DECLARE @param2 NVARCHAR(150)  
  DECLARE @EmpID INT  
  DECLARE @startproll VARCHAR(10)  
  DECLARE @endproll VARCHAR(10)  
  DECLARE @startsubpay VARCHAR(10)  
  DECLARE @endsubpay VARCHAR(10)  
  DECLARE @startdtsub DATETIME  
  DECLARE @enddtsub DATETIME  
  DECLARE @startdtproll DATETIME  
  DECLARE @enddtproll DATETIME  
  DECLARE @startmonth INT  
  DECLARE @startyear INT  
  DECLARE @TotalDaysCountPayroll_5 FLOAT  
  DECLARE @TotalDaysCountPayroll_5p FLOAT  
  DECLARE @TotalDaysCountPayroll_6 FLOAT  
  DECLARE @TotalDaysCountPayroll_7 FLOAT  
  DECLARE @TotalDaysCount_5 FLOAT  
  DECLARE @TotalDaysCount_5p FLOAT  
  DECLARE @TotalDaysCount_6 FLOAT  
  DECLARE @TotalDaysCount_7 FLOAT  
  DECLARE @NoWrkgDaysSubPay FLOAT  
  DECLARE @RollDays FLOAT  
  DECLARE @roundunpaid INT  
  DECLARE @roundnetpay INT  
  DECLARE @roundaddition INT  
  DECLARE @rounddeduction INT  
  DECLARE @cpfceiling FLOAT  
  DECLARE @lastyear INT  
  DECLARE @AWCeiling FLOAT  
  DECLARE @dt_date DATETIME  
  DECLARE @lastdaymonth VARCHAR(2)  
  DECLARE @ID AS INT  
  DECLARE @WorkFlowID AS INT  
  DECLARE @RowID AS INT  
  Declare @payrolltype as int  
  
  SELECT @CPFCalculate = CPFCalculate , @payrolltype=PayType   
  FROM   payrollmonthlydetail  
  WHERE  ROWID = @monthidintbl  
  
  SET @INTendatesubmonth = CONVERT(INT, @endatesubmonth)  
  
  DECLARE @CPFAWCALC TABLE (  
      Emp_Code    INT,  
      CMOW        FLOAT,  
      LYOW        FLOAT,  
      CYOW        FLOAT,  
      CPFAWCIL    FLOAT,  
      EST_AWCIL   FLOAT,  
      ACTCIL      FLOAT,  
      AWCM        FLOAT,  
      AWB4CM      FLOAT,  
      AWCM_AWB4CM FLOAT,  
      AWCPF       FLOAT )  
  
  CREATE TABLE #EmployeeWorkFlowLevel  
      (  
           ID             INT,  
           WORKFLOWID     INT,  
           ROWID          INT,  
           PAYROLLGROUPID INT  
      )  
  
  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID  
  INTO   #EmployeeWorkFlow  
  FROM   Employee EM  
         INNER JOIN (SELECT WL.*  
                     FROM   EmployeeWorkFlowLevel WL  
                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID  
  
  DECLARE curse CURSOR FOR  
      SELECT *  
      FROM   #EmployeeWorkFlow  
  
  OPEN curse  
  
  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID  
  
  WHILE @@FETCH_STATUS = 0  
      BEGIN  
          --PRINT @RowID                                               
          INSERT INTO #EmployeeWorkFlowLevel  
          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID  
          FROM   EmployeeWorkFlowLevel  
          WHERE  WorkFLowID = @WorkFLowID  
             AND RowID <= @RowID  
  
          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID  
      END  
  
  SELECT DISTINCT Te.ID,EG.Emp_ID  
  INTO   #EmployeeAssignedToPayrollGroup  
  FROM   #EmployeeWorkFlowLevel Te  
         INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID  
  WHERE  EG.Emp_ID = @UserID  
  
  CLOSE curse  
    DEALLOCATE curse  
  
  SELECT TOP 1 @lastdaymonth = dateinyear  
  FROM   (SELECT CONVERT(FLOAT, Datename(dd, DateInYear)) dateinyear  
          FROM   DateInYear  
          WHERE  MONTH(DateInYear) = @month  
             AND Datename(yy, DateInYear) = @year) DY  
  ORDER  BY dateinyear DESC  
  
  SET @AWCeiling = 76500  ---Additional Wages  ceiling  Not in use this variable
  SET @startproll = @stdatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
  SET @endproll = @endatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
  SET @startsubpay = @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
  SET @endsubpay = @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
  SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)  
  SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)  
  SET @startdtproll = CONVERT(DATETIME, @startproll, 103)  
  SET @enddtproll = CONVERT(DATETIME, @endproll, 103)  
  SET @startmonth = MONTH(@startdtsub)  
  SET @startyear = YEAR(@startdtsub)  
  SET @RollDays = (Datediff(dw, @startdtproll, @enddtproll) + 1)  
  SET @lastyear = @startyear - 1  
  SET @dt_date = CONVERT(DATETIME, @startsubpay, 103)  
  SET @param1 = N'@cpfamtemployer float output'  
  SET @param2 = N'@cpfamtemployee float output'  
  SET @NoWrkgDaysSubPay = (Datediff(dw, @startdtsub, @enddtsub) + 1)  
  
  IF Len(@EmpPassID) > 0  
      BEGIN  
          SELECT @where = 'Where Emp_Code Not In (' + @EmpPassID + ')'  
      END  
  
  SELECT @cpfceiling = monthly_cpf_ceil,@roundunpaid = basicrnd,@roundnetpay = netpayrnd,@roundaddition = additionsrnd,@rounddeduction = deductionsrnd  
  FROM   Company  
  WHERE  Company_ID = @company_id  
  
  -- Dump The Required Employees in one Temp Table                                                                                                                                                
  SELECT Emp_Code,Emp_Name,Emp_Lname,IC_PP_NUMBER,Sex,Emp_Group_Id,Race_ID,Dept_Id,Date_Of_Birth,Joining_Date,Termination_Date,PR_Date = CASE  
                                                                                                                                           WHEN Emp_Type = 'SC' THEN CONVERT(DATETIME, '01/01/1910', 103)  
                                                                                                                                           ELSE PR_Date  
                                                                                                                                         END,Emp_Type,CPF_Entitlement,OT_Entitlement,Payment_Mode,Pay_Frequency,EmpCPFType,Wdays_per_Week,Hourly_Rate_Mode,Hourly_Rate,Daily_Rate_Mode,Daily_Rate,PayRateCust=CASE  
                                                                                                                                                                                                                                                               
                                                 WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.payrate))) > 0 THEN CONVERT(DECIMAL(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.Payrate)))  
                                                                                                                                                                                                                                                               
                                                 ELSE 0  
                                                                                                                                                                                                                                                               
                                               END,Round(CAST(Isnull(Datediff(m, Isnull(date_of_birth, 0), @dt_date), 0) AS FLOAT) / 12, 2) Age,dbo.Fn_getagegroup(Em.Emp_Code, @dt_date) AS Age_Group,FundType = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                      WHEN (Emp_Type = 'SPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                         AND Fund_OptOut = 0  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%CHIN%' THEN 
'CDAC'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
                                                                                                                                                                                                                                                               
                                                                                                                                                  AND Fund_OptOut = 0  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%MALAY%' THEN
 'MBMF'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                         AND Fund_OptOut = 0  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%INDIA%' THEN
 'SINDA'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                  OR Emp_Type = 'SDPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                         AND Fund_OptOut = 0  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%EURA%' THEN 
'ECF'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                    ELSE ''  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                  END,Giro_acct_number,giro_bank,CalculateCPF =
 CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
   WHEN (CPF_Entitlement = 'Y'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
         AND (Emp_Type = 'SPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
               OR Emp_Type = 'SDPR'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
               OR Emp_Type = 'SC')) THEN 'Y'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
   ELSE 'N'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
 END,OT1Rate,Ot2Rate,OT1Rate OT1SysRate,OT2Rate OT2SysRate,Isnull(Pay_supervisor, 0) Pay_supervisor,sdf_required,time_card_no,Fund_Optout  
  INTO   #EmployeeTemp  
  FROM   Employee Em  
         INNER JOIN Race Ra ON Em.Race_ID = Ra.ID  
  WHERE  (Em.Payrate IS NOT NULL)  And PayrollType=@payrolltype  
     AND (Em.Joining_Date <= @enddtsub)  
     AND (Em.Termination_Date IS NULL  
           OR (Em.termination_date >= @startdtsub))  
     AND (Em.Company_id = @company_id)  
     AND (Em.StatusID = 1  
           OR (Em.StatusID = 2  
               AND @enddtsub <= Em.termination_date)  
           OR (Em.StatusID = 2  
               AND Em.termination_date >= @startdtsub  
               AND Em.termination_date <= @enddtsub));

WITH EPHOLD AS 
(
	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate) AS 'RowNo', 
	ID, Emp_ID, PayRate
	FROM EmployeePayHistory  Where FromDate >@enddtsub
)
Select	Emp_ID,
		PayRateCust=CASE
		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
		ELSE 0
		END
Into #EmpPayTempOLD From EPHOLD Where RowNo = 1 And PayRate is not null

UPDATE E
SET    PayRateCust = ET.PayRateCust
FROM   #EmployeeTemp E
INNER JOIN #EmpPayTempOLD ET ON E.Emp_Code = ET.Emp_ID;
  

WITH EPH AS 
(
	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate Desc) AS 'RowNo', 
	ID, Emp_ID, PayRate
	FROM EmployeePayHistory  Where FromDate <=@enddtsub
)
Select	Emp_ID,
		PayRateCust=CASE
		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
		ELSE 0
		END
Into #EmpPayTemp From EPH Where RowNo = 1 And PayRate is not null


UPDATE E
SET    PayRateCust = ET.PayRateCust
FROM   #EmployeeTemp E
INNER JOIN #EmpPayTemp ET ON E.Emp_Code = ET.Emp_ID

  SELECT @select = 'Delete From #EmployeeTemp ' + @where  
  
  EXEC (@select)  
  
  --SELECT   @select = 'Delete From #EmployeeTemp Where Emp_Code IN (SELECT  pd.Emp_ID                  
  --FROM    prepare_payroll_hdr ph INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID WHERE   pd.[Status] != ''R'' AND MONTH(ph.start_period) = '+ Convert(Varchar,@startmonth) + ' AND YEAR(ph.start_period) = ' + Convert(Varchar,@startyear) + ')
  
  --EXEC (@select)                                 
  --Exclusive for Full MONTH START                                                        
  --  Delete From #EmployeeTemp Where Emp_Code IN                                       
  --    (                                      
  --    SELECT  pd.Emp_ID  FROM    prepare_payroll_hdr ph INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID                                       
  --  WHERE   pd.[Status] != 'R'                                       
  --      --AND MONTH(ph.start_period) = Convert(Varchar,@startmonth)                               
  --      AND (ph.start_period >= @startdtsub And ph.end_period <= @enddtsub)                                  
  --      AND YEAR(ph.start_period) = Convert(Varchar,@startyear))                                      
  --Exclusive for Full MONTH END                                
  DELETE FROM #EmployeeTemp  
  WHERE  Pay_supervisor NOT IN (SELECT ID  
                                FROM   #EmployeeAssignedToPayrollGroup)  
     AND (Pay_supervisor > 0)  
  
  --Delete From #EmployeeTemp                                                                      
  --Where Emp_Code Not In                                        
  --(                                                                      
  -- Select Emp_Code From                                                                    
  -- (                                                                    
  --  Select EM.Emp_Code,WL.WorkFlowID From EmployeeWorkFlowLevel WL                                                                    
  --  Inner Join Employee EM On WL.ID = EM.Pay_supervisor                                                                 
  --  Where WL.FlowType=1 And (EM.Pay_supervisor is not null or EM.Pay_supervisor > 0 )                                                                 
  -- ) Re Inner Join #WLTemp WL On Re.WorkFlowID=WL.WorkFlowID                                                                    
  --) And (Pay_supervisor is not null or Pay_supervisor > 0)                                                                      
  --Start Here on 7th Jan 2010...1757                                    
  --Calculate Total No of Public Holidays in Payroll Period                                                                                   
  DECLARE @PUBLICHOLIDAYSMONTH FLOAT  
  DECLARE @PUBLICHOLIDAYSBYMONTH FLOAT  
  
  SELECT @PUBLICHOLIDAYSMONTH = COUNT(Holiday_Date)  
  FROM   Public_Holidays PH  
  WHERE  (PH.Holiday_Date >= @startdtproll  
          AND PH.Holiday_Date <= @enddtproll)  
     AND (Datepart(weekday, Holiday_Date) != 1  
          AND Datepart(weekday, Holiday_Date) != 7)  
	 And (CompanyID=@company_id Or CompanyID=-1)
  
  SELECT @PUBLICHOLIDAYSBYMONTH = COUNT(Holiday_Date)  
  FROM   Public_Holidays PH  
  WHERE  (PH.Holiday_Date >= @startdtsub  
          AND PH.Holiday_Date <= @enddtsub)  
     AND (Datepart(weekday, Holiday_Date) != 1  
          AND Datepart(weekday, Holiday_Date) != 7)  
	 And (CompanyID=@company_id Or CompanyID=-1)
  
  --CONSIDER 0 to PH in PAYROLL @PUBLICHOLIDAYSMONTH and @PUBLICHOLIDAYSBYMONTH                    
  SET @PUBLICHOLIDAYSMONTH = 0  
  SET @PUBLICHOLIDAYSBYMONTH = 0  
  
  --Calculate Total No of Working Days in Payroll Period                                                                                   
  SELECT @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSMONTH  
  FROM   (SELECT TotalDaysCount_5 = CASE  
                                      WHEN (R.DaysPattern_5 = 5  
                                            AND (R.[WeekDay] = 1  
                                                  OR R.[WeekDay] = 7)) THEN 0  
                                      ELSE R.CntDay  
                                    END,TotalDaysCount_5p = CASE  
                                                              WHEN (R.DaysPattern_5p = 5.5  
                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)  
                                                              WHEN (R.DaysPattern_5p = 5.5  
                                                                    AND (R.[WeekDay] = 1)) THEN 0  
                                                              ELSE R.CntDay  
                                                            END,TotalDaysCount_6 = CASE  
                                                                                     WHEN (R.DaysPattern_6 = 6  
                                                         AND (R.[WeekDay] = 1)) THEN 0  
                                                                                     ELSE R.CntDay  
                                                                                   END,TotalDaysCount_7 = CASE  
                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay  
                                                                                                          END  
          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7  
                  FROM   DateInYear Dt  
                  WHERE  (Dt.DateInYear >= @startdtproll  
                      AND Dt.DateInYear <= @enddtproll)  
                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res  
  
  --Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens                                                             
  SELECT @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSBYMONTH  
  FROM   (SELECT TotalDaysCount_5 = CASE  
                                      WHEN (R.DaysPattern_5 = 5  
                                            AND (R.[WeekDay] = 1  
                                                  OR R.[WeekDay] = 7)) THEN 0  
                                      ELSE R.CntDay  
                                    END,TotalDaysCount_5p = CASE  
                                                              WHEN (R.DaysPattern_5p = 5.5  
                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)  
                                                              WHEN (R.DaysPattern_5p = 5.5  
                                                                    AND (R.[WeekDay] = 1)) THEN 0  
                                                              ELSE R.CntDay  
                                                            END,TotalDaysCount_6 = CASE  
                                                                                     WHEN (R.DaysPattern_6 = 6  
                                                                                           AND (R.[WeekDay] = 1)) THEN 0  
                                                                                     ELSE R.CntDay  
                                                                                   END,TotalDaysCount_7 = CASE  
                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay  
                                                                                                          END  
          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7  
                  FROM   DateInYear Dt  
                  WHERE  (Dt.DateInYear >= @startdtsub  
                      AND Dt.DateInYear <= @enddtsub)  
                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res  
  
  --Calculate Total No of Working Days in Payroll Period                                                              
  --       SELECT   @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5),                                                
  --                @TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p),                                                
  --      @TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6),                                                
  --                @TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7)                                                
  --       FROM     (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND                                                
  --                                                      (R.[WeekDay] = 1 OR                                                
  --                                                       R.[WeekDay] = 7                                                
  --                 )                                                
  --                                            ) THEN 0                                                
  --                                                ELSE R.CntDay                                                
  --                                           END ,                                                
  --                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND                                                
  --                                                       (R.[WeekDay] = 7)                                                
  --                                  ) THEN (R.CntDay / 2)                                                
  --                                           WHEN (R.DaysPattern_5p = 5.5 AND                                                
  --                                                       (R.[WeekDay] = 1)                                                
  --               ) THEN 0                                 
  --                          ELSE R.CntDay                                                
  --                                            END ,                                                
  --                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND                                                
  --                                                      (R.[WeekDay] = 1)                                                
  --                                                     ) THEN 0                                                
  --            ELSE R.CntDay                                                
  --                                           END ,                                                
  --                        TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay                                                
  --                                           END                                                
  --                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],                                                
  --                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,                                                
  --          6 DaysPattern_6, 7 DaysPattern_7                                                
  --                         FROM   DateInYear Dt                                                
  --                         WHERE  (Dt.DateInYear >= @startdtproll AND                                                
  --                                 Dt.DateInYear <= @enddtproll                                                
  --                                )                                                
  --                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)                                                
  --                        ) R                                                
  --                ) Res                 
  --                                                                                                    
  --                                                                                                                                
  ----Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens           
  --       SELECT   @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5), @TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p),                                                
  --                @TotalDaysCount_6 = SUM(Res.TotalDaysCount_6), @TotalDaysCount_7 = SUM(Res.TotalDaysCount_7)                                                
  --       FROM (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND                                                
  --                                                      (R.[WeekDay] = 1 OR                                                
  --                                                       R.[WeekDay] = 7                                                
  --               )                                                
  --                                                     ) THEN 0                                                
  --                                                ELSE R.CntDay                                                
  --                                           END ,                                    
  --                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND                                                
  --                                                       (R.[WeekDay] = 7)                                                
  --                                       ) THEN (R.CntDay / 2)                                                
  --                                                 WHEN (R.DaysPattern_5p = 5.5 AND                                                
  --                                                       (R.[WeekDay] = 1)                                                
  --                                                      ) THEN 0                        
  --                                                 ELSE R.CntDay                                                
  --       END ,                                                
  --                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND                                                
  --                                                      (R.[WeekDay] = 1)                                                
  --                                                     ) THEN 0                                                
  --                                                ELSE R.CntDay                                                
  --                                           END ,                                                
  --       TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay                                                
  --                                           END                                               
  --                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],                                                
  --                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,                                                
  --                                6 DaysPattern_6, 7 DaysPattern_7                                                
  --                   FROM   DateInYear Dt                                                
  --            WHERE  (Dt.DateInYear >= @startdtsub AND                                     
  --                                 Dt.DateInYear <= @enddtsub                                                
  --                                )                                                
  --                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)                                                
  --                        ) R                                                
  --                ) Res                                              
  --End Here on 7th Jan 2010...1757                                                                          
  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is a PR and works during PR Period.                                                                                                                                           
    
  SELECT E.Emp_Code,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.Joining_Date >= E.PR_Date AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR  
                     (E.PR_Date IS NOT  
                     NULL AND  
                     E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date > @startdtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND E.PR_Date < @startdtsub AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date <= @startdtsub AND E.PR_Date >= @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) ))) ActPRSatDaySpan,  
                (SELECT COUNT(Datepart(weekday, DateInYear))  
                 FROM   DateInYear Dt  
                 WHERE  (E.PR_Date IS NOT NULL  
                     AND E.Termination_Date IS NULL  
                     AND E.PR_Date >= @startdtsub  
                     AND E.PR_Date <= @enddtsub  
                     AND E.Joining_Date < @startdtsub  
                     AND Dt.DateInYear >= E.PR_Date  
                     AND Dt.DateInYear <= @enddtsub  
                     AND (Datepart(weekday, DateInYear) = 1))  
                     OR (E.PR_Date IS NOT NULL  
                         AND E.Termination_Date IS NULL  
                         AND E.PR_Date >= @startdtsub  
                         AND E.PR_Date <= @enddtsub  
                         AND E.Joining_Date >= @startdtsub  
                         AND E.Joining_Date <= @enddtsub  
                         AND E.PR_Date >= E.Joining_Date  
                         AND Dt.DateInYear >= E.PR_Date  
                         AND Dt.DateInYear <= @enddtsub  
                         AND (Datepart(weekday, DateInYear) = 1))  
                     OR (E.PR_Date IS NOT NULL  
                         AND E.Termination_Date IS NULL  
                         AND E.PR_Date >= @startdtsub  
                         AND E.PR_Date <= @enddtsub  
                         AND E.Joining_Date >= @startdtsub  
                         AND E.Joining_Date <= @enddtsub  
                         AND E.Joining_Date >= E.PR_Date  
                         AND Dt.DateInYear >= E.Joining_Date  
                         AND Dt.DateInYear <= @enddtsub  
                         AND (Datepart(weekday, DateInYear) = 1))  
                     OR (E.PR_Date IS NOT NULL  
                         AND E.Termination_Date IS NOT NULL  
                         AND E.Termination_Date >= @startdtsub  
                         AND E.Termination_Date <= @enddtsub  
                         AND E.Joining_Date > @startdtsub  
                         AND E.PR_Date >= E.Joining_Date  
                         AND Dt.DateInYear >= E.PR_Date  
                         AND Dt.DateInYear <= E.Termination_Date  
                         AND (Datepart(weekday, DateInYear) = 1))  
                     OR (E.PR_Date IS NOT NULL  
                         AND E.Termination_Date IS NOT NULL  
                         AND E.Termination_Date >= @startdtsub  
                         AND E.Termination_Date <= @enddtsub  
                         AND E.Joining_Date < @startdtsub  
                         AND E.PR_Date < @startdtsub  
                         AND Dt.DateInYear >= @startdtsub  
                         AND Dt.DateInYear <= E.Termination_Date  
                         AND (Datepart(weekday, DateInYear) = 1))  
                     OR (E.PR_Date IS NOT NULL  
                         AND E.Termination_Date IS NOT NULL  
                         AND E.Termination_Date >= @startdtsub  
                         AND E.Termination_Date <= @enddtsub  
                         AND E.Joining_Date <= @startdtsub  
                         AND E.PR_Date >= @startdtsub  
                         AND Dt.DateInYear >= E.PR_Date  
                         AND Dt.DateInYear <= E.Termination_Date  
                         AND (Datepart(weekday, DateInYear) = 1))) ActPRSunDaySpan  
  INTO   #PRSatSunDaysTemp  
  FROM   #EmployeeTemp E  
  
  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is not PR and works during PR Period.                                                                                                                        
  SELECT Emp_Code,(SELECT COUNT(Datepart(weekday, DateInYear))  
                   FROM   DateInYear Dt  
                   WHERE  (((E.Termination_Date >= @startdtsub  
                             AND E.Termination_Date <= @enddtsub)  
                            AND E.Joining_Date >= @startdtsub)  
                       AND Dt.DateInYear >= E.Joining_Date  
                       AND Dt.DateInYear <= E.Termination_Date  
                       AND (Datepart(weekday, DateInYear) = 1))  
                       OR (((E.Termination_Date >= @startdtsub  
                             AND E.Termination_Date <= @enddtsub)  
                            AND E.Joining_Date < @startdtsub)  
                           AND Dt.DateInYear >= @startdtsub  
                           AND Dt.DateInYear <= E.Termination_Date  
                           AND (Datepart(weekday, DateInYear) = 1))  
                       OR ((E.Termination_Date IS NULL  
                            AND (E.Joining_Date > @startdtsub  
                                 AND E.Joining_Date <= @enddtsub))  
                           AND Dt.DateInYear >= E.Joining_Date  
                           AND Dt.DateInYear <= @enddtsub  
                           AND (Datepart(weekday, DateInYear) = 1))  
                       OR ((E.Termination_Date IS NULL  
                            AND (E.Joining_Date < @startdtsub))  
                           AND Dt.DateInYear >= @startdtsub  
                           AND Dt.DateInYear <= @enddtsub  
                           AND (Datepart(weekday, DateInYear) = 1))  
                       OR ((E.Termination_Date > @enddtsub  
                            AND E.Joining_Date < @startdtsub)  
                           AND Dt.DateInYear >= @startdtsub  
                           AND Dt.DateInYear <= @enddtsub  
                           AND (Datepart(weekday, DateInYear) = 1))) ActSunDaySpan,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date >= @startdtsub ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date < @startdtsub ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date > @startdtsub AND E.Joining_Date <= @enddtsub ) ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date < @startdtsub) ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday,  
                                                                                    DateInYear) = 7) ) OR ((E.Termination_Date > @enddtsub AND E.Joining_Date < @startdtsub )  
                                                                                    AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) ))) ActSatDaySpan  
  INTO   #SatSunDaysTemp  
  FROM   #EmployeeTemp E  
  
  -- Calculate Unpaid FullDay for the Employees who took leaves during the PR Period                                                                                                                
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) UnpaidFullDayPR  
  INTO   #UnpaidFullDayPR  
  FROM   Emp_Leaves el  
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code  
  WHERE  (Eld.Leave_Date >= @startdtsub  
          AND Eld.Leave_Date <= @enddtsub)  
     AND (Eld.unpaid_leave = 1  
          AND eld.halfday_leave = 0)  
     AND El.Status = 'Approved'  
     AND ((E.PR_Date IS NOT NULL  
           AND E.Termination_Date IS NULL  
           AND E.PR_Date >= @startdtsub  
           AND E.PR_Date <= @enddtsub  
           AND E.Joining_Date < @startdtsub  
           AND Eld.Leave_Date >= E.PR_Date  
           AND Eld.Leave_Date <= @enddtsub)  
           OR (E.PR_Date IS NOT NULL  
               AND E.Termination_Date IS NULL  
               AND E.PR_Date >= @startdtsub  
               AND E.PR_Date <= @enddtsub  
               AND E.Joining_Date >= @startdtsub  
               AND E.Joining_Date <= @enddtsub  
               AND E.PR_Date >= E.Joining_Date  
               AND Eld.Leave_Date >= E.PR_Date  
               AND Eld.Leave_Date <= @enddtsub)  
           OR (E.PR_Date IS NOT NULL  
               AND E.Termination_Date IS NOT NULL  
               AND E.Termination_Date >= @startdtsub  
               AND E.Termination_Date <= @enddtsub  
               AND E.Joining_Date > @startdtsub  
               AND E.PR_Date >= E.Joining_Date  
               AND Eld.Leave_Date >= E.PR_Date  
               AND Eld.Leave_Date <= E.Termination_Date)  
           OR (E.PR_Date IS NOT NULL  
               AND E.Termination_Date IS NOT NULL  
               AND E.Termination_Date >= @startdtsub  
               AND E.Termination_Date <= @enddtsub  
               AND E.Joining_Date < @startdtsub  
               AND E.PR_Date < @startdtsub  
               AND Eld.Leave_Date >= @startdtsub  
               AND Eld.Leave_Date <= E.Termination_Date))  
  GROUP  BY El.Emp_Id  
  
  -- Calculate Unpaid Half Day for the Employees who took leaves during the PR Period                                                            
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 UnpaidHalfDayPR  
  INTO   #UnpaidHalfDayPR  
  FROM   Emp_Leaves el  
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code  
  WHERE  (Eld.Leave_Date >= @startdtsub  
          AND Eld.Leave_Date <= @enddtsub)  
     AND (Eld.unpaid_leave = 1  
          AND eld.halfday_leave = 1)  
     AND El.Status = 'Approved'  
     AND ((E.PR_Date IS NOT NULL  
           AND E.Termination_Date IS NULL  
  AND E.PR_Date >= @startdtsub  
           AND E.PR_Date <= @enddtsub  
           AND E.Joining_Date < @startdtsub  
           AND Eld.Leave_Date >= E.PR_Date  
           AND Eld.Leave_Date <= @enddtsub)  
           OR (E.PR_Date IS NOT NULL  
               AND E.Termination_Date IS NULL  
               AND E.PR_Date >= @startdtsub  
               AND E.PR_Date <= @enddtsub  
               AND E.Joining_Date >= @startdtsub  
               AND E.Joining_Date <= @enddtsub  
               AND E.PR_Date >= E.Joining_Date  
               AND Eld.Leave_Date >= E.PR_Date  
               AND Eld.Leave_Date <= @enddtsub)  
           OR (E.PR_Date IS NOT NULL  
               AND E.Termination_Date IS NOT NULL  
               AND E.Termination_Date >= @startdtsub  
               AND E.Termination_Date <= @enddtsub  
               AND E.Joining_Date > @startdtsub  
               AND E.PR_Date >= E.Joining_Date  
               AND Eld.Leave_Date >= E.PR_Date  
               AND Eld.Leave_Date <= E.Termination_Date)  
           OR (E.PR_Date IS NOT NULL  
               AND E.Termination_Date IS NOT NULL  
               AND E.Termination_Date >= @startdtsub  
               AND E.Termination_Date <= @enddtsub  
               AND E.Joining_Date < @startdtsub  
               AND E.PR_Date < @startdtsub  
               AND Eld.Leave_Date >= @startdtsub  
               AND Eld.Leave_Date <= E.Termination_Date))  
  GROUP  BY El.Emp_Id  
  
  -- Calculate Paid Half Day for the Employees who took leaves during working days                                                                                                                                                
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 PaidHalfDay  
  INTO   #PaidHalfDay  
  FROM   Emp_Leaves el  
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
  WHERE  (Eld.Leave_Date >= @startdtsub  
          AND Eld.Leave_Date <= @enddtsub)  
     AND (Eld.unpaid_leave = 0  
          AND eld.halfday_leave = 1)  
     AND El.Status = 'Approved'  
  GROUP  BY El.Emp_Id  
  
  -- Calculate Paid Full Day for the Employees who took leaves during working days                                                                                                                                                
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) PaidFullDay  
  INTO   #PaidFullDay  
  FROM   Emp_Leaves el  
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
  WHERE  (Eld.Leave_Date >= @startdtsub  
          AND Eld.Leave_Date <= @enddtsub)  
     AND (Eld.unpaid_leave = 0  
          AND eld.halfday_leave = 0)  
     AND El.Status = 'Approved'  
  GROUP  BY El.Emp_Id  
  
  -- Calculate UnPaid Half Day for the Employees who took leaves during working days                                                                                                                                                
  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) / 2 UnpaidHalfDay  
  INTO   #UnpaidHalfDay  
  FROM   Emp_Leaves el  
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
  WHERE  (Eld.Leave_Date >= @startdtsub  
          AND Eld.Leave_Date <= @enddtsub)  
     AND (Eld.unpaid_leave = 1  
          AND eld.halfday_leave = 1)  
     AND El.Status = 'Approved'  
  GROUP  BY El.Emp_Id  
  
  -- Calculate UnPaid Full Day for the Employees who took leaves during working days                                                                                                                                                
  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) UnpaidFullDay  
  INTO   #UnpaidFullDay  
  FROM   Emp_Leaves el  
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
  WHERE  (Eld.Leave_Date >= @startdtsub  
          AND Eld.Leave_Date <= @enddtsub)  
     AND (Eld.unpaid_leave = 1  
          AND eld.halfday_leave = 0)  
     AND El.Status = 'Approved'  
  GROUP  BY El.Emp_Id  
  
  --Calc Deduction Amounts For Employees                                                                                      
  SELECT Emp_Code,SUM(trx_amount) DedAmt  
  INTO   #Deduction  
  FROM   Emp_Deductions ED  
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
  WHERE  (--MONTH(trx_period) = @startmonth AND                                                    
         (trx_period >= @startdtsub  
          AND trx_period <= @enddtsub)  
         AND YEAR(trx_period) = @startyear)  
		And ((ED.FundType is NULL OR ED.FundType = 0) Or (ED.FundType >=5 And ED.FundType <=8)) --Added on Dec 6 for Auto And Manual Funds- Start  
  GROUP  BY Emp_Code  
  
  --Calc Deduction Amounts Applicable CPF on Deduction For Employees                                                            
  SELECT ED.Emp_Code,SUM(ED.trx_amount) DedCPFAmt  
  INTO   #DeductionCPF  
  FROM   Emp_Deductions ED  
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
  WHERE  (--MONTH(ED.trx_period) = @startmonth AND                                                
         (trx_period >= @startdtsub  
          AND trx_period <= @enddtsub)  
         AND YEAR(ED.trx_period) = @startyear)  
         AND DT.CPF = 'Yes'  
  GROUP  BY Emp_Code  
  
  --Calc Add for Wages  when CPF Yes                                                                                         
  SELECT Emp_Code,SUM(trx_amount) Add4AW  
  INTO   #Add4AW  
  FROM   emp_additions EA  
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
  WHERE  --Status='L' And                                                  
  (--MONTH(trx_period) = @startmonth AND                                                  
  (trx_period >= @startdtsub  
   AND trx_period <= @enddtsub)  
  AND YEAR(trx_period) = @startyear)  
  AND AT.CPF = 'Yes'  
  AND AT.Type_Of_Wage = 'A'  
  AND (EA.ClaimStatus = 'Approved'  
        OR EA.ClaimStatus IS NULL)  
  GROUP  BY Emp_Code  
  
  --Calc Add for Wages  when CPF NO                                                                                         
  SELECT Emp_Code,SUM(trx_amount) Add4AWNOCPF  
  INTO   #Add4AWNOCPF  
  FROM   emp_additions EA  
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
  WHERE  --Status='L' And                                                  
  (--MONTH(trx_period) = @startmonth AND                                                  
  (trx_period >= @startdtsub  
   AND trx_period <= @enddtsub)  
  AND YEAR(trx_period) = @startyear)  
  AND AT.CPF = 'No'  
  AND AT.Type_Of_Wage = 'A'  
  AND (EA.ClaimStatus = 'Approved'  
        OR EA.ClaimStatus IS NULL)  
  GROUP  BY Emp_Code  
  
  --Calc Add For Ordinary Wages                                                                                                                                                
  SELECT Emp_Code,SUM(trx_amount) Add4OW  
  INTO   #Add4OW  
  FROM   emp_additions EA  
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
  WHERE  --Status='L' And                                                                                                                            
  (--MONTH(trx_period) = @startmonth AND                        
  (trx_period >= @startdtsub  
   AND trx_period <= @enddtsub)  
  AND YEAR(trx_period) = @startyear)  
  AND AT.CPF = 'Yes'  
  AND (AT.Type_Of_Wage = 'O'  
        OR AT.Type_Of_Wage IS NULL)  
  AND (EA.ClaimStatus = 'Approved'  
        OR EA.ClaimStatus IS NULL)  
  GROUP  BY Emp_Code  
  
  --Calc Add For Normal Wages                                                                              
  SELECT Emp_Code,SUM(trx_amount) Add4NW  
  INTO   #Add4NW  
  FROM   emp_additions EA  
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
  WHERE  --Status='L' And                                                                                                                      
  (--MONTH(trx_period) = @startmonth AND                                                    
  (trx_period >= @startdtsub  
   AND trx_period <= @enddtsub)  
  AND YEAR(trx_period) = @startyear)  
  AND AT.CPF = 'No'  
  AND (AT.Type_Of_Wage = 'O'  
        OR AT.Type_Of_Wage IS NULL)  
  AND (EA.ClaimStatus = 'Approved'  
        OR EA.ClaimStatus IS NULL)  
  GROUP  BY Emp_Code  
  
  --Calc Employee Overtime                                                                                                     
  SELECT Emp_Code,dbo.Converttohours(SUM(dbo.Converttominutes(overtime1))) overtime1,dbo.Converttohours(SUM(dbo.Converttominutes(overtime2))) overtime2,SUM(Days_Work) Days_Work,dbo.Converttohours(SUM(dbo.Converttominutes(NH_Work))) NH_Work  
  INTO   #EOT  
  FROM   emp_overtime  
  WHERE  ((Trx_Month = @monthidintbl AND                                                
          (payrollstdate >= @startdtsub  
           AND payrollstdate <= @enddtsub)  
          AND Trx_Year = @startyear)  
           OR Trx_Month IS NULL)  
  GROUP  BY Emp_Code  
  
  --Select @TotalDaysCount_5,@TotalDaysCount_5p,@TotalDaysCount_6,@TotalDaysCount_7                                                                                                        
  SELECT *,([Basic] - TotalUnPaid) ActualBasic,CPFOrdinary = CASE  
                                                               WHEN (CPF = 'Y'  
                                                                     AND Emp_Type = 'SPR'  
                                                                      OR Emp_Type = 'SDPR'  
                                                                      OR Emp_Type = 'SC')  
                                                                    AND [BasicPR] <= 0 THEN (([Basic] - TotalUnPaid) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)  
                                                               ELSE (([BasicPR] - UnpaidDeductPR) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)  
                                                             END,GrossWithOutAddition = CASE  
                                                                                          WHEN (CPF = 'Y'  
                                                                                                AND Emp_Type = 'SPR'  
                                                                                                 OR Emp_Type = 'SDPR'  
                                                                                                 OR Emp_Type = 'SC')  
                                                                                               AND [BasicPR] <= 0  
                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(18, 2)), 0)  
                                                                                          WHEN (CPF = 'Y'  
                                                                                                AND Emp_Type = 'SPR'  
                                                                                                 OR Emp_Type = 'SDPR'  
                                                                                                 OR Emp_Type = 'SC')  
                                                                                               AND [BasicPR] <= 0  
                                                                                               AND @roundnetpay = -1 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(18, 2)), 0)  
                                                                                          WHEN ([BasicPR] > 0  
                                                                                                AND @roundnetpay = -1) THEN Isnull(CAST((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(18, 2)), 0)  
                                                                                          WHEN ([BasicPR] > 0  
                                                                                                AND @roundnetpay >= 0) THEN Isnull(CAST(Round((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(18, 2)), 0)  
                                                                                          WHEN (Emp_Type = 'WP'  
                                                                                                 OR Emp_Type = 'DP'  
                                                                                                 OR Emp_Type = 'EP'  
                                                                                                 OR Emp_Type = 'SP')  
                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(18, 2)), 0)  
                                                                                          WHEN (Emp_Type = 'WP'  
                                                                                                 OR Emp_Type = 'DP'  
                                                                                                 OR Emp_Type = 'EP'  
                                                                                                 OR Emp_Type = 'SP')  
                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(18, 2)), 0)  
                                                                                        END  
  INTO   #PriorGenPayroll  
  FROM   (SELECT *,[BasicPR] = CASE  
                                 WHEN (PR_Date >= @startdtsub)  
                                      AND (Emp_Type = 'SPR'  
                                            OR Emp_Type = 'SDPR'  
                                            OR Emp_Type = 'SC') THEN Round(CONVERT(DECIMAL(18, 2), (ActPRWrkgDaysSpan * BasicDayRateWORound)), 2)  
                                 ELSE -1  
                               --Else Round(convert(decimal(8,2),(ActWrkgDaysSpan*BasicDayRateWORound)),2)                                                                                                                   
                               END,[Basic] = CASE  
                                               WHEN PayType = 'D'  
                                                    AND CONVERT(DECIMAL(18, 2), PayRateCust) <= 0 THEN 0  
                                               WHEN ActPRWrkgDaysSpan > 0 THEN Round(CONVERT(DECIMAL(18, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)  
                                               ELSE Round(CONVERT(DECIMAL(18, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)  
                                             END  
          FROM   (SELECT E.Emp_Code,E.FullName,E.Emp_Type,E.DeptName,E.GroupName,E.EmployeeGiro,E.EmployerGiro,E.GiroBank,E.PRAge,E.WorkingDaysInWeek,E.OT,E.CPF,E.CPFType,E.PayType,E.Daily_rate_mode,E.Daily_Rate,E.Pay_Mode,E.Hourly_rate,E.Join_Date Join_Date,E.Term_Date Term_Date,E.Pr_date Pr_date,E.RollDays,E.WrkgDaysInRoll,E.BasicPayInRoll,E.SubPayDays,E.WrkgDaysInSubPay,E.BasicDayRate,E.BasicDayRateWORound,(E.BasicDayRate * E.ActWrkgDaysSpan) BasicNorSubPay,E.UnpaidFullDay,E.UnpaidHalfDay,E.PaidFullDay,E.PaidHalfDay,E.UnPaidDeduct,E.UnpaidFullDayPR,E.UnpaidHalfDayPR,E.UnPaidDeductPR,(E.UnPaidDeduct + E.UnPaidDeductPR) TotalUnPaid,E.Days_Work,E.NH_Work,E.OT1Rate,E.NHHrs,E.OT1Hrs,E.OT1,E.OT2Rate,E.OT2Hrs,E.OT2,E.Add4NW,E.Add4OW,E.NH,E.Add4AW,E.Add4AWNOCPF,E.AdditionalWages,E.DedAmt,E.DedCPFAmt,E.ActSatDaySpan,E.ActSunDaySpan,E.ActWrkgDaysSpan,E.ActPRSatDaySpan,E.ActPRSunDaySpan,ActPRWrkgDaysSpan = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                               WHEN (E.PR_Date IS NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                            OR E.PR_Date > @enddtsub) THEN 0  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                              AND (E.PR_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date >= @enddtsub) THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                              ActPRSatDaySpan + ActPRSunDaySpan)  
                                                                                                                                                                                                                                WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
                           AND E.Term_Date < @enddtsub) THEN (Datediff(dw, E.PR_Date, E.Term_Date) + 1)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                             - (  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                             ActPRSatDaySpan + ActPRSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date IS NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                 AND E.PR_Date <= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date <= @enddtsub) THEN E.ActWrkgDaysSpan  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                        AND E.PR_Date < @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date < @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, E.Term_Date) + 1)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                              - (  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                ActPRSatDaySpan + ActPRSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.PR_Date < @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                    AND E.Join_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date <= @enddtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date <= @enddtsub) THEN E.ActWrkgDaysSpan  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                              AND E.Term_Date IS NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date <= @startdtsub) THEN  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     ActPRSatDaySpan + ActPRSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date IS NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                  AND E.PR_Date
 <= @enddtsub)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date <= @enddtsub)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                          AND E.Join_Date < E.PR_Date THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                            ActPRSatDaySpan + ActPRSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Term_Date IS NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                   AND E.PR_Date <= @enddtsub)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                           AND E.Join_Date <= @enddtsub)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                          AND E.Join_Date >= E.PR_Date THEN (Datediff(dw, E.Join_Date, @enddtsub) + 1) - (  
                                                                                                                                                                                                                                                               
                                                                 ActPRSatDaySpan + ActPRSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     ELSE E.ActWrkgDaysSpan  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                   END,E.DaysWorkedRate,E.CalculateCPF,E.PayRateCust  
                  FROM   (SELECT T.Emp_Code,T.FullName,T.Emp_Type,T.DeptName,T.GroupName,T.EmployeeGiro,T.EmployerGiro,T.GiroBank,T.PRAge,T.WorkingDaysInWeek,T.OT,T.CPF,T.CPFType,T.PayType,T.Daily_rate_mode,T.Daily_Rate,T.Pay_Mode,T.Hourly_rate,T.Join_Date Join_Date,T.Term_Date Term_Date,T.Pr_date Pr_date,T.RollDays,T.WrkgDaysInRoll,T.BasicPayInRoll,T.SubPayDays,T.WrkgDaysInSubPay,T.BasicDayRate,T.BasicDayRate BasicDayRateWORound,T.UnpaidFullDay,T.UnpaidHalfDay,T.PaidFullDay,T.PaidHalfDay,T.UnpaidFullDayPR,T.UnpaidHalfDayPR,T.Days_Work,T.NH_Work,T.OT1Rate,Isnull(T.NHHrs, 0) NHHrs,Isnull(T.OT1Hrs, 0) OT1Hrs,OT1 = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                WHEN @roundaddition = -1 THEN T.OT1  
                                                                                                                                                                    ELSE Round(T.OT1, @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                              END,NH = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                         WHEN @roundaddition = -1 THEN T.NH  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                         ELSE Round(T.NH, @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                       END,T.OT2Rate,Isnull(T.OT2Hrs, 0) OT2Hrs,OT2 = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                        WHEN @roundaddition = -1 THEN T.OT2  
                                                                                                                                                                                                                                                 ELSE Round(T.OT2, @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                      END,Add4NW = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                     WHEN @roundaddition = -1 THEN T.Add4NW  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                     ELSE Round(T.Add4NW, @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                   END,Add4OW = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                  WHEN @roundaddition = -1 THEN T.Add4OW  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                             ELSE Round(T.Add4OW, @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                END,Add4AW = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                               WHEN @roundaddition = -1 THEN T.Add4AW  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                               ELSE Round(T.Add4AW, @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                             END,Add4AWNOCPF = CASE  
                                                                                                                                                                                                                                                               
                                                                             WHEN @roundaddition = -1 THEN T.Add4AWNOCPF  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                 ELSE Round(T.Add4AWNOCPF, @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                               END,AdditionalWages = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                       WHEN @roundaddition = -1 THEN T.AdditionalWages  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                       ELSE Round(T.AdditionalWages, @roundaddition)  
                                                                                                                                                                                                                                                               
                          END,DedAmt = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
     WHEN @rounddeduction = -1 THEN T.DedAmt  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
     ELSE Round(T.DedAmt, @rounddeduction)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
   END,DedCPFAmt = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                     WHEN @rounddeduction = -1 THEN T.DedCPFAmt  
                                                                                                                                                                                                                                                               
                                                                       ELSE Round(T.DedCPFAmt, @rounddeduction)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                   END,T.ActSatDaySpan,T.ActSunDaySpan,ActWrkgDaysSpan = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                           WHEN (T.Join_Date IS NULL) THEN T.WrkgDaysInSubPay  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                           WHEN (T.Join_Date <= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Term_Date IS NULL) THEN (T.WrkgDaysInSubPay)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                              WHEN (T.Join_Date > @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Term_Date IS NULL) THEN ((@RollDays - DAY(T.Join_Date) - Datediff(dw, @enddtsub, @enddtproll)) + 1) - (ActSatDaySpan + ActSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                           WHEN (T.Join_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Join_Date <= @enddtsub  
                                                                                                                                                                                                                                                               
                                                                             AND T.Term_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Term_Date > @enddtsub) THEN (Datediff(dw, T.Join_Date, @enddtsub) + 1) - (ActSatDaySpan + ActSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                           WHEN (T.Join_Date <= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Term_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Term_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                           WHEN (T.Join_Date >= @startdtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Join_Date <= @enddtsub  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Term_Date IS NOT NULL  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                 AND T.Term_Date <= @enddtsub) THEN (Datediff(dw, T.Join_Date, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                        ELSE T.WrkgDaysInSubPay  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                         END,T.ActPRSatDaySpan,T.ActPRSunDaySpan,UnPaidDeduct = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                  WHEN @roundunpaid = -1 THEN CONVERT(DECIMAL(18, 2), T.BasicDayRate * (T.UnpaidFullDay + T.UnpaidHalfDay))  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                  ELSE Round(CONVERT(DECIMAL(18, 2), (Round(T.BasicDayRate, @roundunpaid) * (T.UnpaidFullDay +  
                                                                                                                                                                                                                                                               
                   T.UnpaidHalfDay))),  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                       @roundunpaid)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                END,UnPaidDeductPR = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                       WHEN @roundunpaid = -1 THEN CONVERT(DECIMAL(18, 2), T.BasicDayRate *  
                                                           (T.UnpaidFullDayPR +  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                   T.UnpaidHalfDayPR))  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                       ELSE Round(CONVERT(DECIMAL(18, 2), (Round(T.BasicDayRate, @roundunpaid) *  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                  (T.UnpaidFullDayPR  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                  +  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                           T.UnpaidHalfDayPR))),  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                            @roundunpaid)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                     END,DaysWorkedRate = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            WHEN T.PayType = 'D'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                   AND T.Daily_rate_mode = 'A'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round((  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            T.BasicDayRate * T.Days_Work),  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                              @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                  WHEN T.PayType = 'D'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND T.Daily_rate_mode = 'A'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND @roundaddition = -1 THEN (  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            T.BasicDayRate * T.Days_Work)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                 WHEN T.PayType = 'D'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND T.Daily_rate_mode = 'M'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round(  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            T.Daily_Rate * T.Days_Work,  
                                                                                                                                                                                                                                                               
                                                                      @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            WHEN T.PayType = 'D'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND T.Daily_rate_mode = 'M'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND @roundaddition = -1 THEN (T.Daily_Rate * T.Days_Work)  
                                                                                                                                                                                                                  WHEN T.PayType = 'H'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round((  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            (T.Hourly_Rate / 60) *  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            dbo.Converttominutes(  
                                                                      Isnull(T.NH_Work, 0))),  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                              @roundaddition)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            --ROUND((T.Hourly_Rate * T.NH_Work), @roundaddition)              
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            WHEN T.PayType = 'H'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                 AND @roundaddition = -1 THEN (  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            (T.Hourly_Rate / 60) * dbo.Converttominutes(  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                   Isnull(T.NH_Work, 0))  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                              )  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                            --(T.Hourly_Rate * T.NH_Work)              
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                               ELSE 0  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                          END,T.CalculateCPF,T.PayRateCust  
                          FROM   (SELECT Em.Emp_Code,(Em.emp_name + ' ' + Em.emp_lname) FullName,Em.Emp_Type,DEPT.DeptName,EG.EmpGroupName GroupName,--Em.Sex, EG.EmpGroupName GroupName, Ic_PP_Number NRICPREPWP,                                             
                                                    
                                         Em.giro_acct_number EmployeeGiro,GIRO.bank_accountno EmployerGiro,giro_bank GiroBank,PRAge = CASE  
                                                                                                                                        WHEN (Em.Emp_Type = 'SC') THEN 3  
                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) > 24) THEN 3  
                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) <= 12) THEN 1  
                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
  AND (Datediff(m, Em.pr_date, @startdtsub) > 12  
                                                                                                                                                  AND Datediff(m, Em.pr_date, @startdtsub) <= 24) THEN 2  
                                                                                                                                        ELSE 0  
                                                                                                                                      END,Em.wdays_per_week WorkingDaysInWeek,Em.Ot_Entitlement OT,Em.Cpf_entitlement CPF,Em.EmpCPFtype CPFType,Em.Pay_Frequency PayType,Em.Payment_Mode Pay_Mode,Em.Joining_Date Join_Date,Em.Termination_date Term_Date,Em.Pr_date,Em.Hourly_rate,@RollDays RollDays,WrkgDaysInRoll = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                           WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCountPayRoll_5  
                                                                                                                                                                                                                                                               
                                                                                                                                                           WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCountPayRoll_5p  
                                                                                                                                                                                                                                                               
                                                                                                                                                           WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCountPayRoll_6  
                                                                                                                                                                                                                                                               
                                                                                                                                                           WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCountPayRoll_7  
                                                                                                                                                                                                                                                               
                                                                                                                                                         END,Em.PayRateCust AS BasicPayInRoll,@NoWrkgDaysSubPay SubPayDays,WrkgDaysInSubPay = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCount_5  
																																																												WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCount_5p  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCount_6  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCount_7  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                              END,BasicDayRate 
= CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
    WHEN (Em.wdays_per_week >= 5  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND EM.daily_rate_mode = 'M'  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND EM.daily_rate > 0) THEN Em.daily_rate  
                                                                            WHEN (Em.wdays_per_week = 5  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
    WHEN (Em.wdays_per_week = 5  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5), @roundunpaid)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
    WHEN (Em.wdays_per_week = 5.5  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5p)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
    WHEN (Em.wdays_per_week = 5.5  
                                                           AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5p), @roundunpaid)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
    WHEN (Em.wdays_per_week = 6  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_6)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
    WHEN (Em.wdays_per_week = 6  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_6), @roundunpaid)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
    WHEN (Em.wdays_per_week = 7  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_7)  
                                                                                                 WHEN (Em.wdays_per_week = 7  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_7), @roundunpaid)  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
  --When (Em.wdays_per_week >= 5  And daily_rate_mode='M') Then daily_rate                                                                 
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
  END,(Isnull(UFD.UnpaidFullDay, 0) - Isnull(UFPR.UnpaidFullDayPR, 0)) UnpaidFullDay,(Isnull(UHD.UnpaidHalfDay, 0) - Isnull(UHPR.UnpaidHalfDayPR, 0)) UnpaidHalfDay,Isnull(PFD.PaidFullDay, 0) PaidFullDay,Isnull(PHD.PaidHalfDay, 0) PaidHalfDay,Isnull(UFPR.UnpaidFullDayPR, 0) UnpaidFullDayPR,Isnull(UHPR.UnpaidHalfDayPR, 0) UnpaidHalfDayPR,(Em.hourly_rate * Em.Ot1Rate) OT1Rate,EOT.Nh_Work NHHrs,EOT.overtime1 OT1Hrs,  
                                                 CONVERT(DECIMAL(18, 2), (((Em.hourly_rate * Em.Ot1Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime1, 0)))) OT1,(Em.hourly_rate * Em.Ot2Rate) OT2Rate,EOT.overtime2 OT2Hrs,CONVERT(DECIMAL(18, 2), (((Em.hourly_rate * Em.Ot2Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime2, 0)))) OT2,CONVERT(DECIMAL(18, 2), (((Em.hourly_rate)/60) * dbo.Converttominutes(Isnull(EOT.NH_Work, 0)))) NH,  
                                                         Days_Work = CASE  
                                                                       WHEN Em.Pay_Frequency = 'D' THEN Isnull(EOT.Days_Work, 0)  
                                                                       ELSE 0  
                                                                     END,NH_Work = CASE  
                                                                                     WHEN Em.Pay_Frequency = 'H' THEN Isnull(EOT.NH_Work, 0)  
                                                                                     ELSE 0  
                                                                                   END,ActSatDaySpan = CASE  
                                                                                                         WHEN (Em.wdays_per_week = 5.5) THEN SSD.ActSatDaySpan / 2  
                                                                                                         WHEN (Em.wdays_per_week = 6) THEN 0  
                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0  
                      ELSE SSD.ActSatDaySpan  
                                                                                                       END,ActSunDaySpan = CASE  
                                                                                                                             WHEN (Em.wdays_per_week = 7) THEN 0  
                                                                                                                             ELSE SSD.ActSunDaySpan  
                                                                                                                           END,ActPRSatDaySpan = CASE  
                                                                                                                                                   WHEN (Em.wdays_per_week = 5.5) THEN SSDPR.ActPRSatDaySpan / 2  
                                                                                                                                                   WHEN (Em.wdays_per_week = 6) THEN 0  
                                                                                                                                                   WHEN (Em.wdays_per_week = 7) THEN 0  
                                                                                                                                                   ELSE SSDPR.ActPRSatDaySpan  
                                                                                                                                                 END,ActPRSunDaySpan = CASE  
                                                                                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0  
                                                                                                                                                                         ELSE SSDPR.ActPRSunDaySpan  
                                                                                                                                                                       END,Isnull(Add4NW.Add4NW, 0) Add4NW,Isnull(Add4OW.Add4OW, 0) Add4OW,Isnull(Add4AW.Add4AW, 0) Add4AW,Isnull(Add4AWNOCPF.Add4AWNOCPF, 0) Add4AWNOCPF,(Isnull(Add4NW.Add4NW, 0) + Isnull(Add4OW.Add4OW, 0) + Isnull(Add4AW.Add4AW, 0)) AdditionalWages,Isnull(Ded.DedAmt, 0) DedAmt,Isnull(DCPF.DedCPFAmt, 0) DedCPFAmt,CalculateCPF,Daily_rate_mode,Daily_Rate = CASE  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          WHEN @roundunpaid = -1 THEN Daily_Rate  
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
          ELSE Round(Daily_Rate, @roundunpaid)  
                                                                                                                              END,Em.PayRateCust  
                                  FROM   #EmployeeTemp Em  
                                         LEFT OUTER JOIN Department DEPT ON Em.Dept_Id = DEPT.Id  
                                         LEFT OUTER JOIN Emp_Group EG ON Em.emp_group_id = EG.Id  
                                         LEFT OUTER JOIN GiroBanks GIRO ON Em.Payment_Mode = GIRO.ID  
                                         LEFT OUTER JOIN Race RA ON Em.Race_Id = RA.ID  
                                         LEFT OUTER JOIN #UnpaidFullDay UFD ON Em.Emp_Code = UFD.Emp_Id  
                                         LEFT OUTER JOIN #UnpaidHalfDay UHD ON Em.Emp_Code = UHD.Emp_Id  
                                         LEFT OUTER JOIN #PaidFullDay PFD ON Em.Emp_Code = PFD.Emp_Id  
                                         LEFT OUTER JOIN #PaidHalfDay PHD ON Em.Emp_Code = PHD.Emp_Id  
                                         LEFT OUTER JOIN #UnpaidFullDayPR UFPR ON Em.Emp_Code = UFPR.Emp_Id  
                                         LEFT OUTER JOIN #UnpaidHalfDayPR UHPR ON Em.Emp_Code = UHPR.Emp_Id  
                                         LEFT OUTER JOIN #EOT EOT ON Em.Emp_Code = EOT.Emp_Code  
                                         LEFT OUTER JOIN #SatSunDaysTemp SSD ON Em.Emp_Code = SSD.Emp_Code  
                                         LEFT OUTER JOIN #PRSatSunDaysTemp SSDPR ON Em.Emp_Code = SSDPR.Emp_Code  
                                         LEFT OUTER JOIN #Add4NW Add4NW ON Em.Emp_Code = Add4NW.Emp_Code  
                                         LEFT OUTER JOIN #Add4OW Add4OW ON Em.Emp_Code = Add4OW.Emp_Code  
                                         LEFT OUTER JOIN #Add4AW Add4AW ON Em.Emp_Code = Add4AW.Emp_Code  
                                         LEFT OUTER JOIN #Add4AWNOCPF Add4AWNOCPF ON Em.Emp_Code = Add4AWNOCPF.Emp_Code  
                                         LEFT OUTER JOIN #Deduction Ded ON Em.Emp_Code = Ded.Emp_Code  
                                         LEFT OUTER JOIN #DeductionCPF DCPF ON Em.Emp_Code = DCPF.Emp_Code) T) E) F) G  
  ORDER  BY G.FullName  
  
  --Added on Dec 6 for Auto And Manual Funds- Start  
  SELECT Emp_Code,FundType = Case   
        When ED.FundType=1 Then 'CDAC'  
        When ED.FundType=2 Then 'ECF'  
        When ED.FundType=3 Then 'MBMF'  
        When ED.FundType=4 Then 'SINDA'  
        END  
  INTO   #FundPerc  
  FROM   Emp_Deductions ED  
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
  WHERE  (--MONTH(trx_period) = @startmonth AND                                                      
         (trx_period >= @startdtsub  
          AND trx_period <= @enddtsub)  
         AND YEAR(trx_period) = @startyear)  
   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))  
  GROUP  BY Emp_Code, ED.FundType  
  
  
 UPDATE P  
 SET    P.DedAmt = isnull(P.DedAmt,0)+ isnull(EM.DedAmt,0)  
 FROM   #PriorGenPayroll P  
   INNER JOIN ( Select EM.Emp_Code,--F.FundType,  
  Sum(dbo.Getempfundcontribution((Isnull((P.GrossWithOutAddition + P.Add4AW + P.Add4AWNOCPF + P.Add4OW), 0)), Isnull(F.FundType, ''))) DedAmt  
 From #FundPerc F  
INNER JOIN #EmployeeTemp EM ON F.Emp_Code = EM.Emp_Code  
INNER JOIN #PriorGenPayroll P ON F.Emp_Code = P.Emp_Code  
--Where  @INTendatesubmonth >=1 And EM.CalcFundFH = 'Y'  Group By EM.Emp_Code  
--Removed And EM.CalcFundFH = 'Y' 
Where  @INTendatesubmonth >=1  Group By EM.Emp_Code  
) EM ON P.Emp_Code = EM.Emp_Code  
  
--Added on Dec 6 for Auto And Manual Funds- End  

  --CALCULATE AW FOR CPF                                                    
  DECLARE @EMPLID INT  
  DECLARE @BASICEMP FLOAT  
  DECLARE db_cursor_old CURSOR FOR  
      SELECT Emp_Code,[BASIC]  
      FROM   #PriorGenPayroll  
  
  OPEN db_cursor_old  
  
  FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP  
  
  WHILE @@FETCH_STATUS = 0  
      BEGIN  
          INSERT @CPFAWCALC  
                 (Emp_Code,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWCPF)  
          SELECT *  
          FROM   dbo.Fn_calculatecpfaw (@company_id, @month, @year, @EMPLID, @BASICEMP)  
  
          FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP  
      END  
  
  CLOSE db_cursor_old  
  
  DEALLOCATE db_cursor_old  
  
  --Calculate Last Year Ordinary Wage CPF, Ordinary CPF Ceiling                                                                                                                                                
  --    SELECT  Emp_ID Emp_Code, SUM(CPFOrdinaryNet) OrdinaryWagesLY                                                            
  --    INTO    #LYOWPaidWithCPFCeil                                                            
  --    FROM    ( SELECT    * ,                                                            
  --                        CPFOrdinaryNet = CASE WHEN OrdinaryWagesLY >= @cpfceiling                                    
  --                                              THEN @cpfceiling                                                  
  --                         ELSE OrdinaryWagesLY                                                            
  --                                         END                                                            
  --              FROM      ( SELECT    pd.emp_id ,                                           
  --                                    MONTH(ph.start_period) Mth ,                                                            
  --                                    ( pd.cpfnet - pd.cpfAdd_Additional ) OrdinaryWagesLY                                
  --                          FROM      prepare_payroll_hdr ph                     
  --                          INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                                            
  --                          WHERE     pd.status = 'G' AND                                                 
  --                             YEAR(ph.start_period) = @lastyear AND                                                            
  --                                   pd.CPFNet > 0                                                            
  --                        ) R                                                            
  --            ) R                                                            
  --    GROUP BY R.Emp_ID                                                                                                         
  --Calculate Current Year Ordinary Wage CPF, Ordinary CPF Ceiling and Addition Wages Ceiling                                                                                                                                                
  --    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCY) OrdinaryWagesCY                                                            
  --    INTO    #CYOWPaidWithCPFCeil                                                            
  --    FROM    ( SELECT    R.Emp_Code, SUM(R.OrdinaryWagesCY) OrdinaryWagesCY                                                            
  --              FROM      ( SELECT    * ,                                                            
  --                                    CPFOrdinaryNet = CASE WHEN OrdinaryWagesCY >= @cpfceiling                                                            
  --                                                          THEN @cpfceiling                                                            
  --                  ELSE OrdinaryWagesCY                                                            
  --                                                   END                                                            
  --                          FROM      ( SELECT    pd.emp_id Emp_Code ,                                                            
  --                                                MONTH(ph.start_period) Mth ,                                            
  --                               ( pd.cpfnet -                                                            
  --                                                  pd.cpfAdd_Additional ) OrdinaryWagesCY                                                            
  --  FROM      prepare_payroll_hdr ph                                             
  --                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                                            
  --                                      WHERE     pd.status = 'G' AND                                                           
  --                                                MONTH(ph.start_period) <= @startmonth AND                                                            
  --                                                YEAR(ph.start_period) = @startyear AND                                                            
  --                                                pd.CPFNet > 0                                                            
  --             ) D                                                            
  --                        ) AS R                                                            
  --         GROUP BY  R.Emp_Code                                                            
  --            ) D                                                            
  --    GROUP BY Emp_Code                                                                                                 
  --    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal                                                            
  --    INTO    #CYOWPaidWithCPFCeilRecal                                                            
  --    FROM    ( SELECT    R.Emp_Code,                                                            
  --                        SUM(R.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal                                                            
  --              FROM      ( SELECT    * ,                                                            
  --                 CPFOrdinaryNetRecal = CASE                                                            
  --                                                              WHEN OrdinaryWagesCYRecal >= @cpfceiling                                                            
  --   THEN @cpfceiling                                                            
  --                                             ELSE OrdinaryWagesCYRecal                           
  --                                                          END                                                            
  --                          FROM      ( SELECT    pd.emp_id Emp_Code ,                                                            
  --                                                MONTH(ph.start_period) Mth ,                                                            
  --                                                ( pd.cpfnet -                                                            
  --              pd.cpfAdd_Additional ) OrdinaryWagesCYRecal                                
  --        FROM  prepare_payroll_hdr ph                                
  --                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                
  --                                      WHERE     pd.status = 'G' AND                                
  --        MONTH(ph.start_period) < @startmonth AND                                
  --                YEAR(ph.start_period) = @startyear AND                                
  --                       pd.CPFNet > 0                                
  --                                    ) D                                
  --                        ) AS R                                
  --              GROUP BY  R.Emp_Code                                
  --            ) D                                                            
  --    GROUP BY Emp_Code                                                                                                     
  --Calculate Current Year Addition Wages Paid Less than current month.                                                                                                                                                
  --    SELECT  R.Emp_Code, SUM(R.AWPaidCY) AWPaidCY                                                            
  --    INTO    #AWPAIDCurYear                                                            
  --    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],                                 
  --                        SUM(trx_amount) AWPaidCY                                                            
  --              FROM      emp_additions EA                                                            
  --              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID                                                            
  --              WHERE     Status = 'L' AND                                                            
  --                        ( MONTH(trx_period) <= @startmonth AND             
  --      YEAR(trx_period) = @startyear                                                            
  --                        ) AND                                  
  --                        AT.CPF = 'Yes' AND                                                            
  --                        AT.Type_Of_Wage = 'A' AND                                                            
  --                        ( EA.ClaimStatus = 'Approved' OR                                           
  --                 EA.ClaimStatus IS NULL                                                            
  --                        )                                                            
  --              GROUP BY  Emp_Code, MONTH(trx_period)                                                            
  --            ) AS R                                                            
  --    GROUP BY R.Emp_Code                                                            
  --    ORDER BY R.Emp_Code                                           
  --Calculate Current Year Addition Wages Paid of current month.                                                                                                      
  --    SELECT  R.Emp_Code, SUM(R.AWPaidCYMonth) AWPaidCYMonth                                                            
  --    INTO    #AWPAIDCurYearMonth                                                            
  --    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],                                                            
  --                        SUM(trx_amount) AWPaidCYMonth                                                            
  --              FROM      emp_additions EA                                                            
  --              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID                                                            
  --              WHERE     --Status='L' And                                                              
  --                        ( MONTH(trx_period) = @startmonth AND                                     
  --                          YEAR(trx_period) = @startyear                                                            
  --                        ) AND                                      
  --                        AT.CPF = 'Yes' AND                                                            
  --                        AT.Type_Of_Wage = 'A' AND                                                            
  --    ( EA.ClaimStatus = 'Approved' OR                                                            
  --                          EA.ClaimStatus IS NULL                                                            
  --                        )                                                            
  --              GROUP BY  Emp_Code, MONTH(trx_period)                                                            
  --            ) AS R                                          
  --    GROUP BY R.Emp_Code                                                            
  --    ORDER BY R.Emp_Code                                                                                                                                   
  SELECT *  
  INTO   #FinalPre  
  FROM   (SELECT *,EmployeeCPF = CASE  
                                   WHEN (Em.CPFGross > 0  
                                         AND Em.CPFGross <= 1500) THEN 0  
                                   WHEN (Em.CPFGross <= 0) THEN 0  
                                   ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployeePerc), 0)) / 100  
                                 END,EmployerCPF = CASE  
                                                     WHEN Em.CPFGross <= 1500  
                                                          AND Em.CPFGross > 0 THEN 0  
                                                     WHEN Em.CPFGross <= 0 THEN 0  
                                                     ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployerPerc), 0)) / 100  
                                                   END,REPLACE((SELECT Top 1 employee_cpf  
                                                   FROM   CPFAmount_detail  
                                                                WHERE  hdr_id = (SELECT row_id  
                                                                                 FROM   CPFAmount_hdr  
                                                                                 WHERE  pr_years = Em.PRAge  
                                                                                    AND emp_group = Em.EmpCPFType  
                                                                                    AND Em.CPFGross BETWEEN sal_from AND sal_to)  
                                                                   AND age_group = Em.Age_Group And CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployeeCPFRow,REPLACE((SELECT Top 1 employer_cpf  
                                                                                                                                               FROM   CPFAmount_detail  
                                                                                                                                               WHERE  hdr_id = (SELECT row_id  
                                                                                                                                                                FROM   CPFAmount_hdr  
                                                                                                                                                                WHERE  pr_years = Em.PRAge  
                                                                                                                                                                   AND emp_group = Em.EmpCPFType  
                                                                                                                                                                   AND Em.CPFGross BETWEEN sal_from AND sal_to)  
                                                                                                                                                  AND age_group = Em.Age_Group  And CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployerCPFRow  
          FROM   (SELECT *,CPFAdditionNet = CASE  
                                              WHEN CPFAdditionNetRev < 0 THEN 0  
                                              ELSE CPFAdditionNetRev  
                                            END,CPFAdditionNetRev AWSUBJCPF,CPFGross = CASE  
                                                                                         WHEN (CalculateCPF = 'Y'  
                                                                                               AND CPFAdditionNetRev >= 0) THEN ((CPFOrdinaryCeil + CPFAdditionNetRev))  
                                                                                         WHEN (CalculateCPF = 'Y'  
                                                                                               AND CPFAdditionNetRev < 0) THEN (CPFOrdinaryCeil)  
                                                                                         ELSE 0  
                                                                                       END,CPFEmployerPerc = CASE  
                                                                                                               WHEN (CalculateCPF = 'Y') THEN dbo.Getemployercpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)  
                                                                                                               ELSE 0  
                                                                                                             END,CPFEmployeePerc = CASE  
                                                                                                                                     WHEN (CalculateCPF = 'Y') THEN dbo.Getemployeecpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)  
                                                            ELSE 0  
                                                                                                                                   END  
                  FROM   (SELECT J5.*,CPFOrdinaryCeil = CASE  
                                                          WHEN (J5.CalculateCPF = 'Y')  
                                                               AND (CPFOrdinary) >= @cpfceiling THEN @cpfceiling  
                                                          WHEN (J5.CalculateCPF = 'Y')  
                                                               AND (CPFOrdinary) < @cpfceiling THEN Isnull((CPFOrdinary), 0)  
                                                          ELSE 0  
                                                        END,  
                                 --dbo.fn_GENPayrollAWCalc(@startmonth, @startyear, Em.Emp_Code, J5.Basic) AS CPFAdditionNetRev ,                                                        
                                 Isnull(J7.AWCPF, 0) CPFAdditionNetRev,Em.EmpCPFtype,Em.Age_Group,Em.Age,Em.FundType,Ot1SysRate,OT2SysRate,J7.CMOW,J7.LYOW,J7.CYOW,J7.CPFAWCIL,J7.EST_AWCIL,J7.ACTCIL,J7.AWCM,J7.AWB4CM,J7.AWCM_AWB4CM,EM.sdf_required,EM.Time_Card_No,EM.Fund_Optout  
                          FROM   #EmployeeTemp Em --LEFT OUTER JOIN #CYOWPaidWithCPFCeilRecal J6 ON Em.Emp_Code = J6.Emp_Code                                                            
                                 --LEFT OUTER JOIN #CYOWPaidWithCPFCeil J1 ON Em.Emp_Code = J1.Emp_Code                                                            
                                 --LEFT OUTER JOIN #AWPAIDCurYear J2 ON Em.Emp_Code = J2.Emp_Code                                                            
                                 --LEFT OUTER JOIN #LYOWPaidWithCPFCeil J3 ON Em.Emp_Code = J3.Emp_Code                                         
                                 --LEFT OUTER JOIN #AWPAIDCurYearMonth J4 ON Em.Emp_Code = J4.Emp_Code                                                   
                                 LEFT OUTER JOIN #PriorGenPayroll J5 ON Em.Emp_Code = J5.Emp_Code  
                                 LEFT OUTER JOIN @CPFAWCALC J7 ON Em.Emp_Code = J7.Emp_Code) Em) Em) Em  
  ORDER  BY Em.FullName  
  
  --Calculate Employer and Employee CPF Contribution                                                                                                                                           
  DECLARE db_cursor CURSOR FOR  
      SELECT Emp_Code,EmployerCPFRow,EmployeeCPFRow  
      FROM   #FinalPre  
      WHERE  EmployeeCPFRow IS NOT NULL  
          OR EmployerCPFRow IS NOT NULL  
  
  OPEN db_cursor  
  
  FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt  
  
  WHILE @@FETCH_STATUS = 0  
      BEGIN  
          SET @compute = N'set @cpfamtemployer= ' + @EmployerCPFAmt  
  
          EXEC Sp_executesql @compute,@param1,@cpfamtemployer OUTPUT  
  
          SET @compute = N'set @cpfamtemployee= ' + @EmployeeCPFAmt  
  
          EXEC Sp_executesql @compute,@param2,@cpfamtemployee OUTPUT  
  
          --Exclusive for Full MONTH START                      
          --       UPDATE   #FinalPre                                                
          --       SET      EmployerCPF = @cpfamtemployer, EmployeeCPF = @cpfamtemployee                                                
          --       WHERE    Emp_Code = @EmpID                                                                                                                          
          UPDATE #FinalPre  
          SET    EmployeeCPF = @cpfamtemployee  
          WHERE  Emp_Code = @EmpID  
  
          IF (@endatesubmonth != '15')  
              BEGIN  
                  UPDATE #FinalPre  
                  SET    EmployerCPF = @cpfamtemployer  
                  WHERE  Emp_Code = @EmpID  
              END --Exclusive for Full MONTH END                                
          FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt  
      END  
  
  CLOSE db_cursor  
  
  DEALLOCATE db_cursor  
  
  SELECT *  
  INTO   #Final  
  FROM   (SELECT Emp_Code,FullName,DeptName,GroupName,[Basic],[BasicPR],TotalAdditions,TotalAdditionsWONH=CASE  
                                                                                                            WHEN (Isnull(TotalAdditions, 0) - Isnull(NH, 0)) <= 0 THEN (Isnull(NH, 0) - Isnull(TotalAdditions, 0))  
                                                                                                            ELSE (Isnull(TotalAdditions, 0) - Isnull(NH, 0))  
                                                                                                          END,TotalDeductions,OT1Rate,OT2Rate,NHHrs,OT1Hrs,OT2Hrs,NH,OT1,OT2,Days_Work,CAST(Round(([Basic] + OT1 + OT2 + DaysWorkedRate + Add4NW + Add4OW + Add4AW + Add4AWNOCPF) - TotalDeductions, @roundnetpay) AS DECIMAL(19, 2)) NetPay,OT,CPFOrdinaryCeil,CPFAdditionNet,CPFGross,EmployeeCPFAmt,EmployerCPFAmt,(EmployeeCPFAmt + EmployerCPFAmt) CPFAmount,CPF,EmpCPFtype,PRAge,@cpfceiling CPFCeiling,FundType,FundAmount,(UnpaidFullDay + UnpaidHalfDay + UnpaidFullDayPR + UnpaidHalfDayPR) UnPaidLeaves,TotalUnPaid,PayType,Daily_rate_mode,Daily_Rate,ActualBasic,Pay_Mode,EmployeeGiro,EmployerGiro,GiroBank,Emp_Type,WorkingDaysInWeek,CPFType,Hourly_rate,Join_Date,Term_Date,Pr_date,RollDays,WrkgDaysInRoll,BasicPayInRoll,SubPayDays,WrkgDaysInSubPay,BasicDayRate,BasicDayRateWORound,BasicNorSubPay,UnpaidFullDay,UnpaidHalfDay,PaidFullDay,PaidHalfDay,UnPaidDeduct,UnpaidFullDayPR,UnpaidHalfDayPR,UnPaidDeductPR,  
                 Add4NW,  
                        Add4OW,Add4AW,Add4AWNOCPF,AdditionalWages,DedAmt,DedCPFAmt,ActSatDaySpan,ActSunDaySpan,ActWrkgDaysSpan,ActPRSatDaySpan,ActPRSunDaySpan,ActPRWrkgDaysSpan,DaysWorkedRate,CPFOrdinary,Age_Group,Age,OT1SysRate,OT2SysRate,CalculateCPF,CPFEmployeePerc,CPFEmployerPerc,EmployeeCPFRow,EmployerCPFRow,CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + TotalAdditions), @roundnetpay) AS DECIMAL(19, 2)) GrossWithAddition,Isnull(GrossWithOutAddition, 0) GrossWithOutAddition,Isnull(FundGrossAmount, 0) FundGrossAmount,SDLFundGrossAmount,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF,(  
                        'EmployeePayReport.aspx?qsEmpID=' + CONVERT(VARCHAR, Emp_Code) + '&qsMonth=' + CONVERT(VARCHAR, @monthidintbl) + '&qsYear=' + CONVERT(VARCHAR, @year) + '&st=' + @stdatemonth + '&en=' + @endatemonth + '&stmonth=' + @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&endmonth=' + @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&monthintbl=' + CAST(@monthidintbl AS VARCHAR)) AS MediumUrl,Time_Card_No,Fund_OptOut,SDF_Required  
          FROM   (SELECT *,CAST((Add4NW + Add4OW + Add4AW + Add4AWNOCPF + DaysWorkedRate) AS DECIMAL(19, 2)) TotalAdditions,CAST((UnPaidDeduct + UnpaidDeductPR + DedAmt + EmployeeCPFAmt + FundAmount) AS DECIMAL(19, 2)) TotalDeductions  
                  FROM   (SELECT *,Floor(EmployeeCPF) EmployeeCPFAmt,Round(((Abs(Floor(EmployeeCPF) - EmployeeCPF)) + EmployerCPF), 0) EmployerCPFAmt,FundAmount = CASE  
                                                                                                                                                                     WHEN @INTendatesubmonth >= 1 THEN dbo.Getempfundcontribution((Isnull((GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW), 0)), Isnull(FundType, ''))  
                                                                                                                                                                     ELSE 0  
                                                                                                                                                                   END,FundGrossAmount = CASE  
                                                     WHEN Fund_Optout = 0  
                                                                                                                                                                                                AND @INTendatesubmonth >= 1 THEN (GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW)-DedCPFAmt  
                                                                                                                                                                                           ELSE 0  
                                                                                                                                                                                         END,SDLFundGrossAmount = CASE  
                                                                                                                                                                                                                    WHEN SDF_Required = 2  
--                                                                                                                                                                                                                         AND (PR_Date <= @startdtsub)  
--                                                                                                                                                                                                                         AND (Emp_Type = 'SPR'  
--                                                                                                                                                                                                                               OR Emp_Type = 'SDPR'  
--                                                                                                                                                                                                                               OR Emp_Type = 'SC')  
                                                                                                                                                                                                                         --AND @INTendatesubmonth >= 16 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate)-DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)  
                                                                                                                                                                                                                         AND @INTendatesubmonth >= 1 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate + Add4AW + Add4AWNOCPF + Add4OW)-DedCPFAmt, @roundnetpay) AS DECIMAL(19, 2)), 0)  
                                                                                                                                                                                                                    ELSE 0  
                                                                                                                                                                                                                  END  
                          FROM   #FinalPre) Res) Res) Res  
  
  SELECT *  
  FROM   #Final F  
  ORDER  BY FullName  
  
  DROP TABLE #Final  
  
  DROP TABLE #FinalPre  
  
  DROP TABLE #EmployeeTemp  
  
  DROP TABLE #PRSatSunDaysTemp  
  
  DROP TABLE #SatSunDaysTemp  
  
  DROP TABLE #UnpaidFullDayPR  
  
  DROP TABLE #UnpaidHalfDayPR  
  
  DROP TABLE #PaidHalfDay  
  
  DROP TABLE #PaidFullDay  
  
  DROP TABLE #UnpaidHalfDay  
  
  DROP TABLE #UnpaidFullDay  
  
  DROP TABLE #Add4AW  
  
  DROP TABLE #Add4OW  
  
  DROP TABLE #Add4NW  
  
  DROP TABLE #EOT  
  
  DROP TABLE #PriorGenPayroll  
  
  --DROP TABLE #AWPAIDCurYear                                       
  --DROP TABLE #CYOWPaidWithCPFCeil                               
  --DROP TABLE #CYOWPaidWithCPFCeilRecal                                                                              
  --DROP TABLE #AWPAIDCurYearMonth                                       
  --DROP TABLE #LYOWPaidWithCPFCeil                                                                      
  DROP TABLE #Deduction  
  
  DROP TABLE #DeductionCPF  
  
  DROP TABLE #EmployeeWorkFlow  
  
  DROP TABLE #EmployeeWorkFlowLevel  
  
  DROP TABLE #EmployeeAssignedToPayrollGroup

  DROP TABLE #EmpPayTemp

  DROP TABLE #EmpPayTempOLD

  DROP TABLE #FundPerc

GO
-------Merging 9.0

------SET ANSI_NULLS ON
------GO
------SET QUOTED_IDENTIFIER ON
------GO
------CREATE PROC [dbo].[Sp_generatepayrolladvfullmonth] @company_id     INT,  
------                                                  @month          INT,  
------                                                  @year           INT,  
------                                                  @UserID         INT,  
------                                                  @EmpPassID      VARCHAR(200) ='',  
------                                                  @stdatemonth    VARCHAR(2),  
------                                                  @endatemonth    VARCHAR(2),  
------                                                  @stdatesubmonth VARCHAR(2),  
------                                                  @endatesubmonth VARCHAR(2),  
------                                                  @monthidintbl   INT=0  
------AS  
------  DECLARE @CPFCalculate INT  
------  DECLARE @INTendatesubmonth INT  
------  DECLARE @EmployerCPFAmt VARCHAR(200)  
------  DECLARE @EmployeeCPFAmt VARCHAR(200)  
------  DECLARE @cpfamtemployer FLOAT  
------  DECLARE @cpfamtemployee FLOAT  
------  DECLARE @select VARCHAR(8000)  
------  DECLARE @where VARCHAR(200)  
------  DECLARE @compute NVARCHAR(150)  
------  DECLARE @param1 NVARCHAR(150)  
------  DECLARE @param2 NVARCHAR(150)  
------  DECLARE @EmpID INT  
------  DECLARE @startproll VARCHAR(10)  
------  DECLARE @endproll VARCHAR(10)  
------  DECLARE @startsubpay VARCHAR(10)  
------  DECLARE @endsubpay VARCHAR(10)  
------  DECLARE @startdtsub DATETIME  
------  DECLARE @enddtsub DATETIME  
------  DECLARE @startdtproll DATETIME  
------  DECLARE @enddtproll DATETIME  
------  DECLARE @startmonth INT  
------  DECLARE @startyear INT  
------  DECLARE @TotalDaysCountPayroll_5 FLOAT  
------  DECLARE @TotalDaysCountPayroll_5p FLOAT  
------  DECLARE @TotalDaysCountPayroll_6 FLOAT  
------  DECLARE @TotalDaysCountPayroll_7 FLOAT  
------  DECLARE @TotalDaysCount_5 FLOAT  
------  DECLARE @TotalDaysCount_5p FLOAT  
------  DECLARE @TotalDaysCount_6 FLOAT  
------  DECLARE @TotalDaysCount_7 FLOAT  
------  DECLARE @NoWrkgDaysSubPay FLOAT  
------  DECLARE @RollDays FLOAT  
------  DECLARE @roundunpaid INT  
------  DECLARE @roundnetpay INT  
------  DECLARE @roundaddition INT  
------  DECLARE @rounddeduction INT  
------  DECLARE @cpfceiling FLOAT  
------  DECLARE @lastyear INT  
------  DECLARE @AWCeiling FLOAT  
------  DECLARE @dt_date DATETIME  
------  DECLARE @lastdaymonth VARCHAR(2)  
------  DECLARE @ID AS INT  
------  DECLARE @WorkFlowID AS INT  
------  DECLARE @RowID AS INT  
------  Declare @payrolltype as int  
------  
------  SELECT @CPFCalculate = CPFCalculate , @payrolltype=PayType   
------  FROM   payrollmonthlydetail  
------  WHERE  ROWID = @monthidintbl  
------  
------  SET @INTendatesubmonth = CONVERT(INT, @endatesubmonth)  
------  
------  DECLARE @CPFAWCALC TABLE (  
------      Emp_Code    INT,  
------      CMOW        FLOAT,  
------      LYOW        FLOAT,  
------      CYOW        FLOAT,  
------      CPFAWCIL    FLOAT,  
------      EST_AWCIL   FLOAT,  
------      ACTCIL      FLOAT,  
------      AWCM        FLOAT,  
------      AWB4CM      FLOAT,  
------      AWCM_AWB4CM FLOAT,  
------      AWCPF       FLOAT )  
------  
------  CREATE TABLE #EmployeeWorkFlowLevel  
------      (  
------           ID             INT,  
------           WORKFLOWID     INT,  
------           ROWID          INT,  
------           PAYROLLGROUPID INT  
------      )  
------  
------  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID  
------  INTO   #EmployeeWorkFlow  
------  FROM   Employee EM  
------         INNER JOIN (SELECT WL.*  
------                     FROM   EmployeeWorkFlowLevel WL  
------                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID  
------  
------  DECLARE curse CURSOR FOR  
------      SELECT *  
------      FROM   #EmployeeWorkFlow  
------  
------  OPEN curse  
------  
------  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID  
------  
------  WHILE @@FETCH_STATUS = 0  
------      BEGIN  
------          --PRINT @RowID                                               
------          INSERT INTO #EmployeeWorkFlowLevel  
------          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID  
------          FROM   EmployeeWorkFlowLevel  
------          WHERE  WorkFLowID = @WorkFLowID  
------             AND RowID <= @RowID  
------  
------          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID  
------      END  
------  
------  SELECT DISTINCT Te.ID,EG.Emp_ID  
------  INTO   #EmployeeAssignedToPayrollGroup  
------  FROM   #EmployeeWorkFlowLevel Te  
------         INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID  
------  WHERE  EG.Emp_ID = @UserID  
------  
------  CLOSE curse  
------    DEALLOCATE curse  
------  
------  SELECT TOP 1 @lastdaymonth = dateinyear  
------  FROM   (SELECT CONVERT(FLOAT, Datename(dd, DateInYear)) dateinyear  
------          FROM   DateInYear  
------          WHERE  MONTH(DateInYear) = @month  
------             AND Datename(yy, DateInYear) = @year) DY  
------  ORDER  BY dateinyear DESC  
------  
------  SET @AWCeiling = 76500  
------  SET @startproll = @stdatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
------  SET @endproll = @endatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
------  SET @startsubpay = @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
------  SET @endsubpay = @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
------  SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)  
------  SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)  
------  SET @startdtproll = CONVERT(DATETIME, @startproll, 103)  
------  SET @enddtproll = CONVERT(DATETIME, @endproll, 103)  
------  SET @startmonth = MONTH(@startdtsub)  
------  SET @startyear = YEAR(@startdtsub)  
------  SET @RollDays = (Datediff(dw, @startdtproll, @enddtproll) + 1)  
------  SET @lastyear = @startyear - 1  
------  SET @dt_date = CONVERT(DATETIME, @startsubpay, 103)  
------  SET @param1 = N'@cpfamtemployer float output'  
------  SET @param2 = N'@cpfamtemployee float output'  
------  SET @NoWrkgDaysSubPay = (Datediff(dw, @startdtsub, @enddtsub) + 1)  
------  
------  IF Len(@EmpPassID) > 0  
------      BEGIN  
------          SELECT @where = 'Where Emp_Code Not In (' + @EmpPassID + ')'  
------      END  
------  
------  SELECT @cpfceiling = monthly_cpf_ceil,@roundunpaid = basicrnd,@roundnetpay = netpayrnd,@roundaddition = additionsrnd,@rounddeduction = deductionsrnd  
------  FROM   Company  
------  WHERE  Company_ID = @company_id  
------  
------  -- Dump The Required Employees in one Temp Table                                                                                                                                                
------  SELECT Emp_Code,Emp_Name,Emp_Lname,IC_PP_NUMBER,Sex,Emp_Group_Id,Race_ID,Dept_Id,Date_Of_Birth,Joining_Date,Termination_Date,PR_Date = CASE  
------                                                                                                                                           WHEN Emp_Type = 'SC' THEN CONVERT(DATETIME, '01/01/1910', 103)  
------                                                                                                                                           ELSE PR_Date  
------                                                                                                                                         END,Emp_Type,CPF_Entitlement,OT_Entitlement,Payment_Mode,Pay_Frequency,EmpCPFType,Wdays_per_Week,Hourly_Rate_Mode,Hourly_Rate,Daily_Rate_Mode,Daily_Rate,PayRateCust=CASE  
------                                                                                                                                                                                                                                                               
------                                                 WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.Payrate)))  
------                                                                                                                                                                                                                                                               
------                                                 ELSE 0  
------                                                                                                                                                                                                                                                               
------                                               END,Round(CAST(Isnull(Datediff(m, Isnull(date_of_birth, 0), @dt_date), 0) AS FLOAT) / 12, 2) Age,dbo.Fn_getagegroup(Em.Emp_Code, @dt_date) AS Age_Group,FundType = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                      WHEN (Emp_Type = 'SPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                         AND Fund_OptOut = 0  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%CHIN%' THEN 
------'CDAC'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                  AND Fund_OptOut = 0  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%MALAY%' THEN
------ 'MBMF'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                         AND Fund_OptOut = 0  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%INDIA%' THEN
------ 'SINDA'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                  OR Emp_Type = 'SDPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                         AND Fund_OptOut = 0  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%EURA%' THEN 
------'ECF'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                    ELSE ''  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                  END,Giro_acct_number,giro_bank,CalculateCPF =
------ CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------   WHEN (CPF_Entitlement = 'Y'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------         AND (Emp_Type = 'SPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------               OR Emp_Type = 'SDPR'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------               OR Emp_Type = 'SC')) THEN 'Y'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------   ELSE 'N'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------ END,OT1Rate,Ot2Rate,OT1Rate OT1SysRate,OT2Rate OT2SysRate,Isnull(Pay_supervisor, 0) Pay_supervisor,sdf_required,time_card_no,Fund_Optout  
------  INTO   #EmployeeTemp  
------  FROM   Employee Em  
------         INNER JOIN Race Ra ON Em.Race_ID = Ra.ID  
------  WHERE  (Em.Payrate IS NOT NULL)  And PayrollType=@payrolltype  
------     AND (Em.Joining_Date <= @enddtsub)  
------     AND (Em.Termination_Date IS NULL  
------           OR (Em.termination_date >= @startdtsub))  
------     AND (Em.Company_id = @company_id)  
------     AND (Em.StatusID = 1  
------           OR (Em.StatusID = 2  
------               AND @enddtsub <= Em.termination_date)  
------           OR (Em.StatusID = 2  
------               AND Em.termination_date >= @startdtsub  
------               AND Em.termination_date <= @enddtsub));
------
------WITH EPHOLD AS 
------(
------	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate) AS 'RowNo', 
------	ID, Emp_ID, PayRate
------	FROM EmployeePayHistory  Where FromDate >@enddtsub
------)
------Select	Emp_ID,
------		PayRateCust=CASE
------		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
------		ELSE 0
------		END
------Into #EmpPayTempOLD From EPHOLD Where RowNo = 1 And PayRate is not null
------
------UPDATE E
------SET    PayRateCust = ET.PayRateCust
------FROM   #EmployeeTemp E
------INNER JOIN #EmpPayTempOLD ET ON E.Emp_Code = ET.Emp_ID;
------  
------
------WITH EPH AS 
------(
------	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate Desc) AS 'RowNo', 
------	ID, Emp_ID, PayRate
------	FROM EmployeePayHistory  Where FromDate <=@enddtsub
------)
------Select	Emp_ID,
------		PayRateCust=CASE
------		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
------		ELSE 0
------		END
------Into #EmpPayTemp From EPH Where RowNo = 1 And PayRate is not null
------
------
------UPDATE E
------SET    PayRateCust = ET.PayRateCust
------FROM   #EmployeeTemp E
------INNER JOIN #EmpPayTemp ET ON E.Emp_Code = ET.Emp_ID
------
------  SELECT @select = 'Delete From #EmployeeTemp ' + @where  
------  
------  EXEC (@select)  
------  
------  --SELECT   @select = 'Delete From #EmployeeTemp Where Emp_Code IN (SELECT  pd.Emp_ID                  
------  --FROM    prepare_payroll_hdr ph INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID WHERE   pd.[Status] != ''R'' AND MONTH(ph.start_period) = '+ Convert(Varchar,@startmonth) + ' AND YEAR(ph.start_period) = ' + Convert(Varchar,@startyear) + ')
------  
------  --EXEC (@select)                                 
------  --Exclusive for Full MONTH START                                                        
------  --  Delete From #EmployeeTemp Where Emp_Code IN                                       
------  --    (                                      
------  --    SELECT  pd.Emp_ID  FROM    prepare_payroll_hdr ph INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID                                       
------  --  WHERE   pd.[Status] != 'R'                                       
------  --      --AND MONTH(ph.start_period) = Convert(Varchar,@startmonth)                               
------  --      AND (ph.start_period >= @startdtsub And ph.end_period <= @enddtsub)                                  
------  --      AND YEAR(ph.start_period) = Convert(Varchar,@startyear))                                      
------  --Exclusive for Full MONTH END                                
------  DELETE FROM #EmployeeTemp  
------  WHERE  Pay_supervisor NOT IN (SELECT ID  
------                                FROM   #EmployeeAssignedToPayrollGroup)  
------     AND (Pay_supervisor > 0)  
------  
------  --Delete From #EmployeeTemp                                                                      
------  --Where Emp_Code Not In                                        
------  --(                                                                      
------  -- Select Emp_Code From                                                                    
------  -- (                                                                    
------  --  Select EM.Emp_Code,WL.WorkFlowID From EmployeeWorkFlowLevel WL                                                                    
------  --  Inner Join Employee EM On WL.ID = EM.Pay_supervisor                                                                 
------  --  Where WL.FlowType=1 And (EM.Pay_supervisor is not null or EM.Pay_supervisor > 0 )                                                                 
------  -- ) Re Inner Join #WLTemp WL On Re.WorkFlowID=WL.WorkFlowID                                                                    
------  --) And (Pay_supervisor is not null or Pay_supervisor > 0)                                                                      
------  --Start Here on 7th Jan 2010...1757                                    
------  --Calculate Total No of Public Holidays in Payroll Period                                                                                   
------  DECLARE @PUBLICHOLIDAYSMONTH FLOAT  
------  DECLARE @PUBLICHOLIDAYSBYMONTH FLOAT  
------  
------  SELECT @PUBLICHOLIDAYSMONTH = COUNT(Holiday_Date)  
------  FROM   Public_Holidays PH  
------  WHERE  (PH.Holiday_Date >= @startdtproll  
------          AND PH.Holiday_Date <= @enddtproll)  
------     AND (Datepart(weekday, Holiday_Date) != 1  
------          AND Datepart(weekday, Holiday_Date) != 7)  
------	 And (CompanyID=@company_id Or CompanyID=-1)
------  
------  SELECT @PUBLICHOLIDAYSBYMONTH = COUNT(Holiday_Date)  
------  FROM   Public_Holidays PH  
------  WHERE  (PH.Holiday_Date >= @startdtsub  
------          AND PH.Holiday_Date <= @enddtsub)  
------     AND (Datepart(weekday, Holiday_Date) != 1  
------          AND Datepart(weekday, Holiday_Date) != 7)  
------	 And (CompanyID=@company_id Or CompanyID=-1)
------  
------  --CONSIDER 0 to PH in PAYROLL @PUBLICHOLIDAYSMONTH and @PUBLICHOLIDAYSBYMONTH                    
------  SET @PUBLICHOLIDAYSMONTH = 0  
------  SET @PUBLICHOLIDAYSBYMONTH = 0  
------  
------  --Calculate Total No of Working Days in Payroll Period                                                                                   
------  SELECT @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSMONTH  
------  FROM   (SELECT TotalDaysCount_5 = CASE  
------                                      WHEN (R.DaysPattern_5 = 5  
------                                            AND (R.[WeekDay] = 1  
------                                                  OR R.[WeekDay] = 7)) THEN 0  
------                                      ELSE R.CntDay  
------                                    END,TotalDaysCount_5p = CASE  
------                                                              WHEN (R.DaysPattern_5p = 5.5  
------                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)  
------                                                              WHEN (R.DaysPattern_5p = 5.5  
------                                                                    AND (R.[WeekDay] = 1)) THEN 0  
------                                                              ELSE R.CntDay  
------                                                            END,TotalDaysCount_6 = CASE  
------                                                                                     WHEN (R.DaysPattern_6 = 6  
------                                                         AND (R.[WeekDay] = 1)) THEN 0  
------                                                                                     ELSE R.CntDay  
------                                                                                   END,TotalDaysCount_7 = CASE  
------                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay  
------                                                                                                          END  
------          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7  
------                  FROM   DateInYear Dt  
------                  WHERE  (Dt.DateInYear >= @startdtproll  
------                      AND Dt.DateInYear <= @enddtproll)  
------                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res  
------  
------  --Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens                                                             
------  SELECT @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSBYMONTH  
------  FROM   (SELECT TotalDaysCount_5 = CASE  
------                                      WHEN (R.DaysPattern_5 = 5  
------                                            AND (R.[WeekDay] = 1  
------                                                  OR R.[WeekDay] = 7)) THEN 0  
------                                      ELSE R.CntDay  
------                                    END,TotalDaysCount_5p = CASE  
------                                                              WHEN (R.DaysPattern_5p = 5.5  
------                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)  
------                                                              WHEN (R.DaysPattern_5p = 5.5  
------                                                                    AND (R.[WeekDay] = 1)) THEN 0  
------                                                              ELSE R.CntDay  
------                                                            END,TotalDaysCount_6 = CASE  
------                                                                                     WHEN (R.DaysPattern_6 = 6  
------                                                                                           AND (R.[WeekDay] = 1)) THEN 0  
------                                                                                     ELSE R.CntDay  
------                                                                                   END,TotalDaysCount_7 = CASE  
------                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay  
------                                                                                                          END  
------          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7  
------                  FROM   DateInYear Dt  
------                  WHERE  (Dt.DateInYear >= @startdtsub  
------                      AND Dt.DateInYear <= @enddtsub)  
------                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res  
------  
------  --Calculate Total No of Working Days in Payroll Period                                                              
------  --       SELECT   @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5),                                                
------  --                @TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p),                                                
------  --      @TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6),                                                
------  --                @TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7)                                                
------  --       FROM     (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND                                                
------  --                                                      (R.[WeekDay] = 1 OR                                                
------  --                                                       R.[WeekDay] = 7                                                
------  --                 )                                                
------  --                                            ) THEN 0                                                
------  --                                                ELSE R.CntDay                                                
------  --                                           END ,                                                
------  --                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND                                                
------  --                                                       (R.[WeekDay] = 7)                                                
------  --                                  ) THEN (R.CntDay / 2)                                                
------  --                                           WHEN (R.DaysPattern_5p = 5.5 AND                                                
------  --                                                       (R.[WeekDay] = 1)                                                
------  --               ) THEN 0                                 
------  --                          ELSE R.CntDay                                                
------  --                                            END ,                                                
------  --                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND                                                
------  --                                                      (R.[WeekDay] = 1)                                                
------  --                                                     ) THEN 0                                                
------  --            ELSE R.CntDay                                                
------  --                                           END ,                                                
------  --                        TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay                                                
------  --                                           END                                                
------  --                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],                                                
------  --                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,                                                
------  --          6 DaysPattern_6, 7 DaysPattern_7                                                
------  --                         FROM   DateInYear Dt                                                
------  --                         WHERE  (Dt.DateInYear >= @startdtproll AND                                                
------  --                                 Dt.DateInYear <= @enddtproll                                                
------  --                                )                                                
------  --                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)                                                
------  --                        ) R                                                
------  --                ) Res                 
------  --                                                                                                    
------  --                                                                                                                                
------  ----Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens           
------  --       SELECT   @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5), @TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p),                                                
------  --                @TotalDaysCount_6 = SUM(Res.TotalDaysCount_6), @TotalDaysCount_7 = SUM(Res.TotalDaysCount_7)                                                
------  --       FROM (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND                                                
------  --                                                      (R.[WeekDay] = 1 OR                                                
------  --                                                       R.[WeekDay] = 7                                                
------  --               )                                                
------  --                                                     ) THEN 0                                                
------  --                                                ELSE R.CntDay                                                
------  --                                           END ,                                    
------  --                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND                                                
------  --                                                       (R.[WeekDay] = 7)                                                
------  --                                       ) THEN (R.CntDay / 2)                                                
------  --                                                 WHEN (R.DaysPattern_5p = 5.5 AND                                                
------  --                                                       (R.[WeekDay] = 1)                                                
------  --                                                      ) THEN 0                        
------  --                                                 ELSE R.CntDay                                                
------  --       END ,                                                
------  --                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND                                                
------  --                                                      (R.[WeekDay] = 1)                                                
------  --                                                     ) THEN 0                                                
------  --                                                ELSE R.CntDay                                                
------  --                                           END ,                                                
------  --       TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay                                                
------  --                                           END                                               
------  --                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],                                                
------  --                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,                                                
------  --                                6 DaysPattern_6, 7 DaysPattern_7                                                
------  --                   FROM   DateInYear Dt                                                
------  --            WHERE  (Dt.DateInYear >= @startdtsub AND                                     
------  --                                 Dt.DateInYear <= @enddtsub                                                
------  --                                )                                                
------  --                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)                                                
------  --                        ) R                                                
------  --                ) Res                                              
------  --End Here on 7th Jan 2010...1757                                                                          
------  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is a PR and works during PR Period.                                                                                                                                           
------    
------  SELECT E.Emp_Code,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.Joining_Date >= E.PR_Date AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR  
------                     (E.PR_Date IS NOT  
------                     NULL AND  
------                     E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date > @startdtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND E.PR_Date < @startdtsub AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date <= @startdtsub AND E.PR_Date >= @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) ))) ActPRSatDaySpan,  
------                (SELECT COUNT(Datepart(weekday, DateInYear))  
------                 FROM   DateInYear Dt  
------                 WHERE  (E.PR_Date IS NOT NULL  
------                     AND E.Termination_Date IS NULL  
------                     AND E.PR_Date >= @startdtsub  
------                     AND E.PR_Date <= @enddtsub  
------                     AND E.Joining_Date < @startdtsub  
------                     AND Dt.DateInYear >= E.PR_Date  
------                     AND Dt.DateInYear <= @enddtsub  
------                     AND (Datepart(weekday, DateInYear) = 1))  
------                     OR (E.PR_Date IS NOT NULL  
------                         AND E.Termination_Date IS NULL  
------                         AND E.PR_Date >= @startdtsub  
------                         AND E.PR_Date <= @enddtsub  
------                         AND E.Joining_Date >= @startdtsub  
------                         AND E.Joining_Date <= @enddtsub  
------                         AND E.PR_Date >= E.Joining_Date  
------                         AND Dt.DateInYear >= E.PR_Date  
------                         AND Dt.DateInYear <= @enddtsub  
------                         AND (Datepart(weekday, DateInYear) = 1))  
------                     OR (E.PR_Date IS NOT NULL  
------                         AND E.Termination_Date IS NULL  
------                         AND E.PR_Date >= @startdtsub  
------                         AND E.PR_Date <= @enddtsub  
------                         AND E.Joining_Date >= @startdtsub  
------                         AND E.Joining_Date <= @enddtsub  
------                         AND E.Joining_Date >= E.PR_Date  
------                         AND Dt.DateInYear >= E.Joining_Date  
------                         AND Dt.DateInYear <= @enddtsub  
------                         AND (Datepart(weekday, DateInYear) = 1))  
------                     OR (E.PR_Date IS NOT NULL  
------                         AND E.Termination_Date IS NOT NULL  
------                         AND E.Termination_Date >= @startdtsub  
------                         AND E.Termination_Date <= @enddtsub  
------                         AND E.Joining_Date > @startdtsub  
------                         AND E.PR_Date >= E.Joining_Date  
------                         AND Dt.DateInYear >= E.PR_Date  
------                         AND Dt.DateInYear <= E.Termination_Date  
------                         AND (Datepart(weekday, DateInYear) = 1))  
------                     OR (E.PR_Date IS NOT NULL  
------                         AND E.Termination_Date IS NOT NULL  
------                         AND E.Termination_Date >= @startdtsub  
------                         AND E.Termination_Date <= @enddtsub  
------                         AND E.Joining_Date < @startdtsub  
------                         AND E.PR_Date < @startdtsub  
------                         AND Dt.DateInYear >= @startdtsub  
------                         AND Dt.DateInYear <= E.Termination_Date  
------                         AND (Datepart(weekday, DateInYear) = 1))  
------                     OR (E.PR_Date IS NOT NULL  
------                         AND E.Termination_Date IS NOT NULL  
------                         AND E.Termination_Date >= @startdtsub  
------                         AND E.Termination_Date <= @enddtsub  
------                         AND E.Joining_Date <= @startdtsub  
------                         AND E.PR_Date >= @startdtsub  
------                         AND Dt.DateInYear >= E.PR_Date  
------                         AND Dt.DateInYear <= E.Termination_Date  
------                         AND (Datepart(weekday, DateInYear) = 1))) ActPRSunDaySpan  
------  INTO   #PRSatSunDaysTemp  
------  FROM   #EmployeeTemp E  
------  
------  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is not PR and works during PR Period.                                                                                                                        
------  SELECT Emp_Code,(SELECT COUNT(Datepart(weekday, DateInYear))  
------                   FROM   DateInYear Dt  
------                   WHERE  (((E.Termination_Date >= @startdtsub  
------                             AND E.Termination_Date <= @enddtsub)  
------                            AND E.Joining_Date >= @startdtsub)  
------                       AND Dt.DateInYear >= E.Joining_Date  
------                       AND Dt.DateInYear <= E.Termination_Date  
------                       AND (Datepart(weekday, DateInYear) = 1))  
------                       OR (((E.Termination_Date >= @startdtsub  
------                             AND E.Termination_Date <= @enddtsub)  
------                            AND E.Joining_Date < @startdtsub)  
------                           AND Dt.DateInYear >= @startdtsub  
------                           AND Dt.DateInYear <= E.Termination_Date  
------                           AND (Datepart(weekday, DateInYear) = 1))  
------                       OR ((E.Termination_Date IS NULL  
------                            AND (E.Joining_Date > @startdtsub  
------                                 AND E.Joining_Date <= @enddtsub))  
------                           AND Dt.DateInYear >= E.Joining_Date  
------                           AND Dt.DateInYear <= @enddtsub  
------                           AND (Datepart(weekday, DateInYear) = 1))  
------                       OR ((E.Termination_Date IS NULL  
------                            AND (E.Joining_Date < @startdtsub))  
------                           AND Dt.DateInYear >= @startdtsub  
------                           AND Dt.DateInYear <= @enddtsub  
------                           AND (Datepart(weekday, DateInYear) = 1))  
------                       OR ((E.Termination_Date > @enddtsub  
------                            AND E.Joining_Date < @startdtsub)  
------                           AND Dt.DateInYear >= @startdtsub  
------                           AND Dt.DateInYear <= @enddtsub  
------                           AND (Datepart(weekday, DateInYear) = 1))) ActSunDaySpan,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date >= @startdtsub ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date < @startdtsub ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date > @startdtsub AND E.Joining_Date <= @enddtsub ) ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date < @startdtsub) ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday,  
------                                                                                    DateInYear) = 7) ) OR ((E.Termination_Date > @enddtsub AND E.Joining_Date < @startdtsub )  
------                                                                                    AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) ))) ActSatDaySpan  
------  INTO   #SatSunDaysTemp  
------  FROM   #EmployeeTemp E  
------  
------  -- Calculate Unpaid FullDay for the Employees who took leaves during the PR Period                                                                                                                
------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) UnpaidFullDayPR  
------  INTO   #UnpaidFullDayPR  
------  FROM   Emp_Leaves el  
------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
------         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code  
------  WHERE  (Eld.Leave_Date >= @startdtsub  
------          AND Eld.Leave_Date <= @enddtsub)  
------     AND (Eld.unpaid_leave = 1  
------          AND eld.halfday_leave = 0)  
------     AND El.Status = 'Approved'  
------     AND ((E.PR_Date IS NOT NULL  
------           AND E.Termination_Date IS NULL  
------           AND E.PR_Date >= @startdtsub  
------           AND E.PR_Date <= @enddtsub  
------           AND E.Joining_Date < @startdtsub  
------           AND Eld.Leave_Date >= E.PR_Date  
------           AND Eld.Leave_Date <= @enddtsub)  
------           OR (E.PR_Date IS NOT NULL  
------               AND E.Termination_Date IS NULL  
------               AND E.PR_Date >= @startdtsub  
------               AND E.PR_Date <= @enddtsub  
------               AND E.Joining_Date >= @startdtsub  
------               AND E.Joining_Date <= @enddtsub  
------               AND E.PR_Date >= E.Joining_Date  
------               AND Eld.Leave_Date >= E.PR_Date  
------               AND Eld.Leave_Date <= @enddtsub)  
------           OR (E.PR_Date IS NOT NULL  
------               AND E.Termination_Date IS NOT NULL  
------               AND E.Termination_Date >= @startdtsub  
------               AND E.Termination_Date <= @enddtsub  
------               AND E.Joining_Date > @startdtsub  
------               AND E.PR_Date >= E.Joining_Date  
------               AND Eld.Leave_Date >= E.PR_Date  
------               AND Eld.Leave_Date <= E.Termination_Date)  
------           OR (E.PR_Date IS NOT NULL  
------               AND E.Termination_Date IS NOT NULL  
------               AND E.Termination_Date >= @startdtsub  
------               AND E.Termination_Date <= @enddtsub  
------               AND E.Joining_Date < @startdtsub  
------               AND E.PR_Date < @startdtsub  
------               AND Eld.Leave_Date >= @startdtsub  
------               AND Eld.Leave_Date <= E.Termination_Date))  
------  GROUP  BY El.Emp_Id  
------  
------  -- Calculate Unpaid Half Day for the Employees who took leaves during the PR Period                                                            
------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 UnpaidHalfDayPR  
------  INTO   #UnpaidHalfDayPR  
------  FROM   Emp_Leaves el  
------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
------         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code  
------  WHERE  (Eld.Leave_Date >= @startdtsub  
------          AND Eld.Leave_Date <= @enddtsub)  
------     AND (Eld.unpaid_leave = 1  
------          AND eld.halfday_leave = 1)  
------     AND El.Status = 'Approved'  
------     AND ((E.PR_Date IS NOT NULL  
------           AND E.Termination_Date IS NULL  
------  AND E.PR_Date >= @startdtsub  
------           AND E.PR_Date <= @enddtsub  
------           AND E.Joining_Date < @startdtsub  
------           AND Eld.Leave_Date >= E.PR_Date  
------           AND Eld.Leave_Date <= @enddtsub)  
------           OR (E.PR_Date IS NOT NULL  
------               AND E.Termination_Date IS NULL  
------               AND E.PR_Date >= @startdtsub  
------               AND E.PR_Date <= @enddtsub  
------               AND E.Joining_Date >= @startdtsub  
------               AND E.Joining_Date <= @enddtsub  
------               AND E.PR_Date >= E.Joining_Date  
------               AND Eld.Leave_Date >= E.PR_Date  
------               AND Eld.Leave_Date <= @enddtsub)  
------           OR (E.PR_Date IS NOT NULL  
------               AND E.Termination_Date IS NOT NULL  
------               AND E.Termination_Date >= @startdtsub  
------               AND E.Termination_Date <= @enddtsub  
------               AND E.Joining_Date > @startdtsub  
------               AND E.PR_Date >= E.Joining_Date  
------               AND Eld.Leave_Date >= E.PR_Date  
------               AND Eld.Leave_Date <= E.Termination_Date)  
------           OR (E.PR_Date IS NOT NULL  
------               AND E.Termination_Date IS NOT NULL  
------               AND E.Termination_Date >= @startdtsub  
------               AND E.Termination_Date <= @enddtsub  
------               AND E.Joining_Date < @startdtsub  
------               AND E.PR_Date < @startdtsub  
------               AND Eld.Leave_Date >= @startdtsub  
------               AND Eld.Leave_Date <= E.Termination_Date))  
------  GROUP  BY El.Emp_Id  
------  
------  -- Calculate Paid Half Day for the Employees who took leaves during working days                                                                                                                                                
------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 PaidHalfDay  
------  INTO   #PaidHalfDay  
------  FROM   Emp_Leaves el  
------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
------  WHERE  (Eld.Leave_Date >= @startdtsub  
------          AND Eld.Leave_Date <= @enddtsub)  
------     AND (Eld.unpaid_leave = 0  
------          AND eld.halfday_leave = 1)  
------     AND El.Status = 'Approved'  
------  GROUP  BY El.Emp_Id  
------  
------  -- Calculate Paid Full Day for the Employees who took leaves during working days                                                                                                                                                
------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) PaidFullDay  
------  INTO   #PaidFullDay  
------  FROM   Emp_Leaves el  
------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
------  WHERE  (Eld.Leave_Date >= @startdtsub  
------          AND Eld.Leave_Date <= @enddtsub)  
------     AND (Eld.unpaid_leave = 0  
------          AND eld.halfday_leave = 0)  
------     AND El.Status = 'Approved'  
------  GROUP  BY El.Emp_Id  
------  
------  -- Calculate UnPaid Half Day for the Employees who took leaves during working days                                                                                                                                                
------  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) / 2 UnpaidHalfDay  
------  INTO   #UnpaidHalfDay  
------  FROM   Emp_Leaves el  
------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
------  WHERE  (Eld.Leave_Date >= @startdtsub  
------          AND Eld.Leave_Date <= @enddtsub)  
------     AND (Eld.unpaid_leave = 1  
------          AND eld.halfday_leave = 1)  
------     AND El.Status = 'Approved'  
------  GROUP  BY El.Emp_Id  
------  
------  -- Calculate UnPaid Full Day for the Employees who took leaves during working days                                                                                                                                                
------  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) UnpaidFullDay  
------  INTO   #UnpaidFullDay  
------  FROM   Emp_Leaves el  
------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
------  WHERE  (Eld.Leave_Date >= @startdtsub  
------          AND Eld.Leave_Date <= @enddtsub)  
------     AND (Eld.unpaid_leave = 1  
------          AND eld.halfday_leave = 0)  
------     AND El.Status = 'Approved'  
------  GROUP  BY El.Emp_Id  
------  
------  --Calc Deduction Amounts For Employees                                                                                      
------  SELECT Emp_Code,SUM(trx_amount) DedAmt  
------  INTO   #Deduction  
------  FROM   Emp_Deductions ED  
------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
------  WHERE  (--MONTH(trx_period) = @startmonth AND                                                    
------         (trx_period >= @startdtsub  
------          AND trx_period <= @enddtsub)  
------         AND YEAR(trx_period) = @startyear)  
------		And ((ED.FundType is NULL OR ED.FundType = 0) Or (ED.FundType >=5 And ED.FundType <=8)) --Added on Dec 6 for Auto And Manual Funds- Start  
------  GROUP  BY Emp_Code  
------  
------  --Calc Deduction Amounts Applicable CPF on Deduction For Employees                                                            
------  SELECT ED.Emp_Code,SUM(ED.trx_amount) DedCPFAmt  
------  INTO   #DeductionCPF  
------  FROM   Emp_Deductions ED  
------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
------  WHERE  (--MONTH(ED.trx_period) = @startmonth AND                                                
------         (trx_period >= @startdtsub  
------          AND trx_period <= @enddtsub)  
------         AND YEAR(ED.trx_period) = @startyear)  
------         AND DT.CPF = 'Yes'  
------  GROUP  BY Emp_Code  
------  
------  --Calc Add for Wages  when CPF Yes                                                                                         
------  SELECT Emp_Code,SUM(trx_amount) Add4AW  
------  INTO   #Add4AW  
------  FROM   emp_additions EA  
------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
------  WHERE  --Status='L' And                                                  
------  (--MONTH(trx_period) = @startmonth AND                                                  
------  (trx_period >= @startdtsub  
------   AND trx_period <= @enddtsub)  
------  AND YEAR(trx_period) = @startyear)  
------  AND AT.CPF = 'Yes'  
------  AND AT.Type_Of_Wage = 'A'  
------  AND (EA.ClaimStatus = 'Approved'  
------        OR EA.ClaimStatus IS NULL)  
------  GROUP  BY Emp_Code  
------  
------  --Calc Add for Wages  when CPF NO                                                                                         
------  SELECT Emp_Code,SUM(trx_amount) Add4AWNOCPF  
------  INTO   #Add4AWNOCPF  
------  FROM   emp_additions EA  
------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
------  WHERE  --Status='L' And                                                  
------  (--MONTH(trx_period) = @startmonth AND                                                  
------  (trx_period >= @startdtsub  
------   AND trx_period <= @enddtsub)  
------  AND YEAR(trx_period) = @startyear)  
------  AND AT.CPF = 'No'  
------  AND AT.Type_Of_Wage = 'A'  
------  AND (EA.ClaimStatus = 'Approved'  
------        OR EA.ClaimStatus IS NULL)  
------  GROUP  BY Emp_Code  
------  
------  --Calc Add For Ordinary Wages                                                                                                                                                
------  SELECT Emp_Code,SUM(trx_amount) Add4OW  
------  INTO   #Add4OW  
------  FROM   emp_additions EA  
------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
------  WHERE  --Status='L' And                                                                                                                            
------  (--MONTH(trx_period) = @startmonth AND                        
------  (trx_period >= @startdtsub  
------   AND trx_period <= @enddtsub)  
------  AND YEAR(trx_period) = @startyear)  
------  AND AT.CPF = 'Yes'  
------  AND (AT.Type_Of_Wage = 'O'  
------        OR AT.Type_Of_Wage IS NULL)  
------  AND (EA.ClaimStatus = 'Approved'  
------        OR EA.ClaimStatus IS NULL)  
------  GROUP  BY Emp_Code  
------  
------  --Calc Add For Normal Wages                                                                              
------  SELECT Emp_Code,SUM(trx_amount) Add4NW  
------  INTO   #Add4NW  
------  FROM   emp_additions EA  
------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
------  WHERE  --Status='L' And                                                                                                                      
------  (--MONTH(trx_period) = @startmonth AND                                                    
------  (trx_period >= @startdtsub  
------   AND trx_period <= @enddtsub)  
------  AND YEAR(trx_period) = @startyear)  
------  AND AT.CPF = 'No'  
------  AND (AT.Type_Of_Wage = 'O'  
------        OR AT.Type_Of_Wage IS NULL)  
------  AND (EA.ClaimStatus = 'Approved'  
------        OR EA.ClaimStatus IS NULL)  
------  GROUP  BY Emp_Code  
------  
------  --Calc Employee Overtime                                                                                                     
------  SELECT Emp_Code,dbo.Converttohours(SUM(dbo.Converttominutes(overtime1))) overtime1,dbo.Converttohours(SUM(dbo.Converttominutes(overtime2))) overtime2,SUM(Days_Work) Days_Work,dbo.Converttohours(SUM(dbo.Converttominutes(NH_Work))) NH_Work  
------  INTO   #EOT  
------  FROM   emp_overtime  
------  WHERE  ((--Trx_Month = @monthidintbl AND                                                
------          (payrollstdate >= @startdtsub  
------           AND payrollstdate <= @enddtsub)  
------          AND Trx_Year = @startyear)  
------           OR Trx_Month IS NULL)  
------  GROUP  BY Emp_Code  
------  
------  --Select @TotalDaysCount_5,@TotalDaysCount_5p,@TotalDaysCount_6,@TotalDaysCount_7                                                                                                        
------  SELECT *,([Basic] - TotalUnPaid) ActualBasic,CPFOrdinary = CASE  
------                                                               WHEN (CPF = 'Y'  
------                                                                     AND Emp_Type = 'SPR'  
------                                                                      OR Emp_Type = 'SDPR'  
------                                                                      OR Emp_Type = 'SC')  
------                                                                    AND [BasicPR] <= 0 THEN (([Basic] - TotalUnPaid) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)  
------                                                               ELSE (([BasicPR] - UnpaidDeductPR) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)  
------                                                             END,GrossWithOutAddition = CASE  
------                                                                                          WHEN (CPF = 'Y'  
------                                                                                                AND Emp_Type = 'SPR'  
------                                                                                                 OR Emp_Type = 'SDPR'  
------                                                                                                 OR Emp_Type = 'SC')  
------                                                                                               AND [BasicPR] <= 0  
------                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)  
------                                                                                          WHEN (CPF = 'Y'  
------                                                                                                AND Emp_Type = 'SPR'  
------                                                                                                 OR Emp_Type = 'SDPR'  
------                                                                                                 OR Emp_Type = 'SC')  
------                                                                                               AND [BasicPR] <= 0  
------                                                                                               AND @roundnetpay = -1 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)  
------                                                                                          WHEN ([BasicPR] > 0  
------                                                                                                AND @roundnetpay = -1) THEN Isnull(CAST((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)  
------                                                                                          WHEN ([BasicPR] > 0  
------                                                                                                AND @roundnetpay >= 0) THEN Isnull(CAST(Round((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)  
------                                                                                          WHEN (Emp_Type = 'WP'  
------                                                                                                 OR Emp_Type = 'DP'  
------                                                                                                 OR Emp_Type = 'EP'  
------                                                                                                 OR Emp_Type = 'SP')  
------                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)  
------                                                                                          WHEN (Emp_Type = 'WP'  
------                                                                                                 OR Emp_Type = 'DP'  
------                                                                                                 OR Emp_Type = 'EP'  
------                                                                                                 OR Emp_Type = 'SP')  
------                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)  
------                                                                                        END  
------  INTO   #PriorGenPayroll  
------  FROM   (SELECT *,[BasicPR] = CASE  
------                                 WHEN (PR_Date >= @startdtsub)  
------                                      AND (Emp_Type = 'SPR'  
------                                            OR Emp_Type = 'SDPR'  
------                                            OR Emp_Type = 'SC') THEN Round(CONVERT(DECIMAL(8, 2), (ActPRWrkgDaysSpan * BasicDayRateWORound)), 2)  
------                                 ELSE -1  
------                               --Else Round(convert(decimal(8,2),(ActWrkgDaysSpan*BasicDayRateWORound)),2)                                                                                                                   
------                               END,[Basic] = CASE  
------                                               WHEN PayType = 'D'  
------                                                    AND CONVERT(DECIMAL(8, 2), PayRateCust) <= 0 THEN 0  
------                                               WHEN ActPRWrkgDaysSpan > 0 THEN Round(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)  
------                                               ELSE Round(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)  
------                                             END  
------          FROM   (SELECT E.Emp_Code,E.FullName,E.Emp_Type,E.DeptName,E.GroupName,E.EmployeeGiro,E.EmployerGiro,E.GiroBank,E.PRAge,E.WorkingDaysInWeek,E.OT,E.CPF,E.CPFType,E.PayType,E.Daily_rate_mode,E.Daily_Rate,E.Pay_Mode,E.Hourly_rate,E.Join_Date Join_Date,E.Term_Date Term_Date,E.Pr_date Pr_date,E.RollDays,E.WrkgDaysInRoll,E.BasicPayInRoll,E.SubPayDays,E.WrkgDaysInSubPay,E.BasicDayRate,E.BasicDayRateWORound,(E.BasicDayRate * E.ActWrkgDaysSpan) BasicNorSubPay,E.UnpaidFullDay,E.UnpaidHalfDay,E.PaidFullDay,E.PaidHalfDay,E.UnPaidDeduct,E.UnpaidFullDayPR,E.UnpaidHalfDayPR,E.UnPaidDeductPR,(E.UnPaidDeduct + E.UnPaidDeductPR) TotalUnPaid,E.Days_Work,E.NH_Work,E.OT1Rate,E.NHHrs,E.OT1Hrs,E.OT1,E.OT2Rate,E.OT2Hrs,E.OT2,E.Add4NW,E.Add4OW,E.NH,E.Add4AW,E.Add4AWNOCPF,E.AdditionalWages,E.DedAmt,E.DedCPFAmt,E.ActSatDaySpan,E.ActSunDaySpan,E.ActWrkgDaysSpan,E.ActPRSatDaySpan,E.ActPRSunDaySpan,ActPRWrkgDaysSpan = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                               WHEN (E.PR_Date IS NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                            OR E.PR_Date > @enddtsub) THEN 0  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                              AND (E.PR_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date >= @enddtsub) THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                              ActPRSatDaySpan + ActPRSunDaySpan)  
------                                                                                                                                                                                                                                WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
------                           AND E.Term_Date < @enddtsub) THEN (Datediff(dw, E.PR_Date, E.Term_Date) + 1)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                             - (  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                             ActPRSatDaySpan + ActPRSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date IS NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                 AND E.PR_Date <= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date <= @enddtsub) THEN E.ActWrkgDaysSpan  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                        AND E.PR_Date < @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date < @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, E.Term_Date) + 1)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                              - (  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                ActPRSatDaySpan + ActPRSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.PR_Date < @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                    AND E.Join_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date <= @enddtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date <= @enddtsub) THEN E.ActWrkgDaysSpan  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                              AND E.Term_Date IS NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date <= @startdtsub) THEN  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     ActPRSatDaySpan + ActPRSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date IS NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                  AND E.PR_Date
------ <= @enddtsub)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date <= @enddtsub)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                          AND E.Join_Date < E.PR_Date THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                            ActPRSatDaySpan + ActPRSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Term_Date IS NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                   AND E.PR_Date <= @enddtsub)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           AND E.Join_Date <= @enddtsub)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                          AND E.Join_Date >= E.PR_Date THEN (Datediff(dw, E.Join_Date, @enddtsub) + 1) - (  
------                                                                                                                                                                                                                                                               
------                                                                 ActPRSatDaySpan + ActPRSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     ELSE E.ActWrkgDaysSpan  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                   END,E.DaysWorkedRate,E.CalculateCPF,E.PayRateCust  
------                  FROM   (SELECT T.Emp_Code,T.FullName,T.Emp_Type,T.DeptName,T.GroupName,T.EmployeeGiro,T.EmployerGiro,T.GiroBank,T.PRAge,T.WorkingDaysInWeek,T.OT,T.CPF,T.CPFType,T.PayType,T.Daily_rate_mode,T.Daily_Rate,T.Pay_Mode,T.Hourly_rate,T.Join_Date Join_Date,T.Term_Date Term_Date,T.Pr_date Pr_date,T.RollDays,T.WrkgDaysInRoll,T.BasicPayInRoll,T.SubPayDays,T.WrkgDaysInSubPay,T.BasicDayRate,T.BasicDayRate BasicDayRateWORound,T.UnpaidFullDay,T.UnpaidHalfDay,T.PaidFullDay,T.PaidHalfDay,T.UnpaidFullDayPR,T.UnpaidHalfDayPR,T.Days_Work,T.NH_Work,T.OT1Rate,Isnull(T.NHHrs, 0) NHHrs,Isnull(T.OT1Hrs, 0) OT1Hrs,OT1 = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                WHEN @roundaddition = -1 THEN T.OT1  
------                                                                                                                                                                    ELSE Round(T.OT1, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                              END,NH = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                         WHEN @roundaddition = -1 THEN T.NH  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                         ELSE Round(T.NH, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                       END,T.OT2Rate,Isnull(T.OT2Hrs, 0) OT2Hrs,OT2 = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                        WHEN @roundaddition = -1 THEN T.OT2  
------                                                                                                                                                                                                                                                 ELSE Round(T.OT2, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                      END,Add4NW = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                     WHEN @roundaddition = -1 THEN T.Add4NW  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                     ELSE Round(T.Add4NW, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                   END,Add4OW = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                  WHEN @roundaddition = -1 THEN T.Add4OW  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                             ELSE Round(T.Add4OW, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                END,Add4AW = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                               WHEN @roundaddition = -1 THEN T.Add4AW  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                               ELSE Round(T.Add4AW, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                             END,Add4AWNOCPF = CASE  
------                                                                                                                                                                                                                                                               
------                                                                             WHEN @roundaddition = -1 THEN T.Add4AWNOCPF  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                 ELSE Round(T.Add4AWNOCPF, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                               END,AdditionalWages = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                       WHEN @roundaddition = -1 THEN T.AdditionalWages  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                       ELSE Round(T.AdditionalWages, @roundaddition)  
------                                                                                                                                                                                                                                                               
------                          END,DedAmt = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------     WHEN @rounddeduction = -1 THEN T.DedAmt  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------     ELSE Round(T.DedAmt, @rounddeduction)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------   END,DedCPFAmt = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                     WHEN @rounddeduction = -1 THEN T.DedCPFAmt  
------                                                                                                                                                                                                                                                               
------                                                                       ELSE Round(T.DedCPFAmt, @rounddeduction)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                   END,T.ActSatDaySpan,T.ActSunDaySpan,ActWrkgDaysSpan = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                           WHEN (T.Join_Date IS NULL) THEN T.WrkgDaysInSubPay  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                           WHEN (T.Join_Date <= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Term_Date IS NULL) THEN (T.WrkgDaysInSubPay)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                              WHEN (T.Join_Date > @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Term_Date IS NULL) THEN ((@RollDays - DAY(T.Join_Date) - Datediff(dw, @enddtsub, @enddtproll)) + 1) - (ActSatDaySpan + ActSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                           WHEN (T.Join_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Join_Date <= @enddtsub  
------                                                                                                                                                                                                                                                               
------                                                                             AND T.Term_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Term_Date > @enddtsub) THEN (Datediff(dw, T.Join_Date, @enddtsub) + 1) - (ActSatDaySpan + ActSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                           WHEN (T.Join_Date <= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Term_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Term_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                           WHEN (T.Join_Date >= @startdtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Join_Date <= @enddtsub  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Term_Date IS NOT NULL  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                 AND T.Term_Date <= @enddtsub) THEN (Datediff(dw, T.Join_Date, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                        ELSE T.WrkgDaysInSubPay  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                         END,T.ActPRSatDaySpan,T.ActPRSunDaySpan,UnPaidDeduct = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                  WHEN @roundunpaid = -1 THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate * (T.UnpaidFullDay + T.UnpaidHalfDay))  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                  ELSE Round(CONVERT(DECIMAL(8, 2), (Round(T.BasicDayRate, @roundunpaid) * (T.UnpaidFullDay +  
------                                                                                                                                                                                                                                                               
------                   T.UnpaidHalfDay))),  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                       @roundunpaid)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                END,UnPaidDeductPR = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                       WHEN @roundunpaid = -1 THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate *  
------                                                           (T.UnpaidFullDayPR +  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                   T.UnpaidHalfDayPR))  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                       ELSE Round(CONVERT(DECIMAL(8, 2), (Round(T.BasicDayRate, @roundunpaid) *  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                  (T.UnpaidFullDayPR  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                  +  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                           T.UnpaidHalfDayPR))),  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                            @roundunpaid)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                     END,DaysWorkedRate = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            WHEN T.PayType = 'D'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                   AND T.Daily_rate_mode = 'A'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round((  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            T.BasicDayRate * T.Days_Work),  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                              @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                  WHEN T.PayType = 'D'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND T.Daily_rate_mode = 'A'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND @roundaddition = -1 THEN (  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            T.BasicDayRate * T.Days_Work)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                 WHEN T.PayType = 'D'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND T.Daily_rate_mode = 'M'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round(  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            T.Daily_Rate * T.Days_Work,  
------                                                                                                                                                                                                                                                               
------                                                                      @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            WHEN T.PayType = 'D'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND T.Daily_rate_mode = 'M'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND @roundaddition = -1 THEN (T.Daily_Rate * T.Days_Work)  
------                                                                                                                                                                                                                  WHEN T.PayType = 'H'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round((  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            (T.Hourly_Rate / 60) *  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            dbo.Converttominutes(  
------                                                                      Isnull(T.NH_Work, 0))),  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                              @roundaddition)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            --ROUND((T.Hourly_Rate * T.NH_Work), @roundaddition)              
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            WHEN T.PayType = 'H'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                 AND @roundaddition = -1 THEN (  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            (T.Hourly_Rate / 60) * dbo.Converttominutes(  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                   Isnull(T.NH_Work, 0))  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                              )  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                            --(T.Hourly_Rate * T.NH_Work)              
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                               ELSE 0  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                          END,T.CalculateCPF,T.PayRateCust  
------                          FROM   (SELECT Em.Emp_Code,(Em.emp_name + ' ' + Em.emp_lname) FullName,Em.Emp_Type,DEPT.DeptName,EG.EmpGroupName GroupName,--Em.Sex, EG.EmpGroupName GroupName, Ic_PP_Number NRICPREPWP,                                             
------                                                    
------                                         Em.giro_acct_number EmployeeGiro,GIRO.bank_accountno EmployerGiro,giro_bank GiroBank,PRAge = CASE  
------                                                                                                                                        WHEN (Em.Emp_Type = 'SC') THEN 3  
------                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
------                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
------                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) > 24) THEN 3  
------                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
------                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
------                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) <= 12) THEN 1  
------                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
------                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
------  AND (Datediff(m, Em.pr_date, @startdtsub) > 12  
------                                                                                                                                                  AND Datediff(m, Em.pr_date, @startdtsub) <= 24) THEN 2  
------                                                                                                                                        ELSE 0  
------                                                                                                                                      END,Em.wdays_per_week WorkingDaysInWeek,Em.Ot_Entitlement OT,Em.Cpf_entitlement CPF,Em.EmpCPFtype CPFType,Em.Pay_Frequency PayType,Em.Payment_Mode Pay_Mode,Em.Joining_Date Join_Date,Em.Termination_date Term_Date,Em.Pr_date,Em.Hourly_rate,@RollDays RollDays,WrkgDaysInRoll = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCountPayRoll_5  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCountPayRoll_5p  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCountPayRoll_6  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                           WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCountPayRoll_7  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                         END,Em.PayRateCust AS BasicPayInRoll,@NoWrkgDaysSubPay SubPayDays,WrkgDaysInSubPay = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCount_5  
------																																																												WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCount_5p  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCount_6  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCount_7  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                              END,BasicDayRate 
------= CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------    WHEN (Em.wdays_per_week >= 5  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND EM.daily_rate_mode = 'M'  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND EM.daily_rate > 0) THEN Em.daily_rate  
------                                                                            WHEN (Em.wdays_per_week = 5  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------    WHEN (Em.wdays_per_week = 5  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5), @roundunpaid)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------    WHEN (Em.wdays_per_week = 5.5  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5p)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------    WHEN (Em.wdays_per_week = 5.5  
------                                                           AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5p), @roundunpaid)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------    WHEN (Em.wdays_per_week = 6  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_6)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------    WHEN (Em.wdays_per_week = 6  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_6), @roundunpaid)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------    WHEN (Em.wdays_per_week = 7  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_7)  
------                                                                                                 WHEN (Em.wdays_per_week = 7  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_7), @roundunpaid)  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------  --When (Em.wdays_per_week >= 5  And daily_rate_mode='M') Then daily_rate                                                                 
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------  END,(Isnull(UFD.UnpaidFullDay, 0) - Isnull(UFPR.UnpaidFullDayPR, 0)) UnpaidFullDay,(Isnull(UHD.UnpaidHalfDay, 0) - Isnull(UHPR.UnpaidHalfDayPR, 0)) UnpaidHalfDay,Isnull(PFD.PaidFullDay, 0) PaidFullDay,Isnull(PHD.PaidHalfDay, 0) PaidHalfDay,Isnull(UFPR.UnpaidFullDayPR, 0) UnpaidFullDayPR,Isnull(UHPR.UnpaidHalfDayPR, 0) UnpaidHalfDayPR,(Em.hourly_rate * Em.Ot1Rate) OT1Rate,EOT.Nh_Work NHHrs,EOT.overtime1 OT1Hrs,  
------                                                 CONVERT(DECIMAL(8, 2), (((Em.hourly_rate * Em.Ot1Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime1, 0)))) OT1,(Em.hourly_rate * Em.Ot2Rate) OT2Rate,EOT.overtime2 OT2Hrs,CONVERT(DECIMAL(8, 2), (((Em.hourly_rate * Em.Ot2Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime2, 0)))) OT2,CONVERT(DECIMAL(8, 2), (((Em.hourly_rate)/60) * dbo.Converttominutes(Isnull(EOT.NH_Work, 0)))) NH,  
------                                                         Days_Work = CASE  
------                                                                       WHEN Em.Pay_Frequency = 'D' THEN Isnull(EOT.Days_Work, 0)  
------                                                                       ELSE 0  
------                                                                     END,NH_Work = CASE  
------                                                                                     WHEN Em.Pay_Frequency = 'H' THEN Isnull(EOT.NH_Work, 0)  
------                                                                                     ELSE 0  
------                                                                                   END,ActSatDaySpan = CASE  
------                                                                                                         WHEN (Em.wdays_per_week = 5.5) THEN SSD.ActSatDaySpan / 2  
------                                                                                                         WHEN (Em.wdays_per_week = 6) THEN 0  
------                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0  
------                      ELSE SSD.ActSatDaySpan  
------                                                                                                       END,ActSunDaySpan = CASE  
------                                                                                                                             WHEN (Em.wdays_per_week = 7) THEN 0  
------                                                                                                                             ELSE SSD.ActSunDaySpan  
------                                                                                                                           END,ActPRSatDaySpan = CASE  
------                                                                                                                                                   WHEN (Em.wdays_per_week = 5.5) THEN SSDPR.ActPRSatDaySpan / 2  
------                                                                                                                                                   WHEN (Em.wdays_per_week = 6) THEN 0  
------                                                                                                                                                   WHEN (Em.wdays_per_week = 7) THEN 0  
------                                                                                                                                                   ELSE SSDPR.ActPRSatDaySpan  
------                                                                                                                                                 END,ActPRSunDaySpan = CASE  
------                                                                                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0  
------                                                                                                                                                                         ELSE SSDPR.ActPRSunDaySpan  
------                                                                                                                                                                       END,Isnull(Add4NW.Add4NW, 0) Add4NW,Isnull(Add4OW.Add4OW, 0) Add4OW,Isnull(Add4AW.Add4AW, 0) Add4AW,Isnull(Add4AWNOCPF.Add4AWNOCPF, 0) Add4AWNOCPF,(Isnull(Add4NW.Add4NW, 0) + Isnull(Add4OW.Add4OW, 0) + Isnull(Add4AW.Add4AW, 0)) AdditionalWages,Isnull(Ded.DedAmt, 0) DedAmt,Isnull(DCPF.DedCPFAmt, 0) DedCPFAmt,CalculateCPF,Daily_rate_mode,Daily_Rate = CASE  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          WHEN @roundunpaid = -1 THEN Daily_Rate  
------                                                                                                                                                                                                                                                               
------                                                                                                                                                                                                                                                               
------          ELSE Round(Daily_Rate, @roundunpaid)  
------                                                                                                                              END,Em.PayRateCust  
------                                  FROM   #EmployeeTemp Em  
------                                         LEFT OUTER JOIN Department DEPT ON Em.Dept_Id = DEPT.Id  
------                                         LEFT OUTER JOIN Emp_Group EG ON Em.emp_group_id = EG.Id  
------                                         LEFT OUTER JOIN GiroBanks GIRO ON Em.Payment_Mode = GIRO.ID  
------                                         LEFT OUTER JOIN Race RA ON Em.Race_Id = RA.ID  
------                                         LEFT OUTER JOIN #UnpaidFullDay UFD ON Em.Emp_Code = UFD.Emp_Id  
------                                         LEFT OUTER JOIN #UnpaidHalfDay UHD ON Em.Emp_Code = UHD.Emp_Id  
------                                         LEFT OUTER JOIN #PaidFullDay PFD ON Em.Emp_Code = PFD.Emp_Id  
------                                         LEFT OUTER JOIN #PaidHalfDay PHD ON Em.Emp_Code = PHD.Emp_Id  
------                                         LEFT OUTER JOIN #UnpaidFullDayPR UFPR ON Em.Emp_Code = UFPR.Emp_Id  
------                                         LEFT OUTER JOIN #UnpaidHalfDayPR UHPR ON Em.Emp_Code = UHPR.Emp_Id  
------                                         LEFT OUTER JOIN #EOT EOT ON Em.Emp_Code = EOT.Emp_Code  
------                                         LEFT OUTER JOIN #SatSunDaysTemp SSD ON Em.Emp_Code = SSD.Emp_Code  
------                                         LEFT OUTER JOIN #PRSatSunDaysTemp SSDPR ON Em.Emp_Code = SSDPR.Emp_Code  
------                                         LEFT OUTER JOIN #Add4NW Add4NW ON Em.Emp_Code = Add4NW.Emp_Code  
------                                         LEFT OUTER JOIN #Add4OW Add4OW ON Em.Emp_Code = Add4OW.Emp_Code  
------                                         LEFT OUTER JOIN #Add4AW Add4AW ON Em.Emp_Code = Add4AW.Emp_Code  
------                                         LEFT OUTER JOIN #Add4AWNOCPF Add4AWNOCPF ON Em.Emp_Code = Add4AWNOCPF.Emp_Code  
------                                         LEFT OUTER JOIN #Deduction Ded ON Em.Emp_Code = Ded.Emp_Code  
------                                         LEFT OUTER JOIN #DeductionCPF DCPF ON Em.Emp_Code = DCPF.Emp_Code) T) E) F) G  
------  ORDER  BY G.FullName  
------  
------  --Added on Dec 6 for Auto And Manual Funds- Start  
------  SELECT Emp_Code,FundType = Case   
------        When ED.FundType=1 Then 'CDAC'  
------        When ED.FundType=2 Then 'ECF'  
------        When ED.FundType=3 Then 'MBMF'  
------        When ED.FundType=4 Then 'SINDA'  
------        END  
------  INTO   #FundPerc  
------  FROM   Emp_Deductions ED  
------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
------  WHERE  (--MONTH(trx_period) = @startmonth AND                                                      
------         (trx_period >= @startdtsub  
------          AND trx_period <= @enddtsub)  
------         AND YEAR(trx_period) = @startyear)  
------   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))  
------  GROUP  BY Emp_Code, ED.FundType  
------  
------  
------ UPDATE P  
------ SET    P.DedAmt = isnull(P.DedAmt,0)+ isnull(EM.DedAmt,0)  
------ FROM   #PriorGenPayroll P  
------   INNER JOIN ( Select EM.Emp_Code,--F.FundType,  
------  Sum(dbo.Getempfundcontribution((Isnull((P.GrossWithOutAddition + P.Add4AW + P.Add4AWNOCPF + P.Add4OW), 0)), Isnull(F.FundType, ''))) DedAmt  
------ From #FundPerc F  
------INNER JOIN #EmployeeTemp EM ON F.Emp_Code = EM.Emp_Code  
------INNER JOIN #PriorGenPayroll P ON F.Emp_Code = P.Emp_Code  
--------Where  @INTendatesubmonth >=1 And EM.CalcFundFH = 'Y'  Group By EM.Emp_Code  
--------Removed And EM.CalcFundFH = 'Y' 
------Where  @INTendatesubmonth >=1  Group By EM.Emp_Code  
------) EM ON P.Emp_Code = EM.Emp_Code  
------  
--------Added on Dec 6 for Auto And Manual Funds- End  
------
------  --CALCULATE AW FOR CPF                                                    
------  DECLARE @EMPLID INT  
------  DECLARE @BASICEMP FLOAT  
------  DECLARE db_cursor_old CURSOR FOR  
------      SELECT Emp_Code,[BASIC]  
------      FROM   #PriorGenPayroll  
------  
------  OPEN db_cursor_old  
------  
------  FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP  
------  
------  WHILE @@FETCH_STATUS = 0  
------      BEGIN  
------          INSERT @CPFAWCALC  
------                 (Emp_Code,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWCPF)  
------          SELECT *  
------          FROM   dbo.Fn_calculatecpfaw (@company_id, @month, @year, @EMPLID, @BASICEMP)  
------  
------          FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP  
------      END  
------  
------  CLOSE db_cursor_old  
------  
------  DEALLOCATE db_cursor_old  
------  
------  --Calculate Last Year Ordinary Wage CPF, Ordinary CPF Ceiling                                                                                                                                                
------  --    SELECT  Emp_ID Emp_Code, SUM(CPFOrdinaryNet) OrdinaryWagesLY                                                            
------  --    INTO    #LYOWPaidWithCPFCeil                                                            
------  --    FROM    ( SELECT    * ,                                                            
------  --                        CPFOrdinaryNet = CASE WHEN OrdinaryWagesLY >= @cpfceiling                                    
------  --                                              THEN @cpfceiling                                                  
------  --                         ELSE OrdinaryWagesLY                                                            
------  --                                         END                                                            
------  --              FROM      ( SELECT    pd.emp_id ,                                           
------  --                                    MONTH(ph.start_period) Mth ,                                                            
------  --                                    ( pd.cpfnet - pd.cpfAdd_Additional ) OrdinaryWagesLY                                
------  --                          FROM      prepare_payroll_hdr ph                     
------  --                          INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                                            
------  --                          WHERE     pd.status = 'G' AND                                                 
------  --                             YEAR(ph.start_period) = @lastyear AND                                                            
------  --                                   pd.CPFNet > 0                                                            
------  --                        ) R                                                            
------  --            ) R                                                            
------  --    GROUP BY R.Emp_ID                                                                                                         
------  --Calculate Current Year Ordinary Wage CPF, Ordinary CPF Ceiling and Addition Wages Ceiling                                                                                                                                                
------  --    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCY) OrdinaryWagesCY                                                            
------  --    INTO    #CYOWPaidWithCPFCeil                                                            
------  --    FROM    ( SELECT    R.Emp_Code, SUM(R.OrdinaryWagesCY) OrdinaryWagesCY                                                            
------  --              FROM      ( SELECT    * ,                                                            
------  --                                    CPFOrdinaryNet = CASE WHEN OrdinaryWagesCY >= @cpfceiling                                                            
------  --                                                          THEN @cpfceiling                                                            
------  --                  ELSE OrdinaryWagesCY                                                            
------  --                                                   END                                                            
------  --                          FROM      ( SELECT    pd.emp_id Emp_Code ,                                                            
------  --                                                MONTH(ph.start_period) Mth ,                                            
------  --                               ( pd.cpfnet -                                                            
------  --                                                  pd.cpfAdd_Additional ) OrdinaryWagesCY                                                            
------  --  FROM      prepare_payroll_hdr ph                                             
------  --                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                                            
------  --                                      WHERE     pd.status = 'G' AND                                                           
------  --                                                MONTH(ph.start_period) <= @startmonth AND                                                            
------  --                                                YEAR(ph.start_period) = @startyear AND                                                            
------  --                                                pd.CPFNet > 0                                                            
------  --             ) D                                                            
------  --                        ) AS R                                                            
------  --         GROUP BY  R.Emp_Code                                                            
------  --            ) D                                                            
------  --    GROUP BY Emp_Code                                                                                                 
------  --    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal                                                            
------  --    INTO    #CYOWPaidWithCPFCeilRecal                                                            
------  --    FROM    ( SELECT    R.Emp_Code,                                                            
------  --                        SUM(R.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal                                                            
------  --              FROM      ( SELECT    * ,                                                            
------  --                 CPFOrdinaryNetRecal = CASE                                                            
------  --                                                              WHEN OrdinaryWagesCYRecal >= @cpfceiling                                                            
------  --   THEN @cpfceiling                                                            
------  --                                             ELSE OrdinaryWagesCYRecal                           
------  --                                                          END                                                            
------  --                          FROM      ( SELECT    pd.emp_id Emp_Code ,                                                            
------  --                                                MONTH(ph.start_period) Mth ,                                                            
------  --                                                ( pd.cpfnet -                                                            
------  --              pd.cpfAdd_Additional ) OrdinaryWagesCYRecal                                
------  --        FROM  prepare_payroll_hdr ph                                
------  --                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                
------  --                                      WHERE     pd.status = 'G' AND                                
------  --        MONTH(ph.start_period) < @startmonth AND                                
------  --                YEAR(ph.start_period) = @startyear AND                                
------  --                       pd.CPFNet > 0                                
------  --                                    ) D                                
------  --                        ) AS R                                
------  --              GROUP BY  R.Emp_Code                                
------  --            ) D                                                            
------  --    GROUP BY Emp_Code                                                                                                     
------  --Calculate Current Year Addition Wages Paid Less than current month.                                                                                                                                                
------  --    SELECT  R.Emp_Code, SUM(R.AWPaidCY) AWPaidCY                                                            
------  --    INTO    #AWPAIDCurYear                                                            
------  --    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],                                 
------  --                        SUM(trx_amount) AWPaidCY                                                            
------  --              FROM      emp_additions EA                                                            
------  --              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID                                                            
------  --              WHERE     Status = 'L' AND                                                            
------  --                        ( MONTH(trx_period) <= @startmonth AND             
------  --      YEAR(trx_period) = @startyear                                                            
------  --                        ) AND                                  
------  --                        AT.CPF = 'Yes' AND                                                            
------  --                        AT.Type_Of_Wage = 'A' AND                                                            
------  --                        ( EA.ClaimStatus = 'Approved' OR                                           
------  --                 EA.ClaimStatus IS NULL                                                            
------  --                        )                                                            
------  --              GROUP BY  Emp_Code, MONTH(trx_period)                                                            
------  --            ) AS R                                                            
------  --    GROUP BY R.Emp_Code                                                            
------  --    ORDER BY R.Emp_Code                                           
------  --Calculate Current Year Addition Wages Paid of current month.                                                                                                      
------  --    SELECT  R.Emp_Code, SUM(R.AWPaidCYMonth) AWPaidCYMonth                                                            
------  --    INTO    #AWPAIDCurYearMonth                                                            
------  --    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],                                                            
------  --                        SUM(trx_amount) AWPaidCYMonth                                                            
------  --              FROM      emp_additions EA                                                            
------  --              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID                                                            
------  --              WHERE     --Status='L' And                                                              
------  --                        ( MONTH(trx_period) = @startmonth AND                                     
------  --                          YEAR(trx_period) = @startyear                                                            
------  --                        ) AND                                      
------  --                        AT.CPF = 'Yes' AND                                                            
------  --                        AT.Type_Of_Wage = 'A' AND                                                            
------  --    ( EA.ClaimStatus = 'Approved' OR                                                            
------  --                          EA.ClaimStatus IS NULL                                                            
------  --                        )                                                            
------  --              GROUP BY  Emp_Code, MONTH(trx_period)                                                            
------  --            ) AS R                                          
------  --    GROUP BY R.Emp_Code                                                            
------  --    ORDER BY R.Emp_Code                                                                                                                                   
------  SELECT *  
------  INTO   #FinalPre  
------  FROM   (SELECT *,EmployeeCPF = CASE  
------                                   WHEN (Em.CPFGross > 0  
------                                         AND Em.CPFGross <= 1500) THEN 0  
------                                   WHEN (Em.CPFGross <= 0) THEN 0  
------                                   ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployeePerc), 0)) / 100  
------                                 END,EmployerCPF = CASE  
------                                                     WHEN Em.CPFGross <= 1500  
------                                                          AND Em.CPFGross > 0 THEN 0  
------                                                     WHEN Em.CPFGross <= 0 THEN 0  
------                                                     ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployerPerc), 0)) / 100  
------                                                   END,REPLACE((SELECT Top 1 employee_cpf  
------                                                   FROM   CPFAmount_detail  
------                                                                WHERE  hdr_id = (SELECT row_id  
------                                                                                 FROM   CPFAmount_hdr  
------                                                                                 WHERE  pr_years = Em.PRAge  
------                                                                                    AND emp_group = Em.EmpCPFType  
------                                                                                    AND Em.CPFGross BETWEEN sal_from AND sal_to)  
------                                                                   AND age_group = Em.Age_Group And CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployeeCPFRow,REPLACE((SELECT Top 1 employer_cpf  
------                                                                                                                                               FROM   CPFAmount_detail  
------                                                                                                                                               WHERE  hdr_id = (SELECT row_id  
------                                                                                                                                                                FROM   CPFAmount_hdr  
------                                                                                                                                                                WHERE  pr_years = Em.PRAge  
------                                                                                                                                                                   AND emp_group = Em.EmpCPFType  
------                                                                                                                                                                   AND Em.CPFGross BETWEEN sal_from AND sal_to)  
------                                                                                                                                                  AND age_group = Em.Age_Group  And CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployerCPFRow  
------          FROM   (SELECT *,CPFAdditionNet = CASE  
------                                              WHEN CPFAdditionNetRev < 0 THEN 0  
------                                              ELSE CPFAdditionNetRev  
------                                            END,CPFAdditionNetRev AWSUBJCPF,CPFGross = CASE  
------                                                                                         WHEN (CalculateCPF = 'Y'  
------                                                                                               AND CPFAdditionNetRev >= 0) THEN ((CPFOrdinaryCeil + CPFAdditionNetRev))  
------                                                                                         WHEN (CalculateCPF = 'Y'  
------                                                                                               AND CPFAdditionNetRev < 0) THEN (CPFOrdinaryCeil)  
------                                                                                         ELSE 0  
------                                                                                       END,CPFEmployerPerc = CASE  
------                                                                                                               WHEN (CalculateCPF = 'Y') THEN dbo.Getemployercpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)  
------                                                                                                               ELSE 0  
------                                                                                                             END,CPFEmployeePerc = CASE  
------                                                                                                                                     WHEN (CalculateCPF = 'Y') THEN dbo.Getemployeecpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)  
------                                                            ELSE 0  
------                                                                                                                                   END  
------                  FROM   (SELECT J5.*,CPFOrdinaryCeil = CASE  
------                                                          WHEN (J5.CalculateCPF = 'Y')  
------                                                               AND (CPFOrdinary) >= @cpfceiling THEN @cpfceiling  
------                                                          WHEN (J5.CalculateCPF = 'Y')  
------                                                               AND (CPFOrdinary) < @cpfceiling THEN Isnull((CPFOrdinary), 0)  
------                                                          ELSE 0  
------                                                        END,  
------                                 --dbo.fn_GENPayrollAWCalc(@startmonth, @startyear, Em.Emp_Code, J5.Basic) AS CPFAdditionNetRev ,                                                        
------                                 Isnull(J7.AWCPF, 0) CPFAdditionNetRev,Em.EmpCPFtype,Em.Age_Group,Em.Age,Em.FundType,Ot1SysRate,OT2SysRate,J7.CMOW,J7.LYOW,J7.CYOW,J7.CPFAWCIL,J7.EST_AWCIL,J7.ACTCIL,J7.AWCM,J7.AWB4CM,J7.AWCM_AWB4CM,EM.sdf_required,EM.Time_Card_No,EM.Fund_Optout  
------                          FROM   #EmployeeTemp Em --LEFT OUTER JOIN #CYOWPaidWithCPFCeilRecal J6 ON Em.Emp_Code = J6.Emp_Code                                                            
------                                 --LEFT OUTER JOIN #CYOWPaidWithCPFCeil J1 ON Em.Emp_Code = J1.Emp_Code                                                            
------                                 --LEFT OUTER JOIN #AWPAIDCurYear J2 ON Em.Emp_Code = J2.Emp_Code                                                            
------                                 --LEFT OUTER JOIN #LYOWPaidWithCPFCeil J3 ON Em.Emp_Code = J3.Emp_Code                                         
------                                 --LEFT OUTER JOIN #AWPAIDCurYearMonth J4 ON Em.Emp_Code = J4.Emp_Code                                                   
------                                 LEFT OUTER JOIN #PriorGenPayroll J5 ON Em.Emp_Code = J5.Emp_Code  
------                                 LEFT OUTER JOIN @CPFAWCALC J7 ON Em.Emp_Code = J7.Emp_Code) Em) Em) Em  
------  ORDER  BY Em.FullName  
------  
------  --Calculate Employer and Employee CPF Contribution                                                                                                                                           
------  DECLARE db_cursor CURSOR FOR  
------      SELECT Emp_Code,EmployerCPFRow,EmployeeCPFRow  
------      FROM   #FinalPre  
------      WHERE  EmployeeCPFRow IS NOT NULL  
------          OR EmployerCPFRow IS NOT NULL  
------  
------  OPEN db_cursor  
------  
------  FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt  
------  
------  WHILE @@FETCH_STATUS = 0  
------      BEGIN  
------          SET @compute = N'set @cpfamtemployer= ' + @EmployerCPFAmt  
------  
------          EXEC Sp_executesql @compute,@param1,@cpfamtemployer OUTPUT  
------  
------          SET @compute = N'set @cpfamtemployee= ' + @EmployeeCPFAmt  
------  
------          EXEC Sp_executesql @compute,@param2,@cpfamtemployee OUTPUT  
------  
------          --Exclusive for Full MONTH START                      
------          --       UPDATE   #FinalPre                                                
------          --       SET      EmployerCPF = @cpfamtemployer, EmployeeCPF = @cpfamtemployee                                                
------          --       WHERE    Emp_Code = @EmpID                                                                                                                          
------          UPDATE #FinalPre  
------          SET    EmployeeCPF = @cpfamtemployee  
------          WHERE  Emp_Code = @EmpID  
------  
------          IF (@endatesubmonth != '15')  
------              BEGIN  
------                  UPDATE #FinalPre  
------                  SET    EmployerCPF = @cpfamtemployer  
------                  WHERE  Emp_Code = @EmpID  
------              END --Exclusive for Full MONTH END                                
------          FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt  
------      END  
------  
------  CLOSE db_cursor  
------  
------  DEALLOCATE db_cursor  
------  
------  SELECT *  
------  INTO   #Final  
------  FROM   (SELECT Emp_Code,FullName,DeptName,GroupName,[Basic],[BasicPR],TotalAdditions,TotalAdditionsWONH=CASE  
------                                                                                                            WHEN (Isnull(TotalAdditions, 0) - Isnull(NH, 0)) <= 0 THEN (Isnull(NH, 0) - Isnull(TotalAdditions, 0))  
------                                                                                                            ELSE (Isnull(TotalAdditions, 0) - Isnull(NH, 0))  
------                                                                                                          END,TotalDeductions,OT1Rate,OT2Rate,NHHrs,OT1Hrs,OT2Hrs,NH,OT1,OT2,Days_Work,CAST(Round(([Basic] + OT1 + OT2 + DaysWorkedRate + Add4NW + Add4OW + Add4AW + Add4AWNOCPF) - TotalDeductions, @roundnetpay) AS DECIMAL(9, 2)) NetPay,OT,CPFOrdinaryCeil,CPFAdditionNet,CPFGross,EmployeeCPFAmt,EmployerCPFAmt,(EmployeeCPFAmt + EmployerCPFAmt) CPFAmount,CPF,EmpCPFtype,PRAge,@cpfceiling CPFCeiling,FundType,FundAmount,(UnpaidFullDay + UnpaidHalfDay + UnpaidFullDayPR + UnpaidHalfDayPR) UnPaidLeaves,TotalUnPaid,PayType,Daily_rate_mode,Daily_Rate,ActualBasic,Pay_Mode,EmployeeGiro,EmployerGiro,GiroBank,Emp_Type,WorkingDaysInWeek,CPFType,Hourly_rate,Join_Date,Term_Date,Pr_date,RollDays,WrkgDaysInRoll,BasicPayInRoll,SubPayDays,WrkgDaysInSubPay,BasicDayRate,BasicDayRateWORound,BasicNorSubPay,UnpaidFullDay,UnpaidHalfDay,PaidFullDay,PaidHalfDay,UnPaidDeduct,UnpaidFullDayPR,UnpaidHalfDayPR,UnPaidDeductPR,  
------                 Add4NW,  
------                        Add4OW,Add4AW,Add4AWNOCPF,AdditionalWages,DedAmt,DedCPFAmt,ActSatDaySpan,ActSunDaySpan,ActWrkgDaysSpan,ActPRSatDaySpan,ActPRSunDaySpan,ActPRWrkgDaysSpan,DaysWorkedRate,CPFOrdinary,Age_Group,Age,OT1SysRate,OT2SysRate,CalculateCPF,CPFEmployeePerc,CPFEmployerPerc,EmployeeCPFRow,EmployerCPFRow,CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + TotalAdditions), @roundnetpay) AS DECIMAL(9, 2)) GrossWithAddition,Isnull(GrossWithOutAddition, 0) GrossWithOutAddition,Isnull(FundGrossAmount, 0) FundGrossAmount,SDLFundGrossAmount,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF,(  
------                        'EmployeePayReport.aspx?qsEmpID=' + CONVERT(VARCHAR, Emp_Code) + '&qsMonth=' + CONVERT(VARCHAR, @monthidintbl) + '&qsYear=' + CONVERT(VARCHAR, @year) + '&st=' + @stdatemonth + '&en=' + @endatemonth + '&stmonth=' + @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&endmonth=' + @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&monthintbl=' + CAST(@monthidintbl AS VARCHAR)) AS MediumUrl,Time_Card_No,Fund_OptOut,SDF_Required  
------          FROM   (SELECT *,CAST((Add4NW + Add4OW + Add4AW + Add4AWNOCPF + DaysWorkedRate) AS DECIMAL(9, 2)) TotalAdditions,CAST((UnPaidDeduct + UnpaidDeductPR + DedAmt + EmployeeCPFAmt + FundAmount) AS DECIMAL(9, 2)) TotalDeductions  
------                  FROM   (SELECT *,Floor(EmployeeCPF) EmployeeCPFAmt,Round(((Abs(Floor(EmployeeCPF) - EmployeeCPF)) + EmployerCPF), 0) EmployerCPFAmt,FundAmount = CASE  
------                                                                                                                                                                     WHEN @INTendatesubmonth >= 1 THEN dbo.Getempfundcontribution((Isnull((GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW), 0)), Isnull(FundType, ''))  
------                                                                                                                                                                     ELSE 0  
------                                                                                                                                                                   END,FundGrossAmount = CASE  
------                                                     WHEN Fund_Optout = 0  
------                                                                                                                                                                                                AND @INTendatesubmonth >= 1 THEN (GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW)-DedCPFAmt  
------                                                                                                                                                                                           ELSE 0  
------                                                                                                                                                                                         END,SDLFundGrossAmount = CASE  
------                                                                                                                                                                                                                    WHEN SDF_Required = 2  
--------                                                                                                                                                                                                                         AND (PR_Date <= @startdtsub)  
--------                                                                                                                                                                                                                         AND (Emp_Type = 'SPR'  
--------                                                                                                                                                                                                                               OR Emp_Type = 'SDPR'  
--------                                                                                                                                                                                                                               OR Emp_Type = 'SC')  
------                                                                                                                                                                                                                         --AND @INTendatesubmonth >= 16 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate)-DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)  
------                                                                                                                                                                                                                         AND @INTendatesubmonth >= 1 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate + Add4AW + Add4AWNOCPF + Add4OW)-DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)  
------                                                                                                                                                                                                                    ELSE 0  
------                                                                                                                                                                                                                  END  
------                          FROM   #FinalPre) Res) Res) Res  
------  
------  SELECT *  
------  FROM   #Final F  
------  ORDER  BY FullName  
------  
------  DROP TABLE #Final  
------  
------  DROP TABLE #FinalPre  
------  
------  DROP TABLE #EmployeeTemp  
------  
------  DROP TABLE #PRSatSunDaysTemp  
------  
------  DROP TABLE #SatSunDaysTemp  
------  
------  DROP TABLE #UnpaidFullDayPR  
------  
------  DROP TABLE #UnpaidHalfDayPR  
------  
------  DROP TABLE #PaidHalfDay  
------  
------  DROP TABLE #PaidFullDay  
------  
------  DROP TABLE #UnpaidHalfDay  
------  
------  DROP TABLE #UnpaidFullDay  
------  
------  DROP TABLE #Add4AW  
------  
------  DROP TABLE #Add4OW  
------  
------  DROP TABLE #Add4NW  
------  
------  DROP TABLE #EOT  
------  
------  DROP TABLE #PriorGenPayroll  
------  
------  --DROP TABLE #AWPAIDCurYear                                       
------  --DROP TABLE #CYOWPaidWithCPFCeil                               
------  --DROP TABLE #CYOWPaidWithCPFCeilRecal                                                                              
------  --DROP TABLE #AWPAIDCurYearMonth                                       
------  --DROP TABLE #LYOWPaidWithCPFCeil                                                                      
------  DROP TABLE #Deduction  
------  
------  DROP TABLE #DeductionCPF  
------  
------  DROP TABLE #EmployeeWorkFlow  
------  
------  DROP TABLE #EmployeeWorkFlowLevel  
------  
------  DROP TABLE #EmployeeAssignedToPayrollGroup
------
------  DROP TABLE #EmpPayTemp
------
------  DROP TABLE #EmpPayTempOLD
------
------  DROP TABLE #FundPerc
------GO
------
------SET ANSI_NULLS ON
------GO
------SET QUOTED_IDENTIFIER ON
------GO 
----Merging 9.0 First Sp
--EXEC sp_GeneratePayRollAdv   2,1,2010,3,'3',1,31,16,31,134                      
--EXEC sp sp_GeneratePayRollAdvFullMonth 2,1,2010,3,'112',1,31,1 ,31,134
--sp_GetPayrollMonth 0,0,0

CREATE PROC [dbo].[Sp_generatepayrolladv] @company_id     INT,
                                         @month          INT,
                                         @year           INT,
                                         @UserID         INT,
                                         @EmpPassID      VARCHAR(200) ='',
                                         @stdatemonth    VARCHAR(2),
                                         @endatemonth    VARCHAR(2),
                                         @stdatesubmonth VARCHAR(2),
                                         @endatesubmonth VARCHAR(2),
                                         @monthidintbl   INT=0
AS
  DECLARE @CPFCalculate INT
  DECLARE @INTendatesubmonth INT
  DECLARE @EmployerCPFAmt VARCHAR(200)
  DECLARE @EmployeeCPFAmt VARCHAR(200)
  DECLARE @cpfamtemployer FLOAT
  DECLARE @cpfamtemployee FLOAT
  DECLARE @select VARCHAR(8000)
  DECLARE @where VARCHAR(200)
  DECLARE @compute NVARCHAR(150)
  DECLARE @param1 NVARCHAR(150)
  DECLARE @param2 NVARCHAR(150)
  DECLARE @EmpID INT
  DECLARE @startproll VARCHAR(10)
  DECLARE @endproll VARCHAR(10)
  DECLARE @startsubpay VARCHAR(10)
  DECLARE @endsubpay VARCHAR(10)
  DECLARE @startdtsub DATETIME
  DECLARE @enddtsub DATETIME
  DECLARE @startdtproll DATETIME
  DECLARE @enddtproll DATETIME
  DECLARE @startmonth INT
  DECLARE @startyear INT
  DECLARE @TotalDaysCountPayroll_5 FLOAT
  DECLARE @TotalDaysCountPayroll_5p FLOAT
  DECLARE @TotalDaysCountPayroll_6 FLOAT
  DECLARE @TotalDaysCountPayroll_7 FLOAT
  DECLARE @TotalDaysCount_5 FLOAT
  DECLARE @TotalDaysCount_5p FLOAT
  DECLARE @TotalDaysCount_6 FLOAT
  DECLARE @TotalDaysCount_7 FLOAT
  DECLARE @NoWrkgDaysSubPay FLOAT
  DECLARE @RollDays FLOAT
  DECLARE @roundunpaid INT
  DECLARE @roundnetpay INT
  DECLARE @roundaddition INT
  DECLARE @rounddeduction INT
  DECLARE @cpfceiling FLOAT
  DECLARE @lastyear INT
  DECLARE @AWCeiling FLOAT
  DECLARE @dt_date DATETIME
  DECLARE @lastdaymonth VARCHAR(2)
  DECLARE @ID AS INT
  DECLARE @WorkFlowID AS INT
  DECLARE @RowID AS INT
  DECLARE @payrolltype AS INT

  SELECT @month = [Month], @CPFCalculate = CPFCalculate, @payrolltype = PayType
  FROM   payrollmonthlydetail
  WHERE  ROWID = @monthidintbl

  SET @INTendatesubmonth = CONVERT(INT, @endatesubmonth)

  DECLARE @CPFAWCALC TABLE (
      Emp_Code    INT,
      CMOW        FLOAT,
      LYOW        FLOAT,
      CYOW        FLOAT,
      CPFAWCIL    FLOAT,
      EST_AWCIL   FLOAT,
      ACTCIL      FLOAT,
      AWCM        FLOAT,
      AWB4CM      FLOAT,
      AWCM_AWB4CM FLOAT,
      AWCPF       FLOAT )
  DECLARE @FULLMONTH TABLE (
      Emp_Code             INT,
      FullName             VARCHAR(200),
      DeptName             VARCHAR(200),
      GroupName            VARCHAR(200),
      [Basic]              FLOAT,
      BasicPR              FLOAT,
      TotalAdditions       FLOAT,
      TotalAdditionsWONH   FLOAT,
      TotalDeductions      FLOAT,
      OT1Rate              FLOAT,
      OT2Rate              FLOAT,
      NHHrs                FLOAT,
      OT1Hrs               FLOAT,
      OT2Hrs               FLOAT,
      NH                   FLOAT,
      OT1                  FLOAT,
      OT2                  FLOAT,
      Days_Work            FLOAT,
      NetPay               FLOAT,
      OT                   VARCHAR(3),
      CPFOrdinaryCeil      FLOAT,
      CPFAdditionNet       FLOAT,
      CPFGross             FLOAT,
      EmployeeCPFAmt       FLOAT,
      EmployerCPFAmt       FLOAT,
      CPFAmount            FLOAT,
      CPF                  CHAR(3),
      EmpCPFtype           VARCHAR(100),
      PRAge                INT,
      CPFCeiling           FLOAT,
      FundType             VARCHAR(50),
      FundAmount           FLOAT,
      UnPaidLeaves         FLOAT,
      TotalUnPaid          FLOAT,
      PayType              VARCHAR(10),
      Daily_rate_mode      VARCHAR(100),
      Daily_Rate           FLOAT,
      ActualBasic          FLOAT,
      Pay_Mode             INT,
      EmployeeGiro         VARCHAR(100),
      EmployerGiro         VARCHAR(100),
      GiroBank             VARCHAR(100),
      Emp_Type             VARCHAR(100),
      WorkingDaysInWeek    FLOAT,
      CPFType              FLOAT,
      Hourly_rate          FLOAT,
      Join_Date            DATETIME,
      Term_Date            DATETIME,
      Pr_date              DATETIME,
      RollDays             FLOAT,
      WrkgDaysInRoll       FLOAT,
      BasicPayInRoll       FLOAT,
      SubPayDays           FLOAT,
      WrkgDaysInSubPay     FLOAT,
      BasicDayRate         FLOAT,
      BasicDayRateWORound  FLOAT,
      BasicNorSubPay       FLOAT,
      UnpaidFullDay        FLOAT,
      UnpaidHalfDay        FLOAT,
      PaidFullDay          FLOAT,
      PaidHalfDay          FLOAT,
      UnPaidDeduct         FLOAT,
      UnpaidFullDayPR      FLOAT,
      UnpaidHalfDayPR      FLOAT,
      UnPaidDeductPR       FLOAT,
      Add4NW               FLOAT,
      Add4OW               FLOAT,
      Add4AW               FLOAT,
      Add4AWNOCPF          FLOAT,
      AdditionalWages      FLOAT,
      DedAmt               FLOAT,
      DedCPFAmt            FLOAT,
      ActSatDaySpan        FLOAT,
      ActSunDaySpan        FLOAT,
      ActWrkgDaysSpan      FLOAT,
      ActPRSatDaySpan      FLOAT,
      ActPRSunDaySpan      FLOAT,
      ActPRWrkgDaysSpan    FLOAT,
      DaysWorkedRate       FLOAT,
      CPFOrdinary          FLOAT,
      Age_Group            FLOAT,
      Age                  FLOAT,
      OT1SysRate           FLOAT,
      OT2SysRate           FLOAT,
      CalculateCPF         VARCHAR(1),
      CPFEmployeePerc      FLOAT,
      CPFEmployerPerc      FLOAT,
      EmployeeCPFRow       VARCHAR(200),
      EmployerCPFRow       VARCHAR(200),
      GrossWithAddition    FLOAT,
      GrossWithOutAddition FLOAT,
      FundGrossAmount      FLOAT,
      SDLFundGrossAmount   FLOAT,
      CMOW                 FLOAT,
      LYOW                 FLOAT,
      CYOW                 FLOAT,
      CPFAWCIL             FLOAT,
      EST_AWCIL            FLOAT,
      ACTCIL               FLOAT,
      AWCM                 FLOAT,
      AWB4CM               FLOAT,
      AWCM_AWB4CM          FLOAT,
      AWSUBJCPF            FLOAT,
      MediumUrl            VARCHAR(1000),
      Time_Card_No         VARCHAR(50),
      Fund_OptOut          INT,
      SDF_Required         INT )

  CREATE TABLE #EmployeeWorkFlowLevel
      (
           ID             INT,
           WORKFLOWID     INT,
           ROWID          INT,
           PAYROLLGROUPID INT
      )

  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID
  INTO   #EmployeeWorkFlow
  FROM   Employee EM
         INNER JOIN (SELECT WL.*
                     FROM   EmployeeWorkFlowLevel WL
                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID

  DECLARE curse CURSOR FOR
      SELECT *
      FROM   #EmployeeWorkFlow

  OPEN curse

  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID

  WHILE @@FETCH_STATUS = 0
      BEGIN
          --PRINT @RowID                                                                    
          INSERT INTO #EmployeeWorkFlowLevel
          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID
          FROM   EmployeeWorkFlowLevel
          WHERE  WorkFLowID = @WorkFLowID
             AND RowID <= @RowID

          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
      END

  SELECT DISTINCT Te.ID,EG.Emp_ID
  INTO   #EmployeeAssignedToPayrollGroup
  FROM   #EmployeeWorkFlowLevel Te
         INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID
  WHERE  EG.Emp_ID = @UserID

  CLOSE curse

  DEALLOCATE curse

  SELECT TOP 1 @lastdaymonth = dateinyear
  FROM   (SELECT CONVERT(FLOAT, Datename(dd, DateInYear)) dateinyear
          FROM   DateInYear
          WHERE  MONTH(DateInYear) = @month
             AND Datename(yy, DateInYear) = @year) DY
  ORDER  BY dateinyear DESC

  SET @AWCeiling = 76500 ---Additional Wages  ceiling  Not In use
  SET @startproll = @stdatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
  SET @endproll = @endatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
  SET @startsubpay = @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
  SET @endsubpay = @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
  SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)
  SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)
  SET @startdtproll = CONVERT(DATETIME, @startproll, 103)
  SET @enddtproll = CONVERT(DATETIME, @endproll, 103)
  SET @startmonth = MONTH(@startdtsub)
  SET @startyear = YEAR(@startdtsub)
  SET @RollDays = (Datediff(dw, @startdtproll, @enddtproll) + 1)
  SET @lastyear = @startyear - 1
  SET @dt_date = CONVERT(DATETIME, @startsubpay, 103)
  SET @param1 = N'@cpfamtemployer float output'
  SET @param2 = N'@cpfamtemployee float output'
  SET @NoWrkgDaysSubPay = (Datediff(dw, @startdtsub, @enddtsub) + 1)

  IF Len(@EmpPassID) > 0
      BEGIN
          SELECT @where = 'Where Emp_Code Not In (' + @EmpPassID + ')'
      END

  SELECT @cpfceiling = monthly_cpf_ceil,@roundunpaid = basicrnd,@roundnetpay = netpayrnd,@roundaddition = additionsrnd,@rounddeduction = deductionsrnd
  FROM   Company
  WHERE  Company_ID = @company_id

  -- Dump The Required Employees in one Temp Table                                                                                                                                               
  SELECT Emp_Code,Emp_Name,Emp_Lname,IC_PP_NUMBER,Sex,Emp_Group_Id,Race_ID,Dept_Id,Date_Of_Birth,Joining_Date,Termination_Date,PR_Date = CASE
                                                                                                                                           WHEN Emp_Type = 'SC' THEN CONVERT(DATETIME, '01/01/1910', 103)
                                                                                                                                           ELSE PR_Date
                                                                                                                                         END,Emp_Type,CPF_Entitlement,OT_Entitlement,Payment_Mode,Pay_Frequency,EmpCPFType,Wdays_per_Week,Hourly_Rate_Mode,Hourly_Rate,Daily_Rate_Mode,Daily_Rate,PayRateCust=CASE
                                                                                                                                                                                                                                                                                                                WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.payrate))) > 0 THEN CONVERT(DECIMAL(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.Payrate)))
                                                                                                                                                                                                                                                                                                                ELSE 0
                                                                                                                                                                                                                                                                                                              END,Round(CAST(Isnull(Datediff(m, Isnull(date_of_birth, 0), @dt_date), 0) AS FLOAT) / 12, 2) Age,dbo.Fn_getagegroup(Em.Emp_Code, @dt_date) AS Age_Group,FundType = CASE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%CHIN%' THEN 'CDAC'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%MALAY%' THEN 'MBMF'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%INDIA%' THEN 'SINDA'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%EURA%' THEN 'ECF'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ELSE ''
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 END,Giro_acct_number,giro_bank,CalculateCPF = CASE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WHEN (CPF_Entitlement = 'Y'
mp_Type = 'SPR'
mp_Type = 'SDPR'
mp_Type = 'SC')) THEN 'Y'

ate,Ot2Rate,OT1Rate OT1SysRate,OT2Rate OT2SysRate,Isnull(Pay_supervisor, 0) Pay_supervisor,sdf_required,time_card_no,Fund_Optout,CalcCPFFH=CASE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    WHEN @endatesubmonth = '15'
omputeCPFFH = 1 THEN 'Y'
endatesubmonth = '15'
omputeCPFFH = 0 THEN 'N'

alcFundFH=CASE
endatesubmonth = '15'
omputeFundFH = 1 THEN 'Y'
endatesubmonth = '15'
omputeFundFH = 0 THEN 'N'

ayProcessFH, HalfSalary
  INTO   #EmployeeTemp
  FROM   Employee Em
         INNER JOIN Race Ra ON Em.Race_ID = Ra.ID
  WHERE  (Em.Payrate IS NOT NULL)
     AND PayrollType = @payrolltype
     AND (Em.Joining_Date <= @enddtsub)
     AND (Em.Termination_Date IS NULL
           OR (Em.termination_date >= @startdtsub))
     AND (Em.Company_id = @company_id)
     AND (Em.StatusID = 1
           OR (Em.StatusID = 2
               AND @enddtsub <= Em.termination_date)
           OR (Em.StatusID = 2
               AND Em.termination_date >= @startdtsub
               AND Em.termination_date <= @enddtsub));

WITH EPHOLD AS 
(
	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate) AS 'RowNo', 
	ID, Emp_ID, PayRate
	FROM EmployeePayHistory  Where FromDate >@enddtsub
)
Select	Emp_ID,
		PayRateCust=CASE
		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
		ELSE 0
		END
Into #EmpPayTempOLD From EPHOLD Where RowNo = 1 And PayRate is not null

UPDATE E
SET    PayRateCust = ET.PayRateCust
FROM   #EmployeeTemp E
INNER JOIN #EmpPayTempOLD ET ON E.Emp_Code = ET.Emp_ID;


WITH EPH AS 
(
	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate Desc) AS 'RowNo', 
	ID, Emp_ID, PayRate
	FROM EmployeePayHistory  Where FromDate <=@enddtsub
)
Select	Emp_ID,
		PayRateCust=CASE
		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
		ELSE 0
		END
Into #EmpPayTemp From EPH Where RowNo = 1 And PayRate is not null


UPDATE E
SET    PayRateCust = ET.PayRateCust
FROM   #EmployeeTemp E
INNER JOIN #EmpPayTemp ET ON E.Emp_Code = ET.Emp_ID

  SELECT @select = 'Delete From #EmployeeTemp ' + @where

  EXEC (@select)

  DELETE FROM #EmployeeTemp
  WHERE  Emp_Code IN (SELECT pd.Emp_ID
                      FROM   prepare_payroll_hdr ph
                             INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID
                      WHERE  pd.[Status] != 'R'
                             --AND MONTH(ph.start_period) = Convert(Varchar,@startmonth)                                           
                             AND (ph.start_period >= @startdtsub
                                  AND ph.end_period <= @enddtsub)
                             AND YEAR(ph.start_period) = CONVERT(VARCHAR, @startyear))

  DELETE FROM #EmployeeTemp
  WHERE  Pay_supervisor NOT IN (SELECT ID
                                FROM   #EmployeeAssignedToPayrollGroup)
     AND (Pay_supervisor > 0)

  IF (@stdatesubmonth = '16')
      BEGIN
          UPDATE E
          SET    PayProcessFH = 1
          FROM   #EmployeeTemp E
                 INNER JOIN (SELECT PD.Emp_ID,COUNT(pd.Emp_ID) FHEmpCount
                             FROM   Prepare_Payroll_Detail pd
                                    INNER JOIN prepare_payroll_hdr ph ON pd.trx_id = ph.trx_id
                             WHERE  ([Status] = 'G')
                                AND ph.end_period = (SELECT PaySubEndDate
                                                     FROM   PayrollMonthlyDetail
                                                     WHERE  ROWID = (@monthidintbl - 1))
                             GROUP  BY pd.emp_id) P ON E.Emp_Code = P.Emp_ID

			Update #EmployeeTemp Set PayProcessFH = 1 Where Joining_Date Between @startdtsub And @enddtsub
      END
  ELSE
	BEGIN
          UPDATE #EmployeeTemp
          SET    PayProcessFH = 1
	END

  --Delete From #EmployeeTemp                                                                      
  --Where Emp_Code Not In                                                 
  --(                                                                      
  -- Select Emp_Code From                                                                    
  -- (                                                   
  --  Select EM.Emp_Code,WL.WorkFlowID From EmployeeWorkFlowLevel WL                                                                    
  --  Inner Join Employee EM On WL.ID = EM.Pay_supervisor                                                                    
  --  Where WL.FlowType=1 And (EM.Pay_supervisor is not null or EM.Pay_supervisor > 0 )                                                        
  -- ) Re Inner Join #WLTemp WL On Re.WorkFlowID=WL.WorkFlowID                                      
  --) And (Pay_supervisor is not null or Pay_supervisor > 0)                                                                      
  --Start Here on 7th Jan 2010...1757                                        
  --Calculate Total No of Public Holidays in Payroll Period                                           
  DECLARE @PUBLICHOLIDAYSMONTH FLOAT
  DECLARE @PUBLICHOLIDAYSBYMONTH FLOAT

  SELECT @PUBLICHOLIDAYSMONTH = COUNT(Holiday_Date)
  FROM   Public_Holidays PH
  WHERE  (PH.Holiday_Date >= @startdtproll
          AND PH.Holiday_Date <= @enddtproll)
     AND (Datepart(weekday, Holiday_Date) != 1
          AND Datepart(weekday, Holiday_Date) != 7)
	 And (CompanyID=@company_id Or CompanyID=-1)

  SELECT @PUBLICHOLIDAYSBYMONTH = COUNT(Holiday_Date)
  FROM   Public_Holidays PH
  WHERE  (PH.Holiday_Date >= @startdtsub
          AND PH.Holiday_Date <= @enddtsub)
     AND (Datepart(weekday, Holiday_Date) != 1
          AND Datepart(weekday, Holiday_Date) != 7)
	 And (CompanyID=@company_id Or CompanyID=-1)

  --CONSIDER 0 to PH in PAYROLL @PUBLICHOLIDAYSMONTH and @PUBLICHOLIDAYSBYMONTH                        
  SET @PUBLICHOLIDAYSMONTH = 0
  SET @PUBLICHOLIDAYSBYMONTH = 0

  --Calculate Total No of Working Days in Payroll Period                                                                                  
  SELECT @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSMONTH
  FROM   (SELECT TotalDaysCount_5 = CASE
                                      WHEN (R.DaysPattern_5 = 5
                                            AND (R.[WeekDay] = 1
                                                  OR R.[WeekDay] = 7)) THEN 0
                                      ELSE R.CntDay
                                    END,TotalDaysCount_5p = CASE
                                                              WHEN (R.DaysPattern_5p = 5.5
                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)
                                                              WHEN (R.DaysPattern_5p = 5.5
                                                                    AND (R.[WeekDay] = 1)) THEN 0
                                                              ELSE R.CntDay
                                                            END,TotalDaysCount_6 = CASE
                                                                                     WHEN (R.DaysPattern_6 = 6
                                                                                           AND (R.[WeekDay] = 1)) THEN 0
                                                                                     ELSE R.CntDay
                                                                                   END,TotalDaysCount_7 = CASE
                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay
                                                                                                          END
          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7
                  FROM   DateInYear Dt
                  WHERE  (Dt.DateInYear >= @startdtproll
                      AND Dt.DateInYear <= @enddtproll)
                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res

  --Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens                                                                 
  SELECT @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSBYMONTH
  FROM   (SELECT TotalDaysCount_5 = CASE
                                      WHEN (R.DaysPattern_5 = 5
                                            AND (R.[WeekDay] = 1
                                                  OR R.[WeekDay] = 7)) THEN 0
                                      ELSE R.CntDay
                                    END,TotalDaysCount_5p = CASE
                                                              WHEN (R.DaysPattern_5p = 5.5
                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)
                                                              WHEN (R.DaysPattern_5p = 5.5
                                                                    AND (R.[WeekDay] = 1)) THEN 0
                                                              ELSE R.CntDay
                                                            END,TotalDaysCount_6 = CASE
                                                                                     WHEN (R.DaysPattern_6 = 6
                                                                                           AND (R.[WeekDay] = 1)) THEN 0
                                                                                     ELSE R.CntDay
                                                                                   END,TotalDaysCount_7 = CASE
                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay
                                                                                                          END
          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7
                  FROM   DateInYear Dt
                  WHERE  (Dt.DateInYear >= @startdtsub
                      AND Dt.DateInYear <= @enddtsub)
                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res

                                                                                                   
  SELECT E.Emp_Code,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.Joining_Date >= E.PR_Date AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR
                     (E.PR_Date IS NOT
                     NULL AND
                     E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date > @startdtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND E.PR_Date < @startdtsub AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date <= @startdtsub AND E.PR_Date >= @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) ))) ActPRSatDaySpan,
                (SELECT COUNT(Datepart(weekday, DateInYear))
                 FROM   DateInYear Dt
                 WHERE  (E.PR_Date IS NOT NULL
                     AND E.Termination_Date IS NULL
                     AND E.PR_Date >= @startdtsub
                     AND E.PR_Date <= @enddtsub
                     AND E.Joining_Date < @startdtsub
                     AND Dt.DateInYear >= E.PR_Date
                     AND Dt.DateInYear <= @enddtsub
                     AND (Datepart(weekday, DateInYear) = 1))
                     OR (E.PR_Date IS NOT NULL
                         AND E.Termination_Date IS NULL
                         AND E.PR_Date >= @startdtsub
                         AND E.PR_Date <= @enddtsub
                         AND E.Joining_Date >= @startdtsub
                         AND E.Joining_Date <= @enddtsub
                         AND E.PR_Date >= E.Joining_Date
                         AND Dt.DateInYear >= E.PR_Date
                         AND Dt.DateInYear <= @enddtsub
                         AND (Datepart(weekday, DateInYear) = 1))
                     OR (E.PR_Date IS NOT NULL
                         AND E.Termination_Date IS NULL
                         AND E.PR_Date >= @startdtsub
                         AND E.PR_Date <= @enddtsub
                         AND E.Joining_Date >= @startdtsub
                         AND E.Joining_Date <= @enddtsub
                         AND E.Joining_Date >= E.PR_Date
                         AND Dt.DateInYear >= E.Joining_Date
                         AND Dt.DateInYear <= @enddtsub
                         AND (Datepart(weekday, DateInYear) = 1))
                     OR (E.PR_Date IS NOT NULL
                         AND E.Termination_Date IS NOT NULL
                         AND E.Termination_Date >= @startdtsub
                         AND E.Termination_Date <= @enddtsub
                         AND E.Joining_Date > @startdtsub
                         AND E.PR_Date >= E.Joining_Date
                         AND Dt.DateInYear >= E.PR_Date
                         AND Dt.DateInYear <= E.Termination_Date
                         AND (Datepart(weekday, DateInYear) = 1))
                     OR (E.PR_Date IS NOT NULL
                         AND E.Termination_Date IS NOT NULL
                         AND E.Termination_Date >= @startdtsub
                         AND E.Termination_Date <= @enddtsub
                         AND E.Joining_Date < @startdtsub
                         AND E.PR_Date < @startdtsub
                         AND Dt.DateInYear >= @startdtsub
                         AND Dt.DateInYear <= E.Termination_Date
                         AND (Datepart(weekday, DateInYear) = 1))
                     OR (E.PR_Date IS NOT NULL
                         AND E.Termination_Date IS NOT NULL
                         AND E.Termination_Date >= @startdtsub
                         AND E.Termination_Date <= @enddtsub
                         AND E.Joining_Date <= @startdtsub
                         AND E.PR_Date >= @startdtsub
                         AND Dt.DateInYear >= E.PR_Date
                         AND Dt.DateInYear <= E.Termination_Date
                         AND (Datepart(weekday, DateInYear) = 1))) ActPRSunDaySpan
  INTO   #PRSatSunDaysTemp
  FROM   #EmployeeTemp E

  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is not PR and works during PR Period.                                                                                                                        
  SELECT Emp_Code,(SELECT COUNT(Datepart(weekday, DateInYear))
                   FROM   DateInYear Dt
                   WHERE  (((E.Termination_Date >= @startdtsub
                             AND E.Termination_Date <= @enddtsub)
                            AND E.Joining_Date >= @startdtsub)
                       AND Dt.DateInYear >= E.Joining_Date
                       AND Dt.DateInYear <= E.Termination_Date
                       AND (Datepart(weekday, DateInYear) = 1))
                       OR (((E.Termination_Date >= @startdtsub
                             AND E.Termination_Date <= @enddtsub)
                            AND E.Joining_Date < @startdtsub)
                           AND Dt.DateInYear >= @startdtsub
                           AND Dt.DateInYear <= E.Termination_Date
                           AND (Datepart(weekday, DateInYear) = 1))
                       OR ((E.Termination_Date IS NULL
                            AND (E.Joining_Date > @startdtsub
                                 AND E.Joining_Date <= @enddtsub))
                           AND Dt.DateInYear >= E.Joining_Date
                           AND Dt.DateInYear <= @enddtsub
                           AND (Datepart(weekday, DateInYear) = 1))
                       OR ((E.Termination_Date IS NULL
                            AND (E.Joining_Date < @startdtsub))
                           AND Dt.DateInYear >= @startdtsub
                           AND Dt.DateInYear <= @enddtsub
                           AND (Datepart(weekday, DateInYear) = 1))
                       OR ((E.Termination_Date > @enddtsub
                            AND E.Joining_Date < @startdtsub)
                           AND Dt.DateInYear >= @startdtsub
                           AND Dt.DateInYear <= @enddtsub
                           AND (Datepart(weekday, DateInYear) = 1))) ActSunDaySpan,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date >= @startdtsub ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date < @startdtsub ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date > @startdtsub AND E.Joining_Date <= @enddtsub ) ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date < @startdtsub) ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday,
                                                                                    DateInYear) = 7) ) OR ((E.Termination_Date > @enddtsub AND E.Joining_Date < @startdtsub )
                                                                                    AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) ))) ActSatDaySpan
  INTO   #SatSunDaysTemp
  FROM   #EmployeeTemp E

  -- Calculate Unpaid FullDay for the Employees who took leaves during the PR Period                                                                                                                                          
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) UnpaidFullDayPR
  INTO   #UnpaidFullDayPR
  FROM   Emp_Leaves el
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code
  WHERE  (Eld.Leave_Date >= @startdtsub
          AND Eld.Leave_Date <= @enddtsub)
     AND (Eld.unpaid_leave = 1
          AND eld.halfday_leave = 0)
     AND El.Status = 'Approved'
     AND ((E.PR_Date IS NOT NULL
           AND E.Termination_Date IS NULL
           AND E.PR_Date >= @startdtsub
           AND E.PR_Date <= @enddtsub
           AND E.Joining_Date < @startdtsub
           AND Eld.Leave_Date >= E.PR_Date
           AND Eld.Leave_Date <= @enddtsub)
           OR (E.PR_Date IS NOT NULL
               AND E.Termination_Date IS NULL
               AND E.PR_Date >= @startdtsub
               AND E.PR_Date <= @enddtsub
               AND E.Joining_Date >= @startdtsub
               AND E.Joining_Date <= @enddtsub
               AND E.PR_Date >= E.Joining_Date
               AND Eld.Leave_Date >= E.PR_Date
               AND Eld.Leave_Date <= @enddtsub)
           OR (E.PR_Date IS NOT NULL
               AND E.Termination_Date IS NOT NULL
               AND E.Termination_Date >= @startdtsub
               AND E.Termination_Date <= @enddtsub
               AND E.Joining_Date > @startdtsub
               AND E.PR_Date >= E.Joining_Date
               AND Eld.Leave_Date >= E.PR_Date
               AND Eld.Leave_Date <= E.Termination_Date)
           OR (E.PR_Date IS NOT NULL
               AND E.Termination_Date IS NOT NULL
               AND E.Termination_Date >= @startdtsub
               AND E.Termination_Date <= @enddtsub
               AND E.Joining_Date < @startdtsub
               AND E.PR_Date < @startdtsub
               AND Eld.Leave_Date >= @startdtsub
               AND Eld.Leave_Date <= E.Termination_Date))
  GROUP  BY El.Emp_Id

  -- Calculate Unpaid Half Day for the Employees who took leaves during the PR Period                                                            
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 UnpaidHalfDayPR
  INTO   #UnpaidHalfDayPR
  FROM   Emp_Leaves el
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code
  WHERE  (Eld.Leave_Date >= @startdtsub
          AND Eld.Leave_Date <= @enddtsub)
     AND (Eld.unpaid_leave = 1
          AND eld.halfday_leave = 1)
     AND El.Status = 'Approved'
     AND ((E.PR_Date IS NOT NULL
           AND E.Termination_Date IS NULL
           AND E.PR_Date >= @startdtsub
           AND E.PR_Date <= @enddtsub
           AND E.Joining_Date < @startdtsub
           AND Eld.Leave_Date >= E.PR_Date
           AND Eld.Leave_Date <= @enddtsub)
           OR (E.PR_Date IS NOT NULL
               AND E.Termination_Date IS NULL
               AND E.PR_Date >= @startdtsub
               AND E.PR_Date <= @enddtsub
               AND E.Joining_Date >= @startdtsub
               AND E.Joining_Date <= @enddtsub
               AND E.PR_Date >= E.Joining_Date
               AND Eld.Leave_Date >= E.PR_Date
               AND Eld.Leave_Date <= @enddtsub)
           OR (E.PR_Date IS NOT NULL
               AND E.Termination_Date IS NOT NULL
               AND E.Termination_Date >= @startdtsub
               AND E.Termination_Date <= @enddtsub
               AND E.Joining_Date > @startdtsub
               AND E.PR_Date >= E.Joining_Date
               AND Eld.Leave_Date >= E.PR_Date
               AND Eld.Leave_Date <= E.Termination_Date)
           OR (E.PR_Date IS NOT NULL
               AND E.Termination_Date IS NOT NULL
               AND E.Termination_Date >= @startdtsub
               AND E.Termination_Date <= @enddtsub
               AND E.Joining_Date < @startdtsub
               AND E.PR_Date < @startdtsub
               AND Eld.Leave_Date >= @startdtsub
               AND Eld.Leave_Date <= E.Termination_Date))
  GROUP  BY El.Emp_Id

  -- Calculate Paid Half Day for the Employees who took leaves during working days                                                                                                                                                
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 PaidHalfDay
  INTO   #PaidHalfDay
  FROM   Emp_Leaves el
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
  WHERE  (Eld.Leave_Date >= @startdtsub
          AND Eld.Leave_Date <= @enddtsub)
     AND (Eld.unpaid_leave = 0
          AND eld.halfday_leave = 1)
     AND El.Status = 'Approved'
  GROUP  BY El.Emp_Id

  -- Calculate Paid Full Day for the Employees who took leaves during working days                                                                                  
  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) PaidFullDay
  INTO   #PaidFullDay
  FROM   Emp_Leaves el
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
  WHERE  (Eld.Leave_Date >= @startdtsub
          AND Eld.Leave_Date <= @enddtsub)
     AND (Eld.unpaid_leave = 0
          AND eld.halfday_leave = 0)
     AND El.Status = 'Approved'
  GROUP  BY El.Emp_Id

  -- Calculate UnPaid Half Day for the Employees who took leaves during working days                                            
  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) / 2 UnpaidHalfDay
  INTO   #UnpaidHalfDay
  FROM   Emp_Leaves el
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
  WHERE  (Eld.Leave_Date >= @startdtsub
          AND Eld.Leave_Date <= @enddtsub)
     AND (Eld.unpaid_leave = 1
          AND eld.halfday_leave = 1)
     AND El.Status = 'Approved'
  GROUP  BY El.Emp_Id

  -- Calculate UnPaid Full Day for the Employees who took leaves during working days                                                                                                                             
  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) UnpaidFullDay
  INTO   #UnpaidFullDay
  FROM   Emp_Leaves el
         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
  WHERE  (Eld.Leave_Date >= @startdtsub
          AND Eld.Leave_Date <= @enddtsub)
     AND (Eld.unpaid_leave = 1
          AND eld.halfday_leave = 0)
     AND El.Status = 'Approved'
  GROUP  BY El.Emp_Id

  --Calc Deduction Amounts For Employees                                                                                                                                           
  SELECT Emp_Code,SUM(trx_amount) DedAmt
  INTO   #Deduction
  FROM   Emp_Deductions ED
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID
  WHERE  (--MONTH(trx_period) = @startmonth AND                                                    
         (trx_period >= @startdtsub
          AND trx_period <= @enddtsub)
         AND YEAR(trx_period) = @startyear)
   And ((ED.FundType is NULL OR ED.FundType = 0) Or (ED.FundType >=5 And ED.FundType <=8)) --Added on Dec 6 for Auto And Manual Funds- Start  
  GROUP  BY Emp_Code


  --Calc Deduction Amounts Applicable CPF on Deduction For Employees                                                            
  SELECT ED.Emp_Code,SUM(ED.trx_amount) DedCPFAmt
  INTO   #DeductionCPF
  FROM   Emp_Deductions ED
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID
  WHERE  (--MONTH(ED.trx_period) = @startmonth AND                                                    
         (trx_period >= @startdtsub
          AND trx_period <= @enddtsub)
         AND YEAR(ED.trx_period) = @startyear)
         AND DT.CPF = 'Yes'
  GROUP  BY Emp_Code

  --Calc Add for Wages  when CPF Yes                                                                                           
  SELECT Emp_Code,SUM(trx_amount) Add4AW
  INTO   #Add4AW
  FROM   emp_additions EA
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
  WHERE  --Status='L' And                                                    
  (--MONTH(trx_period) = @startmonth AND                                                    
  (trx_period >= @startdtsub
   AND trx_period <= @enddtsub)
  AND YEAR(trx_period) = @startyear)
  AND AT.CPF = 'Yes'
  AND AT.Type_Of_Wage = 'A'
  AND (EA.ClaimStatus = 'Approved'
        OR EA.ClaimStatus IS NULL)
  GROUP  BY Emp_Code

  --Calc Add for Wages  when CPF NO                                                                                           
  SELECT Emp_Code,SUM(trx_amount) Add4AWNOCPF
  INTO   #Add4AWNOCPF
  FROM   emp_additions EA
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
  WHERE  --Status='L' And                                                    
  (--MONTH(trx_period) = @startmonth AND                                                    
  (trx_period >= @startdtsub
   AND trx_period <= @enddtsub)
  AND YEAR(trx_period) = @startyear)
  AND AT.CPF = 'No'
  AND AT.Type_Of_Wage = 'A'
  AND (EA.ClaimStatus = 'Approved'
        OR EA.ClaimStatus IS NULL)
  GROUP  BY Emp_Code

  --Calc Add For Ordinary Wages                                                    
  SELECT Emp_Code,SUM(trx_amount) Add4OW
  INTO   #Add4OW
  FROM   emp_additions EA
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
  WHERE  --Status='L' And                                   
  (--MONTH(trx_period) = @startmonth AND                                                    
  (trx_period >= @startdtsub
   AND trx_period <= @enddtsub)
  AND YEAR(trx_period) = @startyear)
  AND AT.CPF = 'Yes'
  AND (AT.Type_Of_Wage = 'O'
        OR AT.Type_Of_Wage IS NULL)
  AND (EA.ClaimStatus = 'Approved'
        OR EA.ClaimStatus IS NULL)
  GROUP  BY Emp_Code

  --Calc Add For Normal Wages                                                                              
  SELECT Emp_Code,SUM(trx_amount) Add4NW
  INTO   #Add4NW
  FROM   emp_additions EA
         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
  WHERE  --Status='L' And                                                                                                                                                 
  (--MONTH(trx_period) = @startmonth AND                                                    
  (trx_period >= @startdtsub
   AND trx_period <= @enddtsub)
  AND YEAR(trx_period) = @startyear)
  AND AT.CPF = 'No'
  AND (AT.Type_Of_Wage = 'O'
        OR AT.Type_Of_Wage IS NULL)
  AND (EA.ClaimStatus = 'Approved'
        OR EA.ClaimStatus IS NULL)
  GROUP  BY Emp_Code

  --Calc Employee Overtime                           
  SELECT Emp_Code,dbo.Converttohours(SUM(dbo.Converttominutes(overtime1))) overtime1,dbo.Converttohours(SUM(dbo.Converttominutes(overtime2))) overtime2,SUM(Days_Work) Days_Work,dbo.Converttohours(SUM(dbo.Converttominutes(NH_Work))) NH_Work
  INTO   #EOT
  FROM   emp_overtime
  WHERE  ((Trx_Month = @monthidintbl AND   ----shahsank changes for client TCC                                                 
          (payrollstdate >= @startdtsub
           AND payrollstdate <= @enddtsub)
          AND Trx_Year = @startyear)
           OR Trx_Month IS NULL)
  GROUP  BY Emp_Code

  --Select @TotalDaysCount_5,@TotalDaysCount_5p,@TotalDaysCount_6,@TotalDaysCount_7                                                                                                        
  SELECT *,([Basic] - TotalUnPaid) ActualBasic,CPFOrdinary = CASE
                                                               WHEN (CPF = 'Y'
                                                                     AND Emp_Type = 'SPR'
                                                                      OR Emp_Type = 'SDPR'
                                                                      OR Emp_Type = 'SC')
                                                                    AND [BasicPR] <= 0 THEN (([Basic] - TotalUnPaid) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)
                                                               ELSE (([BasicPR] - UnpaidDeductPR) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)
                                                             END,GrossWithOutAddition = CASE
                                                                                          WHEN (CPF = 'Y'
                                                                                                AND Emp_Type = 'SPR'
                                                                                                 OR Emp_Type = 'SDPR'
                                                                                                 OR Emp_Type = 'SC')
                                                                                               AND [BasicPR] <= 0
                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(18, 2)), 0)
                                                                                          WHEN (CPF = 'Y'
                                                                                                AND Emp_Type = 'SPR'
                                                                                                 OR Emp_Type = 'SDPR'
                                                                                                 OR Emp_Type = 'SC')
                                                                                               AND [BasicPR] <= 0
                                                                                               AND @roundnetpay = -1 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(18, 2)), 0)
                                                                                          WHEN ([BasicPR] > 0
                                                                                                AND @roundnetpay = -1) THEN Isnull(CAST((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(18, 2)), 0)
                                                                                          WHEN ([BasicPR] > 0
                                                                                                AND @roundnetpay >= 0) THEN Isnull(CAST(Round((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(18, 2)), 0)
                                                                                          WHEN (Emp_Type = 'WP'
                                                                                                 OR Emp_Type = 'DP'
                                                                                                 OR Emp_Type = 'EP'
                                                                                                 OR Emp_Type = 'SP')
                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(18, 2)), 0)
                                                                                          WHEN (Emp_Type = 'WP'
                                                                                                 OR Emp_Type = 'DP'
                                                                                                 OR Emp_Type = 'EP'
                                                                                                 OR Emp_Type = 'SP')
                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(18, 2)), 0)
                                                                                        END
  INTO   #PriorGenPayroll
  FROM   (SELECT *,[BasicPR] = CASE
                                 WHEN (PR_Date >= @startdtsub)
                                      AND (Emp_Type = 'SPR'
                                            OR Emp_Type = 'SDPR'
                                            OR Emp_Type = 'SC') THEN Round(CONVERT(DECIMAL(18, 2), (ActPRWrkgDaysSpan * BasicDayRateWORound)), 2)
                                 ELSE -1
                               --Else Round(convert(decimal(8,2),(ActWrkgDaysSpan*BasicDayRateWORound)),2)                                                                                                                   
                               END,[Basic] = CASE
                                               WHEN PayType = 'D'
                                                    AND CONVERT(DECIMAL(18, 2), PayRateCust) <= 0 THEN 0
                                               WHEN ActPRWrkgDaysSpan > 0 THEN Round(CONVERT(DECIMAL(18, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)
                                               ELSE Round(CONVERT(DECIMAL(18, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)
                                             END
          FROM   (SELECT E.Emp_Code,E.FullName,E.Emp_Type,E.DeptName,E.GroupName,E.EmployeeGiro,E.EmployerGiro,E.GiroBank,E.PRAge,E.WorkingDaysInWeek,E.OT,E.CPF,E.CPFType,E.PayType,E.Daily_rate_mode,E.Daily_Rate,E.Pay_Mode,E.Hourly_rate,E.Join_Date Join_Date,E.Term_Date Term_Date,E.Pr_date Pr_date,E.RollDays,E.WrkgDaysInRoll,E.BasicPayInRoll,E.SubPayDays,E.WrkgDaysInSubPay,E.BasicDayRate,E.BasicDayRateWORound,(E.BasicDayRate * E.ActWrkgDaysSpan) BasicNorSubPay,E.UnpaidFullDay,E.UnpaidHalfDay,E.PaidFullDay,E.PaidHalfDay,E.UnPaidDeduct,E.UnpaidFullDayPR,E.UnpaidHalfDayPR,E.UnPaidDeductPR,(E.UnPaidDeduct + E.UnPaidDeductPR) TotalUnPaid,E.Days_Work,E.NH_Work,E.OT1Rate,E.NHHrs,E.OT1Hrs,E.OT1,E.OT2Rate,E.OT2Hrs,E.OT2,E.Add4NW,E.Add4OW,E.NH,E.Add4AW,E.Add4AWNOCPF,E.AdditionalWages,E.DedAmt,E.DedCPFAmt,E.ActSatDaySpan,E.ActSunDaySpan,E.ActWrkgDaysSpan,E.ActPRSatDaySpan,E.ActPRSunDaySpan,ActPRWrkgDaysSpan = CASE
ate IS NULL
ate > @enddtsub) THEN 0
ate IS NOT NULL
erm_Date IS NOT NULL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND (E.PR_Date >= @startdtsub
ate <= @enddtsub)
erm_Date >= @enddtsub) THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (
ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NOT NULL
ate >= @startdtsub
ate <= @enddtsub)
erm_Date < @enddtsub) THEN (Datediff(dw, E.PR_Date, E.Term_Date) + 1)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ActPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NULL
ate <= @startdtsub
oin_Date <= @enddtsub) THEN E.ActWrkgDaysSpan
ate IS NOT NULL
erm_Date IS NOT NULL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND E.PR_Date < @startdtsub
oin_Date < @startdtsub
erm_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, E.Term_Date) + 1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           - (
ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NOT NULL
ate < @startdtsub
oin_Date >= @startdtsub
oin_Date <= @enddtsub
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND E.Term_Date <= @enddtsub) THEN E.ActWrkgDaysSpan
ate IS NOT NULL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND E.Term_Date IS NULL
ate >= @startdtsub
ate <= @enddtsub)
oin_Date <= @startdtsub) THEN
atediff(dw, E.PR_Date, @enddtsub) + 1) - (
ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NULL
ate >= @startdtsub
ate <= @enddtsub)
oin_Date >= @startdtsub
oin_Date <= @enddtsub)
oin_Date < E.PR_Date THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (
ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NULL
ate >= @startdtsub
ate <= @enddtsub)
oin_Date >= @startdtsub
oin_Date <= @enddtsub)
oin_Date >= E.PR_Date THEN (Datediff(dw, E.Join_Date, @enddtsub) + 1) - (
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ActPRSatDaySpan + ActPRSunDaySpan)
ctWrkgDaysSpan
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                END,E.DaysWorkedRate,E.CalculateCPF,E.PayRateCust
                  FROM   (SELECT T.Emp_Code,T.FullName,T.Emp_Type,T.DeptName,T.GroupName,T.EmployeeGiro,T.EmployerGiro,T.GiroBank,T.PRAge,T.WorkingDaysInWeek,T.OT,T.CPF,T.CPFType,T.PayType,T.Daily_rate_mode,T.Daily_Rate,T.Pay_Mode,T.Hourly_rate,T.Join_Date Join_Date,T.Term_Date Term_Date,T.Pr_date Pr_date,T.RollDays,T.WrkgDaysInRoll,T.BasicPayInRoll,T.SubPayDays,T.WrkgDaysInSubPay,T.BasicDayRate,T.BasicDayRate BasicDayRateWORound,T.UnpaidFullDay,T.UnpaidHalfDay,T.PaidFullDay,T.PaidHalfDay,T.UnpaidFullDayPR,T.UnpaidHalfDayPR,T.Days_Work,T.NH_Work,T.OT1Rate,Isnull(T.NHHrs, 0) NHHrs,Isnull(T.OT1Hrs, 0) OT1Hrs,OT1 = CASE
roundaddition = -1 THEN T.OT1
ound(T.OT1, @roundaddition)

roundaddition = -1 THEN T.NH
ound(T.NH, @roundaddition)
ate,Isnull(T.OT2Hrs, 0) OT2Hrs,OT2 = CASE
roundaddition = -1 THEN T.OT2
ound(T.OT2, @roundaddition)
dd4NW = CASE
roundaddition = -1 THEN T.Add4NW
ound(T.Add4NW, @roundaddition)
dd4OW = CASE
roundaddition = -1 THEN T.Add4OW
ound(T.Add4OW, @roundaddition)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              END,Add4AW = CASE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             WHEN @roundaddition = -1 THEN T.Add4AW
ound(T.Add4AW, @roundaddition)
dd4AWNOCPF = CASE
roundaddition = -1 THEN T.Add4AWNOCPF
ound(T.Add4AWNOCPF, @roundaddition)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             END,AdditionalWages = CASE
roundaddition = -1 THEN T.AdditionalWages
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE Round(T.AdditionalWages, @roundaddition)
edAmt = CASE
rounddeduction = -1 THEN T.DedAmt
ound(T.DedAmt, @rounddeduction)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                END,DedCPFAmt = CASE
rounddeduction = -1 THEN T.DedCPFAmt
ound(T.DedCPFAmt, @rounddeduction)
ctSatDaySpan,T.ActSunDaySpan,ActWrkgDaysSpan = CASE
oin_Date IS NULL) THEN T.WrkgDaysInSubPay
oin_Date <= @startdtsub
erm_Date IS NULL) And HalfSalary=0 THEN (T.WrkgDaysInSubPay)
oin_Date <= @startdtsub
erm_Date IS NULL) And HalfSalary=1 THEN T.WrkgDaysInRoll/2 --(T.WrkgDaysInSubPay)
oin_Date > @startdtsub
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AND T.Term_Date IS NULL) THEN ((@RollDays - DAY(T.Join_Date) - Datediff(dw, @enddtsub, @enddtproll)) + 1) - (ActSatDaySpan + ActSunDaySpan)
oin_Date >= @startdtsub
oin_Date <= @enddtsub
erm_Date IS NOT NULL
erm_Date > @enddtsub) THEN (Datediff(dw, T.Join_Date, @enddtsub) + 1) - (ActSatDaySpan + ActSunDaySpan)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        WHEN (T.Join_Date <= @startdtsub
erm_Date IS NOT NULL
erm_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)
oin_Date >= @startdtsub
oin_Date <= @enddtsub
erm_Date IS NOT NULL
erm_Date <= @enddtsub) THEN (Datediff(dw, T.Join_Date, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)
rkgDaysInSubPay
ctPRSatDaySpan,T.ActPRSunDaySpan,UnPaidDeduct = CASE
roundunpaid = -1 THEN CONVERT(DECIMAL(18, 2), T.BasicDayRate * (T.UnpaidFullDay + T.UnpaidHalfDay))
ound(CONVERT(DECIMAL(18, 2), (Round(T.BasicDayRate, @roundunpaid) * (T.UnpaidFullDay +
npaidHalfDay))),
roundunpaid)
nPaidDeductPR = CASE
roundunpaid = -1 THEN CONVERT(DECIMAL(18, 2), T.BasicDayRate *
npaidFullDayPR +
npaidHalfDayPR))
ound(CONVERT(DECIMAL(18, 2), (Round(T.BasicDayRate, @roundunpaid) *
npaidFullDayPR

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               T.UnpaidHalfDayPR))),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @roundunpaid)
aysWorkedRate = CASE
ayType = 'D'
aily_rate_mode = 'A'
roundaddition >= 0 THEN Round((
asicDayRate * T.Days_Work),
roundaddition)
ayType = 'D'
aily_rate_mode = 'A'
roundaddition = -1 THEN (
asicDayRate * T.Days_Work)
ayType = 'D'
aily_rate_mode = 'M'
roundaddition >= 0 THEN Round(
aily_Rate * T.Days_Work,
roundaddition)
ayType = 'D'
aily_rate_mode = 'M'
roundaddition = -1 THEN (T.Daily_Rate * T.Days_Work)
ayType = 'H'
roundaddition >= 0 THEN Round((
ourly_Rate / 60) *
dbo.Converttominutes(
snull(T.NH_Work, 0))),
roundaddition)
ourly_Rate * T.NH_Work), @roundaddition)                               
ayType = 'H'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AND @roundaddition = -1 THEN (
ourly_Rate / 60) * dbo.Converttominutes(
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Isnull(T.NH_Work, 0))

ourly_Rate * T.NH_Work)                    

alculateCPF,T.PayRateCust
                          FROM   (SELECT Em.Emp_Code,(Em.emp_name + ' ' + Em.emp_lname) FullName,Em.Emp_Type,DEPT.DeptName,EG.EmpGroupName GroupName,--Em.Sex, EG.EmpGroupName GroupName, Ic_PP_Number NRICPREPWP,                                             
                                         Em.giro_acct_number EmployeeGiro,GIRO.bank_accountno EmployerGiro,giro_bank GiroBank,PRAge = CASE
                                                                                                                                        WHEN (Em.Emp_Type = 'SC') THEN 3
                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'
                                                                                                                                               OR Em.Emp_Type = 'SDPR')
                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) > 24) THEN 3
                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'
                                                                                                                                               OR Em.Emp_Type = 'SDPR')
                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) <= 12) THEN 1
                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'
                                                                                                                                               OR Em.Emp_Type = 'SDPR')
                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) > 12
                                                                                                                                                  AND Datediff(m, Em.pr_date, @startdtsub) <= 24) THEN 2
                                                                                                                                        ELSE 0
                                                                                                                                      END,Em.wdays_per_week WorkingDaysInWeek,Em.Ot_Entitlement OT,Em.Cpf_entitlement CPF,Em.EmpCPFtype CPFType,Em.Pay_Frequency PayType,Em.Payment_Mode Pay_Mode,Em.Joining_Date Join_Date,Em.Termination_date Term_Date,Em.Pr_date,Em.Hourly_rate,@RollDays RollDays,WrkgDaysInRoll = CASE
                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCountPayRoll_5
                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCountPayRoll_5p
                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCountPayRoll_6
                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCountPayRoll_7
                                                                                                                                                                                                                                                                                                                                                                                                                        END,Em.PayRateCust AS BasicPayInRoll,@NoWrkgDaysSubPay SubPayDays,WrkgDaysInSubPay = CASE
m.wdays_per_week = 5) THEN @TotalDaysCount_5
m.wdays_per_week = 5.5) THEN @TotalDaysCount_5p
m.wdays_per_week = 6) THEN @TotalDaysCount_6
m.wdays_per_week = 7) THEN @TotalDaysCount_7
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             END,BasicDayRate = CASE
m.wdays_per_week >= 5
daily_rate_mode = 'M'
daily_rate > 0) THEN Em.daily_rate
m.wdays_per_week = 5
roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5)
m.wdays_per_week = 5
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5), @roundunpaid)
m.wdays_per_week = 5.5
roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5p)
m.wdays_per_week = 5.5
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5p), @roundunpaid)
m.wdays_per_week = 6
roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_6)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHEN (Em.wdays_per_week = 6
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_6), @roundunpaid)
m.wdays_per_week = 7
roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_7)
m.wdays_per_week = 7
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_7), @roundunpaid)
hen (Em.wdays_per_week >= 5  And daily_rate_mode='M') Then daily_rate                                   
snull(UFD.UnpaidFullDay, 0) - Isnull(UFPR.UnpaidFullDayPR, 0)) UnpaidFullDay,(Isnull(UHD.UnpaidHalfDay, 0) - Isnull(UHPR.UnpaidHalfDayPR, 0)) UnpaidHalfDay,Isnull(PFD.PaidFullDay, 0) PaidFullDay,Isnull(PHD.PaidHalfDay, 0) PaidHalfDay,Isnull(UFPR.UnpaidFullDayPR, 0) UnpaidFullDayPR,Isnull(UHPR.UnpaidHalfDayPR, 0) UnpaidHalfDayPR,(Em.hourly_rate * Em.Ot1Rate) OT1Rate,EOT.NH_Work NHHrs,EOT.overtime1 OT1Hrs,
                                                 CONVERT(DECIMAL(18, 2), (((Em.hourly_rate * Em.Ot1Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime1, 0)))) OT1,(Em.hourly_rate * Em.Ot2Rate) OT2Rate,EOT.overtime2 OT2Hrs,CONVERT(DECIMAL(18, 2), (((Em.hourly_rate * Em.Ot2Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime2, 0)))) OT2,CONVERT(DECIMAL(18, 2), (((Em.hourly_rate)/60) * dbo.Converttominutes(Isnull(EOT.NH_Work, 0)))) NH,
                                                         Days_Work = CASE
                                                                       WHEN Em.Pay_Frequency = 'D' THEN Isnull(EOT.Days_Work, 0)
                                                                       ELSE 0
                                                                     END,NH_Work = CASE
                                                                                     WHEN Em.Pay_Frequency = 'H' THEN Isnull(EOT.NH_Work, 0)
                                                                                     ELSE 0
                                                                                   END,ActSatDaySpan = CASE
                                                                                                         WHEN (Em.wdays_per_week = 5.5) THEN SSD.ActSatDaySpan / 2
                                                                                                         WHEN (Em.wdays_per_week = 6) THEN 0
                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0
                                                                                                         ELSE SSD.ActSatDaySpan
                                                                                                       END,ActSunDaySpan = CASE
                                                                                                                             WHEN (Em.wdays_per_week = 7) THEN 0
                                                                                                                             ELSE SSD.ActSunDaySpan
                                                                                                                           END,ActPRSatDaySpan = CASE
                                                                                                                                                   WHEN (Em.wdays_per_week = 5.5) THEN SSDPR.ActPRSatDaySpan / 2
                                                                                                                                                   WHEN (Em.wdays_per_week = 6) THEN 0
                                                                                                                                                   WHEN (Em.wdays_per_week = 7) THEN 0
                                                                                                                                                   ELSE SSDPR.ActPRSatDaySpan
                                                                                                                                                 END,ActPRSunDaySpan = CASE
                                                                                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0
                                                                                                                                                                         ELSE SSDPR.ActPRSunDaySpan
                                                                                                                                                                       END,Isnull(Add4NW.Add4NW, 0) Add4NW,Isnull(Add4OW.Add4OW, 0) Add4OW,Isnull(Add4AW.Add4AW, 0) Add4AW,Isnull(Add4AWNOCPF.Add4AWNOCPF, 0) Add4AWNOCPF,(Isnull(Add4NW.Add4NW, 0) + Isnull(Add4OW.Add4OW, 0) + Isnull(Add4AW.Add4AW, 0)) AdditionalWages,Isnull(Ded.DedAmt, 0) DedAmt,Isnull(DCPF.DedCPFAmt, 0) DedCPFAmt,CalculateCPF,Daily_rate_mode,Daily_Rate = CASE
roundunpaid = -1 THEN Daily_Rate
ound(Daily_Rate, @roundunpaid)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      END,Em.PayRateCust,Em.HalfSalary
                                  FROM   #EmployeeTemp Em
                                         LEFT OUTER JOIN Department DEPT ON Em.Dept_Id = DEPT.Id
                                         LEFT OUTER JOIN Emp_Group EG ON Em.emp_group_id = EG.Id
                                         LEFT OUTER JOIN GiroBanks GIRO ON Em.Payment_Mode = GIRO.ID
                                         LEFT OUTER JOIN Race RA ON Em.Race_Id = RA.ID
                                         LEFT OUTER JOIN #UnpaidFullDay UFD ON Em.Emp_Code = UFD.Emp_Id
                                         LEFT OUTER JOIN #UnpaidHalfDay UHD ON Em.Emp_Code = UHD.Emp_Id
                                         LEFT OUTER JOIN #PaidFullDay PFD ON Em.Emp_Code = PFD.Emp_Id
                                         LEFT OUTER JOIN #PaidHalfDay PHD ON Em.Emp_Code = PHD.Emp_Id
                                         LEFT OUTER JOIN #UnpaidFullDayPR UFPR ON Em.Emp_Code = UFPR.Emp_Id
                                         LEFT OUTER JOIN #UnpaidHalfDayPR UHPR ON Em.Emp_Code = UHPR.Emp_Id
                                         LEFT OUTER JOIN #EOT EOT ON Em.Emp_Code = EOT.Emp_Code
                                         LEFT OUTER JOIN #SatSunDaysTemp SSD ON Em.Emp_Code = SSD.Emp_Code
                                         LEFT OUTER JOIN #PRSatSunDaysTemp SSDPR ON Em.Emp_Code = SSDPR.Emp_Code
                                         LEFT OUTER JOIN #Add4NW Add4NW ON Em.Emp_Code = Add4NW.Emp_Code
                                         LEFT OUTER JOIN #Add4OW Add4OW ON Em.Emp_Code = Add4OW.Emp_Code
                                         LEFT OUTER JOIN #Add4AW Add4AW ON Em.Emp_Code = Add4AW.Emp_Code
                                         LEFT OUTER JOIN #Add4AWNOCPF Add4AWNOCPF ON Em.Emp_Code = Add4AWNOCPF.Emp_Code
                                         LEFT OUTER JOIN #Deduction Ded ON Em.Emp_Code = Ded.Emp_Code
                                         LEFT OUTER JOIN #DeductionCPF DCPF ON Em.Emp_Code = DCPF.Emp_Code) T) E) F) G
  ORDER  BY G.FullName

  --Added on Dec 6 for Auto And Manual Funds- Start
  SELECT Emp_Code,ED.Trx_ID,FundType = Case
        When ED.FundType=1 Then 'CDAC'  
        When ED.FundType=2 Then 'ECF'  
        When ED.FundType=3 Then 'MBMF'  
        When ED.FundType=4 Then 'SINDA'  
        END  
  INTO   #FundPerc  
  FROM   Emp_Deductions ED  
         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
  WHERE  (--MONTH(trx_period) = @startmonth AND
         (trx_period >= @startdtsub  
          AND trx_period <= @enddtsub)  
         AND YEAR(trx_period) = @startyear)  
   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))  
  GROUP  BY Emp_Code, ED.trx_id, ED.FundType  

 UPDATE P  
 SET    P.DedAmt = isnull(P.DedAmt,0)+ isnull(EM.DedAmt,0)  
 FROM   #PriorGenPayroll P  
   INNER JOIN ( Select EM.Emp_Code,--F.FundType,  
  Sum(dbo.Getempfundcontribution((Isnull((P.GrossWithOutAddition + P.Add4AW + P.Add4AWNOCPF + P.Add4OW), 0)), Isnull(F.FundType, ''))) DedAmt  
 From #FundPerc F  
INNER JOIN #EmployeeTemp EM ON F.Emp_Code = EM.Emp_Code  
INNER JOIN #PriorGenPayroll P ON F.Emp_Code = P.Emp_Code  
Where  @INTendatesubmonth >=1 And EM.CalcFundFH = 'Y'  Group By EM.Emp_Code  
) EM ON P.Emp_Code = EM.Emp_Code  
  
--Added on Dec 6 for Auto And Manual Funds- End  

  --CALCULATE AW FOR CPF                                                    
  DECLARE @EMPLID INT
  DECLARE @BASICEMP FLOAT
  DECLARE db_cursor_old CURSOR FOR
      SELECT Emp_Code,[BASIC]
      FROM   #PriorGenPayroll

  OPEN db_cursor_old

  FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP

  WHILE @@FETCH_STATUS = 0
      BEGIN
          IF (@stdatesubmonth = '16'
               OR @endatesubmonth = '28'
               OR @endatesubmonth = '29'
               OR @endatesubmonth = '30'
               OR @endatesubmonth = '31')
              BEGIN
                  INSERT @CPFAWCALC
                         (Emp_Code,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWCPF)
                  SELECT *
                  FROM   dbo.Fn_calculatecpfaw (@company_id, @month, @year, @EMPLID, @BASICEMP)
              END

          FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP
      END

  CLOSE db_cursor_old

  DEALLOCATE db_cursor_old
                                                                                                                              
  SELECT *
  INTO   #FinalPre
  FROM   (SELECT *,EmployeeCPF = CASE
                                   WHEN (Em.CPFGross > 0
                                         AND Em.CPFGross <= 1500) THEN 0
                                   WHEN (Em.CPFGross <= 0) THEN 0
                                   ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployeePerc), 0)) / 100
                                 END,EmployerCPF = CASE
                                                     --WHEN @endatesubmonth = '15' THEN 0    
                                                     WHEN Em.CPFGross <= 1500
                                                          AND Em.CPFGross > 0 THEN 0
                                                     WHEN Em.CPFGross <= 0 THEN 0
                                                     ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployerPerc), 0)) / 100
                                                   END,REPLACE((SELECT Top 1 employee_cpf
                                                                FROM   CPFAmount_detail
                                                                WHERE  hdr_id = (SELECT row_id
                                                                                 FROM   CPFAmount_hdr
                                                                                 WHERE  pr_years = Em.PRAge
                                                                                    AND emp_group = Em.EmpCPFType
                                                                                    AND Em.CPFGross BETWEEN sal_from AND sal_to)
                                                                   AND age_group = Em.Age_Group
                                                                   AND CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployeeCPFRow,REPLACE((SELECT Top 1 employer_cpf
                                                                                                                                                   FROM   CPFAmount_detail
                                                                                                                                                   WHERE  hdr_id = (SELECT row_id
                                                                                                                                                                    FROM   CPFAmount_hdr
                                                                                                                                                                    WHERE  pr_years = Em.PRAge
                                                                                                                                                                       AND emp_group = Em.EmpCPFType
                                                                                                                                                                       AND Em.CPFGross BETWEEN sal_from AND sal_to)
                                                                                                                                                      AND age_group = Em.Age_Group
                                                                                                                                                      AND CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployerCPFRow
          FROM   (SELECT *,CPFAdditionNet = CASE
                                              WHEN CPFAdditionNetRev < 0 THEN 0
                                              ELSE CPFAdditionNetRev
                                            END,CPFAdditionNetRev AWSUBJCPF,CPFGross = CASE
                                                                                         WHEN (CalculateCPF = 'Y'
                                                                                               AND CalcCPFFH = 'Y'
                                                                                               AND CPFAdditionNetRev >= 0) THEN ((CPFOrdinaryCeil + CPFAdditionNetRev))
                                                                                         WHEN (CalculateCPF = 'Y'
                                                                                               AND CalcCPFFH = 'Y'
                                                                                               AND CPFAdditionNetRev < 0) THEN (CPFOrdinaryCeil)
                                                                                         ELSE 0
                                                                                       END,CPFEmployerPerc = CASE
                                                                                                               WHEN (CalculateCPF = 'Y'
                                                                                                                     AND CalcCPFFH = 'Y') THEN dbo.Getemployercpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)
                                                                                                               ELSE 0
                                                                                                             END,CPFEmployeePerc = CASE
                                                                                                                                     WHEN (CalculateCPF = 'Y'
                                                                                                                                           AND CalcCPFFH = 'Y') THEN dbo.Getemployeecpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)
                                                                                                                                     ELSE 0
                                                                                                                                   END
                  FROM   (SELECT J5.*,CPFOrdinaryCeil = CASE
                                                          WHEN (J5.CalculateCPF = 'Y')
                                                               AND (CPFOrdinary) >= @cpfceiling THEN @cpfceiling
                                                          WHEN (J5.CalculateCPF = 'Y')
                                                               AND (CPFOrdinary) < @cpfceiling THEN Isnull((CPFOrdinary), 0)
                                                          ELSE 0
                                                        END,
                                 --dbo.fn_GENPayrollAWCalc(@startmonth, @startyear, Em.Emp_Code, J5.Basic) AS CPFAdditionNetRev ,                                                        
                                 Isnull(J7.AWCPF, 0) CPFAdditionNetRev,Em.EmpCPFtype,Em.Age_Group,Em.Age,Em.FundType,Ot1SysRate,OT2SysRate,J7.CMOW,J7.LYOW,J7.CYOW,J7.CPFAWCIL,J7.EST_AWCIL,J7.ACTCIL,J7.AWCM,J7.AWB4CM,J7.AWCM_AWB4CM,EM.sdf_required,EM.Time_Card_No,EM.Fund_Optout,EM.CalcCPFFH,EM.CalcFundFH,EM.PayProcessFH,EM.HalfSalary
                          FROM   #EmployeeTemp Em --LEFT OUTER JOIN #CYOWPaidWithCPFCeilRecal J6 ON Em.Emp_Code = J6.Emp_Code                                                            
                                 --LEFT OUTER JOIN #CYOWPaidWithCPFCeil J1 ON Em.Emp_Code = J1.Emp_Code                                            
                                 --LEFT OUTER JOIN #AWPAIDCurYear J2 ON Em.Emp_Code = J2.Emp_Code                                                            
                                 --LEFT OUTER JOIN #LYOWPaidWithCPFCeil J3 ON Em.Emp_Code = J3.Emp_Code                                                            
                                 --LEFT OUTER JOIN #AWPAIDCurYearMonth J4 ON Em.Emp_Code = J4.Emp_Code                                                            
                                 LEFT OUTER JOIN #PriorGenPayroll J5 ON Em.Emp_Code = J5.Emp_Code
                                 LEFT OUTER JOIN @CPFAWCALC J7 ON Em.Emp_Code = J7.Emp_Code) Em) Em) Em
  ORDER  BY Em.FullName

  --Calculate Employer and Employee CPF Contribution                                                                                                                                           
  DECLARE db_cursor CURSOR FOR
      SELECT Emp_Code,EmployerCPFRow,EmployeeCPFRow
      FROM   #FinalPre
      WHERE  EmployeeCPFRow IS NOT NULL
          OR EmployerCPFRow IS NOT NULL

  OPEN db_cursor

  FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt

  WHILE @@FETCH_STATUS = 0
      BEGIN
          SET @compute = N'set @cpfamtemployer= ' + @EmployerCPFAmt

          EXEC Sp_executesql @compute,@param1,@cpfamtemployer OUTPUT

          SET @compute = N'set @cpfamtemployee= ' + @EmployeeCPFAmt

          EXEC Sp_executesql @compute,@param2,@cpfamtemployee OUTPUT

          --Exclusive for Full MONTH START                                                            
          --       UPDATE   #FinalPre                                                    
          --       SET      EmployerCPF = @cpfamtemployer, EmployeeCPF = @cpfamtemployee                                                    
          --       WHERE    Emp_Code = @EmpID                                                                                                                    
          UPDATE #FinalPre
          SET    EmployeeCPF = @cpfamtemployee
          WHERE  Emp_Code = @EmpID

          --IF (@endatesubmonth != '15')
          --BEGIN    
          UPDATE #FinalPre
          SET    EmployerCPF = @cpfamtemployer
          WHERE  Emp_Code = @EmpID

          --END    
          --Exclusive for Full MONTH END                                    
          FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt
      END

  CLOSE db_cursor

  DEALLOCATE db_cursor

  SELECT *
  INTO   #Final
  FROM   (SELECT Emp_Code,FullName,DeptName,GroupName,[Basic],[BasicPR],TotalAdditions,TotalAdditionsWONH=CASE
                                                                                                            WHEN (Isnull(TotalAdditions, 0) - Isnull(NH, 0)) <= 0 THEN (Isnull(NH, 0) - Isnull(TotalAdditions, 0))
                                                                                                            ELSE (Isnull(TotalAdditions, 0) - Isnull(NH, 0))
                                                                                                          END,TotalDeductions,OT1Rate,OT2Rate,NHHrs,OT1Hrs,OT2Hrs,NH,OT1,OT2,Days_Work,CAST(Round(([Basic] + OT1 + OT2 + DaysWorkedRate + Add4NW + Add4OW + Add4AW + Add4AWNOCPF) - TotalDeductions, @roundnetpay) AS DECIMAL(19, 2)) NetPay,OT,CPFOrdinaryCeil,CPFAdditionNet,CPFGross,EmployeeCPFAmt,EmployerCPFAmt,(EmployeeCPFAmt + EmployerCPFAmt) CPFAmount,CPF,EmpCPFtype,PRAge,@cpfceiling CPFCeiling,FundType,FundAmount,(UnpaidFullDay + UnpaidHalfDay + UnpaidFullDayPR + UnpaidHalfDayPR) UnPaidLeaves,TotalUnPaid,PayType,Daily_rate_mode,Daily_Rate,ActualBasic,Pay_Mode,EmployeeGiro,EmployerGiro,GiroBank,Emp_Type,WorkingDaysInWeek,CPFType,Hourly_rate,Join_Date,Term_Date,Pr_date,RollDays,WrkgDaysInRoll,BasicPayInRoll,SubPayDays,WrkgDaysInSubPay,BasicDayRate,BasicDayRateWORound,BasicNorSubPay,UnpaidFullDay,UnpaidHalfDay,PaidFullDay,PaidHalfDay,UnPaidDeduct,UnpaidFullDayPR,UnpaidHalfDayPR,UnPaidDeductPR,
                 Add4NW,
                        Add4OW,Add4AW,Add4AWNOCPF,AdditionalWages,DedAmt,DedCPFAmt,ActSatDaySpan,ActSunDaySpan,ActWrkgDaysSpan,ActPRSatDaySpan,ActPRSunDaySpan,ActPRWrkgDaysSpan,DaysWorkedRate,CPFOrdinary,Age_Group,Age,OT1SysRate,OT2SysRate,CalculateCPF,CPFEmployeePerc,CPFEmployerPerc,EmployeeCPFRow,EmployerCPFRow,CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + TotalAdditions), @roundnetpay) AS DECIMAL(19, 2)) GrossWithAddition,Isnull(GrossWithOutAddition, 0) GrossWithOutAddition,Isnull(FundGrossAmount, 0) FundGrossAmount,SDLFundGrossAmount,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF,('EmployeePayReport.aspx?qsEmpID=' + CONVERT(VARCHAR, Emp_Code) + '&qsMonth=' + CONVERT(VARCHAR, @monthidintbl) + '&qsYear=' + CONVERT(VARCHAR, @year) + '&st=' + @stdatemonth + '&en=' + @endatemonth + '&stmonth=' + @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&endmonth=' + @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' +
year AS VARCHAR) + '&monthintbl=' + CAST(@monthidintbl AS VARCHAR)) AS MediumUrl,Time_Card_No,Fund_OptOut,SDF_Required,PayProcessFH,HalfSalary
          FROM   (SELECT *,CAST((Add4NW + Add4OW + Add4AW + Add4AWNOCPF + DaysWorkedRate) AS DECIMAL(19, 2)) TotalAdditions,CAST((UnPaidDeduct + UnpaidDeductPR + DedAmt + EmployeeCPFAmt + FundAmount) AS DECIMAL(19, 2)) TotalDeductions
                  FROM   (SELECT *,Floor(EmployeeCPF) EmployeeCPFAmt,Round(((Abs(Floor(EmployeeCPF) - EmployeeCPF)) + EmployerCPF), 0) EmployerCPFAmt,FundAmount = CASE
                                                                                                                                                                     WHEN @INTendatesubmonth >= 1
                                                                                                                                                                          AND CalcFundFH = 'Y' THEN dbo.Getempfundcontribution((Isnull((GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW), 0)), Isnull(FundType, ''))
                                                                                                                                                                     ELSE 0
                                                                                                                                                                   END,FundGrossAmount = CASE
                                                                                                                                                                                           WHEN Fund_Optout = 0
                                                                                                                                                                                                AND @INTendatesubmonth >= 1
                                                                                                                                                                                                AND CalcFundFH = 'Y' THEN (GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW) - DedCPFAmt
                                                                                                                                                                                           ELSE 0
                                                                                                                                                                                         END,SDLFundGrossAmount = CASE
                                                                                                                                                                                                                    WHEN SDF_Required = 2
                                                                                                                                                                                                                         --                                                                                                                                                                                                                         AND (PR_Date <= @startdtsub)    
                                                                                                                                                                                                                         --                                                                                                                                                                                                                         AND (Emp_Type = 'SPR'    
                                                                                                                                                                                                                         --                                                                                                                                                                                                                   OR Emp_Type = 'SDPR'    
                                                                                                                                                                                                                         --                                                                                                                                                                                                                               OR Emp_Type = 'SC')    
                                                                                                                                                                                                                         --AND @INTendatesubmonth >= 16 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate)-DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)  // Commenting on 10thJune10, Since SDL was not falling in the cond hence now v made the change i.e pr date >= to <= and adding below line    
                                                                                                                                                                                                                         AND @INTendatesubmonth >= 1 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate + Add4AW + Add4AWNOCPF + Add4OW) - DedCPFAmt, @roundnetpay) AS DECIMAL(19, 2)), 0)
                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                  END
                          FROM   #FinalPre) Res) Res) Res

  --Below Part will Remain only in sp_generatepayrolladv                                          
  --Start from Here                                    
  IF (@stdatesubmonth = '16')
      BEGIN
          INSERT @FULLMONTH
                 (Emp_Code,FullName,DeptName,GroupName,[Basic],BasicPR,TotalAdditions,TotalAdditionsWONH,TotalDeductions,OT1Rate,OT2Rate,NHHrs,OT1Hrs,OT2Hrs,NH,OT1,OT2,Days_Work,NetPay,OT,CPFOrdinaryCeil,CPFAdditionNet,CPFGross,EmployeeCPFAmt,EmployerCPFAmt,CPFAmount,CPF,EmpCPFtype,PRAge,CPFCeiling,FundType,FundAmount,UnPaidLeaves,TotalUnPaid,PayType,Daily_rate_mode,Daily_Rate,ActualBasic,Pay_Mode,EmployeeGiro,EmployerGiro,GiroBank,Emp_Type,WorkingDaysInWeek,CPFType,Hourly_rate,Join_Date,Term_Date,Pr_date,RollDays,WrkgDaysInRoll,BasicPayInRoll,SubPayDays,WrkgDaysInSubPay,BasicDayRate,BasicDayRateWORound,BasicNorSubPay,UnpaidFullDay,UnpaidHalfDay,PaidFullDay,PaidHalfDay,UnPaidDeduct,UnpaidFullDayPR,UnpaidHalfDayPR,UnPaidDeductPR,Add4NW,Add4OW,Add4AW,Add4AWNOCPF,AdditionalWages,DedAmt,DedCPFAmt,ActSatDaySpan,ActSunDaySpan,ActWrkgDaysSpan,ActPRSatDaySpan,ActPRSunDaySpan,ActPRWrkgDaysSpan,DaysWorkedRate,CPFOrdinary,Age_Group,Age,OT1SysRate,OT2SysRate,CalculateCPF,CPFEmployeePerc,
                  CPFEmployerPerc
                  ,
                  EmployeeCPFRow,EmployerCPFRow,GrossWithAddition,GrossWithOutAddition,FundGrossAmount,SDLFundGrossAmount,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF,MediumUrl,Time_Card_No,Fund_OptOut,SDF_Required)
          EXEC Sp_generatepayrolladvfullmonth @company_id,@month,@year,@UserID,@EmpPassID,@stdatemonth,@endatemonth,1,@lastdaymonth,@monthidintbl

          --EXEC sp_GeneratePayRollAdvFullMonth 2,1,2010,2,'53',1,31,1,31                                      
          --SELECT * FROM @FULLMONTH                                          
          UPDATE F
          SET    F.CPFOrdinaryCeil = Isnull(FM.CPFOrdinaryCeil, 0),
                 F.CPFAdditionNet = Isnull(FM.CPFAdditionNet, 0),
                 F.CPFGross = Isnull(FM.CPFGross, 0),
                 F.EmployeeCPFAmt = (Isnull(FM.EmployeeCPFAmt, 0) - Isnull(PD.empcpf, 0)),
                 F.EmployerCPFAmt = (Isnull(FM.EmployerCPFAmt, 0) - Isnull(PD.employercpf, 0)),
                 F.GrossWithOutAddition = Isnull(FM.GrossWithOutAddition, 0),
                 F.CPFCeiling = Isnull(FM.CPFCeiling, 0),
                 F.CPFOrdinary = Isnull(FM.CPFOrdinary, 0),
                 F.CPFEmployeePerc = Isnull(FM.CPFEmployeePerc, 0),
                 F.CPFEmployerPerc = Isnull(FM.CPFEmployerPerc, 0),
                 F.EmployeeCPFRow = Isnull(FM.EmployeeCPFRow, 0),
                 F.EmployerCPFRow = Isnull(FM.EmployerCPFRow, 0),
                 F.FundGrossAmount = Isnull(FM.FundGrossAmount, 0),
                 F.SDLFundGrossAmount = Isnull(FM.SDLFundGrossAmount, 0),
                 F.CMOW = Isnull(FM.CMOW, 0),
                 F.LYOW = Isnull(FM.LYOW, 0),
                 F.CYOW = Isnull(FM.CYOW, 0),
                 F.CPFAWCIL = Isnull(FM.CPFAWCIL, 0),
                 F.EST_AWCIL = Isnull(FM.EST_AWCIL, 0),
                 F.ACTCIL = Isnull(FM.ACTCIL, 0),
                 F.AWCM = Isnull(FM.AWCM, 0),
                 F.AWB4CM = Isnull(FM.AWB4CM, 0),
                 F.AWCM_AWB4CM = Isnull(FM.AWCM_AWB4CM, 0),
                 F.AWSUBJCPF = Isnull(FM.AWSUBJCPF, 0),
                 F.FundType = Isnull(FM.FundType, 0),
                 F.CPFAmount = (Isnull(FM.EmployeeCPFAmt, 0) - Isnull(PD.empcpf, 0)) + (Isnull(FM.EmployerCPFAmt, 0) - Isnull(PD.employercpf, 0))
          --F.FundAmount    = isnull(FM.FundAmount,0)--,            
          --F.TotalDeductions   = (isnull(FM.TotalDeductions,0)-isnull(F.TotalDeductions,0) + isnull(FM.FundAmount,0))                                      
          FROM   #Final F
                 INNER JOIN @FULLMONTH FM ON F.Emp_Code = FM.Emp_Code
                 INNER JOIN (SELECT emp_id,empcpf,employercpf
                             FROM   prepare_payroll_detail
                             WHERE  trx_id IN (SELECT trx_id
                                               FROM   prepare_payroll_hdr
                                               WHERE  Start_Period >= CONVERT(DATETIME, ('01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103)
                                                  AND End_Period <= CONVERT(DATETIME, ('15/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103))
                                AND ([Status] = 'P'
                                      OR [Status] = 'G'
                                      OR [Status] = 'A')) PD ON F.Emp_Code = PD.Emp_ID

          UPDATE F
          SET    F.FundAmount = Isnull(FM.FundAmount, 0) - Isnull(PD.Fund_Amount, 0)
          --, F.TotalDeductions = F.UnPaidDeduct + F.UnpaidDeductPR + F.DedAmt + F.EmployeeCPFAmt + F.FundAmount    
          FROM   #Final F
                 INNER JOIN @FULLMONTH FM ON F.Emp_Code = FM.Emp_Code
                 INNER JOIN (SELECT emp_id,empcpf,employercpf,Fund_Amount
                             FROM   prepare_payroll_detail
                             WHERE  trx_id IN (SELECT trx_id
                                               FROM   prepare_payroll_hdr
                                               WHERE  Start_Period >= CONVERT(DATETIME, ('01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103)
                                                  AND End_Period <= CONVERT(DATETIME, ('15/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103))
                                AND ([Status] = 'P'
                                      OR [Status] = 'G'
                                      OR [Status] = 'A')) PD ON F.Emp_Code = PD.Emp_ID

          UPDATE F
          SET    F.TotalDeductions = F.UnPaidDeduct + F.UnpaidDeductPR + F.DedAmt + F.EmployeeCPFAmt + F.FundAmount
          FROM   #Final F
                 INNER JOIN @FULLMONTH FM ON F.Emp_Code = FM.Emp_Code
                 INNER JOIN (SELECT emp_id,empcpf,employercpf
                             FROM   prepare_payroll_detail
                             WHERE  trx_id IN (SELECT trx_id
                                               FROM   prepare_payroll_hdr
                                               WHERE  Start_Period >= CONVERT(DATETIME, ('01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103)
                                                  AND End_Period <= CONVERT(DATETIME, ('15/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103))
                                AND ([Status] = 'P'
                                      OR [Status] = 'G'
                                      OR [Status] = 'A')) PD ON F.Emp_Code = PD.Emp_ID

          UPDATE #Final
          SET    NetPay = ([Basic] + TotalAdditions + OT1 + OT2) - TotalDeductions
          WHERE  BasicPR = -1

          UPDATE #Final
          SET    NetPay = (BasicPR + TotalAdditions + OT1 + OT2) - TotalDeductions
          WHERE  BasicPR != -1
      END

  ---END HERE                                          
  SELECT *
  FROM   #Final F
  ORDER  BY FullName

  DROP TABLE #Final

  DROP TABLE #FinalPre

  DROP TABLE #EmployeeTemp

  DROP TABLE #PRSatSunDaysTemp

  DROP TABLE #SatSunDaysTemp

  DROP TABLE #UnpaidFullDayPR

  DROP TABLE #UnpaidHalfDayPR

  DROP TABLE #PaidHalfDay

  DROP TABLE #PaidFullDay

  DROP TABLE #UnpaidHalfDay

  DROP TABLE #UnpaidFullDay

  DROP TABLE #Add4AW

  DROP TABLE #Add4OW

  DROP TABLE #Add4NW

  DROP TABLE #EOT

  DROP TABLE #PriorGenPayroll

  --DROP TABLE #AWPAIDCurYear  
  --DROP TABLE #CYOWPaidWithCPFCeil  
  --DROP TABLE #CYOWPaidWithCPFCeilRecal  
  --DROP TABLE #AWPAIDCurYearMonth  
  --DROP TABLE #LYOWPaidWithCPFCeil  
  DROP TABLE #Deduction

  DROP TABLE #DeductionCPF

  DROP TABLE #EmployeeWorkFlow

  DROP TABLE #EmployeeWorkFlowLevel

  DROP TABLE #EmployeeAssignedToPayrollGroup 

  DROP TABLE #EmpPayTemp

  DROP TABLE #EmpPayTempOLD

  DROP TABLE #FundPerc

GO
----Meging 9.0




SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_GetPayrollMonth 0,0,0    
CREATE PROCEDURE [dbo].[sp_GetPayrollMonth]    
(    
 @ROWID   INT = 0,    
 @YEARS   INT = 0,    
 @PAYTYPE INT = 0    
)    
As    
BEGIN        
DECLARE @select VARCHAR(200)            
    
Select ROWID = IDENTITY( INT,1,1),*,Day(paystartdate) PayStartDay,Day(PayEndDate) PayEndDay,Day(PaySubStartDate) PaySubStartDay,Day(PaySubEndDate) PaySubEndDay Into #DY From     
(    
Select *,     
(Select Min(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PayStartDate,     
(Select Max(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PayEndDate,     
(Select Min(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PaySubStartDate,     
(Select Max(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PaySubEndDate     
From    
(    
 Select Distinct 1 [PayType],Year(DateInYear) [Year],Month(DateInYear) [Month],DATENAME(month,DateInYear) [MonthName]    
 From DateInYear     
)    
DY     
Union    
Select *,    
(Select Min(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PayStartDate,     
(Select Max(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PayEndDate,     
(Select Min(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PaySubStartDate,     
(Select Max(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month] And DateName(day,DateInYear) <=15) PaySubEndDate     
From    
(    
 Select Distinct 2 [PayType],Year(DateInYear) [Year],Month(DateInYear) [Month],DATENAME(month,DateInYear) + ' First Half' [MonthName]    
 From DateInYear     
)    
DY     
Union    
Select *,    
(Select Min(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PayStartDate,     
(Select Max(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PayEndDate,     
(Select Min(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month] And DateName(day,DateInYear) >=16) PaySubStartDate,     
(Select Max(DateInYear) From DateInYear DI Where DY.[Year] = Year(DI.DateInYear) And Month(DI.DateInYear)=DY.[Month]) PaySubEndDate     
From    
(    
 Select Distinct 2 [PayType],Year(DateInYear) [Year],Month(DateInYear) [Month],DATENAME(month,DateInYear) + ' Second Half' [MonthName]    
 From DateInYear     
)
DY
) DY
Order By DY.[PayType],DY.[Year],DY.[Month]    
    
 IF (@ROWID > 0)         
 BEGIN                    
  SELECT    @select = 'Delete From #DY Where ROWID != ' + Convert(varchar,@ROWID)    
  EXEC (@select)                    
 END                     
    
 IF (@YEARS > 0)         
 BEGIN                    
  SELECT    @select = 'Delete From #DY Where YEAR != ' +Convert(varchar,@YEARS)    
  EXEC (@select)                    
 END                     
    
 IF (@PAYTYPE > 0)         
 BEGIN                    
  SELECT    @select = 'Delete From #DY Where PAYTYPE != ' + Convert(varchar,@PAYTYPE)    
  EXEC (@select)                    
 END                     
    
Select *,ISEOM=CASE When [MonthName] Like '%First%' Then 'FH' When [MonthName] Like '%Second%' Then 'SH' Else 'FM' End From #DY    
  
Drop Table #DY    
END    
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE  PROCEDURE [dbo].[sp_EMP_IR8A_MonthReports]          
			 @year INT ,       
			 @companyid INT ,       
			 @EmpCode VARCHAR(8000)          
		 AS          
		 Declare @i INT   
		 DECLARE @cnt INT       
		 SET @i=1    
		 --SET      @year ='2010'    
		 --SET @companyid=2    
		 --SET @EmpCode=18    
		DECLARE @yearlumsum INT  
		SET @yearlumsum = @year+1  

		Create Table #EmployeeEarningtemp        
		(     
		 [ID]   [nvarchar](50) NULL,    
		 [IRYear] [nvarchar](50) NULL,        
		 [Emp_ID]  [nvarchar](50) NULL,        
		 [GrossPay] [nvarchar](1000) NULL,        
		 [Bonus] [nvarchar](50) NULL,        
		 [DirectorFee] [nvarchar](50) NULL,        
		 [Commission] [nvarchar](50) NULL,        
		 [Pension] [nvarchar](50) NULL,        
		 [TransptAllw] [nvarchar](50) NULL,        
		 [EntAllow] [nvarchar](50) NULL,        
		 [OtherAllow] [nvarchar](50) NULL,        
		 [EmployeeCPF] [nvarchar](50) NULL,        
		 [Funds] [nvarchar](50) NULL,        
		 [MBMF] [nvarchar](50) NULL      
		)     

		--SELECT @yearlumsum  
		 SELECT @cnt=COUNT(*) FROM EmployeeEarning WHERE EMP_ID=@EmpCode AND IRYear=@yearlumsum  
		 --SET @cnt=0
		 IF @cnt>0
			INSERT #EmployeeEarningtemp     
			SELECT * FROM EmployeeEarning WHERE EMP_ID=@EmpCode AND IRYear=@yearlumsum  
		 ELSE
			INSERT INTO #EmployeeEarningtemp  
			 SELECT 1 As [ID],@yearlumsum As [IRYear],@EmpCode As [Emp_ID],0,0,0,0,0,0,0,0,0,0,0

		      
		 Create Table #InsertMonthData
		 (        
			[Month] [nvarchar](50) NULL,
			[GrossPay] [nvarchar](50) NULL,
			[Bonus] [nvarchar](50) NULL,
			[DirectorFee] [nvarchar](50) NULL,
			[Commission] [nvarchar](50) NULL,
			[Pension] [nvarchar](50) NULL,
			[TransptAllw] [nvarchar](50) NULL,
			[EntAllow] [nvarchar](50) NULL,
			[OtherAllow] [nvarchar](50) NULL,
			[EmployeeCPF] [nvarchar](50) NULL,
			[Funds] [nvarchar](50) NULL,  
			[MBMF] [nvarchar](50) NULL    
		)     
		    
		 --SELECT * FROM #EmployeeEarningtemp     
		 INSERT  #InsertMonthData     
		 SELECT 'LumSum'AS 'Month',GrossPay,[Bonus],        
		 [DirectorFee],        
		 [Commission] ,        
		 [Pension] ,        
		 [TransptAllw] ,        
		 [EntAllow] ,        
		 [OtherAllow],        
		 [EmployeeCPF],        
		 [Funds] ,        
		 [MBMF] FROM  #EmployeeEarningtemp       
		      
		 while  @i < 14        
		      
		 Begin         
		      
		 Declare @month int        
		      
		 Set @month =@i        
		      
		 if @i < 13        
		      
		 begin        
		      
		 INSERT #InsertMonthData        
		      
		 SELECT        
		      
		 Case @month         
		      
		  When '1'  Then 'January'         
		  When '2'  Then 'February'         
		  When '3'  Then 'March'         
		  When '4'  Then 'April'         
		  When '5'  Then 'May'         
		  When '6'  Then 'June'         
		  When '7'  Then 'July'         
		  When '8'  Then 'August'         
		  When '9'  Then 'September'         
		  When '10' Then 'October'         
		  When '11' Then 'November'         
		  When '12' Then 'December'         
		  When '13' Then 'Total'         
		 End As Month,        
		 --ISNULL (cast(  ISNULL ([dbo].[fn_MonthSalary](@EmpCode, @year,@month),0)as decimal(18,2))+ISNULL ([dbo].[fn_MonthAdditionalSalary](@EmpCode, @year,@month),0),0) as GrossPay,        
		 ISNULL (CAST(ISNULL ([dbo].[fn_MonthSalary](@EmpCode, @year,@month),0)as decimal(18,2))+ CAST(ISNULL ([dbo].[fn_MonthAdditionalSalary_NHE](@EmpCode,@year,@month),0)as decimal(18,2)) +ISNULL ([dbo].[fn_MonthAdditionalSalary](@EmpCode, @year,@month),0),0) as GrossPay,
		 ISNULL ([dbo].[fn_MonthBonus](@EmpCode, @year,@month),0)as bonus,ISNULL (dbo.[fn_MonthDirectorsFee](@EmpCode, @year,@month),0) as DirectorFee,        
		 ISNULL ([dbo].[fn_MonthGrossCommissionAmount](@EmpCode, @year,@month),0) As Commission,        
		 ISNULL ([dbo].[fn_MonthGetOtherInfo](@EmpCode, @year,@month, 4),0)  As Pension,        
		 ISNULL ([dbo].[fn_MonthGetOtherInfo](@EmpCode, @year,@month, 5),0)  AS TransptAllw,        
		 ISNULL ([dbo].[fn_MonthGetOtherInfo](@EmpCode, @year,@month, 6),0)  AS EntAllow,        
		 ISNULL ([dbo].[fn_MonthGetOtherInfo](@EmpCode, @year,@month, 7),0)  AS OtherAllow,        
		 ISNULL ([dbo].[fn_getMonthSumCPF](@EmpCode, @year,@month),0)  AS EmployeeCPF,        
		 ISNULL ([dbo].[fn_getMonthFundDetails](@EmpCode, @year,@month),0)  AS Funds,        
		 ISNULL ([dbo].[fn_getMonthFundDetailsMBMF](@EmpCode, @year,@month),0)  AS MBMF        
		 end    
		 else        
		 BEGIN        
		 INSERT #InsertMonthData        
		 SELECT         
		  Case @month         
		  When '1'  Then 'January'         
		  When '2'  Then 'February'         
		  When '3'  Then 'March'         
		  When '4'  Then 'April'         
		  When '5'  Then 'May'         
		  When '6'  Then 'June'         
		  When '7'  Then 'July'         
		  When '8'  Then 'August'         
		  When '9'  Then 'September'         
		  When '10' Then 'October'         
		  When '11' Then 'November'         
		  When '12' Then 'December'         
		  When '13' Then 'Total'         
		 End As Month,        
		      
		 ISNULL (Sum(cast(GrossPay as decimal(18,2))),0)As GrossPay,ISNULL (sum(cast(BONUS as decimal(18,2))),0)As BONUS,ISNULL (Sum(cast(DirectorFee as decimal(18,2))),0)As DirectorFee,ISNULL (Sum(cast(Commission  as decimal(18,2))),0)As Commission,ISNULL (Sum(cast(Pension as decimal(18,2))),0)As Pension,          
		 ISNULL (Sum(cast(TransptAllw as decimal(18,2))),0)As TransptAllw,ISNULL (Sum(cast(EntAllow as decimal(18,2))),0)As EntAllow,ISNULL (Sum(cast(OtherAllow as decimal(18,2))),0)As OtherAllow,ISNULL (Sum(cast(EmployeeCPF as decimal(18,2))),0)As EmployeeCPF,ISNULL (Sum(cast(Funds as decimal(18,2))),0)As Funds,ISNULL (Sum(cast(MBMF as decimal(18,2))),0)As MBMF     
		 from #InsertMonthData        
		 END        
		 SET @i = @i+1;       
		 END        
		    
		SELECT * Into #Temp From #InsertMonthData  WHERE [Month]='LumSum' OR [Month]='Total'    
		DELETE FROM #InsertMonthData  WHERE [Month]='LumSum' OR [Month]='Total'    
		   
		INSERT #InsertMonthData    
		SELECT * FROM #Temp WHERE [Month]='LumSum'  

		INSERT #InsertMonthData    
		SELECT * FROM #Temp WHERE [Month]='Total'		    
		--DELETE Top(1) FROM #InsertMonthData
		--INSERT #InsertMonthData    
		--SELECT * FROM #Temp WHERE [Month]='Total'
		
		SELECT * FROM #InsertMonthData
								    
		DROP table #EmployeeEarningtemp
				     
		DROP table #InsertMonthData
		     
		DROP table #Temp      
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_GetPayrollProcessOn]
	@empcode	INT,
	@compid		INT,
	@trxdate	varchar(10)
AS
IF (@empcode = -1)
BEGIN
	Select Count(ph.trx_id) CNT From Prepare_payroll_hdr	ph
	Inner Join Prepare_payroll_detail pd  ON  ph.trx_id = pd.trx_id
	Inner Join Employee E ON pd.emp_id = E.Emp_Code
	Where Convert(DateTime,@trxdate,103) between ph.start_period and ph.end_period 
	And Pd.status != 'R' And E.Company_ID=@compid
END
ELSE
BEGIN
	Select Count(ph.trx_id) CNT From Prepare_payroll_hdr	ph
	Inner Join Prepare_payroll_detail pd  ON  ph.trx_id = pd.trx_id
	Inner Join Employee E ON pd.emp_id = E.Emp_Code
	Where Convert(DateTime,@trxdate,103) between ph.start_period and ph.end_period 
	And Pd.Emp_ID=@empcode and Pd.status != 'R' And E.Company_ID=@compid
END
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE Sp_updatepayslipremarks @rowId     NVARCHAR(10),
                                         @empCode   NVARCHAR(10),
                                         @startDate NVARCHAR(10),
                                         @endDate   NVARCHAR(10),
                                         @remarks   NVARCHAR(500),
                                         @remarksBy NVARCHAR(50)
AS
  DECLARE @recExit AS INT

  SELECT @recExit = COUNT(*)
  FROM   empPayslipRemarks
  WHERE  emp_code = @empCode
     AND Rowid = @rowId
     AND StartDate = @startDate
     AND EndDate = @endDate

  IF @recExit = 0
      BEGIN
          INSERT INTO empPayslipRemarks
          VALUES     (@rowId,@empCode,@startDate,@endDate,@remarks,@remarksBy)
      END
  ELSE
      BEGIN
          UPDATE empPayslipRemarks
          SET    Remarks = @remarks,
                 RemarksBy = @remarksBy
          WHERE  emp_code = @empCode and ROWID = @rowId and 
                 STARTdATE = @startDate and 
                 ENDDATE = @endDate
      END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure sp_AccomadationDetails  
	@compId as nvarchar(10),  
	@accCode as nvarchar(10)  
	as  

	Select   e.emp_Name + ' ' + e.emp_lname as EmployeeName ,e.Time_Card_No as [Time Card No],EffectiveCheckInDate   
	from dbo.EmpAccomadationDetails EA        
	INNER join AccomodationMasterTable A      
	on LTRIM(RTRIM(EA.AccomadationCode)) = LTRIM(RTRIM(A.AccCode))      
	inner join employee e        
	on e.emp_code=EA.Emp_code        
	where EffectiveCheckOutDate is NUll  and E.emp_code in(select emp_code from employee where company_id=@compId)  
	and EA.AccomadationCode = @accCode  
	order by EffectiveCheckIndate
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure [dbo].[sp_DelteEmpCheckInCheckOutDetails]     
	@id as nvarchar(10)
	as     
	Delete from EmpAccomadationDetails where Id=@id
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure sp_EmpAccomadationDetails    
	@compId as nvarchar(10)    
	As    
	select T2.emp_code,T2.emp_name + '' + T2.emp_lname as empName,T2.emp_type as Passtype,T2.Ic_pp_number as ic_pp_number,T2.time_card_no,    
	case when T1.AccomadationCode is NUll Then '' else T1.AccomadationCode end as AccomadationCode,    
	case when T1.AccomodationName is NUll Then '' else T1.AccomodationName end as AccomadationName,    
	case when T1.EffectiveCheckInDate is NUll Then '' else T1.EffectiveCheckInDate end as EffectiveCheckInDate,    
	case when T1.EffectiveCheckOutDate is NUll Then '' else T1.EffectiveCheckOutDate end as EffectiveCheckOutDate,    
	case when T1.CheckInStatus is NUll Then '' else T1.CheckInStatus end as CheckInStatus,    
	case when T1.AssignedBy is NUll Then '' else T1.AssignedBy end as AssignedBy    
	from (Select EA.Emp_code as EmpCode,EA.AccomadationCode ,A.AccomodationName,EffectiveCheckInDate,              
	Case When EffectiveCheckOutDate is NUll then ''              
	Else EffectiveCheckOutDate end as EffectiveCheckOutDate,              
	case When EffectiveCheckInDate is null and  effectiveCheckOutDate is null then 'Open'              
	when EffectiveCheckInDate is not null and  effectiveCheckOutDate is null then 'Checked In'              
	when EffectiveCheckInDate is not null and  effectiveCheckOutDate is not null then 'Checked Out'              
	end as CheckInStatus,(Select Emp_Name + '' +Emp_LName From Employee where emp_code=AssignedBy  ) As AssignedBy       from dbo.EmpAccomadationDetails EA          
	INNER join AccomodationMasterTable A        
	on LTRIM(RTRIM(EA.AccomadationCode)) = LTRIM(RTRIM(A.AccCode))        
	Left outer  join employee e          
	on e.emp_code=EA.Emp_code     
	where EA.id in (select max(id) from EmpAccomadationDetails group by emp_code)    
	and e.Company_id=@compId ) as T1    
	Right outer join     
	employee T2     
	on T1.empCode=T2.emp_code    
	where T2.Company_id=@compId  and T2.termination_date is null    
	order by empName 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	 
CREATE Procedure [dbo].[sp_GetAccomadationDetails]
@compId as nvarchar(10),    
@AccCode as nvarchar(10)='',
@type nvarchar(10)=1    
as         
if(@type =1)
begin 
declare @usedCapacity  int

Select AccCode as AccomadationCode, AccomodationName as AccomadationName,Capacity,
(select count(*) from EmpAccomadationDetails where EffectiveCheckOutDate Is Null and AccomadationCode= a.AccCode) as UsedCapacity, AccAuthPerson1, AccAuthPersonPhone,case when Cooking = '1' then 'Y' else 'N' end as Cooking ,case when Laundry = '1' then 'Y' else 'N' end as Laundry,case when Aircon = '1' then 'Y' else 'N' end as Aircon,EmpRent Rent
 from AccomodationMasterTable a where compid=@compId 
end
else 
select AccCode, AccomodationName, AssetType,case when AssetAmount = NULL then 0 else AssetAmount end as AssetAmount, AccAddressLine1, AccAddressLine2, AccPostalCode, AccAuthPerson1, AccAuthPersonPhone, AccAuthPerson2, AccAuthPerson2Phone, AccAssistantName, AccAssistantPhone, ArchitectCompanyName, ArchitectCompanyAddress, ArchitectCompanyPhone, ArchitectCompanyFax, ArchitectAuthPersonName, ArchitectAuthPersonEmail, Cooking, CookingType,  CookingCost, Laundry, LaundryCost, Aircon, AirconCost, TotalRooms, Capacity, singleBedNo, DoubleBedNo, TripleBedNo, NEAApproval, NEADateOfApproval, NEADateOfExpiry, NEAAppRefNo, NEAAppCapacity, PUBapproval, PUBdateOfApproval, PUBDateOfExpiry, PUBAppRefNo, PUBappCapacity, PropertyType, PropertyMonthlyRental, PropertydateOfApproval, PropertyDateOfExpiry, PropertyApprRefNo, PropertyApprCapacity,EmpRent from AccomodationMasterTable where compid=  @compID  and AccCode= @AccCode

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure [dbo].[sp_GetEmpCheckInCheckOutDetails]           
 @empCode as nvarchar(10),        
 @NoRecords as int        
        
as          
if @NoRecords = -1        
Begin         
 Select EA.id,EA.Emp_code as EmpCode,EA.AccomadationCode,A.AccomodationName  As AccomadationName,EffectiveCheckInDate,          
 Case When EffectiveCheckOutDate is NUll then ''          
  Else EffectiveCheckOutDate end as EffectiveCheckOutDate,          
 case When EffectiveCheckInDate is null and  effectiveCheckOutDate is null then 'Open'          
 when EffectiveCheckInDate is not null and  effectiveCheckOutDate is null then 'Checked In'          
 when EffectiveCheckInDate is not null and  effectiveCheckOutDate is not null then 'Checked Out'          
 end as CheckInStatus,(Select Emp_Name + '' +Emp_LName From Employee where emp_code=AssignedBy  ) As AssignedBy          
 from dbo.EmpAccomadationDetails EA     
INNER join AccomodationMasterTable A    
on LTRIM(RTRIM(EA.AccomadationCode)) = LTRIM(RTRIM(A.AccCode))    
inner join employee e      
on E.emp_code=EA.Emp_code      
      
where EA.Emp_code=@empCode          
order by EffectiveCheckIndate desc        
End        
Else        
Select Top(@NoRecords) EA.id,EA.Emp_code as EmpCode,EA.AccomadationCode ,A.AccomodationName As AccomadationName,EffectiveCheckInDate,          
 Case When EffectiveCheckOutDate is NUll then ''          
  Else EffectiveCheckOutDate end as EffectiveCheckOutDate,          
 case When EffectiveCheckInDate is null and  effectiveCheckOutDate is null then 'Open'          
 when EffectiveCheckInDate is not null and  effectiveCheckOutDate is null then 'Checked In'          
 when EffectiveCheckInDate is not null and  effectiveCheckOutDate is not null then 'Checked Out'          
 end as CheckInStatus,(Select Emp_Name + '' +Emp_LName From Employee where emp_code=AssignedBy  ) As AssignedBy          
 from dbo.EmpAccomadationDetails EA      
INNER join AccomodationMasterTable A    
on LTRIM(RTRIM(EA.AccomadationCode)) = LTRIM(RTRIM(A.AccCode))    
inner join employee e      
on e.emp_code=EA.Emp_code      
where E.emp_code=@empCode          
order by EffectiveCheckIndate desc        
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
CREATE Procedure [dbo].[Sp_InsertAccomadationDetails]      
 @AccomodationName  nvarchar(50),     
@AssetType nvarchar(50),     
@AssetAmount nvarchar(50),
@AccAddressLine1 nvarchar(50),     
@AccAddressLine2 nvarchar(50),     
@AccPostalCode nvarchar(50),     
@AccAuthPerson1 nvarchar(50),     
@AccAuthPersonPhone nvarchar(50),     
@AccAuthPerson2 nvarchar(50),     
@AccAuthPerson2Phone nvarchar(50),     
@AccAssistantName nvarchar(50),     
@AccAssistantPhone nvarchar(50),     
@ArchitectCompanyName nvarchar(50),     
@ArchitectCompanyAddress nvarchar(50),     
@ArchitectCompanyPhone nvarchar(50),     
@ArchitectCompanyFax nvarchar(50),     
@ArchitectAuthPersonName nvarchar(50),     
@ArchitectAuthPersonEmail nvarchar(50),     
@Cooking nvarchar(50),     
@CookingType nvarchar(50),     
@CookingCost nvarchar(50),     
@Laundry nvarchar(50),     
@LaundryCost nvarchar(50),     
@Aircon nvarchar(50),     
@AirconCost nvarchar(50),     
@TotalRooms nvarchar(50),     
@Capacity nvarchar(50),     
@singleBedNo nvarchar(50),     
@DoubleBedNo nvarchar(50),     
@TripleBedNo nvarchar(50),     
@NEAApproval nvarchar(50),     
@NEADateOfApproval nvarchar(50),     
@NEADateOfExpiry nvarchar(50),     
@NEAAppRefNo nvarchar(50),     
@NEAAppCapacity nvarchar(50),     
@PUBapproval nvarchar(50),     
@PUBdateOfApproval nvarchar(50),     
@PUBDateOfExpiry nvarchar(50),     
@PUBAppRefNo nvarchar(50),     
@PUBappCapacity nvarchar(50),     
@PropertyType nvarchar(50),     
@PropertyMonthlyRental nvarchar(50),     
@PropertydateOfApproval nvarchar(50),     
@PropertyDateOfExpiry nvarchar(50),     
@PropertyApprRefNo nvarchar(50),     
@PropertyApprCapacity nvarchar(50),    
@EmpRent nvarchar(50),  
@CompId nvarchar(10) 
as      
declare @accCode as nvarchar(40)      
DECLARE @REC AS nvarchar;
SELECT @REC =  Count(*) +1 FROM AccomodationMasterTable;
if @REC <10      
set @accCode = 'ACC00' + cast(@REC as nvarchar)
else       
set @accCode = 'ACC0'  + cast(@REC as nvarchar)     

INSERT INTO [AccomodationMasterTable]      
(    
AccCode, AccomodationName, AssetType,AssetAmount, AccAddressLine1, AccAddressLine2, AccPostalCode, AccAuthPerson1, AccAuthPersonPhone, AccAuthPerson2, AccAuthPerson2Phone, AccAssistantName, AccAssistantPhone, ArchitectCompanyName, ArchitectCompanyAddress, ArchitectCompanyPhone, ArchitectCompanyFax, ArchitectAuthPersonName, ArchitectAuthPersonEmail, Cooking, CookingType,  CookingCost, Laundry, LaundryCost, Aircon, AirconCost, TotalRooms, Capacity, singleBedNo, DoubleBedNo, TripleBedNo, NEAApproval, NEADateOfApproval, 
  
NEADateOfExpiry, NEAAppRefNo, NEAAppCapacity, PUBapproval, PUBdateOfApproval, PUBDateOfExpiry, PUBAppRefNo, PUBappCapacity, PropertyType, PropertyMonthlyRental, PropertydateOfApproval, PropertyDateOfExpiry, PropertyApprRefNo, PropertyApprCapacity,empRent,CompId) 
   
VALUES(@accCode,@AccomodationName, @AssetType, @AssetAmount,@AccAddressLine1, @AccAddressLine2, @AccPostalCode, @AccAuthPerson1, @AccAuthPersonPhone, @AccAuthPerson2, @AccAuthPerson2Phone, @AccAssistantName, @AccAssistantPhone, @ArchitectCompanyName, @ArchitectCompanyAddress, @ArchitectCompanyPhone, @ArchitectCompanyFax, @ArchitectAuthPersonName, @ArchitectAuthPersonEmail, @Cooking, @CookingType, @CookingCost, @Laundry, @LaundryCost, @Aircon, @AirconCost, @TotalRooms, @Capacity, @singleBedNo, @DoubleBedNo, @TripleBedNo, @NEAApproval, @NEADateOfApproval, @NEADateOfExpiry, @NEAAppRefNo, @NEAAppCapacity, @PUBapproval, @PUBdateOfApproval, @PUBDateOfExpiry, @PUBAppRefNo, @PUBappCapacity, @PropertyType, @PropertyMonthlyRental, @PropertydateOfApproval, @PropertyDateOfExpiry, @PropertyApprRefNo, @PropertyApprCapacity,@EmpRent,@CompId) 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
CREATE Procedure [dbo].[sp_InsertEmpCheckInCheckOutDetails] 
 @empCode as nvarchar(10),  
 @accCode as nvarchar(10),
 @checkInDate as nvarchar(15),
 @emp_supervisor as nvarchar(15)
as  

Insert into EmpAccomadationDetails (Emp_Code,AccomadationCode,EffectiveCheckInDate,EffectIveCheckOutDate,AssignedBy)
values(@empCode,@accCode,@checkInDate,NULL,@emp_supervisor)
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure [dbo].[Sp_UpdateAccomadationDetails]
	@accCode as nvarchar(40),
	@accName as nvarchar(50),
	@accAddress1 as nvarchar(50),
	@accAddress2 as nvarchar(50),
	@accPostalCode as nvarchar(50),
	@accCapacity as nvarchar(5),
	@accRent as nvarchar(5),
	@accActive as nvarchar(1)
	as
	Update AccomadationDetails  set AccomadationName=@accName,AccomadationAddressLine1=@accAddress1,
	AccomadationAddressLine2=@accAddress2,
	AccomadationPostalCode=@accPostalCode,
	Capacity=@accCapacity,
	Rent =@accRent,
	Active = @accActive
	where AccomadationCode=@accCode
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure [dbo].[sp_UpdateEmpCheckInCheckOutDetails]         
	@empCode as nvarchar(10),      
	@accCode as nvarchar(10),    
	@checkInDate as nvarchar(15),    
	@checkOutDate  nvarchar(15)='',  
	@NewAccCode as nvarchar(10),    
	@checkIn as int,    
	@checkOut as int,    
	@emp_supervisor as nvarchar(15)    
	as      
	--- Only For Check out    
	if(@checkIn = 0 and @checkOut=2)    
	begin     
	update EmpAccomadationDetails set EffectiveCheckOutDate=@checkInDate    
	where AccomadationCode=@accCode and Emp_code=@empCode And Id in(select Max(Id) from EmpAccomadationDetails where Emp_code=@empCode and AccomadationCode=@accCode)    
	end    
	--Checkout and CheckIN    
	if(@checkIn = 1 and @checkOut=2)    
	begin   

	update EmpAccomadationDetails set EffectiveCheckOutDate=@checkOutDate    
	where AccomadationCode=@accCode and Emp_code=@empCode And Id in(select Max(Id) from EmpAccomadationDetails where Emp_code=@empCode and AccomadationCode=@accCode)    


	exec sp_InsertEmpCheckInCheckOutDetails  @empCode,@NewAccCode,@checkInDate,@emp_supervisor    
	end    
	-- Only Check In    
	if(@checkIn = 1 and @checkOut=0)    
	begin     
	exec sp_InsertEmpCheckInCheckOutDetails  @empCode,@NewAccCode,@checkInDate,@emp_supervisor    
	end  
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE Sp_getemployeeremarks @compId AS NVARCHAR(3),  
                        @Month  AS int
AS  
	Declare @enddate as datetime
	Select @enddate = PaySubEndDate From Payrollmonthlydetail Where RowID = @Month 

  SELECT E.Emp_Code,E.Time_Card_No,Isnull(E.Emp_Name, '') + ' ' + Isnull(E.Emp_Lname, '') AS EMPNAME,CASE  
                                                                                        WHEN PR.REMARKS IS NULL THEN ''  
                                                                                        ELSE PR.REMARKS  
                                                                                      END AS REMARKS  
  FROM   Employee E  
         LEFT OUTER JOIN (SELECT *  
                          FROM   empPayslipRemarks  
                          WHERE  Convert(Datetime,Convert(Datetime,Convert(varchar(10),EndDate),101),103) = Convert(datetime,@enddate,103)) PR ON E.EMP_CODE = PR.EMP_CODE  
  WHERE  e.Termination_date IS NULL  
     AND e.COMPANY_ID = @compId  
  ORDER  BY Isnull(E.Emp_Name, '') + ' ' + Isnull(E.Emp_Lname, '')   
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Update Employee Set Wdays_per_week = 7 Where EMp_code=25
--Sp_ApplyLeave 25, '04/04/2010', '10/04/2010', 8, '', 'Open', 1.5, 5.5, 0, '', '', 2010
--sp_getLeftLeaves 'ICT29', 3,'06/03/2010' ,'06/03/2010', 8, 2010, '2010-03-30', 0.5, 'PM' 
CREATE PROCEDURE [dbo].[Sp_applyleave](@emp_code      [VARCHAR](50),
                                      @start_date    VARCHAR(10),
                                      @end_date      VARCHAR(10),
                                      @leave_type    [INT],
                                      @approver      VARCHAR(50),
                                      @status        VARCHAR(50),
                                      @paid_leaves   FLOAT,
                                      @unpaid_leaves FLOAT,
                                      @half_day      INT = 0,
                                      @timesession   VARCHAR(10),
                                      @remarks       VARCHAR(250),
                                      @applyyear     INT)
AS
    BEGIN
        IF (@leave_type > 0)
            BEGIN
                -- Declare @emp_code      [VARCHAR](50),@start_date    VARCHAR(10),@end_date      VARCHAR(10),@leave_type    [INT],@approver      VARCHAR(50),@status        VARCHAR(50),@paid_leaves   FLOAT,@unpaid_leaves FLOAT,@half_day      INT,@timesession   VARCHAR(10),@remarks       VARCHAR(250),@applyyear     INT              
                -- Set @emp_code      = 29        
                -- Set @start_date    = '06/08/2010'              
                -- Set @end_date      = '07/08/2010'              
                -- Set @leave_type    = 8        
                -- Set @approver      = ''        
                -- Set @status        = 'Open'        
                -- Set @paid_leaves   = 0.5        
                -- Set @unpaid_leaves = 1        
                -- Set @half_day      = 0        
                -- Set @timesession   = '--'        
                -- Set @remarks       = ''        
                -- Set @applyyear     = 2010        
                DECLARE @trx_id INT
                DECLARE @from_date DATETIME
                DECLARE @to_date DATETIME
                DECLARE @wdays_per_week FLOAT
                DECLARE @leavemodel INT
                DECLARE @nextyear INT
                DECLARE @leave_date DATETIME
                DECLARE @company_code INT
                DECLARE @FLAG INT

                SET @FLAG = 0
                SET @from_date = CONVERT(DATETIME, @start_date, 103)
                SET @to_date = CONVERT(DATETIME, @end_date, 103)
                SET @leave_date = @from_date
                SET @nextyear = NULL

                IF (@applyyear != YEAR(@from_date))
                    BEGIN
                        IF ((@applyyear - YEAR(@from_date)) <= 1)
                            BEGIN
                                SET @nextyear = @applyyear
                            END
                    END

                SELECT @company_code = e.Company_ID,@wdays_per_week = e.wdays_per_week,@leavemodel = c.Leave_Model
                FROM   employee e
                       INNER JOIN Company c ON e.Company_ID = c.Company_ID
                WHERE  emp_code = @emp_code

                INSERT INTO [emp_leaves]
                            ([emp_id],[start_date],[end_date],[leave_type],[approver],[status],[paid_leaves],[unpaid_leaves],[timesession],[Remarks],[Leave_Model])
                VALUES      (@emp_code,@from_date,@to_date,@leave_type,@approver,@status,@paid_leaves,@unpaid_leaves,@timesession,@remarks,@leavemodel)

                -- cater child table                        
                SELECT @trx_id = @@IDENTITY
                FROM   [emp_leaves]

                --Insert Into emp_leaves_detail        
                -- Select @trx_id, LeaveDate, HALFDAY=Case When HALFDAY='F' Then 0 Else 1 End,               
                --     PAIDUNPAID=Case When PAIDUNPAID='U' Then 1 Else 0 End, @nextyear, Session   From #DateInYearTemp Where PAIDUNPAID != '-'              
                --delete from emp_leaves                            
                --delete from emp_leaves_detail        
                IF Len(Rtrim(@timesession)) <= 0
                    BEGIN
                        SET @timesession = 'AM'
                    END

                WHILE @leave_date <= @to_date
                    BEGIN
                        IF dbo.Isholiday(@company_code, @leave_date) = 0
                            BEGIN
                                IF (@wdays_per_week = 5
                                    AND Datename(dw, @leave_date) != 'Saturday'
                                    AND Datename(dw, @leave_date) != 'Sunday')
                                    OR (@wdays_per_week = 6
                                        AND Datename(dw, @leave_date) != 'Sunday')
                                    OR (@wdays_per_week = 7)
                                    BEGIN
                                        IF (@paid_leaves <= 0)
                                            BEGIN
                                                IF (@unpaid_leaves >= 1)
                                                    BEGIN
                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,@leave_date,0,1,@nextyear,'')

                                                        SET @unpaid_leaves = @unpaid_leaves - 1
                                                    END
                                                ELSE
                                                    IF (@unpaid_leaves > 0
                                                        AND @unpaid_leaves <= 0.5)
                                                        BEGIN
                                                            INSERT INTO emp_leaves_detail
                                                            VALUES      (@trx_id,@leave_date,1,1,@nextyear,@timesession)

                                                            SET @unpaid_leaves = @unpaid_leaves - 0.5
                                                        END
                                            END

                                        IF (@paid_leaves >= 1)
                                            BEGIN
                                                INSERT INTO emp_leaves_detail
                                                VALUES      (@trx_id,@leave_date,0,0,@nextyear,'')
                                            END
                                        ELSE
                                            IF (@paid_leaves > 0
                                                AND @paid_leaves <= 0.5)
                                                BEGIN
                                                    INSERT INTO emp_leaves_detail
                                                    VALUES      (@trx_id,@leave_date,1,0,@nextyear,@timesession)

                                                    IF (@unpaid_leaves > 0.5)
                                                        BEGIN
                                                            IF CAST((@unpaid_leaves - 0.5) / CAST(@unpaid_leaves AS INT) AS INT) = 1
                                                                BEGIN
                                                                    INSERT INTO emp_leaves_detail
                                                                    VALUES      (@trx_id,@leave_date,1,1,@nextyear,'PM')

                                                                    SET @unpaid_leaves = @unpaid_leaves - 0.5
                                                                END
                                                        END
                                                    ELSE
                                                        BEGIN
                                                            IF (@unpaid_leaves > 0)
                                                                BEGIN
                                                                    INSERT INTO emp_leaves_detail
                                                                    VALUES      (@trx_id,@leave_date,1,1,@nextyear,'PM')

                                                                    SET @unpaid_leaves = @unpaid_leaves - 0.5
                                                                END
                                                        END
                                                END

                                        SET @paid_leaves = @paid_leaves - 1
                                    END

                                IF (@wdays_per_week = 5.5
                                    AND Datename(dw, @leave_date) != 'Sunday')
                                    BEGIN
                                        IF (@paid_leaves <= 0)
                                            BEGIN
                                                IF (@FLAG = 1)
                                                    BEGIN
                                                        SET @FLAG = 2

                                                        IF EXISTS(SELECT *
                                                                  FROM   emp_leaves_detail
                                                                  WHERE  Leave_Date = Dateadd(DAY, -1, @leave_date)
                                                                     AND Session = 'AM')
                                                            SET @timesession = 'PM'

                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,Dateadd(DAY, -1, @leave_date),1,1,@nextyear,@timesession)

                                                        SET @unpaid_leaves = @unpaid_leaves - 0.5
                                                    END

                                                IF (@unpaid_leaves >= 1
                                                    AND Datename(dw, @leave_date) != 'Saturday')
                                                    BEGIN
                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,@leave_date,0,1,@nextyear,'')
                                                    END

                                                IF (@unpaid_leaves >= 1
                                                    AND Datename(dw, @leave_date) = 'Saturday')
                                                    BEGIN
                                                        IF EXISTS(SELECT *
                                                                  FROM   emp_leaves_detail
                                                                  WHERE  Leave_Date = @leave_date
                                                                     AND Session = 'AM')
                                                            SET @timesession = 'PM'

                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,@leave_date,1,1,@nextyear,@timesession)
                                                    END

                                                IF (@unpaid_leaves > 0
                                                    AND @unpaid_leaves <= 0.5)
                                                    BEGIN
                                                        IF EXISTS(SELECT *
                                                                  FROM   emp_leaves_detail
                                                                  WHERE  Leave_Date = @leave_date
                                                                     AND Session = 'AM')
                                                            SET @timesession = 'PM'

                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,@leave_date,1,1,@nextyear,@timesession)
                                                    END

                                                IF Datename(dw, @leave_date) = 'Saturday'
                                                    BEGIN
                                                        SET @unpaid_leaves = @unpaid_leaves - 0.5
                                                    END
                                                ELSE
                                                    BEGIN
                                                        SET @unpaid_leaves = @unpaid_leaves - 1
                                                    END
                                            END
                                        ELSE
                                            BEGIN
                                                IF (@paid_leaves >= 1
                                                    AND Datename(dw, @leave_date) != 'Saturday')
                                                    BEGIN
                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,@leave_date,0,0,@nextyear,'')
                                                    END

                                                IF (@paid_leaves >= 1
                                                    AND Datename(dw, @leave_date) = 'Saturday')
                                                    BEGIN
                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,@leave_date,1,0,@nextyear,@timesession)
                                                    END

                                                IF (@paid_leaves > 0
                                                    AND @paid_leaves <= 0.5)
                                                    BEGIN
                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,@leave_date,1,0,@nextyear,@timesession)

                                                        SET @FLAG = 1
                                                    END

                                                IF Datename(dw, @leave_date) = 'Saturday'
                                                    BEGIN
                                                        SET @paid_leaves = @paid_leaves - 0.5
                                                    END
                                                ELSE
                                                    BEGIN
                                                        SET @paid_leaves = @paid_leaves - 1
                                                    END

                                                IF (@paid_leaves < 0
                                                    AND @unpaid_leaves = 0.5) --ONLY WHEN PAIDLLEAVES is not left and Unpaidleaves is 0.5        
                                                    BEGIN
                                                        IF EXISTS(SELECT *
                                                                  FROM   emp_leaves_detail
                                                                  WHERE  Leave_Date = Dateadd(DAY, 0, @leave_date)
                                                                     AND Session = 'AM')
                                                            SET @timesession = 'PM'

                                                        INSERT INTO emp_leaves_detail
                                                        VALUES      (@trx_id,Dateadd(DAY, 0, @leave_date),1,1,@nextyear,@timesession)
                                                    END
                                            END
                                    END
                            END

                        SET @leave_date = Dateadd(DAY, 1, @leave_date)
                    END -- Select *, Leave_Date,        
            -- PAIDTYPE=Case When UNPAID_LEAVE=0 Then 'PAID' Else 'UN-PAID' End,        
            -- HALFDAY=Case When HALFDAY_LEAVE=0 Then 'FULL DAY' Else 'HALF DAY' End,        
            -- Session From emp_leaves_detail        
            --         
            -- Delete   From emp_leaves_detail        
            END
    END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Sp_getyos] @empid       INT,  
                             @applydateon DATETIME  
AS  
  BEGIN  
      DECLARE @leavemodel INT  
      DECLARE @startdtsub_AN DATETIME  
      DECLARE @enddtsub_AN DATETIME  
      DECLARE @months_of_service INT  
      DECLARE @year_of_service INT  
      DECLARE @joiningdate DATETIME  
  
      SELECT @joiningdate = joining_date,  
             @leavemodel = c.Leave_Model  
      FROM   employee e  
             INNER JOIN Company c  
               ON e.Company_ID = c.Company_ID  
      WHERE  e.emp_code = @empid  

      IF ( @leavemodel = 3  
            OR @leavemodel = 4  
            OR @leavemodel = 6  
            OR @leavemodel = 8 )  
        BEGIN  
            SET @months_of_service = Datediff(m, @joiningdate, @applydateon)  
            SET @year_of_service = Ceiling(@months_of_service / 12)+1  
 
			IF (@year_of_service<=0)
			BEGIN
				Set @year_of_service = 1
			END
			IF (@year_of_service>10)
			BEGIN
				Set @year_of_service = 10
			END
            SELECT Top 1 @startdtsub_AN = y.startdate,  
                   @enddtsub_AN = y.enddate  
            FROM   YOSLeavesAllowed y  
            WHERE  y.emp_id = @empid  
                   AND actual_yos >= @year_of_service And LeavesAllowed > 0  
  
  
            SELECT @year_of_service                          YOS,  
                   CONVERT(VARCHAR(11), @startdtsub_AN, 106) StartDate,  
                   CONVERT(VARCHAR(11), @enddtsub_AN, 106)   EndDate  
        END  
      ELSE  
        BEGIN  
            SELECT 0  YOS,  
                    CONVERT(VARCHAR(11),Convert(DateTime,'01/01/' + Cast(Year(@applydateon) as varchar) ), 106) StartDate,  
                    CONVERT(VARCHAR(11),Convert(DateTime,'12/31/' + Cast(Year(@applydateon) as varchar) ), 106) EndDate  
        END  
  END   
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE Procedure [dbo].[sp_CastingVariables] 
		@Param varchar(20),
		@Type varchar(10)
	AS 
	BEGIN
	--	DECLARE @Param varchar(20)
	--	DECLARE @Type varchar(10)
	--	SET @Type = 'DATE'
	--	SET @Param = '01/01/2001'
		Declare @ParamNew Varchar
		Declare @DateTimeVar DateTime

		IF (@Type = 'DATE')
		BEGIN
			BEGIN TRY
				SET  @DateTimeVar = Convert(Datetime, @Param, 103)
				Select 0 Error
			END TRY
			BEGIN CATCH
				-- Execute error retrieval routine.
				SELECT ERROR_NUMBER() Error
			END CATCH
		END
		ELSE
		BEGIN
			SELECT 0 Error
		END
	END
GO

------------------------------------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_bulkemployeevalidate] (@compid AS INT)  
AS  
  DECLARE @ID                AS INT,  
          @TimeCardNo        VARCHAR(200),  
          @FirstName         VARCHAR(200),  
          @LastName          VARCHAR(200),  
          @Department        VARCHAR(200),  
          @Trade             VARCHAR(200),  
          @Designation       VARCHAR(200),  
          @Phone             VARCHAR(200),  
          @HandPhone         VARCHAR(200),  
          @email             VARCHAR(200),  
          @ConfirmationDate  VARCHAR(200),  
          @CpfEntitlement    VARCHAR(200),  
          @OTEntilement      VARCHAR(200),  
          @wpnumber          VARCHAR(200),  
          @wpexpdate         VARCHAR(200),  
          @NRIC              VARCHAR(200),  
          @FIN               VARCHAR(200),  
          @prdate            VARCHAR(200),  
          @dateofbirth       VARCHAR(200),  
          @passportno        VARCHAR(200),  
          @ppissuedate       VARCHAR(200),  
          @passportexpiry    VARCHAR(200),  
          @Nationality       VARCHAR(200),  
          @EmpType           VARCHAR(200),  
          @JoiningDate       VARCHAR(200),  
          @wpapplicationdate VARCHAR(200),  
          @wpissuedate       VARCHAR(200),  
          @workerlevy        VARCHAR(200),  
          @blockno           VARCHAR(200),  
          @unitno            VARCHAR(200),  
          @levelno           VARCHAR(200),  
          @streetname        VARCHAR(200),  
          @postalcode        VARCHAR(200),  
          @PayFrequency      VARCHAR(200),  
          @salary            VARCHAR(200),  
          @wdayperweek       VARCHAR(200),  
          @hourlyRateMode    VARCHAR(200),  
          @hourlyRate        VARCHAR(200),  
          @dailyRateMode     VARCHAR(200),  
          @dailyRate         VARCHAR(200),  
          @Sex               VARCHAR(200),  
          @maritalstatus     VARCHAR(200),  
          @race              VARCHAR(200),  
          @religion          VARCHAR(200),  
          @safetytype1       VARCHAR(200),  
          @safetypassno1     VARCHAR(200),  
          @safetypassexp1    VARCHAR(200),  
          @isReq             VARCHAR(200)  
  DECLARE @seltext     VARCHAR(8000),  
          @seliderror  VARCHAR(8000),  
          @DateTimeVar DATETIME,  
          @INTCHECK    INT,  
          @floatfield  FLOAT,  
          @strinsel    VARCHAR(1)  
  
  SET @seltext=''  
  SET @seliderror = '0'  
  
  DECLARE dbcursor CURSOR FOR  
      SELECT ID,TimeCardNo,FirstName,LastName,Department,Trade,Designation,Phone,HandPhone,email,ConfirmationDate,CpfEntitlement,OTEntilement,wpnumber,wpexpdate,NRIC,FIN,PRDate,dateofbirth,passportno,ppissuedate,passportexpiry,Nationality,EmpType,JoiningDate,wpapplicationdate,wpissuedate,workerlevy,blockno,unitno,levelno,streetname,postalcode,PayFrequency,salary,wdayperweek,hourlyRateMode,hourlyRate,dailyRateMode,dailyRate,Sex,maritalstatus,race,religion,safetytype1,safetypassno1,safetypassexp1  
      FROM   EmployeeBulkImport  
      WHERE --ID=1    
  Deleted = 0  
         AND CompanyID = @compid  
  
  --where id=382        
  OPEN dbcursor  
  
  FETCH NEXT FROM dbcursor INTO @ID, @TimeCardNo, @FirstName, @LastName, @Department, @Trade, @Designation, @Phone, @HandPhone, @email, @ConfirmationDate, @CpfEntitlement, @OTEntilement, @wpnumber, @wpexpdate, @NRIC, @FIN, @prdate, @dateofbirth, @passportno, @ppissuedate, @passportexpiry, @Nationality, @EmpType, @JoiningDate, @wpapplicationdate, @wpissuedate, @workerlevy, @blockno, @unitno, @levelno, @streetname, @postalcode, @PayFrequency, @salary, @wdayperweek, @hourlyRateMode, @hourlyRate, @dailyRateMode, @dailyRate, @Sex, @maritalstatus, @race, @religion, @safetytype1, @safetypassno1, @safetypassexp1  
  
  WHILE @@FETCH_STATUS = 0  
      BEGIN  
          IF (@FirstName IS NULL  
               OR Len(Ltrim(Rtrim(@FirstName))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'First Name Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))                END  
  
          IF (@ConfirmationDate IS NULL  
               OR Len(Ltrim(Rtrim(@ConfirmationDate))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Confirmation Date Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @DateTimeVar = CONVERT(DATETIME, @ConfirmationDate, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Invalid Confirmation Date at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@CpfEntitlement IS NULL  
               OR Len(Ltrim(Rtrim(@CpfEntitlement))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'CPF Entitlement Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
  
          IF (@OTEntilement IS NULL  
               OR Len(Ltrim(Rtrim(@OTEntilement))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'OT Entitlement Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
  
          IF (@dateofbirth IS NULL  
               OR Len(Ltrim(Rtrim(@dateofbirth))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Date of Birth Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @DateTimeVar = CONVERT(DATETIME, @dateofbirth, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Invalid Date of Birth at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@salary IS NULL  
               OR Len(Ltrim(Rtrim(@salary))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @floatfield = CONVERT(FLOAT, @salary, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Salary Should consist Numeric Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          -- IF (@FIN is not null And (@passportno is null OR Len(ltrim(rtrim(@passportno))) = 0))                    
          -- BEGIN                    
          --  SET @seltext = @seltext + Char(13) + 'Passport No Cannot Remain Blank at ID# ' + Cast(@ID as varchar(10))                    
          -- END                     
          IF (@FIN IS NOT NULL  
              AND (@ppissuedate IS NULL  
                    OR Len(Ltrim(Rtrim(@ppissuedate))) = 0))  
              BEGIN  
                  --SET @seltext = @seltext + Char(13) + 'Passport Issue Date Cannot Remain Blank at ID# ' + Cast(@ID as varchar(10))                    
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @DateTimeVar = CONVERT(DATETIME, @ppissuedate, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Invalid Passport Issue Date at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@FIN IS NOT NULL  
              AND (@passportexpiry IS NULL  
                    OR Len(Ltrim(Rtrim(@passportexpiry))) = 0))  
              BEGIN  
                  --SET @seltext = @seltext + Char(13) + 'Passport Expiry Date Cannot Remain Blank at ID# ' + Cast(@ID as varchar(10))                    
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @DateTimeVar = CONVERT(DATETIME, @passportexpiry, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Invalid Expiry Date at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@EmpType IS NULL  
               OR Len(Ltrim(Rtrim(@EmpType))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Employee Type Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  IF (@EmpType = 'SC'  
                       OR @EmpType = 'SPR'  
                       OR @EmpType = 'DP'  
                       OR @EmpType = 'EP'  
                       OR @EmpType = 'WP'  
                       OR @EmpType = 'OT'  
                       OR @EmpType = 'SP')  
                      BEGIN  
                          IF (@EmpType = 'SC'  
                               OR @EmpType = 'SPR')  
                              BEGIN  
                                  IF (@EmpType = 'SPR')  
                                      BEGIN  
                                          IF (@prdate IS NULL  
                                               OR Len(Ltrim(Rtrim(@prdate))) = 0)  
                                              BEGIN  
                                                  SET @seltext = @seltext + CHAR(13) + 'PR Date Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
                                              END  
                                          ELSE  
                                              BEGIN  
                                                  BEGIN TRY  
                                                      SET @DateTimeVar = CONVERT(DATETIME, @prdate, 103)  
                                                  END TRY  
  
                                                  BEGIN CATCH  
                                                      SET @seltext = @seltext + CHAR(13) + 'Invalid PR Date at ID# ' + CAST(@ID AS VARCHAR(10))  
                                                  END CATCH  
                                              END  
                                      END  
  
                                  IF (@NRIC IS NULL  
                                       OR Len(Ltrim(Rtrim(@NRIC))) = 0)  
                                      BEGIN  
                                          SET @seltext = @seltext + CHAR(13) + 'NRIC Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
                                      END  
                                  ELSE  
                                      BEGIN  
                                          IF (@NRIC IS NOT NULL  
                                              AND Len(Ltrim(Rtrim(@NRIC))) != 9)  
                                              BEGIN  
                                                  SET @seltext = @seltext + CHAR(13) + 'NRIC Should be of 9 Aplha Numbers at ID# ' + CAST(@ID AS VARCHAR(10))  
                                              END  
                                          ELSE  
                                              BEGIN  
                                                  IF LEFT(Rtrim(Ltrim(@NRIC)), 1) != 'S'  
                                                     AND LEFT(Rtrim(Ltrim(@NRIC)), 1) != 'T'  
                                                      BEGIN  
                                                          SET @seltext = @seltext + CHAR(13) + 'NRIC Starts with Invalid Letters at ID# ' + CAST(@ID AS VARCHAR(10))  
                                                      END  
                                                  ELSE  
                                                      BEGIN  
                                                          BEGIN TRY  
                                                              SET @INTCHECK = CAST(Substring(@NRIC, 2, 7) AS INT)  
                                                          END TRY  
  
                                                          BEGIN CATCH  
                                                              SET @seltext = @seltext + CHAR(13) + 'NRIC Should be Numeric between 2 to 8 Letters at ID# ' + CAST(@ID AS VARCHAR(10))  
                                                          END CATCH  
                                                      END  
                                              END  
                                      END  
                              END  
                          ELSE  
                              BEGIN  
                                  IF (@FIN IS NULL  
                                       OR Len(Ltrim(Rtrim(@FIN))) = 0)  
                                      BEGIN  
                                          SET @seltext = @seltext + CHAR(13) + 'FIN Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
                                      END  
                                  ELSE  
                                      BEGIN  
                                          IF (@FIN IS NOT NULL  
                                              AND Len(Ltrim(Rtrim(@FIN))) != 9)  
                                              BEGIN  
                                                  SET @seltext = @seltext + CHAR(13) + 'FIN Should be of 9 Aplha Numbers at ID# ' + CAST(@ID AS VARCHAR(10))  
                                              END  
                                          ELSE  
                                              BEGIN  
                                                  IF LEFT(Rtrim(Ltrim(@FIN)), 1) != 'G'  
                                                     AND LEFT(Rtrim(Ltrim(@FIN)), 1) != 'F'  
                                                      BEGIN  
                                                          SET @seltext = @seltext + CHAR(13) + @FIN + ' FIN No Starts with Invalid Letters at ID# ' + CAST(@ID AS VARCHAR(10))  
                                                      END  
                                                  ELSE  
                                                      BEGIN  
                                                          BEGIN TRY  
                                                              SET @INTCHECK = CAST(Substring(@FIN, 2, 7) AS INT)  
                                                          END TRY  
  
                                                          BEGIN CATCH  
                                                              SET @seltext = @seltext + CHAR(13) + 'FIN Should be Numeric between 2 to 8 Letters at ID# ' + CAST(@ID AS VARCHAR(10))  
                                                          END CATCH  
                                                      END  
                                              END  
                                      END  
                              END  
                      END  
                  ELSE  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Employee Type Should Be Either of SC/SPR/DP/EP/SP/WP/OT at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@Nationality IS NULL  
               OR Len(Ltrim(Rtrim(@Nationality))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Nationality Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  SELECT @INTCHECK = COUNT(ID)  
                  FROM   Nationality  
                  WHERE  Upper(Nationality) = Upper(Rtrim(Ltrim(@Nationality)))  
  
                  IF @INTCHECK <= 0  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Nationality Does not match with the Database Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@JoiningDate IS NULL  
               OR Len(Ltrim(Rtrim(@JoiningDate))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Joining Date Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
        END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @DateTimeVar = CONVERT(DATETIME, @JoiningDate, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Invalid Joining Date at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@PayFrequency IS NULL  
               OR Len(Ltrim(Rtrim(@PayFrequency))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Pay Frequency Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  IF (@PayFrequency = 'D'  
                       OR @PayFrequency = 'H'  
                       OR @PayFrequency = 'M')  
                      BEGIN  
                          SET @strinsel =''  
                      END  
                  ELSE  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Pay Frequency Shouble be either D or M or H at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@wdayperweek IS NULL  
               OR Len(Ltrim(Rtrim(@wdayperweek))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Week Days Per Week Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @floatfield = CONVERT(FLOAT, @wdayperweek, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Week Days Per week should be 5, 5.5, 6, 7 at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@hourlyRateMode IS NULL  
               OR Len(Ltrim(Rtrim(@hourlyRateMode))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Hourly Rate Mode Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  IF (@hourlyRateMode = 'A'  
                       OR @hourlyRateMode = 'M')  
                      BEGIN  
                          SET @strinsel =''  
                      END  
                  ELSE  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Hourly Rate Mode Should be either of A Or M at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@dailyRateMode IS NULL  
               OR Len(Ltrim(Rtrim(@dailyRateMode))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Daily Rate Mode Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  IF (@dailyRateMode = 'A'  
                       OR @dailyRateMode = 'M')  
                      BEGIN  
                          SET @strinsel =''  
                      END  
                  ELSE  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Daily Rate Mode Should be either of A Or M at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@hourlyRate IS NULL  
               OR Len(Ltrim(Rtrim(@hourlyRate))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @floatfield = CONVERT(FLOAT, @hourlyRate, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Hourly Rate Should consist Numeric value at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@dailyRate IS NULL  
               OR Len(Ltrim(Rtrim(@dailyRate))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @floatfield = CONVERT(FLOAT, @dailyRate, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Daily Rate Should consist Numeric value at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@workerlevy IS NULL  
               OR Len(Ltrim(Rtrim(@workerlevy))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @floatfield = CONVERT(FLOAT, @workerlevy, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Worker Levy Should consist Numeric value at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (@Sex IS NULL  
               OR Len(Ltrim(Rtrim(@Sex))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Sex Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  IF (@Sex = 'M'  
                       OR @Sex = 'F')  
                      BEGIN  
                          SET @strinsel =''  
                      END  
                  ELSE  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Sex Should be either of M Or F at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@race IS NULL  
               OR Len(Ltrim(Rtrim(@race))) = 0)  
              BEGIN  
                  SET @seltext = @seltext + CHAR(13) + 'Race Cannot Remain Blank at ID# ' + CAST(@ID AS VARCHAR(10))  
              END  
          ELSE  
              BEGIN  
                  SELECT @INTCHECK = COUNT(ID)  
                  FROM   Race  
                  WHERE  Upper(Race) = Upper(Rtrim(Ltrim(@race)))  
  
                  IF @INTCHECK <= 0  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Race Does not match with the Database Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@religion IS NULL  
               OR Len(Ltrim(Rtrim(@religion))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  SELECT @INTCHECK = COUNT(ID)  
                  FROM   Religion  
                  WHERE  Upper(Religion) = Upper(Rtrim(Ltrim(@religion)))  
  
                  IF @INTCHECK <= 0  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Religion Does not match with the Database Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@Department IS NULL  
               OR Len(Ltrim(Rtrim(@Department))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  SELECT @INTCHECK = COUNT(ID)  
                  FROM   Department  
                  WHERE  Upper(DeptName) = Upper(Rtrim(Ltrim(@Department)))  
                     AND Company_ID = @compid  
  
                  IF @INTCHECK <= 0  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Department Does not match with the Database Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@Trade IS NULL  
               OR Len(Ltrim(Rtrim(@Trade))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  SELECT @INTCHECK = COUNT(ID)  
                  FROM   Trade  
                  WHERE  Upper(Trade) = Upper(Rtrim(Ltrim(@Trade)))  
                     AND Company_ID = @compid  
  
                  IF @INTCHECK <= 0  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Trade Does not match with the Database Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@Designation IS NULL  
               OR Len(Ltrim(Rtrim(@Designation))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  SELECT @INTCHECK = COUNT(ID)  
                  FROM   Designation  
                  WHERE  Upper(Designation) = Upper(Rtrim(Ltrim(@Designation)))  
                     AND Company_ID = @compid  
  
                  IF @INTCHECK <= 0  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Designation Does not match with the Database Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
          IF (@safetytype1 IS NULL  
               OR Len(Ltrim(Rtrim(@safetytype1))) = 0)  
              BEGIN  
                  IF (@safetypassexp1 IS NOT NULL  
                       OR @safetypassno1 IS NOT NULL)  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Safety Type cannot remain blank if Safety Number or Expiry Date is Present' + CAST(@ID AS VARCHAR(10))  
                      END  
                  ELSE  
                      BEGIN  
                          SET @strinsel =''  
                      END  
              END  
          ELSE  
              BEGIN  
                  SELECT @INTCHECK = COUNT(ID)  
                  FROM   Safety_pass  
                  WHERE  Upper(Safety_Type) = Upper(Rtrim(Ltrim(@safetytype1)))  
                     AND (companyid = @compid  
                           OR companyid = -1)  
  
                  IF @INTCHECK <= 0  
                      BEGIN  
                          SET @seltext = @seltext + CHAR(13) + 'Safety Type Does not match with the Database Value at ID# ' + CAST(@ID AS VARCHAR(10))  
                      END  
              END  
  
  
          IF (@safetypassexp1 IS NULL  
               OR Len(Ltrim(Rtrim(@safetypassexp1))) = 0)  
              BEGIN  
                  SET @strinsel =''  
              END  
          ELSE  
              BEGIN  
                  BEGIN TRY  
                      SET @DateTimeVar = CONVERT(DATETIME, @safetypassexp1, 103)  
                  END TRY  
  
                  BEGIN CATCH  
                      SET @seltext = @seltext + CHAR(13) + 'Invalid Safety Pass Expiry Date at ID# ' + CAST(@ID AS VARCHAR(10))  
                  END CATCH  
              END  
  
          IF (Len(@seltext) > 0)  
              BEGIN  
                  SET @seliderror = @seliderror + ',' + CAST(@ID AS VARCHAR(10))  
              END  
  
          --print @seltext    + 'santy'        
          IF (Len(Rtrim(Ltrim(@seltext))) <= 1)  
              BEGIN  
                  UPDATE EmployeeBulkImport  
                  SET    Deleted = 1,  
                         [Status] = 'Ready to Submit'  
                  WHERE  ID = @ID  
                     AND Len(Rtrim(Ltrim(ErrorContent))) <= 0  
              END  
          ELSE  
              BEGIN  
                  UPDATE EmployeeBulkImport  
                  SET    Deleted = 2,  
                         [Status] = 'Error Occured',  
                         ErrorContent = ErrorContent + @seltext  
                  WHERE  ID = @ID  
              END  
  
          SET @seltext = ''  
  
          FETCH NEXT FROM dbcursor INTO @ID, @TimeCardNo, @FirstName, @LastName, @Department, @Trade, @Designation, @Phone, @HandPhone, @email, @ConfirmationDate, @CpfEntitlement, @OTEntilement, @wpnumber, @wpexpdate, @NRIC, @FIN, @prdate, @dateofbirth, @passportno, @ppissuedate, @passportexpiry, @Nationality, @EmpType, @JoiningDate, @wpapplicationdate, @wpissuedate, @workerlevy, @blockno, @unitno, @levelno, @streetname, @postalcode, @PayFrequency, @salary, @wdayperweek, @hourlyRateMode, @hourlyRate, @dailyRateMode, @dailyRate, @Sex, @maritalstatus, @race, @religion, @safetytype1, @safetypassno1, @safetypassexp1  
      END  
  
  CLOSE dbcursor  
  
  DEALLOCATE dbcursor  
  
  UPDATE EmployeeBulkImport  
  SET    Deleted = 2,  
         [Status] = 'Error Occured',  
         ErrorContent = ErrorContent + CHAR(13) + '  FIN already exist in CSV Files at ID# ' + CAST(ID AS VARCHAR(10))  
  WHERE  ID IN (SELECT ID  
                FROM   EmployeeBulkImport  
                WHERE  FIN IN (SELECT FIN  
                               FROM   (SELECT FIN,COUNT(Fin) Cnt  
                                       FROM   EmployeeBulkImport  
                                       GROUP  BY FIN) D  
                               WHERE  D.Cnt > 1))  
  
  UPDATE EmployeeBulkImport  
  SET    Deleted = 2,  
         [Status] = 'Error Occured',  
         ErrorContent = ErrorContent + CHAR(13) + '  NRIC already exist in CSV Files at ID# ' + CAST(ID AS VARCHAR(10))  
  WHERE  ID IN (SELECT ID  
                FROM   EmployeeBulkImport  
                WHERE  NRIC IN (SELECT NRIC  
                                FROM   (SELECT NRIC,COUNT(NRIC) Cnt  
                                        FROM   EmployeeBulkImport  
                                        GROUP  BY NRIC) D  
                                WHERE  D.Cnt > 1))  
  
--  DECLARE @compid AS INT  
--  
--  SET @compid = 2  
  
--  UPDATE EmployeeBulkImport  
--  SET    EmployeeBulkImport.Department = Department.ID  
--  FROM   EmployeeBulkImport  
--         INNER JOIN Department ON EmployeeBulkImport.Department = Department.DeptName  
--   Where EmployeeBulkImport.Deleted = 1 And CompanyID= @compid And Department.Company_ID = @compid  
--   
--  UPDATE EmployeeBulkImport  
--  SET    EmployeeBulkImport.Designation = Designation.ID  
--  FROM   EmployeeBulkImport  
--         INNER JOIN Designation ON EmployeeBulkImport.Designation = Designation.Designation   
--   Where EmployeeBulkImport.Deleted = 1 And CompanyID= @compid And Designation.Company_ID = @compid  
--  
--  UPDATE EmployeeBulkImport  
--  SET    EmployeeBulkImport.Trade = Trade.ID  
--  FROM   EmployeeBulkImport  
--         INNER JOIN Trade ON EmployeeBulkImport.Trade = Trade.Trade   
--   Where EmployeeBulkImport.Deleted = 1 And CompanyID= @compid And Trade.Company_ID = @compid  
--  
--  UPDATE EmployeeBulkImport  
--  SET    EmployeeBulkImport.Nationality = Nationality.ID  
--  FROM   EmployeeBulkImport  
--         INNER JOIN Nationality ON EmployeeBulkImport.Nationality = Nationality.Nationality   
--   Where EmployeeBulkImport.Deleted = 1 And CompanyID= @compid  
--  
--  UPDATE EmployeeBulkImport  
--  SET    EmployeeBulkImport.Race = Race.ID  
--  FROM   EmployeeBulkImport  
--         INNER JOIN Race ON EmployeeBulkImport.Race = Race.Race   
--   Where EmployeeBulkImport.Deleted = 1 And CompanyID= @compid  
--    
--  UPDATE EmployeeBulkImport  
--  SET    EmployeeBulkImport.Religion = Religion.ID  
--  FROM   EmployeeBulkImport  
--         INNER JOIN Religion ON EmployeeBulkImport.Religion = Religion.Religion   
--   Where EmployeeBulkImport.Deleted = 1 And CompanyID= @compid  
--  
--    
--  UPDATE EmployeeBulkImport  
--  SET    EmployeeBulkImport.SafetyType1 = Safety_Pass.ID  
--  FROM   EmployeeBulkImport  
--         INNER JOIN Safety_Pass ON EmployeeBulkImport.Safetytype1 = Safety_Pass.Safety_Type   
--   Where (EmployeeBulkImport.Deleted = 1 And EmployeeBulkImport.CompanyID= @compid)  And Safety_Pass.CompanyID = @compid  
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
--sp_bulkinsert 'E:\Share\Employee.csv','EmployeeBulkImportMachine',1,'EmployeeBulkImport',2
CREATE PROCEDURE [dbo].[Sp_bulkinsert] (@source        VARCHAR(1000),
                                       @destination   VARCHAR(1000),
                                       @isDelete      INT,
                                       @TransferTable VARCHAR(100),
                                       @compid        INT)
AS
    BEGIN
        DECLARE @bulkcmd VARCHAR(1000)
        DECLARE @selecttxt VARCHAR(1000)

        TRUNCATE TABLE EmployeeBulkImportMachine

        TRUNCATE TABLE EmployeeBulkImport

        IF (@isDelete = 1)
            BEGIN
                SET @bulkcmd = 'Delete From ' + @destination

                EXEC(@bulkcmd)
            END

        SET @bulkcmd = "BULK INSERT " + @destination + " FROM '" + @source + "' WITH (FIELDTERMINATOR = '\,',ROWTERMINATOR = '\n',FIRSTROW = 2) "

        EXEC(@bulkcmd)

        SELECT @bulkcmd = 'DELETE From ' + @destination + ' Where NRIC is null and FIN is null and timecardno is null'

        EXEC(@bulkcmd)

        IF (@TransferTable = 'EmployeeBulkImport')
            BEGIN
                UPDATE EmployeeBulkImportMachine
                SET    Sex = Upper(REPLACE(Upper(Rtrim(Ltrim(Sex))), '"', '')),
                       MaritalStatus = Upper(REPLACE(Upper(Rtrim(Ltrim(MaritalStatus))), '"', '')),
                       Religion = Upper(REPLACE(Upper(Rtrim(Ltrim(Religion))), '"', '')),
                       DailyRateMode = Upper(REPLACE(Upper(Rtrim(Ltrim(DailyRateMode))), '"', '')),
                       HourlyRateMode = Upper(REPLACE(Upper(Rtrim(Ltrim(HourlyRateMode))), '"', '')),
                       PayFrequency = Upper(REPLACE(Upper(Rtrim(Ltrim(PayFrequency))), '"', '')),
                       Nationality = Upper(REPLACE(Upper(Rtrim(Ltrim(Nationality))), '"', '')),
                       EmpType = Upper(REPLACE(Upper(Rtrim(Ltrim(EmpType))), '"', '')),
                       NRIC = Upper(REPLACE(Upper(Rtrim(Ltrim(NRIC))), '"', '')),
                       FIN = Upper(REPLACE(Upper(Rtrim(Ltrim(FIN))), '"', '')),
                       Passportno = Upper(REPLACE(Upper(Rtrim(Ltrim(Passportno))), '"', '')),
                       FirstName = Upper(REPLACE(Rtrim(Ltrim(FirstName)), '"', '')),
                       LastName = Upper(REPLACE(Rtrim(Ltrim(LastName)), '"', '')),
                       Race = Upper(REPLACE(Rtrim(Ltrim(Race)), '"', '')),
                       Trade = Upper(REPLACE(Rtrim(Ltrim(Trade)), '"', '')),
                       Department = Upper(REPLACE(Rtrim(Ltrim(Department)), '"', '')),
                       Designation = Upper(REPLACE(Rtrim(Ltrim(Designation)), '"', '')),
                       SAFETYTYPE1 = Upper(REPLACE(Rtrim(Ltrim(SAFETYTYPE1)), '"', '')),
                       TIMECARDNO = Upper(REPLACE(Rtrim(Ltrim(TIMECARDNO)), '"', ''))

                UPDATE EmployeeBulkImportMachine
                SET    CpfEntitlement = 'Y'
                WHERE  CpfEntitlement = 'YES'

                UPDATE EmployeeBulkImportMachine
                SET    OTEntilement = 'Y'
                WHERE  OTEntilement = 'YES'

                UPDATE EmployeeBulkImportMachine
                SET    CpfEntitlement = 'N'
                WHERE  CpfEntitlement = 'NO'

                UPDATE EmployeeBulkImportMachine
                SET    OTEntilement = 'N'
                WHERE  OTEntilement = 'NO'

                UPDATE EmployeeBulkImportMachine
                SET    HourlyRateMode = 'A'
                WHERE  HourlyRateMode IS NULL
                    OR Len(Rtrim(Ltrim(HourlyRateMode))) = 0

                UPDATE EmployeeBulkImportMachine
                SET    DailyRateMode = 'A'
                WHERE  DailyRateMode IS NULL
                    OR Len(Rtrim(Ltrim(DailyRateMode))) = 0

                UPDATE EmployeeBulkImportMachine
                SET    HourlyRate = '0'
                WHERE  HourlyRate IS NULL
                    OR Len(Rtrim(Ltrim(HourlyRate))) = 0

                UPDATE EmployeeBulkImportMachine
                SET    DailyRate = '0'
                WHERE  DailyRate IS NULL
                    OR Len(Rtrim(Ltrim(DailyRate))) = 0

                UPDATE EmployeeBulkImportMachine
                SET    salary = '0'
                WHERE  salary IS NULL
                    OR Len(Rtrim(Ltrim(salary))) = 0

                UPDATE EmployeeBulkImportMachine
                SET    WorkerLevy = '0'
                WHERE  WorkerLevy IS NULL
                    OR Len(Rtrim(Ltrim(WorkerLevy))) = 0

                DECLARE @EmpGroupID INT
                DECLARE @GroupID INT

                SELECT @EmpGroupID = ID
                FROM   Emp_Group
                WHERE  Company_ID = @compid
                   AND Upper(Rtrim(Ltrim(EmpGroupName))) = 'STAFF'

                SELECT @GroupID = GroupID
                FROM   UserGroups
                WHERE  Company_ID = @compid
                   AND Upper(Rtrim(Ltrim(GroupName))) = 'EMPLOYEE'

                SET @EmpGroupID = Isnull(@EmpGroupID, 0)
                SET @GroupID = Isnull(@GroupID, 0)
                SET @selecttxt = ''

                IF (@EmpGroupID = 0)
                    BEGIN
                        SET @selecttxt = 'Missing Employee Groups with the name Staff'
                    END

                IF (@GroupID = 0)
                    BEGIN
                        SET @selecttxt = @selecttxt + CHAR(13) + 'Missing Login Rights with the name Employee'
                    END

                SET @bulkcmd = 'Insert Into ' + @TransferTable + ' Select *,0 Deleted,''Ready to Validate'' Status,''' + @selecttxt + ''' ErrorText, getdate() CreatedDate,' + CAST(@compid AS VARCHAR) + ',' + CAST(@EmpGroupID AS VARCHAR) + ',' + CAST(@GroupID AS VARCHAR) + ' From ' + @destination

                EXEC (@bulkcmd)
            END

        SELECT @bulkcmd = 'Update ' + @TransferTable + ' Set Deleted=0,ErrorContent = ErrorContent  + Char(13) + ''Employee with this FIN already Exist at ID#'' + Cast(ID as varchar) Where ID In ( Select EB.ID From EmployeeBulkImport  EB Inner Join Employee EY ON EB.CompanyID = EY.Company_ID And FIN = EY.IC_PP_Number Where EY.Company_ID =' + CAST(@compid AS VARCHAR) + ')'

        EXEC(@bulkcmd)

        SELECT @bulkcmd = 'Update ' + @TransferTable + ' Set Deleted=0,ErrorContent = ErrorContent  + Char(13) + ''Employee with this NRIC already Exist at ID#'' + Cast(ID as varchar) Where ID In ( Select EB.ID From EmployeeBulkImport  EB Inner Join Employee EY ON EB.CompanyID = EY.Company_ID And NRIC = EY.IC_PP_Number Where EY.Company_ID =' + CAST(@compid AS VARCHAR) + ')'

        EXEC(@bulkcmd)

        SELECT @bulkcmd = 'Update ' + @TransferTable + ' Set Deleted=0,ErrorContent = ErrorContent  + Char(13) + ''Employee with this Time Card No already Exist at ID#'' + Cast(ID as varchar) Where ID In ( Select EB.ID From EmployeeBulkImport  EB Inner Join Employee EY ON EB.CompanyID = EY.Company_ID And TimeCardNO = EY.Time_Card_No Where EY.Company_ID =' + CAST(@compid AS VARCHAR) + ')'

        EXEC(@bulkcmd)

        SELECT @bulkcmd = 'Select * From ' + @TransferTable --+ '  Where Deleted = 0'          
        EXEC(@bulkcmd)
    END 
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--declare @ret as int  
--exec sp_AMCAssigned '0,1078,102,1076',1,1,1,@ret  
CREATE Procedure sp_AMCAssigned     
@EmpID as varchar(4000),    
@AmcId as varchar(10),    
@compId as varchar(10),    
@Action as varchar(10),  
@retval as int OUTPUT  
As    
 DECLARE @select VARCHAR(8000)            
 DECLARE @where VARCHAR(8000)             
 DECLARE @separator varchar(1)  
 DECLARE @no int  
 Declare @emp_id as nvarchar(4)  
  set @retval =0;  
set @separator =',';  
 SET @where = ''    
 SET @select = ''  
IF (@Action = 0)     
 BEGIN      
    SELECT   @where = 'Where EmpCode In (' + @EmpID + ')'                                                            END      
IF (@Action = 1)     
 BEGIN      
    SELECT   @where = 'Where EmpCode In (' + @EmpID + ')'   
 END      
 IF (@Action = 0)     
 BEGIN      
WHILE LEN(@EmpID) > 0  
 BEGIN  
   SET @emp_id = LEFT(@EmpID,ISNULL(NULLIF(CHARINDEX(@separator, @EmpID) - 1, -1),LEN(@EmpID)))  
   SET @EmpID = SUBSTRING(@EmpID,ISNULL(NULLIF(CHARINDEX(@separator, @EmpID), 0), LEN(@EmpID)) + 1,LEN(@EmpID))  
    select @no = count(*) from AmcAssignedEmployee Where Empcode=rtrim(ltrim(@emp_id)) and comp_id=rtrim(ltrim(@compId))  
    IF(@no =0)  
     BEGIN  
     IF(rtrim(ltrim(@emp_id)) != '0')  
      BEGIN  
insert into AmcAssignedEmployee(EmpCode,AssignedAMCID,comp_id) values(rtrim(ltrim(@emp_id)),@AmcId,rtrim(ltrim(@compId)))  
      END  
     set @retval = @retval +1;  
     END  
    IF(@no >0)  
     BEGIN  
 IF(rtrim(ltrim(@emp_id)) != '0')  
      BEGIN  
UPDATE AmcAssignedEmployee set AssignedAMCID=@AmcId Where Empcode=rtrim(ltrim(@emp_id)) and comp_id=rtrim(ltrim(@compId))  
      END  
set @retval = @retval +1;  
     END   
 END    
END    
 IF (@Action = 1 AND LEN(@EmpID) > 0 )     
 BEGIN      
  SELECT    @select = 'delete from dbo.AmcAssignedEmployee ' + @where     
 END      
 EXEC(@select)
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--sp_getIDAMCDetails '','01/03/2010','31/03/2010','T08SS0160C-AMS-02'
CREATE PROCEDURE Sp_getidamcdetails  @EmpId        AS VARCHAR(10),    
                                    @Start_Period AS VARCHAR(10),    
                                    @End_Period   AS VARCHAR(10),    
                                    @AMCSCSN      AS VARCHAR(25),    
                                    @Filter       AS VARCHAR(1)    
AS    
  DECLARE @AMCSLimit FLOAT    
  DECLARE @Form INT  
    
  SELECT @AMCSLimit = Isnull(AMCSLimit, 0)  , @Form=isnull(AMCSRound,0)  
  FROM   MedicalCSN    
  WHERE  CSN = @AMCSCSN    
    
  IF ( Len(@EmpId) > 0 )    
    BEGIN    
        SELECT ID    
        FROM   AMCDetails    
        WHERE  EmpId = @EmpId    
               AND Start_Period = @Start_Period    
               AND END_Period = @End_Period    
    END    
  ELSE    
    BEGIN    
        SELECT A.ID,    
               A.EMPID,    
               A.EMPNAME,    
               A.NRIC,    
               A.OPTIONSELECTED,    
               A.FORMULA,    
               A.BASICPAY,    
               A.NETPAY,    
               A.Total_Gross,    
               A.Start_Period,    
               A.End_Period,    
               CONVERT(NUMERIC(8, 3), dbo.ConvertToRound(A.AMCS_AMOUNT, @Form)) AMCS_AMOUNT,    
               E.IC_PP_Number,    
               CAST(0.00 AS FLOAT)                                Total_AMCS_AMOUNT    
        INTO   #AMCDetails    
        FROM   AMCDetails A    
               INNER JOIN Employee E    
                 ON A.EmpID = E.Emp_Code    
        WHERE  CONVERT(DATETIME, Start_Period, 103) = CONVERT(DATETIME, @Start_Period, 103)    
               AND CONVERT(DATETIME, END_Period, 103) = CONVERT(DATETIME, @End_Period, 103)    
				and termination_date IS NULL
    
        DECLARE @EmpCode CHAR(10)    
        DECLARE @Total FLOAT    
        DECLARE db_cursor CURSOR FOR    
          SELECT EmpID    
          FROM   #AMCDetails    
    
        OPEN db_cursor    
    
        FETCH NEXT FROM db_cursor INTO @EmpCode    
    
        WHILE @@FETCH_STATUS = 0    
          BEGIN    
              SELECT @Total = SUM(CONVERT(FLOAT, dbo.ConvertToRound(A.AMCS_AMOUNT, @Form)))    
              FROM   AMCDetails A    
              WHERE  YEAR(CONVERT(DATETIME, Start_Period, 103)) = YEAR(CONVERT(DATETIME, @Start_Period, 103))    
                     AND MONTH(CONVERT(DATETIME, Start_Period, 103)) <= MONTH(CONVERT(DATETIME, @Start_Period, 103))    
                     AND EmpID = @EmpCode    
    
              UPDATE #AMCDetails    
              SET    Total_AMCS_AMOUNT = Isnull(@Total, 0)    
              WHERE  EmpID = @EmpCode    
    
              FETCH NEXT FROM db_cursor INTO @EmpCode    
          END    
    
        CLOSE db_cursor    
    
        DEALLOCATE db_cursor    
    
--        UPDATE #AMCDetails    
--        SET    AMCS_AMOUNT = 0    
--        WHERE  Total_AMCS_AMount > @AMCSLimit    
--    
        IF ( @Filter = '1' )    
          BEGIN    
              SELECT *    
              FROM   #AMCDetails    
          END    
        IF ( @Filter = '2' )    
          BEGIN    
              SELECT *    
              FROM   #AMCDetails   A 
              WHERE  dbo.ConvertToRound(A.AMCS_AMOUNT, @Form) > 0    
          END    
    
        SELECT Isnull(SUM(CONVERT(FLOAT, dbo.ConvertToRound(A.AMCS_AMOUNT, @Form))), 0) SumTot    
        FROM   #AMCDetails A    
        WHERE  CONVERT(DATETIME, Start_Period, 103) = CONVERT(DATETIME, @Start_Period, 103)    
               AND CONVERT(DATETIME, END_Period, 103) = CONVERT(DATETIME, @End_Period, 103)    
    
        DROP TABLE #AMCDetails    
    END     
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Exec Sp_getcomputeamcdetails 2, '1', '1', '200100439r-PTE-01', '01/03/2010'
CREATE PROCEDURE Sp_getcomputeamcdetails @compId  AS VARCHAR(10),      
                                         @type    AS VARCHAR(1),      
                                         @mid     AS VARCHAR(5),      
                                         @AMCSCSN AS VARCHAR(25),      
                                         @sPeriod AS VARCHAR(10)='',      
                                         @sYear   AS VARCHAR(10)='',      
                                         @sMonth  AS VARCHAR(10)=''      
AS      
  DECLARE @AMCSLimit FLOAT      
  DECLARE @Form INT    
      
  SELECT @AMCSLimit = Isnull(AMCSLimit, 0)  , @Form=isnull(AMCSRound,0)    
  FROM   MedicalCSN      
  WHERE  CSN = @AMCSCSN      
  
    
  DECLARE @EmpCode CHAR(10)      
  DECLARE @Total FLOAT      
      
  IF( @type = '0' )      
    BEGIN      
        SELECT e.emp_code                AS EmpId,      
               Emp_name + '' + Emp_lname AS EmpName,      
               Ic_PP_NUMBER              AS NRIC,      
               CASE FormulaID      
                 WHEN '1' THEN 'FIXED'      
                 WHEN '2' THEN 'Percentage'      
                 WHEN '3' THEN 'Variable'      
               END                       AS OptionSelected,      
               CASE FormulaID      
                 WHEN '1' THEN '--'      
                 WHEN '3' THEN 'Variable Amount'      
                 ELSE CASE FormulaType      
                        WHEN '1' THEN Ltrim(Rtrim(CAST(M.Formula AS VARCHAR))) + ' % On Basic Salary'      
                        WHEN '2' THEN Ltrim(Rtrim(CAST(M.Formula AS VARCHAR))) + ' % On Net Salary'      
                        WHEN '3' THEN Ltrim(Rtrim(CAST(M.Formula AS VARCHAR))) + ' % On Gross Salary'      
                      END      
               END                       AS Formula,      
               ''                        AS basicPay,      
               ''                        AS netpay,      
               ''                        AS Total_gross,      
               ph.start_period           AS start_period,      
               ph.end_period             AS End_period,      
               CASE      
    
                 WHEN CAST(o.AMCS_AMOUNT AS VARCHAR) IS NULL THEN ''      
                 ELSE CAST(dbo.ConvertToRound(CONVERT(FLOAT, o.AMCS_AMOUNT), @Form) AS VARCHAR)      
               END                       AS AMCS_AMOUNT,      
               CAST(0.00 AS FLOAT)       Total_AMCS_AMOUNT      
        INTO   #AMCDetails1      
        FROM   employee E      
               LEFT OUTER JOIN AmcAssignedEmployee AE      
                 ON e.emp_code = AE.EmpCode      
               INNER JOIN MedicalCSN M      
                 ON M.ID = AE.AssignedAMCID      
               INNER JOIN prepare_payroll_detail PD      
                 ON e.emp_code = PD.emp_id      
               INNER JOIN prepare_payroll_hdr PH      
                 ON ph.trx_id = pd.trx_id      
               LEFT OUTER JOIN (SELECT EmpId,      
                                       EmpName,      
                                       NRIC,      
                                       OptionSelected,      
                                       Formula,      
                                       BasicPay,      
                                       Netpay,      
                                       Total_Gross,      
                                       Start_Period,      
                                       End_Period,      
                                       AMCS_AMOUNT      
                                FROM   AMCDetails      
                                WHERE  MONTH(CONVERT(DATETIME, Start_Period, 103)) = @sMonth      
                                       AND YEAR(CONVERT(DATETIME, End_Period, 103)) = @sYear) O      
                 ON e.emp_code = O.Empid      
        WHERE  ( AE.AssignedAMCID IS NOT NULL )      
               AND e.Company_id = @compID      
    AND termination_date IS NULL      
               AND Emp_type IN ( 'SPR', 'SC' )      
               AND M.ID = @mid      
               AND MONTH(PH.start_period) = @sMonth      
               AND YEAR(PH.start_period) = @sYear      
               AND STATUS = 'G'      
        GROUP  BY emp_code,      
                  Emp_name,      
                  Emp_lname,      
                  Ic_PP_NUMBER,      
                  FormulaID,      
                  FormulaType,      
                  M.Formula,      
                  ph.START_period,      
                  ph.end_period,      
                  o.AMCS_AMOUNT      
        ORDER  BY Emp_name      
      
        DECLARE db_cursor CURSOR FOR      
          SELECT EmpID      
          FROM   #AMCDetails1      
      
        OPEN db_cursor      
      
        FETCH NEXT FROM db_cursor INTO @EmpCode      
      
        WHILE @@FETCH_STATUS = 0      
          BEGIN      
              SELECT @Total = SUM(CONVERT(FLOAT, dbo.ConvertToRound(A.AMCS_AMOUNT, @Form)))      
              FROM   AMCDetails A      
              WHERE  YEAR(CONVERT(DATETIME, Start_Period, 103)) = @sYear      
                     AND MONTH(CONVERT(DATETIME, Start_Period, 103)) <= @sMonth      
                     AND EmpID = @EmpCode      
      
              UPDATE #AMCDetails1      
              SET    Total_AMCS_AMOUNT = Isnull(@Total, 0)      
              WHERE  EmpID = @EmpCode      
      
              FETCH NEXT FROM db_cursor INTO @EmpCode      
          END      
      
        CLOSE db_cursor      
      
        DEALLOCATE db_cursor      
      
--        UPDATE #AMCDetails1      
--        SET    AMCS_AMOUNT = 0      
--        WHERE  AMCS_AMount > @AMCSLimit      
      
        SELECT *      
        FROM   #AMCDetails1      
    END      
      
  IF( @type = '1' )      
    BEGIN      
        SELECT e.emp_code                                                                  AS EmpId,      
               Emp_name + '' + Emp_lname                                                   AS EmpName,      
               Ic_PP_NUMBER                                                                AS NRIC,      
               CASE FormulaID      
                 WHEN '1' THEN 'FIXED'      
                 WHEN '2' THEN 'Percentage'      
                 WHEN '3' THEN 'Variable'      
               END                                                                         AS OptionSelected,      
               CASE FormulaID      
                 WHEN '1' THEN '--'      
                 WHEN '3' THEN 'Variable Amount'      
                 ELSE CASE FormulaType      
                        WHEN '1' THEN Ltrim(Rtrim(CAST(M.Formula AS VARCHAR))) + ' % On Basic Salary'      
                        WHEN '2' THEN Ltrim(Rtrim(CAST(M.Formula AS VARCHAR))) + ' % On Net Salary'      
                        WHEN '3' THEN Ltrim(Rtrim(CAST(M.Formula AS VARCHAR))) + ' % On Gross Salary'      
                      END      
               END                                                                         AS Formula,      
               CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), pd.basic_pay)) AS basicpay,      
               CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), pd.netpay))    AS netpay,      
               pd.Total_Gross,      
               CASE FormulaID      
                 WHEN '1' THEN M.Formula      
                 WHEN '2' THEN CASE FormulaType      
                                 WHEN '1' THEN CASE      
                                                 WHEN CAST(o.Amcs_Amount AS VARCHAR) IS NULL THEN CONVERT(NUMERIC(10, 3), CAST(dbo.ConvertToRound(CONVERT(FLOAT, CONVERT(NUMERIC(10, 3), (CONVERT(NUMERIC(10, 2), M.[Formula])/100.00 )) * CONVERT(NUMERIC(10, 
  
2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay)))), @Form) AS VARCHAR))      
                                                 ELSE CONVERT(NUMERIC(10, 3), CAST(dbo.ConvertToRound(CONVERT(FLOAT, o.Amcs_Amount), @Form) AS VARCHAR))      
                                               END      
                                 WHEN '2' THEN CASE      
                                                 WHEN CAST(o.Amcs_Amount AS VARCHAR) IS NULL THEN CONVERT(NUMERIC(10, 3), CAST(dbo.ConvertToRound(CONVERT(FLOAT, CONVERT(NUMERIC(10, 3), (CONVERT(NUMERIC(10, 2), M.[Formula])/100.00 )) * CONVERT(NUMERIC(10, 
  
2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), pd.netpay)))), @Form) AS VARCHAR))      
                                                 ELSE CONVERT(NUMERIC(10, 3), CAST(dbo.ConvertToRound(CONVERT(FLOAT, o.Amcs_Amount), @Form) AS VARCHAR))      
                                               END      
        WHEN '3' THEN CASE      
                                                 WHEN CAST(o.Amcs_Amount AS VARCHAR) IS NULL THEN CONVERT(NUMERIC(10, 3), CAST(dbo.ConvertToRound(CONVERT(FLOAT, CONVERT(NUMERIC(10, 3), (CONVERT(NUMERIC(10, 2), M.[Formula])/100.00 )) * CONVERT(NUMERIC(10, 
  
2), CONVERT(VARCHAR(10), pd.total_gross))), @Form) AS VARCHAR))      
                                                 ELSE CONVERT(NUMERIC(10, 3), CAST(dbo.ConvertToRound(CONVERT(FLOAT, o.Amcs_Amount), @Form) AS VARCHAR))      
                                               END      
                               END      
               END                                                                         AS AMCS_AMOUNT,      
               ph.start_period,      
               ph.end_period,      
               CAST(0.00 AS FLOAT)                                                         Total_AMCS_AMOUNT      
        INTO   #AMCDetails2      
        FROM   employee E      
               LEFT OUTER JOIN AmcAssignedEmployee AE      
                 ON e.emp_code = AE.EmpCode      
               INNER JOIN MedicalCSN M      
                 ON M.ID = AE.AssignedAMCID      
               INNER JOIN prepare_payroll_detail PD      
                 ON e.emp_code = PD.emp_id      
               INNER JOIN prepare_payroll_hdr PH      
                 ON ph.trx_id = pd.trx_id      
               LEFT OUTER JOIN (SELECT EmpId,      
                                       EmpName,      
                                       NRIC,      
                                       OptionSelected,      
                                       Formula,      
                                       BasicPay,      
                                       Netpay,      
                                       Total_Gross,      
                                       Start_Period,      
                                       End_Period,      
                                       AMCS_AMOUNT      
                                FROM   AMCDetails      
                                WHERE  MONTH(CONVERT(DATETIME, Start_Period, 103)) = @sMonth      
                                       AND YEAR(CONVERT(DATETIME, End_Period, 103)) = @sYear) O      
                 ON e.emp_code = O.Empid      
        WHERE  ( AE.AssignedAMCID IS NOT NULL )      
               AND e.Company_id = @compID      
               AND termination_date IS NULL      
               AND Emp_type IN ( 'SPR', 'SC' )      
               AND M.ID = @mid      
               AND CONVERT(VARCHAR(10), ph.start_period, 103) = CONVERT(VARCHAR(10), @sPeriod, 103)      
               AND STATUS = 'G'      
        ORDER  BY Emp_name      
      
        DECLARE db_cursor CURSOR FOR      
          SELECT EmpID      
          FROM   #AMCDetails2      
      
        OPEN db_cursor      
      
        FETCH NEXT FROM db_cursor INTO @EmpCode      
      
        WHILE @@FETCH_STATUS = 0      
          BEGIN      
              SELECT @Total = SUM(CONVERT(FLOAT, dbo.ConvertToRound(A.AMCS_AMOUNT, @Form)))      
              FROM   AMCDetails A      
              WHERE  YEAR(CONVERT(DATETIME, Start_Period, 103)) = YEAR(CONVERT(DATETIME, @sPeriod, 103))      
                     AND MONTH(CONVERT(DATETIME, Start_Period, 103)) <= MONTH(CONVERT(DATETIME, @sPeriod, 103))      
                     AND EmpID = @EmpCode      
      
              --sELECT @EmpCode, @Total, Month(Convert(Datetime,@sPeriod)), Year(Convert(Datetime,@sPeriod))      
              UPDATE #AMCDetails2      
              SET    Total_AMCS_AMOUNT = Isnull(@Total, 0)      
              WHERE  EmpID = @EmpCode      
      
              FETCH NEXT FROM db_cursor INTO @EmpCode      
          END      
      
        CLOSE db_cursor      
      
        DEALLOCATE db_cursor      
      
        UPDATE #AMCDetails2      
        SET    AMCS_AMOUNT = 0      
        WHERE  Total_AMCS_AMount > @AMCSLimit      
      
        SELECT *      
        FROM   #AMCDetails2      
    END 
GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_yosleavesallowed] (@empcode  INT,
                                              @custyear INT = 0,
                                              @delete   INT = 0)
AS
  BEGIN
      DECLARE @JOIN DATETIME
      DECLARE @year_of_service INT
      DECLARE @months_of_service INT
      DECLARE @curredate DATETIME
      DECLARE @lastdayofmonth INT
      DECLARE @START1 DATETIME
      DECLARE @START2 DATETIME
      DECLARE @END1 DATETIME
      DECLARE @END2 DATETIME
      DECLARE @iMth INT
      DECLARE @custyearcurrent INT
      DECLARE @fixla FLOAT

      IF ( @custyear = 0 )
        BEGIN
            SET @custyear = YEAR(Getdate())
        END

      IF ( @delete = 1 )
        BEGIN
            DELETE FROM YOSLeavesAllowed  
            WHERE  Emp_ID = @empcode  

            DELETE FROM LeavesAllowedInYears  
            WHERE  Emp_ID = @empcode  

            Update YOSEmpTransfered   Set [Status]=1
            WHERE  EmpID = @empcode And [Status]=0

			Delete From leaves_forefited
            WHERE  Emp_ID = @empcode  
        END

      --print @empcode  
      SET @curredate = Getdate()
      SET @custyearcurrent = YEAR(@curredate)

      SELECT @JOIN = joining_date
      FROM   Employee
      WHERE  Emp_Code = @empcode

      SET @months_of_service = Datediff(m, @JOIN, @curredate)
      SET @year_of_service = Ceiling(@months_of_service / 12)-- + 1

      IF ( YEAR(@JOIN) < @custyearcurrent
           AND MONTH(@JOIN) > MONTH(Getdate()) )
        BEGIN
            SET @custyearcurrent = @custyearcurrent - 1
        END

      IF ( YEAR(@JOIN) > @custyearcurrent
           AND MONTH(@JOIN) <= MONTH(Getdate()) )
        BEGIN
            SET @custyearcurrent = @custyearcurrent - 1
        END

      IF ( YEAR(@JOIN) = @custyearcurrent
           AND MONTH(@JOIN) <= MONTH(Getdate()) )
        BEGIN
            SET @custyearcurrent = @custyearcurrent
        END

      IF ( MONTH(@JOIN) = 1 )
        BEGIN
            SET @START1 = CONVERT(DATETIME, '01/01/' + CAST(@custyearcurrent AS VARCHAR), 103)
            SET @END1 = CONVERT(DATETIME, '31/12/' + CAST(@custyearcurrent AS VARCHAR), 103)
            SET @START2 = CONVERT(DATETIME, '01/01/' + CAST(@custyearcurrent+1 AS VARCHAR), 103)
            SET @END2 = CONVERT(DATETIME, '31/12/' + CAST(@custyearcurrent+1 AS VARCHAR), 103)
        END
      ELSE
        BEGIN
            SET @iMth = DAY(Dateadd(s, -1, Dateadd(mm, Datediff(m, 0, CONVERT(DATETIME, '01/'+CAST(MONTH(@join)-1 AS VARCHAR)+'/'+CAST(YEAR(@curredate)+1 AS VARCHAR), 103)) + 1, 0)))
            SET @START1 = CONVERT(DATETIME, '01/'+ CAST(MONTH(@JOIN) AS VARCHAR) + '/' + CAST(@custyearcurrent AS VARCHAR), 103)
            SET @END1 = CONVERT(DATETIME, CAST(@iMth AS VARCHAR) + '/'+ CAST(MONTH(@JOIN)-1 AS VARCHAR) + '/' + CAST(@custyearcurrent+1 AS VARCHAR), 103)
            SET @iMth = DAY(Dateadd(s, -1, Dateadd(mm, Datediff(m, 0, CONVERT(DATETIME, '01/'+CAST(MONTH(@join)-1 AS VARCHAR)+'/'+CAST(YEAR(@custyearcurrent)+2 AS VARCHAR), 103)) + 1, 0)))
            SET @START2 = CONVERT(DATETIME, '01/'+ CAST(MONTH(@JOIN) AS VARCHAR) + '/' + CAST(@custyearcurrent+1 AS VARCHAR), 103)
            --SELECT @iMth, @custyearcurrent  
            SET @END2 = CONVERT(DATETIME, CAST(@iMth AS VARCHAR) + '/'+ CAST(MONTH(@JOIN)-1 AS VARCHAR) + '/' + CAST(@custyearcurrent+2 AS VARCHAR), 103)
        END

      --select @JOIN,@START1, @START2, @END1, @END2,Cast(Month(@JOIN)-1 as varchar), CAST(YEAR(@curredate)+2 as varchar)    
      --Select @fixla=isnull(leaves_allowed,0) From EmployeeLeavesAllowed where Leave_Year=@custyear and leave_type=8 and Emp_ID=@empcode 
      INSERT INTO YOSLeavesAllowed
                  (yosyear,
                   emp_id,
                   yos,
                   actual_yos,
                   startdate,
                   enddate,
                   leavesallowed,
                   CreatedDate,
                   lY_Leaves_Bal)
      (SELECT @custyear,
              @empcode,
              1,
              @year_of_service,
              @START1,
              @END1,
              --@fixla,
              0,
              Getdate(),
              0)

      INSERT INTO YOSLeavesAllowed
                  (yosyear,
                   emp_id,
                   yos,
                   actual_yos,
                   startdate,
                   enddate,
                   leavesallowed,
                   CreatedDate,
                   lY_Leaves_Bal)
      (SELECT @custyear,
              @empcode,
              2,
              @year_of_service + 1,
              @START2,
              @END2,
              0,
              Getdate(),
              0)
  END 
GO
--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_yosemployeeautorec] (@companyid INT,
                                                @delete    INT = 0)
AS
  DECLARE @CountYOS INT
  DECLARE @compid INT
  DECLARE @leavemodel INT
  DECLARE @EmpID INT
  DECLARE db_cursor CURSOR FOR
    SELECT Leave_Model,
           Company_ID
    FROM   Company
    WHERE  Company_ID = @companyid

  OPEN db_cursor

  FETCH NEXT FROM db_cursor INTO @leavemodel, @compid

  WHILE @@FETCH_STATUS = 0
    BEGIN
        IF ( @leavemodel = 3
              OR @leavemodel = 4
              OR @leavemodel = 6
              OR @leavemodel = 8 )
          BEGIN
              DECLARE db_cursor_1 CURSOR FOR
                SELECT Emp_Code
                FROM   Employee
                WHERE  Company_ID = @compid

              OPEN db_cursor_1

              FETCH NEXT FROM db_cursor_1 INTO @EmpID

              WHILE @@FETCH_STATUS = 0
                BEGIN
                    SELECT @CountYOS = Isnull(COUNT(*), 0)
                    FROM   YOSLeavesAllowed
                    WHERE  Emp_ID = @EmpID

                    IF ( @CountYOS <= 0 )
                      BEGIN
                          --Delete From EMployeeLeavesALlowed Where Leave_Type = 8
                          EXEC Sp_yosleavesallowed
                            @EmpID, 
							0,
                            @delete
                      END

                    FETCH NEXT FROM db_cursor_1 INTO @EmpID
                END

              CLOSE db_cursor_1

              DEALLOCATE db_cursor_1
          END

        FETCH NEXT FROM db_cursor INTO @leavemodel, @compid
    END

  CLOSE db_cursor
  DEALLOCATE db_cursor
GO
--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GetImportedEmployee]
       @company_id INT
AS 
BEGIN        
	Select * From
	(
		SELECT Y.Deleted,Y.Status,Y.ErrorContent,Y.ID,Y.TimeCardNo,Y.FirstName,Y.LastName,Y.Phone,Y.HandPhone,Y.Email,Y.ConfirmationDate,Y.CpfEntitlement,Y.
		OTEntilement,Y.WPNumber,Y.WPExpDate,Y.NRIC,Y.FIN,Y.DateOfBirth DOB,Y.PassportNo,Y.PPIssueDate,Y.PassportExpiry,Y.Nationality,Y.EmpType,Y.JoiningDate,Y.
		WPApplicationDate,Y.WPIssueDate,Y.WorkerLevy,Y.Blockno,Y.UnitNo,Y.LevelNo,Y.StreetName,Y.PostalCode,Y.PayFrequency,Y.Salary,Y.WDayPerWeek,Y.HourlyRateMode,Y.
		HourlyRate,Y.DailyRateMode,Y.DailyRate,Y.Sex,Y.MaritalStatus,Y.Race,Y.Religion,Y.dateofbirth From EmployeeBulkImport Y
		Where Y.Deleted != 0 And Y.CompanyId= @company_id
		Union All
		SELECT Y.Deleted,Status=Case When E.ic_pp_number is not null Then 'Already Exist' Else Y.Status End,Y.ErrorContent,Y.ID,Y.TimeCardNo,Y.FirstName,Y.LastName,Y.Phone,Y.HandPhone,Y.Email,Y.ConfirmationDate,Y.CpfEntitlement,Y.
		OTEntilement,Y.WPNumber,Y.WPExpDate,Y.NRIC,Y.FIN,Y.DateOfBirth DOB,Y.PassportNo,Y.PPIssueDate,Y.PassportExpiry,Y.Nationality,Y.EmpType,Y.JoiningDate,Y.
		WPApplicationDate,Y.WPIssueDate,Y.WorkerLevy,Y.Blockno,Y.UnitNo,Y.LevelNo,Y.StreetName,Y.PostalCode,Y.PayFrequency,Y.Salary,Y.WDayPerWeek,Y.HourlyRateMode,Y.
		HourlyRate,Y.DailyRateMode,Y.DailyRate,Y.Sex,Y.MaritalStatus,Y.Race,Y.Religion,Y.dateofbirth From EmployeeBulkImport Y
		Left Outer Join Employee E On (Y.NRIC = E.ic_pp_number OR Y.FIN = E.ic_pp_number OR Y.TimeCardNo = E.Time_Card_No)
		Where Y.Deleted = 0 And Y.CompanyId= @company_id
	) D  Order By [Status]
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--EXEC Sp_yos_trans_leave 2, 2, '08/31/2010'

CREATE PROC [dbo].[Sp_yos_trans_leave]         
(        
 @compid    INT,          
 @FL        FLOAT,          
 @appliedon DATETIME        
)          
AS          
        
BEGIN        
        
   DECLARE @year INT        
   DECLARE @EmpID INT        
   DECLARE @lastdateon DATETIME  
   DECLARE @LeapYear int	      
           
           
   --DECLARE @compid INT        
   --DECLARE @FL FLOAT        
   --DECLARE @year INT        
   --DECLARE @appliedon DATETIME        
   --        
   --Set @compid = 2        
   --SET @FL = 16        
   --SET @year = 2010        
   --SET @appliedon = Dateadd(dd, 130, Getdate())        
           
   Set @year = year(@appliedon)
	SET @LeapYear =  (dbo.ufn_IsLeapYear(@year))
	

           
   DECLARE @LEAVEAVAIL TABLE 
	(
			ID                    INT,        
			EMP_ID                INT,        
			LEAVE_YEAR            FLOAT,        
			[TYPE]                VARCHAR(50),        
			CompanyLeaveAllowed   FLOAT,        
			LeavesAllowed         FLOAT,        
			LY_Leaves_Bal         FLOAT,        
			LeavesEarned          FLOAT,        
			PaidLeaves            FLOAT,        
			UnpaidLeaves          FLOAT,        
			PendingLeaves         FLOAT,        
			LeavesAvailable       FLOAT,        
			TotalLeavesTaken      FLOAT,        
			ALA FLOAT,        
			LeavesFromLY          FLOAT,        
			SHOWLEAVEMODEL        INT
	)        
           
   Select * Into ##YOSLeavesAllowed from  YOSLeavesAllowed        
         
   --SELECT (CONVERT(DATETIME, CAST(DAY(Y.EndDate) AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103))  FROM ##YOSLeavesAllowed Y WHERE CAST(MONTH(Y.EndDate) AS VARCHAR)!='2'      
    
  -- SELECT CAST(MONTH(Y.EndDate) AS VARCHAR) +    FROM ##YOSLeavesAllowed  Y   ---WHERE  CAST(MONTH(Y.EndDate) AS VARCHAR)='2'   
  
   
   --SELECT "Month Number" = CAST(DAY(Y.EndDate)AS VARCHAR )FROM ##YOSLeavesAllowed  Y  
  
  ---SELECT CONVERT(DATETIME, CAST(DAY(Y.EndDate) AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103) FROM ##YOSLeavesAllowed  Y  
  
    --SELECT CONVERT(DATETIME ,'29/02/2012 12:00:00 AM',103)  
  
           
   SELECT E.Emp_Code,G.ID Emp_Group_ID, Isnull(E.Emp_name, '') + ' ' + Isnull(E.emp_lname, '') Emp_name,G.EmpGroupName,CONVERT(DATETIME, CAST(DAY(Y.EndDate) AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103) CustJD,(Y.Actual_YOS -1 ) LYA       
   , y.yla YOSLA, Y.LY_Leaves_Bal YOSLB        
   INTO   ##EmployeeTemp1        
   FROM   Employee E        
          INNER JOIN Emp_Group G ON E.Emp_Group_ID = G.ID        
          INNER JOIN (Select *,(y.leavesallowed+y.LY_Leaves_Bal) yla From ##YOSLeavesAllowed y) Y ON E.Emp_Code = Y.Emp_ID
   WHERE  E.Company_ID = @compid        
      AND E.Termination_Date IS NULL        
      AND (yla) > 0        
      AND (CONVERT(DATETIME, CAST(DAY(Y.EndDate) AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103)) <= @appliedon        
    And E.Company_ID=@compid AND  CAST(MONTH(Y.EndDate) AS VARCHAR)!='2'

	
	--select Case [dbo].[ufn_IsLeapYear]('2/28/2011') WHEN 1 THEN 'Leap' ELSE 'NL' END	
	IF (@LeapYear=1)
		BEGIN 
		  INSERT INTO ##EmployeeTemp1
					 SELECT E.Emp_Code,G.ID Emp_Group_ID, Isnull(E.Emp_name, '') + ' ' + Isnull(E.emp_lname, '') Emp_name,G.EmpGroupName,CONVERT(DATETIME, CAST(DAY(Y.EndDate) AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103) CustJD,(Y.Actual_YOS -1 ) LYA       
		   , y.yla YOSLA, Y.LY_Leaves_Bal YOSLB        
		   FROM   Employee E        
				  INNER JOIN Emp_Group G ON E.Emp_Group_ID = G.ID        
				  INNER JOIN (Select *,(y.leavesallowed+y.LY_Leaves_Bal) yla From ##YOSLeavesAllowed y) Y ON E.Emp_Code = Y.Emp_ID
		   WHERE  E.Company_ID = @compid        
			  AND E.Termination_Date IS NULL        
			  AND (yla) > 0        
			  AND (CONVERT(DATETIME, CAST(DAY(Y.EndDate) AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103)) <= @appliedon        
			And E.Company_ID=@compid AND  CAST(MONTH(Y.EndDate) AS VARCHAR)='2'
			PRINT 'aaaa'
		END
	ELSE
		BEGIN
			INSERT INTO ##EmployeeTemp1
					   SELECT E.Emp_Code,G.ID Emp_Group_ID, Isnull(E.Emp_name, '') + ' ' + Isnull(E.emp_lname, '') Emp_name,G.EmpGroupName,CONVERT(DATETIME, CAST('28' AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103) CustJD,(Y.Actual_YOS -1 ) LYA       
		   , y.yla YOSLA, Y.LY_Leaves_Bal YOSLB        		   
		   FROM   Employee E        
				  INNER JOIN Emp_Group G ON E.Emp_Group_ID = G.ID        
				  INNER JOIN (Select *,(y.leavesallowed+y.LY_Leaves_Bal) yla From ##YOSLeavesAllowed y) Y ON E.Emp_Code = Y.Emp_ID
		   WHERE  E.Company_ID = @compid        
			  AND E.Termination_Date IS NULL        
			  AND (yla) > 0        
			  AND (CONVERT(DATETIME, CAST('28' AS VARCHAR)+'/'+CAST(MONTH(Y.EndDate) AS VARCHAR)+'/'+ CAST(@year AS VARCHAR), 103)) <= @appliedon        
			And E.Company_ID=@compid AND  CAST(MONTH(Y.EndDate) AS VARCHAR)='2'
			
		END
		
           
    ---SELECT * FROM ##EmployeeTemp1      
           
            
   SELECT *        
   INTO   ##EmployeeTemp2        
   FROM   ##EmployeeTemp1 E        
           
   Delete From ##EmployeeTemp2 Where Emp_Code In        
   (Select Emp_Code From ##EmployeeTemp2 E Inner Join YOSEmpTransfered Y On E.Emp_Code = Y.EmpID And E.CustJD = Y.Transferdate)        
           
           
           
   DECLARE db_cursor CURSOR FOR        
       SELECT Emp_Code,CustJD        
       FROM   ##EmployeeTemp2        
           
   OPEN db_cursor        
           
   FETCH NEXT FROM db_cursor INTO @EmpID, @lastdateon        
           
   WHILE @@FETCH_STATUS = 0        
       BEGIN        
           INSERT @LEAVEAVAIL        
                  (id,emp_id,leave_year,[TYPE],companyleaveallowed,LY_Leaves_Bal,leavesallowed,leavesearned,paidleaves,unpaidleaves,pendingleaves,leavesavailable,ALA,totalleavestaken,SHOWLEAVEMODEL)        
           EXEC Sp_getemployeeleavepolicy @EmpID,@year,@lastdateon,8        
           
           FETCH NEXT FROM db_cursor INTO @EmpID, @lastdateon        
       END        
           
   CLOSE db_cursor        
           
   DEALLOCATE db_cursor        
           
   Select E.*, isnull(P.Leaves_Allowed,0) CYL         
   Into ##EmployeeTemp3 From ##EmployeeTemp2 E        
   Left Outer Join prorated_leaves P         
   on E.Emp_Group_ID = P.group_ID And (E.LYA+1) = P.year_of_service        
           
           
           
   Select *, (TLYLFT+CYL) TAL From        
   (        
    SELECT E.Emp_Code, E.Emp_Group_ID,Emp_name,EmpGroupName,Convert(varchar,CustJD,103) CustJD,        
    CASE WHEN LYA=-1 THEN 0 ELSE LYA END LYA, L.ALA LYL,        
    (LYA + 1) CYA,CYL,        
    @FL MaxATT,         
    TLYLFT = Case When @FL <= L.ALA Then @FL         
        When @FL >  L.ALA Then L.ALA Else 0 End, YOSLA, YOSLB        
    FROM   @LEAVEAVAIL L        
        INNER JOIN ##EmployeeTemp3 E ON L.Emp_ID = E.Emp_Code        
    --WHERE  LeavesAllowed != -100        
   ) D ORder By EmpGroupName, Emp_Name        
           
           
   DROP TABLE ##EmployeeTemp1        
           
   DROP TABLE ##EmployeeTemp2        
           
   DROP TABLE ##EmployeeTemp3        
           
   Drop Table ##YOSLeavesAllowed        
END       

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Sp_yos_update] 
(
	@empid			 INT,  
	@leavemodel		 INT,  
	@LYA			 FLOAT,  
	@CYL			 FLOAT,  
	@TLYLFT			 FLOAT,
	@YOSLA			 FLOAT,
	@TAL			 FLOAT,
	@RemLastYrLeaves FLOAT,
	@transferdate varchar(20)
)  
AS
BEGIN
	Declare @trndate as datetime
	IF (@TAL >= 0)
	BEGIN
		Delete From LeavesAllowedInYears where emp_id= @empid and Years= @LYA

		Insert Into LeavesAllowedInYears (Years,Emp_ID,LeavesAvailable, LY_Leaves_Bal,LeaveType) 
		Select Top 1 Actual_YOS, Emp_ID, LeavesAllowed, LY_Leaves_Bal,@leavemodel From YOSLeavesAllowed Where Emp_ID = @empid Order By Actual_YOS

		Delete From YOSLeavesAllowed Where ID In 
		(Select Top 1 ID From YOSLeavesAllowed Where Emp_ID = @empid  And actual_yos=@LYA)
		
		Update YOSLeavesAllowed Set YOS=1, LeavesAllowed=@CYL, LY_Leaves_Bal=@TLYLFT Where Emp_ID=@empid

		--Select @trndate =EndDate From YOSLeavesAllowed Where Emp_ID = @empid 

		Insert Into YOSLEavesAllowed	
		(yosyear, emp_id, yos, actual_yos, startdate, enddate,  leavesallowed, CreatedDate, LY_Leaves_Bal)
		Select Year(EndDate), Emp_ID, 2, (Actual_YOS+1), Dateadd(yy,1,startdate),Dateadd(yy,1,enddate),0,getdate(),0
		From YOSLeavesAllowed Where Emp_ID = @empid 
	END
	IF (@YOSLA > 0)
	BEGIN
		insert into leaves_forefited (emp_id,leave_year,leave_forefited,leave_allowed,leave_forward) Values 
		(@empid, @LYA, @RemLastYrLeaves, @YOSLA, @TLYLFT)
	END

	Insert Into YOSEmpTransfered values (@empid, @LYA, Convert(datetime,@transferdate,103), 0)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_insertstockreturndetails] @MTransId AS NVARCHAR(10),
                                                     @empCode  AS NVARCHAR(10)='',
                                                     @prjCode  AS NVARCHAR(10)='',
                                                     @StId     AS NVARCHAR(10),
                                                     @ItemId   AS NVARCHAR(10),
                                                     @Qty      AS NVARCHAR(10),
                                                     @type     AS NVARCHAR(10)
AS
  IF (@type = 2)
      BEGIN
          INSERT INTO StockReturnDetails
                      (MasterTransId,EmpId,StoreId,ItemId,quantity,ReturnType)
          VALUES     (@MTransId,@empCode,@StId,@ItemId,@Qty,@type)
      END

  IF (@type = 3)
      BEGIN
          INSERT INTO StockReturnDetails
                      (MasterTransId,ProjectId,StoreId,ItemId,quantity,ReturnType)
          VALUES     (@MTransId,@prjCode,@StId,@ItemId,@Qty,@type)
      END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_insertstockoutdetails] @MTransId AS NVARCHAR(10),
                                                  @empCode  AS NVARCHAR(10)='',
                                                  @prjCode  AS NVARCHAR(10)='',
                                                  @StId     AS NVARCHAR(10),
                                                  @ItemId   AS NVARCHAR(10),
                                                  @Qty      AS NVARCHAR(10),
                                                  @type     AS NVARCHAR(10)
AS
  IF (@type = 1)
      BEGIN
          INSERT INTO StockOutDetails
                      (MasterTransId,EmpId,StoreId,ItemId,quantity,Issuetype)
          VALUES     (@MTransId,@empCode,@StId,@ItemId,@Qty,@type)
      END

  IF (@type = 2)
      BEGIN
          INSERT INTO StockOutDetails
                      (MasterTransId,ProjectId,StoreId,ItemId,quantity,Issuetype)
          VALUES     (@MTransId,@prjCode,@StId,@ItemId,@Qty,@type)
      END

  IF (@type = 3)
      BEGIN
          INSERT INTO StockOutDetails
                      (MasterTransId,EmpId,StoreId,ItemId,quantity,Issuetype)
          VALUES     (@MTransId,@empCode,@StId,@ItemId,@Qty,@type)
      END

  IF (@type = 4)
      BEGIN
          INSERT INTO StockOutDetails
                      (MasterTransId,ProjectId,StoreId,ItemId,quantity,Issuetype)
          VALUES     (@MTransId,@prjCode,@StId,@ItemId,@Qty,@type)
      END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_insertbarcodedetails] @transId  AS VARCHAR(10),
                                                 @itemCode AS VARCHAR(10),
                                                 @count    AS INT,
                                                 @storeId  AS VARCHAR(10),
                                                 @recId    AS VARCHAR(10)
AS
  DECLARE @loopid AS INT

  SET @loopid=1;

  WHILE @loopid <= @count
      BEGIN
          INSERT INTO BarcodeDetails
                      (TransId,ItemCode,Barcode,storeId,StockStatus,RecSubTransId)
          VALUES      (@transId,@itemCode,NULL,@storeId,'SI',@recId)

          SET @loopid = @loopid + 1
      END 

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_gettransactionmaster] @transType INT
AS
  IF (@transType = 0)
      BEGIN
          SELECT TransId,CONVERT(NVARCHAR(10), TransDate, 103)AS TransDate,OrderNumber,TransactionRemarks,StoreId,SupplierId,CAST(EmployeeId AS INT) AS EmpId
          FROM   TransactionMaster
          WHERE  TransType = @transType
          ORDER  BY TransId DESC
      END

  IF (@transType = 1)
      BEGIN
          SELECT TransId,CONVERT(NVARCHAR(10), TransDate, 103)AS TransDate,OrderNumber,TransactionRemarks,StoreId,SupplierId,CAST(EmployeeId AS INT) AS EmpId
          FROM   TransactionMaster
          WHERE  TransType = @transType
          ORDER  BY TransId DESC
      END

  IF (@transType = 2)
      BEGIN
          SELECT TransId,CONVERT(NVARCHAR(10), TransDate, 103)AS TransDate,ItemId,CAST(StoreIn AS INT)AS DestinationStore,CAST(StoreOut AS INT) AS SourceStore,Quantity,TransactionRemarks
          FROM   TransactionMaster TM
                 INNER JOIN stockTransferDetails SD ON TM.TransId = SD.MasterTransId
          WHERE  TransType = 2
          ORDER  BY TransId DESC
      END

  IF (@transType = 3)
      BEGIN
          SELECT TransId,CONVERT(NVARCHAR(10), TransDate, 103)AS TransDate,OrderNumber,TransactionRemarks,StoreId,SupplierId,CAST(EmployeeId AS INT) AS EmpId
          FROM   TransactionMaster
          WHERE  TransType = @transType
          ORDER  BY TransId DESC
      END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_getsupplierdetails] @compid NVARCHAR(10)
AS
  SELECT SupplierId + ' - ' + SupplierName AS SupName,Id
  FROM   dbo.Supplier
  WHERE  Company_Id = @compid 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getstoredetails] @compid NVARCHAR(10)
AS
  SELECT '-- Select --' AS Store,0 AS Id
  UNION ALL
  SELECT StoreId + ' - ' + StoreName AS Store,Id
  FROM   dbo.Store
  WHERE  Company_Id = @compid 

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getstockquantity] @storeId INT =0
AS
  IF @storeId > 0
      BEGIN
          SELECT 0 AS StoreId,'0' AS Id,0 AS Quantity,'-Select-' AS ItemName
          UNION ALL
          SELECT StoreId,B.ItemCode AS Id,COUNT(BarCOdeID)AS Quantity,I.ItemName + '-' + CAST(COUNT(BarCOdeID) AS NVARCHAR) + ' [Qty]' AS ItemName
          FROM   BarCodeDetails B
                 INNER JOIN item I ON b.ItemCode = I.Id
          WHERE  StoreId = @storeId
             AND (StockStatus = 'SI'
                   OR StockStatus = 'ST'
                   OR StockStatus = 'ESR'
                   OR StockStatus = 'PSR')
          GROUP  BY B.ItemCode,StoreId,ItemName
      END
  ELSE
      SELECT 0 AS StoreId,'0' AS Id,0 AS Quantity,'-Select-' AS ItemName 

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getstockindetails] @transId AS NVARCHAR(10),
                                              @type    NVARCHAR(10)='SI'
AS
  IF(CONVERT(NVARCHAR, @type) = 'SI')
      BEGIN
          SELECT TransId,CONVERT(NVARCHAR(10), TransDate, 103) AS TransDate,OrderNumber,StoreName,SupplierName,ItemName,Quantity,Price,Quantity * pRice AS TotalCost,TransactionRemarks
          FROM   TransactionMaster Tm
                 INNER JOIN (SELECT TransSubId,ItemCode,SUM(CONVERT(INT, Quantity))AS Quantity,SUM(CONVERT(INT, Price))AS Price
                             FROM   TransactionDetails TD
                             GROUP  BY TransSubId,ItemCode
                            --Order By TransSubId  
                            )TD ON Tm.TransId = TD.TransSubId
                 INNER JOIN (SELECT Id,itemid + '-' + ItemName AS ItemName
                             FROM   Item)I ON TD.Itemcode = I.Id
                 INNER JOIN (SELECT Id,StoreName
                             FROM   Store)ST ON TM.StoreId = ST.Id
                 INNER JOIN (SELECT Id,SupplierName
                             FROM   Supplier)SU ON TM.SupplierId = SU.Id
          WHERE  TransId = @transId
          ORDER  BY TransSubId
      END

  IF(CONVERT(NVARCHAR, @type) = 'SO')
      BEGIN
          SELECT TransId,CONVERT(NVARCHAR(10), TransDate, 103) AS TransDate,TD.StoreId,ItemName,CASE
                                                                                                  WHEN ProjectId IS NULL THEN '--'
                                                                                                  ELSE ProjectId
                                                                                                END AS ProjectId,CASE
                                                                                                                   WHEN EmpId IS NULL THEN '--'
                                                                                                                   ELSE EmpId
                                                                                                                 END AS EmpId,Quantity
          FROM   TransactionMaster Tm
                 INNER JOIN (SELECT MasterTransId,EmpId,SUM(CONVERT(INT, Quantity))AS Quantity,StoreId,ItemId,ProjectId
                             FROM   StockOutDetails SD
                             WHERE  MasterTransID = @transId
                             GROUP  BY MasterTransId,EMPID,StoreId,ItemId,ProjectId,EmpId
                            --Order By TransSubId  
                            )TD ON Tm.TransId = TD.MasterTransId
                 INNER JOIN (SELECT Id,itemid + '-' + ItemName AS ItemName
                             FROM   Item)I ON TD.ItemId = I.Id
                 INNER JOIN (SELECT Id,StoreName
                             FROM   Store)ST ON TD.StoreId = ST.Id
          WHERE  TransId = @transId
          ORDER  BY MasterTransId
      END

  IF(CONVERT(NVARCHAR, @type) = 'SR')
      BEGIN
          SELECT TransId,CONVERT(NVARCHAR(10), TransDate, 103) AS TransDate,TD.StoreId,ItemName,CASE
                                                                                                  WHEN ProjectId IS NULL THEN '--'
                                                                                                  ELSE ProjectId
                                                                                                END AS ProjectId,CASE
                                                                                                                   WHEN EmpId IS NULL THEN '--'
                                                                                                                   ELSE EmpId
                                                                                                                 END AS EmpId,Quantity
          FROM   TransactionMaster Tm
                 INNER JOIN (SELECT MasterTransId,EmpId,SUM(CONVERT(INT, Quantity))AS Quantity,StoreId,ItemId,ProjectId
                             FROM   StockOutDetails SD
                             WHERE  MasterTransID = @transId
                             GROUP  BY MasterTransId,EMPID,StoreId,ItemId,ProjectId,EmpId
                            --Order By TransSubId  
                            )TD ON Tm.TransId = TD.MasterTransId
                 INNER JOIN (SELECT Id,itemid + '-' + ItemName AS ItemName
                             FROM   Item)I ON TD.ItemId = I.Id
                 INNER JOIN (SELECT Id,StoreName
                             FROM   Store)ST ON TD.StoreId = ST.Id
          WHERE  TransId = @transId
          ORDER  BY MasterTransId
      END 

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getstockdetailsorder]
AS
  SELECT IDENTITY(INT, 1, 1) AS RowId,TransId,ItemCode,StoreName,I.ItemName,COUNT(BarCOdeID)AS Quantity,(SELECT Price
                                                                                                         FROM   TransactionDetails T
                                                                                                         WHERE  T.ItemCode = b.itemCode
                                                                                                            AND t.TransSubId = B.TransId)AS Price
  INTO   #temp
  FROM   BarCodeDetails B
         INNER JOIN Item I ON B.ItemCode = I.Id
         INNER JOIN Store S ON S.Id = B.StoreId
  WHERE  (StockStatus = 'SI'
       OR StockStatus = 'ST'
       OR StockStatus = 'ESR'
       OR StockStatus = 'PSR')
  GROUP  BY B.StoreId,B.ItemCode,ItemName,TransId,StoreName
  ORDER  BY StoreName

  SELECT *
  FROM   #temp 

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getprojectlist] @compId AS NVARCHAR(10)
AS
  SELECT 0 ID,'--Select--' Sub_Project_Name
  UNION ALL
  SELECT S.ID,Sub_Project_Name
  FROM   SubProject S
         INNER JOIN Project P ON S.Parent_Project_ID = P.ID
  WHERE  Company_ID = @compId 

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_getitemissuequantity] @EmpCode INT =0
AS
  IF @EmpCode > 0
      BEGIN
          SELECT 0 AS EmpId,0 AS ItemCode,0 AS Qty,'-Select' AS ItemName
          UNION ALL
          SELECT EmpId,B.ItemCode,COUNT(B.ItemCode) AS Qty,ItemName + '-' + CONVERT(VARCHAR, COUNT(*)) + '[QTY]' AS ItemName
          FROM   BarcodeDetails B
                 INNER JOIN (SELECT DISTINCT EmpId,ProjectId,ItemId
                             FROM   StockOutDetails
                             WHERE  EmpId = @EmpCode
                                AND IssueType = 1) S ON S.ItemId = B.ItemCode
                                                        AND B.StockStatus = 'ESO'
                 INNER JOIN Item I ON i.id = S.ItemId
                 INNER JOIN ItemHistory IH ON B.BarCodeId = IH.BarCodeId
                                              AND Ih.StockStatus = 'ESO'
          WHERE  IH.EmployeeId = @EmpCode
          GROUP  BY EmpId,B.ItemCode,ItemName
      END
  ELSE
      SELECT 0 AS EmpId,0 AS ItemCode,0 AS Qty,'-Select' AS ItemName 
	
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getitemissueprojectquantity] @PrjCode INT =0
AS
  IF @PrjCode > 0
      BEGIN
          SELECT 0 AS ProjectId,0 AS ItemCode,0 AS Qty,'-Select' AS ItemName
          UNION ALL
          --select s.ProjectId,B.ItemCode,count(B.ItemCode) as Qty,    
          --ItemName +'-' + convert(varchar,count(*)) + '[QTY]' as ItemName      
          --from  BarcodeDetails B      
          --Inner join  (select distinct EmpId,ProjectId,ItemId from StockOutDetails where ProjectId=@PrjCode ) S      
          --on S.ItemId=B.ItemCode and B.StockStatus='PSO'    
          --Inner join Item I    
          --On i.id=S.ItemId    
          --inner join ItemHistory IH    
          --On B.BarCodeId=IH.BarCodeId and Ih.StockStatus='PSO'    
          -- where IH.ProjectId=@PrjCode       
          --group by s.ProjectId,B.ItemCode,ItemName     
          SELECT s.ProjectId,B.ItemCode,COUNT(B.ItemCode) AS Qty,ItemName + '-' + CONVERT(VARCHAR, COUNT(*)) + '[QTY]' AS ItemName
          FROM   BarcodeDetails B
                 INNER JOIN (SELECT DISTINCT EmpId,ProjectId,ItemId
                             FROM   StockOutDetails
                             WHERE  ProjectId = @PrjCode) S ON S.ItemId = B.ItemCode
                                                               AND B.StockStatus = 'PSO'
                 INNER JOIN Item I ON i.id = S.ItemId
          GROUP  BY s.ProjectId,B.ItemCode,ItemName
      END
  ELSE
      SELECT 0 AS ProjectId,0 AS ItemCode,0 AS Qty,'-Select' AS ItemName 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getitemdetails] @compid NVARCHAR(10)
AS
  SELECT ItemId + ' - ' + ItemName AS ItemName,Id AS ItemId
  FROM   dbo.Item
  WHERE  Company_Id = @compid 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_getallemployees] @compid AS NVARCHAR(10)
AS
  SELECT 0 Emp_Code,'--Select--' FullName
  UNION ALL
  SELECT Emp_Code,(Emp_Name + ' ' + Emp_Lname) FullName
  FROM   Employee
  WHERE  Termination_date IS NULL
     AND Company_ID = @compid 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_deletestockoutdetails] @recId AS NVARCHAR(10)
AS
    BEGIN
        UPDATE BarCodeDetails
        SET    StockStatus = NULL,
               RecentTransId = NULL
        WHERE  RecentTransId = CAST(@recId AS INT)

        DELETE FROM stockOutDetails
        WHERE  TransSubId = CAST(@recId AS INT)
    END 

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_deleteitemsfromstockreturn] @IdChildTransId AS VARCHAR(10),
                                                       @ItemCode       AS VARCHAR(10),
                                                       @empCode        AS VARCHAR(10) = NULL,
                                                       @prjCode        AS VARCHAR(10) = NULL,
                                                       @barCode        AS VARCHAR(5000) = NULL
AS
  DECLARE @mid AS VARCHAR(10)
  DECLARE @RecentTransId AS VARCHAR(10)
  DECLARE @RecentSubTransId AS VARCHAR(10)
  DECLARE @StoreId AS VARCHAR(10)

  SELECT @mid = MasterTransId
  FROM   StockOutDetails
  WHERE  TransSubId = @IdChildTransId

  DELETE FROM StockOutDetails
  WHERE  TransSubId = @IdChildTransId
     AND ItemId = @ItemCode

  IF(@prjCode = '0')
      BEGIN
          DELETE FROM ItemHistory
          WHERE  Ltrim(Rtrim(RecentTransId)) = Ltrim(Rtrim(@mid))
             AND Ltrim(Rtrim(ItemCode)) = Ltrim(Rtrim(@ItemCode))
             AND Ltrim(Rtrim(EmployeeId)) = Ltrim(Rtrim(@empCode))

          SELECT @RecentTransId = RecentTransId
          FROM   (SELECT MAX(HistoryId)HId,RecentTransId
                  FROM   ItemHistory
                  WHERE  barcodeid IN(@barCode)
                     AND StockStatus = 'ESO'
                  GROUP  BY barcodeId,RecentTransId) I

          SELECT @RecentSubTransId = I.RecentSubTransId
          FROM   (SELECT MAX(HistoryId)HId,RecentSubTransId
                  FROM   ItemHistory
                  WHERE  barcodeid IN(@barCode)
                     AND StockStatus = 'ESO'
                  GROUP  BY barcodeId,RecentSubTransId) I

          SELECT @StoreId = I.StoreId
          FROM   (SELECT MAX(HistoryId)HId,Storeid
                  FROM   ItemHistory
                  WHERE  barcodeid IN(@barCode)
                     AND StockStatus = 'ESO'
                  GROUP  BY barcodeId,Storeid) I

          UPDATE barcodedetails
          SET    StockStatus = 'ESO',
                 RecentTransId = @RecentTransId,
                 RecSubTransId = @RecentSubTransId,
                 StoreId = @StoreId
          WHERE  RecSubTransId = @IdChildTransId
      END

  IF(@empCode = '0')
      BEGIN
          DELETE FROM ItemHistory
          WHERE  Ltrim(Rtrim(RecentTransId)) = Ltrim(Rtrim(@mid))
             AND Ltrim(Rtrim(ItemCode)) = Ltrim(Rtrim(@ItemCode))
             AND Ltrim(Rtrim(ProjectId)) = Ltrim(Rtrim(@prjCode))

          SELECT @RecentTransId = RecentTransId
          FROM   (SELECT MAX(HistoryId)HId,RecentTransId
                  FROM   ItemHistory
                  WHERE  barcodeid IN(@barCode)
                     AND StockStatus = 'PSO'
                  GROUP  BY barcodeId,RecentTransId) I

          SELECT @RecentSubTransId = I.RecentSubTransId
          FROM   (SELECT MAX(HistoryId)HId,RecentSubTransId
                  FROM   ItemHistory
                  WHERE  barcodeid IN(@barCode)
                     AND StockStatus = 'PSO'
                  GROUP  BY barcodeId,RecentSubTransId) I

          SELECT @StoreId = I.StoreId
          FROM   (SELECT MAX(HistoryId)HId,Storeid
                  FROM   ItemHistory
                  WHERE  barcodeid IN(@barCode)
                     AND StockStatus = 'PSO'
                  GROUP  BY barcodeId,Storeid) I

          UPDATE barcodedetails
          SET    StockStatus = 'PSO',
                 RecentTransId = @RecentTransId,
                 RecSubTransId = @RecentSubTransId,
                 StoreId = @StoreId
          WHERE  RecSubTransId = @IdChildTransId
      END 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_deleteitemsfromstockout] @IdChildTransId AS VARCHAR(10),
                                                    @ItemCode       AS VARCHAR(10),
                                                    @empCode        AS VARCHAR(10) = NULL,
                                                    @prjCode        AS VARCHAR(10) = NULL
AS
  DECLARE @mid AS VARCHAR(10)

  SELECT @mid = MasterTransId
  FROM   StockOutDetails
  WHERE  TransSubId = @IdChildTransId

  DELETE FROM StockOutDetails
  WHERE  TransSubId = @IdChildTransId
     AND ItemId = @ItemCode

  UPDATE BarcodeDetails
  SET    RecentTransId = TransId,
         StockStatus = 'SI',
         RecSubTransId = NULL
  WHERE  RecSubTransId = @IdChildTransId
     AND ItemCode = @ItemCode

  IF(@empCode = '0')
      BEGIN
          DELETE FROM ItemHistory
          WHERE  RecentTransId = @mid
             AND ItemCode = @ItemCode
             AND ProjectId = @prjCode
      END

  IF(@prjCode = '0')
      BEGIN
          DELETE FROM ItemHistory
          WHERE  Ltrim(Rtrim(RecentTransId)) = Ltrim(Rtrim(@mid))
             AND Ltrim(Rtrim(ItemCode)) = Ltrim(Rtrim(@ItemCode))
             AND Ltrim(Rtrim(EmployeeId)) = Ltrim(Rtrim(@empCode))
      END

  DELETE FROM IssueDetails
  WHERE  TransSubId = @IdChildTransId 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_deleteitemsfromorder] @IdChildTransId AS NVARCHAR(10),
                                                 @ItemCode       AS NVARCHAR(10),
                                                 @RecId          AS NVARCHAR(10)
AS
  DELETE FROM Transactiondetails
  WHERE  TransSubId = @RecId
     AND ItemCode = @ItemCode

  DELETE FROM BarcodeDetails
  WHERE  TransId = @RecId
     AND ItemCode = @ItemCode

  DELETE FROM ItemHistory
  WHERE  RecentTransId = @RecId
     AND RecentSubTransId = @IdChildTransId
     AND ItemCode = @ItemCode 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_validatestockdetails] @mid   AS NVARCHAR(10),
                                                 @type  AS NVARCHAR(1),
                                                 @itmId AS NVARCHAR(10) =NULL,
                                                 @empId AS NVARCHAR(10) =NULL
AS
  DECLARE @n AS INT

  IF (@type = 1)
      BEGIN
          SELECT @n = COUNT(ProjectId)
          FROM   StockOutDetails
          WHERE  MasterTransId = @mid

          IF(@n > 0)
              BEGIN
                  SELECT 1
              END
          ELSE
              SELECT COUNT(*) AS Total
              FROM   StockOutDetails
              WHERE  MasterTransId = @mid
                 AND EmpId = @empId
                 AND ItemId = @itmId
      END

  IF (@type = 2)
      BEGIN
          SELECT @n = COUNT(EmpID)
          FROM   StockOutDetails
          WHERE  MasterTransId = @mid

          IF(@n > 0)
              BEGIN
                  SELECT 1
              END
          ELSE
              BEGIN
                  SELECT @n = COUNT(projectId)
                  FROM   StockOutDetails
                  WHERE  MasterTransId = @mid

                  IF(@n > 0)
                      BEGIN
                          SELECT @n = projectId
                          FROM   StockOutDetails
                          WHERE  MasterTransId = @mid

                          IF (@n = @empId)
                              BEGIN
                                  SELECT COUNT(*)AS Total
                                  FROM   StockOutDetails
                                  WHERE  MasterTransId = @mid
                                     AND ProjectId = @empId
                                     AND ItemId = @itmId
                              END
                          ELSE
                              BEGIN
                                  SELECT 1
                              END
                      END
                  ELSE
                      SELECT '0'
              END
      END

  IF (@type = 3)
      BEGIN
          SELECT @n = COUNT(ProjectId)
          FROM   StockOutDetails
          WHERE  MasterTransId = @mid

          IF(@n > 0)
              BEGIN
                  SELECT 1
              END
          ELSE
              SELECT COUNT(*) AS Total
              FROM   StockOutDetails
              WHERE  MasterTransId = @mid
                 AND EmpId = @empId
                 AND ItemId = @itmId
      END

  IF (@type = 4)
      BEGIN
          SELECT @n = COUNT(EmpID)
          FROM   StockOutDetails
          WHERE  MasterTransId = @mid

          IF(@n > 0)
              BEGIN
                  SELECT 1
              END
          ELSE
              BEGIN
                  SELECT @n = COUNT(projectId)
                  FROM   StockOutDetails
                  WHERE  MasterTransId = @mid

                  IF(@n > 0)
                      BEGIN
                          SELECT @n = projectId
                          FROM   StockOutDetails
                          WHERE  MasterTransId = @mid

                          IF (@n = @empId)
                              BEGIN
                                  SELECT COUNT(*)AS Total
                                  FROM   StockOutDetails
                                  WHERE  MasterTransId = @mid
                                     AND ProjectId = @empId
                                     AND ItemId = @itmId
                              END
                          ELSE
                              BEGIN
                                  SELECT 1
                              END
                      END
                  ELSE
                      SELECT '0'
              END
      END 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_updatenitembarcode] @qty         AS INT,
                                               @rid         AS VARCHAR(10),
                                               @itId        AS VARCHAR(10),
                                               @stId        AS VARCHAR(10),
                                               @type        AS VARCHAR(10),
                                               @newstId     AS INT=0,
                                               @UpdatedDate AS VARCHAR(15),
                                               @EmployeeID  AS VARCHAR(15)=NULL,
                                               @ProjectId   AS VARCHAR(15)=NULL,
                                               @saleType    AS VARCHAR(15)=NULL,
                                               @recSubId    AS VARCHAR(5)=NULL
AS
  DECLARE @text AS VARCHAR(5);
  DECLARE @bCodeid AS VARCHAR(4000);
  DECLARE @UpdateQuery AS VARCHAR(4000);
  DECLARE @Count INT;
  DECLARE @separator AS VARCHAR(1);
  DECLARE @StringToInsert AS VARCHAR(500);
  DECLARE @BarCode AS VARCHAR(10);

  SET @Count =0;

  SELECT @bCodeid = '0'

  DECLARE text_cursor CURSOR FORWARD_ONLY FOR
      SELECT BarCodeId
      FROM   BarcodeDetails
      WHERE  StoreId = @stId
         AND ItemCode = @itId
         AND (StockStatus = 'SI'
               OR StockStatus = 'ST'
               OR StockStatus = 'ESR'
               OR StockStatus = 'PSR')
      ORDER  BY RecentTransId,Len(StockStatus)

  OPEN text_cursor

  FETCH NEXT FROM text_cursor INTO @text

  WHILE @@FETCH_STATUS = 0
        AND @Count < @qty
      BEGIN
          SELECT @bCodeid = @bCodeid + ',' + @text;

          SELECT @Count = @Count + 1

          FETCH NEXT FROM text_cursor INTO @text
      END

  DEALLOCATE text_cursor

  IF(CAST (@type AS INT) = 1)
      BEGIN
          IF(@saleType = 'ESS')
              BEGIN
                  SELECT @UpdateQuery = N'UPDATE BARCODEDETAILS SET STOCKSTATUS=''ESS'',RecSubTransId=''' + @recSubId + ''',RecentTransId=''' + CAST(@rid AS VARCHAR) + ''' WHERE BarCodeId In (' + @bCodeid + ')'
              END
          ELSE
              BEGIN
                  SELECT @UpdateQuery = N'UPDATE BARCODEDETAILS SET STOCKSTATUS=''ESO'',RecSubTransId=''' + @recSubId + ''',RecentTransId=''' + CAST(@rid AS VARCHAR) + ''' WHERE BarCodeId In (' + @bCodeid + ')'
              END

          EXECUTE (@UpdateQuery)

          SET @separator = ',';

          WHILE Len(@bCodeid) > 0
              BEGIN
                  SET @StringToInsert = LEFT(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid) - 1, -1), Len(@bCodeid)))
                  SET @bCodeid = Substring(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid), 0), Len(@bCodeid)) + 1, Len(@bCodeid))

                  IF(CAST(@StringToInsert AS INT) > 0)
                      BEGIN
                          IF(@saleType = 'ESS')
                              BEGIN
                                  INSERT INTO ItemHistory
                                              (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,EmployeeId,ProjectId,StockStatus,StoreId,recentTransId,RecentSubTransId)
                                  VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,@EmployeeID,NULL,'ESS',@stId,@rid,@recSubId)
                              END
                          ELSE
                              BEGIN
                                  INSERT INTO ItemHistory
                                              (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,EmployeeId,ProjectId,StockStatus,StoreId,recentTransId,RecentSubTransId)
                                  VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,@EmployeeID,NULL,'ESO',@stId,@rid,@recSubId)
                              END
                      END
              END
      END

  IF(CAST (@type AS INT) = 2)
      BEGIN
          IF(@saleType = 'PSS')
              BEGIN
                  SELECT @UpdateQuery = N'UPDATE BARCODEDETAILS SET STOCKSTATUS=''PSS'',RecSubTransId=''' + @recSubId + ''',RecentTransId=''' + CAST(@rid AS VARCHAR) + ''' WHERE BarCodeId In (' + @bCodeid + ')'
              END
          ELSE
              BEGIN
                  SELECT @UpdateQuery = N'UPDATE BARCODEDETAILS SET STOCKSTATUS=''PSO'',RecSubTransId=''' + @recSubId + ''',RecentTransId=''' + CAST(@rid AS VARCHAR) + ''' WHERE BarCodeId In (' + @bCodeid + ')'
              END

          EXECUTE (@UpdateQuery)

          SET @separator = ',';

          WHILE Len(@bCodeid) > 0
              BEGIN
                  SET @StringToInsert = LEFT(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid) - 1, -1), Len(@bCodeid)))
                  SET @bCodeid = Substring(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid), 0), Len(@bCodeid)) + 1, Len(@bCodeid))

                  IF(CAST(@StringToInsert AS INT) > 0)
                      BEGIN
                          IF(@saleType = 'PSS')
                              BEGIN
                                  INSERT INTO ItemHistory
                                              (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,EmployeeId,ProjectId,StockStatus,StoreId,recentTransId,RecentSubTransId)
                                  VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,NULL,@ProjectId,'PSS',@stId,@rid,@recSubId)
                              END
                          ELSE
                              BEGIN
                                  INSERT INTO ItemHistory
                                              (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,EmployeeId,ProjectId,StockStatus,StoreId,RecentTransId,RecentSubTransId)
                                  VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,NULL,@ProjectId,'PSO',@stId,@rid,@recSubId)
                              END
                      END
              END
      END

  IF(CAST (@type AS INT) = 3)
      BEGIN
          SELECT @UpdateQuery = N'UPDATE BARCODEDETAILS SET STOCKSTATUS=''ST'',RecentTransId=''' + CAST(@rid AS VARCHAR) + ''',StoreId=''' + CAST(@newstId AS VARCHAR) + ''' WHERE BarCodeId In (' + @bCodeid + ')'

          EXECUTE (@UpdateQuery)

          SET @separator = ',';

          WHILE Len(@bCodeid) > 0
              BEGIN
                  SET @StringToInsert = LEFT(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid) - 1, -1), Len(@bCodeid)))
                  SET @bCodeid = Substring(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid), 0), Len(@bCodeid)) + 1, Len(@bCodeid))

                  IF(CAST(@StringToInsert AS INT) > 0)
                      BEGIN
                          INSERT INTO ItemHistory
                                      (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,EmployeeId,ProjectId,StockStatus,recentTransId,RecentSubTransId)
                          VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,@EmployeeID,@ProjectId,'ST',@rid,@recSubId)
                      --print @StringToInsert                                  
                      END
              END
      END

  IF(CAST (@type AS INT) = 4)
      BEGIN
          SELECT @UpdateQuery = N'UPDATE BARCODEDETAILS SET STOCKSTATUS=''SI'',RecentTransId=''' + CAST(@rid AS VARCHAR) + ''',StoreId=''' + CAST(@stId AS VARCHAR) + ''' WHERE BarCodeId In (' + @bCodeid + ')'

          EXECUTE (@UpdateQuery)

          SET @separator = ',';

          WHILE Len(@bCodeid) > 0
              BEGIN
                  SET @StringToInsert = LEFT(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid) - 1, -1), Len(@bCodeid)))
                  SET @bCodeid = Substring(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid), 0), Len(@bCodeid)) + 1, Len(@bCodeid))

                  IF(CAST(@StringToInsert AS INT) > 0)
                      BEGIN
                          INSERT INTO ItemHistory
                                      (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,StoreId,StockStatus,RecentTransId,RecentSubTransId)
                          VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,@stId,'SI',@rid,@recSubId)
                      END
              END
      END 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_unassignnitembarcodeproject] @qty         AS INT,
                                                        @rid         AS NVARCHAR(10),
                                                        @itId        AS NVARCHAR(10),
                                                        @stId        AS NVARCHAR(10),
                                                        @type        AS NVARCHAR(10),
                                                        @UpdatedDate AS NVARCHAR(15),
                                                        @EmployeeID  AS NVARCHAR(15)=NULL,
                                                        @ProjectId   AS NVARCHAR(15)=NULL,
                                                        @rChildId    AS NVARCHAR(15)=NULL
AS
  DECLARE @text AS VARCHAR(5);
  DECLARE @bCodeid AS VARCHAR(4000);
  DECLARE @UpdateQuery AS VARCHAR(4000);
  DECLARE @Count INT;
  DECLARE @separator AS VARCHAR(1);
  DECLARE @StringToInsert AS VARCHAR(500);
  DECLARE @BarCode AS NVARCHAR(10);

  SET @Count =0;

  SELECT @bCodeid = '0'

  IF (@type = 4)
      BEGIN
          DECLARE text_cursor CURSOR FORWARD_ONLY FOR
              SELECT TOP(@qty) B.BarCodeId
              FROM   (SELECT DISTINCT BarCodeId,ItemCode
                      FROM   BarcodeDetails
                      WHERE  stockstatus = 'PSO') B
                     INNER JOIN ItemHistory I ON B.BarCodeId = I.BarCodeId
              WHERE  ProjectId = @ProjectId
                 AND StockStatus = 'PSO'
                 AND B.ItemCode = @itId

          OPEN text_cursor

          FETCH NEXT FROM text_cursor INTO @text

          WHILE @@FETCH_STATUS = 0
                AND @Count < @qty
              BEGIN
                  SELECT @bCodeid = @bCodeid + ',' + @text;

                  SELECT @Count = @Count + 1

                  FETCH NEXT FROM text_cursor INTO @text
              END

          DEALLOCATE text_cursor

          SET @separator = ',';

          WHILE Len(@bCodeid) > 0
              BEGIN
                  SET @StringToInsert = LEFT(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid) - 1, -1), Len(@bCodeid)))
                  SET @bCodeid = Substring(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid), 0), Len(@bCodeid)) + 1, Len(@bCodeid))

                  IF(CAST(@StringToInsert AS INT) > 0)
                      BEGIN
                          INSERT INTO ItemHistory
                                      (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,EmployeeId,ProjectId,StockStatus,RecentTransId,RecentSubTransId)
                          VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,@EmployeeID,@ProjectId,'PSR',@rid,@rChildId)

                          UPDATE BarCodeDetails
                          SET    StockStatus = 'PSR',
                                 StoreId = @stId,
                                 RecSubTransId = @rChildId,
                                 RecentTransId = @rid
                          WHERE  BarCodeId = @StringToInsert
                      END
              END
      END 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_unassignnitembarcode] @qty         AS INT,
                                                 @rid         AS NVARCHAR(10),
                                                 @itId        AS NVARCHAR(10),
                                                 @stId        AS NVARCHAR(10),
                                                 @type        AS NVARCHAR(10),
                                                 @UpdatedDate AS NVARCHAR(15),
                                                 @EmployeeID  AS NVARCHAR(15)=NULL,
                                                 @ProjectId   AS NVARCHAR(15)=NULL,
                                                 @rChildId    AS NVARCHAR(15)=NULL
AS
  DECLARE @text AS VARCHAR(5);
  DECLARE @bCodeid AS VARCHAR(4000);
  DECLARE @UpdateQuery AS VARCHAR(4000);
  DECLARE @Count INT;
  DECLARE @separator AS VARCHAR(1);
  DECLARE @StringToInsert AS VARCHAR(500);
  DECLARE @BarCode AS NVARCHAR(10);

  SET @Count =0;

  SELECT @bCodeid = '0'

  IF (@type = 3)
      BEGIN
          DECLARE text_cursor CURSOR FORWARD_ONLY FOR
              SELECT TOP(@qty) B.BarCodeId
              FROM   (SELECT DISTINCT BarCodeId,ItemCode
                      FROM   BarcodeDetails
                      WHERE  stockstatus = 'eso') B
                     INNER JOIN ItemHistory I ON B.BarCodeId = I.BarCodeId
              WHERE  EmployeeId = @EmployeeID
                 AND StockStatus = 'ESO'
                 AND B.ItemCode = @itId

          OPEN text_cursor

          FETCH NEXT FROM text_cursor INTO @text

          WHILE @@FETCH_STATUS = 0
                AND @Count < @qty
              BEGIN
                  SELECT @bCodeid = @bCodeid + ',' + @text;

                  SELECT @Count = @Count + 1

                  FETCH NEXT FROM text_cursor INTO @text
              END

          DEALLOCATE text_cursor

          SET @separator = ',';

          WHILE Len(@bCodeid) > 0
              BEGIN
                  SET @StringToInsert = LEFT(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid) - 1, -1), Len(@bCodeid)))
                  SET @bCodeid = Substring(@bCodeid, Isnull(Nullif(Charindex(@separator, @bCodeid), 0), Len(@bCodeid)) + 1, Len(@bCodeid))

                  IF(CAST(@StringToInsert AS INT) > 0)
                      BEGIN
                          INSERT INTO ItemHistory
                                      (MasterTransactionId,ItemCode,BarCodeId,UpdatedDate,EmployeeId,ProjectId,StockStatus,RecentTransId,RecentSubTransId)
                          VALUES      (@rid,@itId,@StringToInsert,@UpdatedDate,@EmployeeID,@ProjectId,'ESR',@rid,@rChildId)

                          UPDATE BarCodeDetails
                          SET    StockStatus = 'ESR',
                                 StoreId = @stId,
                                 RecSubTransId = @rChildId,
                                 RecentTransId = @rid
                          WHERE  BarCodeId = @StringToInsert
                      END
              END
      END 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_itemhistory]
AS
  SELECT SD.BarcodeId,CASE
                        WHEN SD.StockIn IS NULL THEN 'N'
                        ELSE 'Y'
                      END AS StockIn,CASE
                                       WHEN SD.StockOut IS NULL THEN 'N'
                                       ELSE 'Y'
                                     END AS StockOut,CASE
                                                       WHEN SD.StockReturn IS NULL THEN 'N'
                                                       ELSE 'Y'
                                                     END AS StockReturn,CASE
                                                                          WHEN SD.StockTransfer IS NULL THEN 'N'
                                                                          ELSE 'Y'
                                                                        END AS StockTransfer,(SELECT IH.StockStatus
                                                                                              FROM   (SELECT BarcodeiD,MAX(HistoryId) AS HistoryId
                                                                                                      FROM   ItemHistory
                                                                                                      WHERE  BarcodeId = SD.BarcodeId
                                                                                                      GROUP  BY BarcodeiD) AS H
                                                                                                     INNER JOIN ItemHistory IH ON H.BarcodeId = IH.BarcodeId
                                                                                                                                  AND IH.HistoryId = H.HistoryId)AS RecentTrans
  FROM   (SELECT SI.BarcodeId AS BarcodeId,SI.StockIn AS StockIn,SO.StockOut,ST.StockTransfer AS StockTransfer,Sr.StockReturn AS StockReturn
          FROM   (SELECT BarcodeId,CASE StockStatus
                                     WHEN Rtrim(Ltrim('SI')) THEN 'Y'
                                   END AS StockIN
                  FROM   ItemHistory
                  WHERE  StockStatus NOT IN('ESO', 'PSO', 'ST', 'ESR', 'PSR'))SI
                 LEFT OUTER JOIN (SELECT BarcodeId,CASE StockStatus
                                                     WHEN Rtrim(Ltrim('ESO')) THEN 'Y'
                                                     WHEN Rtrim(Ltrim('PSO'))THEN 'Y'
                                                   END AS StockOut
                                  FROM   ItemHistory
                                  WHERE  StockStatus NOT IN('SI', 'ST', 'ESR', 'PSR'))SO ON si.BarcodeId = So.BarcodeId
                 LEFT OUTER JOIN (SELECT BarcodeId,CASE StockStatus
                                                     WHEN Rtrim(Ltrim('ESR')) THEN 'Y'
                                                     WHEN Rtrim(Ltrim('PSR'))THEN 'Y'
                                                   END AS StockReturn
                                  FROM   ItemHistory
                                  WHERE  StockStatus NOT IN('SI', 'ESO', 'PSO', 'ST'))SR ON si.BarcodeId = Sr.BarcodeId
                 LEFT OUTER JOIN (SELECT BarcodeId,CASE StockStatus
                                                     WHEN Rtrim(Ltrim('ST')) THEN 'Y'
                                                     WHEN Rtrim(Ltrim('PSR'))THEN 'Y'
                                                   END AS StockTransfer
                                  FROM   ItemHistory
                                  WHERE  StockStatus NOT IN('SI', 'ESO', 'PSO', 'ESR', 'PSR'))ST ON si.BarcodeId = ST.BarcodeId) SD 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[Sp_inserttransactionmaster] @transdate AS NVARCHAR(50),
                                                    @ordNo     AS NVARCHAR(50),
                                                    @remarks   AS NVARCHAR(500),
                                                    @storeId   AS NVARCHAR(10),
                                                    @supId     AS NVARCHAR(10)
AS
  INSERT INTO TransactionMaster
              (TransDate,OrderNumber,TransactionRemarks,StoreId,SupplierId)
  VALUES     (@transdate,@ordNo,@remarks,@storeId,@supId) 

GO

--------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Exec [Sp_getpivotclaimsadditions] '0,27', '0,127,125','30/08/2010', '30/09/2010' , 1, 'DED'
--Exec [Sp_getpivotclaimsadditions] '0,27', '0,127,125','30/08/2010', '30/09/2010' , 1, 'DED'  
--Exec [Sp_getpivotclaimsadditions] '0,237', '0,67','01/10/2010', '31/10/2010' , , 'DED'  
--exec Sp_getpivotclaimsadditions @empcode=N'0,11,3,36,33,4,13,6,12,9,5,23,34,25,16,22,32,17,19,7,8,20,18,31,15,26,14,24,35,10',@trxtype=N'0,124,120,121',@startdate=N'01/01/2010',@enddate=N'01/10/2011',@claimtype=1,@addtype=N'ADD',@stattype=N'L'
CREATE PROCEDURE [dbo].[Sp_getpivotclaimsadditions] @empcode   VARCHAR(8000),    
                                                   @trxtype   VARCHAR(8000),    
                                                   @startdate VARCHAR(10),    
                                                   @enddate   VARCHAR(10),    
                                                   @claimtype INT,    
                                                   @addtype   VARCHAR(100),  
               @stattype   VARCHAR(1)='L'  
AS    
 DECLARE @select VARCHAR(8000)    
 DECLARE @addid AS varchar(100)
 DECLARE @addtext AS VARCHAR(1000)          
    DECLARE @where VARCHAR(8000)    
          
 SET @addtext=''          
    
 SELECT ID, [Desc] Descript Into #TempAdd From Additions_Types      
 SELECT ID, Replace([Desc],' ','') Descript Into #TempDed From Deductions_Types    

 SELECT @where = 'Where ID Not In (' + @trxtype + ')'    
 SELECT @select = 'Delete From #TempAdd ' + @where    
 EXEC (@select)    
    
 SELECT @where = 'Where ID Not In (' + @trxtype + ')'    
 SELECT @select = 'Delete From #TempDed ' + @where    
 EXEC (@select)    
    
    
 DECLARE cur CURSOR FOR SELECT Descript From #TempAdd          
    
 OPEN cur          
            
 FETCH NEXT FROM cur INTO @addid          
           
 WHILE @@FETCH_STATUS <> -1          
  BEGIN          
   SET @addtext = @addtext + '[' + CAST(@addid AS VARCHAR) + '],'          
   FETCH NEXT FROM cur INTO @addid          
  END          
           
 CLOSE cur          
 DEALLOCATE cur          
    
 IF (@addtype = 'DED')    
 BEGIn    
  DECLARE cur CURSOR FOR SELECT Descript From #TempDed          
    
  OPEN cur          
         
  SEt @addtext=''        
  FETCH NEXT FROM cur INTO @addid          
            
  WHILE @@FETCH_STATUS <> -1          
   BEGIN          
    SET @addtext = @addtext + '[' + Replace(CAST(@addid AS VARCHAR(100)),' ','') + '],'          
    FETCH NEXT FROM cur INTO @addid          
   END          
        
  CLOSE cur          
  DEALLOCATE cur        
 END    
    --PRINT @addtype
    BEGIN    
        IF (@addtype = 'Claim')    
            BEGIN    
                IF (@claimtype = 1 Or @claimtype = 3)    
                    BEGIN    
                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name First_Name,emp_lname Emp_Lastname,datename(month,trx_period)AS Month,DESCRIPTION,SUM(TRX_AMOUNT)AS Amount INTO   TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection = (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' GROUP BY id, description,emp_name,datename(month,trx_period),emp_lname   ORDER BY EMP_NAME; Select * From(Select (First_Name) First_Name,(Emp_Lastname) Emp_Lastname,[Month],[DESCRIPTION],Amount From TempTable) PivotTB PIVOT(Sum(Amount) For [DESCRIPTION] In ('+ Substring(@addtext,0,len(@addtext)) +')) As PivotTable'    
                    END    
                ELSE    
                    BEGIN    
                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name First_Name,emp_lname Emp_Lastname,datename(month,trx_period)AS Month,DESCRIPTION,TRX_AMOUNT AS Amount INTO  TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection =  (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' ORDER BY EMP_NAME;Select (First_Name) First_Name,(Emp_Lastname) Emp_Lastname,[Month],[DESCRIPTION],Amount From TempTable'    
                    END    
            END    
    
        IF (@addtype = 'ADD')    
            BEGIN   
                IF (@claimtype = 1 Or @claimtype = 3)    
                    BEGIN    
                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name First_Name,emp_lname Emp_Lastname,datename(month,trx_period)AS Month,DESCRIPTION,SUM(TRX_AMOUNT)AS Amount INTO   TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection != (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' GROUP BY id, description,emp_name,datename(month,trx_period),emp_lname   ORDER BY EMP_NAME; Select * From(Select (First_Name) First_Name,(Emp_Lastname) Emp_Lastname,[Month],[DESCRIPTION],Amount From TempTable) PivotTB PIVOT(Sum(Amount) For [DESCRIPTION] In ('+ Substring(@addtext,0,len(@addtext)) +')) As PivotTable'    
                    END    
                ELSE    
                    BEGIN    
                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name First_Name,emp_lname Emp_Lastname,datename(month,trx_period)AS Month,DESCRIPTION,TRX_AMOUNT AS Amount INTO  TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection != (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' ORDER BY EMP_NAME;Select (First_Name) First_Name,(Emp_Lastname) Emp_Lastname,[Month],[DESCRIPTION],Amount From TempTable'    
                    END    
            END    
        IF (@addtype = 'DED')    
            BEGIN    
                IF (@claimtype = 1 Or @claimtype = 3)    
                    BEGIN   
                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name First_Name,emp_lname Emp_Lastname,datename(month,trx_period)AS Month,DESCRIPTION,SUM(TRX_AMOUNT)AS Amount INTO   TempTable from Emp_Deductions  E INNER JOIN ViewDeductions V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' GROUP BY id, description,emp_name,emp_lname,datename(month,trx_period)   ORDER BY EMP_NAME; Select * From(Select (First_Name) First_Name,(Emp_Lastname) Emp_Lastname,[Month],[DESCRIPTION],Amount From TempTable) PivotTB PIVOT(Sum(Amount) For [DESCRIPTION] In ('+ Substring(@addtext,0,len(@addtext)) +')) As PivotTable'    
                    END    
                ELSE    
                    BEGIN    
						SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name First_Name,emp_lname Emp_Lastname,datename(month,trx_period)AS Month,DESCRIPTION,TRX_AMOUNT AS Amount INTO  TempTable from Emp_Deductions  E INNER JOIN ViewDeductions V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' ORDER BY EMP_NAME;Select (First_Name) First_Name,(Emp_Lastname) Emp_Lastname,[Month],[DESCRIPTION],Amount From TempTable'    
                    END    
            END    
        EXEC (@select)    
    
	  Drop Table #TempAdd    
	  Drop Table #TempDed    
	  DROP TABLE TempTable    
    END              
GO


--[sp_emp_yearearn] 2, 2010
CREATE PROCEDURE [dbo].[sp_emp_yearearn] --3,8,2010      
       @company_id INT ,  
       @year INT        
AS         
       BEGIN                                     
			Select EE.ID,EE.IRYear,E.Emp_Code Emp_ID,E.Emp_name + ' ' + E.emp_lname  As Emp_name,E.Time_Card_No,    
			GrossPay,Bonus,DirectorFee,Commission,Pension,TransAllow,EntAllow,OtherAllow,EmployeeCPF,Funds,MBMF From EmployeeEarning EE Right Outer Join Employee E   
			On EE.Emp_ID = E.Emp_Code Where E.Company_ID=@company_id   
			And EE.IRYear is null or EE.IRYear=@year ORDER BY emp_name   
       END        
GO
  
Create PROCEDURE [dbo].[sp_emppay_addAll]              
       (              
        @empcode INT ,              
        @empmonth INT ,              
        @empyear VARCHAR(50)              
       )              
AS               
       BEGIN                                  
             IF (@empmonth <> 13)               
                BEGIN                                  
                      SELECT    e.[trx_id], a.[id], a.[desc], a.[cpf], e.[trx_amount],              
                                convert(varchar(10),trx_period,103) trx_period,              
                                e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name', ISNULL(e.recpath, '') recpath,              
                                e.basis_arriving_payment, e.service_length, e.iras_approval,              
                                CONVERT(VARCHAR(10), CONVERT(DATETIME, e.iras_approval_date, 105), 103) [iras_approval_date],              
                                additionsforyear, a.optionselection , RecStatus = CASE WHEN e.status = 'L' THEN 'Locked'              
                                                                                      ELSE ''              
                                                                                 END,      
        convert(varchar(10),trx_period,101) trx_period_copy      
                      FROM      [emp_additions] e ,              
                                additions_types a ,              
                                employee b              
                      WHERE     e.[emp_code] = @empcode AND              
                                e.trx_type = a.id AND              
                                e.emp_code = b.emp_code AND              
                                DATEPART(mm, trx_period) = @empmonth AND              
                                (e.claimstatus = 'Approved' OR e.claimstatus = 'Open' OR e.claimstatus IS NULL
                                ) AND              
                                CONVERT(CHAR(4), DATEPART(yyyy, trx_period)) = @empyear              
                      ORDER BY  b.emp_name                                 
                END                                  
             ELSE               
                BEGIN                                  
                      SELECT    e.[trx_id], a.[id], a.[desc], a.[cpf], e.[trx_amount],              
                                convert(varchar(10),trx_period,103) trx_period,              
                                e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name', e.basis_arriving_payment,              
                                e.service_length, e.iras_approval,              
                                CONVERT(VARCHAR(10), CONVERT(DATETIME, e.iras_approval_date, 105), 103) [iras_approval_date],              
                                additionsforyear, a.optionselection, RecStatus = CASE WHEN e.status = 'L' THEN 'Locked'              
                                                                                      ELSE ''              
                                                                                 END,      
        convert(varchar(10),trx_period,101) trx_period_copy              
                      FROM      [emp_additions] e ,              
                                additions_types a ,              
                                employee b              
                      WHERE     e.[emp_code] = @empcode AND              
                                e.trx_type = a.id AND              
                                e.emp_code = b.emp_code AND              
                                (e.claimstatus = 'Approved' OR     
         e.claimstatus = 'Open' OR           
                                 e.claimstatus IS NULL              
                                ) AND              
                                CONVERT(CHAR(4), DATEPART(yyyy, trx_period)) = @empyear              
                      ORDER BY  b.emp_name, CONVERT(DATETIME, e.trx_period, 103), a.optionselection, a.[desc]                
                END                                  
                                  
       END 
GO

CREATE PROC [dbo].[sp_Workers_Assigned]  
       (  
        @Company_ID INT ,  
        @TypeID INT ,  
        @Remarks VARCHAR(50) ,  
        @EmpID VARCHAR(8000) ,  
        @Action INT ,  
        @retval INT OUTPUT          
       )  
AS   
       DECLARE @select VARCHAR(8000)          
       DECLARE @where VARCHAR(8000)           
        
       SET @where = ''  
       SET @select = ''  
    
       BEGIN      
          
             IF LEN(@EmpID) > 0   
                BEGIN                                                                                        
                      IF (@Action = 0)   
                         BEGIN    
                               SELECT   @where = 'Where Emp_Code In (' + @EmpID + ')'                                                                                  
                         END    
                      IF (@Action = 1)   
                         BEGIN    
                               SELECT   @where = 'Where ID In (' + @EmpID + ')'    
                         END    
                END          
    
             IF (@Action = 0)   
                BEGIN    
                      SELECT    @select = 'Insert Into EmployeeAssignedToWorkersList (RefID, Emp_ID) Select ' +  
                                CAST(@TypeID AS VARCHAR(5)) + ',Emp_Code Emp_ID From Employee ' + @where     
                END    
    
             IF (@Action = 1 AND  
                 LEN(@EmpID) > 0  
                )   
                BEGIN    
                      SELECT    @select = 'Delete From EmployeeAssignedToWorkersList ' + @where   
                END    
    
             EXEC (@select)               
          
             RETURN          
       END   
GO

CREATE PROCEDURE sp_GetLastDatbaseLogDay
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 DECLARE @Last_Log_Date As DateTime  
 SET @Last_Log_Date = (SELECT TOP 1 LogTime FROM VIEW_GET_DATABASE_LOG_DETAILS)  
 SELECT DATEDIFF(day,@Last_Log_Date, getdate()) AS no_of_days
END  
GO

CREATE PROCEDURE [dbo].[sp_BulkInsert_Holidays]
(
	@filePath VARCHAR(1000),  		
	@compid   INT	
)
	AS  
	BEGIN 
		--Create Temporary Table AND Insert data 

		CREATE TABLE #public_holidays_temp
		(
			[holiday_date] [datetime] NOT NULL,
			[holiday_name] [varchar](50)NULL	
		)		
		DECLARE @sqlStatement  varchar(1000)
		--SET @filePath ='C:\NATIONAL_HOLIDAYS.csv'
		SET @sqlStatement ='BULK INSERT #public_holidays_temp FROM ' 
		+ '''' + @filePath + '''' + ' WITH ( FIRSTROW = 2, FIELDTERMINATOR =''' + ',' + '''' +  ',ROWTERMINATOR= ''' + '\n'  + '''' + ')'
		EXEC (@sqlStatement)

		CREATE TABLE #TempCourse
		(
			[holiday_date] [datetime] NOT NULL,
			[holiday_name] [varchar](50)NULL,
			[companyid]	int NULL
		)

		Insert into #TempCourse (holiday_date,holiday_name)
		SELECT Temp.holiday_date,Temp.holiday_name FROM
		(SELECT * FROM #public_holidays_temp WHERE #public_holidays_temp.holiday_date 
		NOT IN (SELECT public_holidays.holiday_date FROM  public_holidays))As Temp

		UPDATE #TempCourse SET companyid=-1
		--- INSERT VALUES in public_holiday final database table
		INSERT INTO public_holidays
		SELECT * FROM  #TempCourse

		DROP TABLE #public_holidays_temp
		DROP TABLE #TempCourse
	END
GO

CREATE PROC [dbo].[Sp_genledger]  @company_id INT,      
          @month  INT,      
          @year  INT,      
          @UserID  INT      
 AS        
  DECLARE @DRTOTAL AS FLOAT      
  DECLARE @CRTOTAL AS FLOAT      
  DECLARE @Salary  AS FLOAT      
  DECLARE @EmpCPF  AS FLOAT      
  DECLARE @EmployerCPF AS FLOAT      
  DECLARE @UnpaidAmount AS FLOAT      
  DECLARE @FundAmount AS FLOAT      
  DECLARE @SDL   AS FLOAT      
  DECLARE @CoCode  AS Varchar(10)      
  DECLARE @LastDayMonth AS int    
  DECLARE @LastDateMonth AS varchar(10)    
  Declare @SalaryGLCode  AS Varchar(20)      
  Declare @EmployeeCPFGLCode  AS Varchar(20)      
  Declare @UnpaidGLCode  AS Varchar(20)      
  Declare @EmployerCPFGLCode  AS Varchar(20)      
  Declare @FundAmtGLCode  AS Varchar(20)      
  Declare @SDLAmtGLCode  AS Varchar(20)      
  Declare @AccountGLCode  AS Varchar(20)      
  Declare @PaySubStartDate AS Datetime      
      
   DECLARE @ID AS INT        
   DECLARE @WorkFlowID AS INT        
   DECLARE @RowID AS INT        
   DECLARE @DATEINYEAR TABLE (        
    ROWID           INT,        
    Emp_Code        INT,        
    [Year]          INT,        
    [Month]         INT,        
    [MonthName]     VARCHAR(100),        
    PayStartDate    DATETIME,        
    PayEndDate      DATETIME,        
    PaySubStartDate DATETIME,        
    PaySubEndDate   DATETIME,        
    PayStartDay     INT,        
    PayEndDay       INT,        
    PaySubStartDay  INT,        
    PaySubEndDay    INT,        
    ISEOM           VARCHAR(3))        
           
           
   INSERT @DATEINYEAR        
    (ROWID,Emp_Code,[Year],[Month],[MonthName],PayStartDate,PayEndDate,PaySubStartDate,PaySubEndDate,PayStartDay,PayEndDay,PaySubStartDay,PaySubEndDay,ISEOM)        
   EXEC Sp_getpayrollmonth @month,0,0        
      
 Select @LastDayMonth = PayEndDay, @LastDateMonth = Convert(varchar(10),PayEndDate,103) From @DATEINYEAR    
      
      ---Select @LastDateMonth
      ---select CONVERT(VARCHAR(8), @LastDateMonth, 112)
      
 SELECT --pd.trx_id,pd.emp_id,REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '') emp_name,      
   em.Pay_supervisor,      
 CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,      
 CONVERT(NUMERIC(18, 2), NH_e) NH_e,      
 CONVERT(NUMERIC(18, 2), pd.Ot1_e) Ot1_e,      
 CONVERT(NUMERIC(18, 2), pd.OT2_e) OT2_e,      
 EmpCPF, EmployerCPF, Fund_Amount,SDL, unpaid_leaves_amount      
   INTO   #EmployeeTemp      
   FROM   prepare_payroll_hdr ph      
    INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id        
    INNER JOIN Employee em ON pd.emp_id = em.emp_code        
    LEFT OUTER JOIN Department de ON em.dept_id = de.id        
   WHERE  pd.status = 'G'       
   AND (CONVERT(DATETIME, ph.start_period, 103) >= (SELECT PaySubStartDate        
                FROM   @DATEINYEAR)        
     AND CONVERT(DATETIME, ph.end_period, 103) <= (SELECT PaySubEndDate        
               FROM   @DATEINYEAR))        
   AND em.company_id = @company_id        
   ORDER  BY REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '')        
           
   Select       
  @CoCode = Company_Code,       
  @SalaryGLCode=SalaryGLCode,      
  @EmployeeCPFGLCode=EmployeeCPFGLCode,      
  @EmployerCPFGLCode=EmployerCPFGLCode,      
  @FundAmtGLCode=FundAmtGLCode,      
  @SDLAmtGLCode=SDLAmtGLCode,      
  @AccountGLCode=AccountGLCode,    
  @UnpaidGLCode= UnpaidLeaGLCode     
  From Company Where Company_ID = @company_id      
      
  SELECT @PaySubStartDate=PaySubStartDate  FROM   @DATEINYEAR      
      
   SELECT @Salary=(Sum(Basic_Pay) + Sum(NH_E) + Sum(OT1_E) + Sum(OT2_E)), @EmpCPF=Sum(EmpCPF) , @EmployerCPF=Sum(EmployerCPF), @FundAmount=Sum(Fund_Amount), @SDL=Sum(SDL), @UnpaidAmount = Sum(Unpaid_Leaves_Amount)    
   FROM   #EmployeeTemp        
      
      
   Select * Into #DRTable From       
  (      
    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate, 
      @LastDateMonth DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'DR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @SalaryGLCode Acctnum, round(@Salary,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@Salary,2) AmtLocal, 'Salary' [Description], '' PrjCode      
   UNION ALL      
     Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate, @LastDateMonth  DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'DR' DrCr, 'n' Offsetyn, '' OffsetInvNum, AT.AccountCode Acctnum, SUM(round(isnull(trx_amount,0),2)) AmtForex, 'SGD' CCY, 1 CCYRT, SUM(round(isnull(trx_amount,0),2)) AmtLocal, AT.[Desc] [Description], '' PrjCode      
     FROM   emp_additions EA        
      INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID        
     WHERE        
     (year(trx_period) = year(@PaySubStartDate) And month(trx_period) = month(@PaySubStartDate))      
     AND (EA.ClaimStatus = 'Approved'    
     OR EA.ClaimStatus IS NULL) AND  AT.company_id = @company_id  
     Group By EA.Trx_Type, AT.AccountCode,AT.[Desc]    
   UNION ALL    
    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate,  @LastDateMonth DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @EmployeeCPFGLCode Acctnum, round(@EmpCPF,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@EmpCPF,2)  AmtLocal, 'Employee CPF' [Description], '' PrjCode      
  )  E      
      
   Select * Into #CRTable From       
  (      
    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate, @LastDateMonth DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @UnpaidGLCode Acctnum, round(@UnpaidAmount,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@UnpaidAmount,2) AmtLocal, 'U
npaid Leaves' [Description], '' PrjCode      
   UNION ALL      
    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate, @LastDateMonth DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'DR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @EmployerCPFGLCode Acctnum, round(@EmployerCPF,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@EmployerCPF,2) AmtLocal,
'Employer CPF' [Description], '' PrjCode      
   UNION ALL      
    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate,  @LastDateMonth DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @FundAmtGLCode Acctnum, round(@FundAmount,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@FundAmount,2) AmtLocal, 'Fund
Amount' [Description], '' PrjCode      
   UNION ALL      
    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate, @LastDateMonth DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'DR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @SDLAmtGLCode Acctnum, round(@SDL,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@SDL,2) AmtLocal, 'SDL Amount' [Descri
ption], '' PrjCode      
   UNION ALL      
     Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, @LastDateMonth TradeDate, @LastDateMonth  DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, DT.AccountCode Acctnum, SUM(round(isnull(trx_amount,0),2)) AmtForex, 'SGD' CCY, 1 CCYRT, SUM(round(isnull(trx_amount,0),2)) AmtLocal, DT.[Desc] [Description], '' PrjCode
     FROM   Emp_Deductions ED        
      INNER JOIN Deductions_Types DT ON ED.Trx_Type = DT.ID        
     WHERE      
     (year(trx_period) = year(@PaySubStartDate) And month(trx_period)=month(@PaySubStartDate)) AND  DT.company_id = @company_id 
     Group By ED.Trx_Type,DT.AccountCode,DT.[Desc]    
  )  D      
      
  Select @DRTOTAL=isnull(Sum(AmtForex),0) From #DRTable      
  Select @CRTOTAL=isnull(Sum(AmtForex),0) From #CRTable      
        
      
  Select * From #DRTable      
  Union All      
  Select * From #CRTable      
  Union All      
    Select '' SetNum, '' CoCode, '' TransType, '' BUCode, '' StaffCode, '' Docnum, '' ChqNum, '' MasNum, '' TradeDate, '' DueDate, '' DocmDate,'' PartyCode, '' PartyName, '' Taxableynx, '' VATCode, '' DrCr, '' Offsetyn, '' OffsetInvNum, @AccountGLCode Acctnum, (@DRTOTAL-@CRTOTAL) AmtForex, '' CCY, '' CCYRT, 0 AmtLocal, @AccountGLCode  [Description], '' PrjCode      
      
   DROP TABLE #EmployeeTemp        
      
   DROP TABLE #DRTable      
      
   DROP TABLE #CRTable      
    


    

  
GO

CREATE PROCEDURE [dbo].[Sp_processtimesheetflexadv] (@start_date VARCHAR(10),  
                                                    @end_date   VARCHAR(10),  
                                                    @compid     VARCHAR(10),  
                                                    @empid      VARCHAR(8000),  
                                                    @subprojid  VARCHAR(8000),  
                                                    @isEmpty    VARCHAR(3),  
                                                    @sessid     FLOAT,  
                                                    @REPID      INT=0)  
AS  
    BEGIN  
        DECLARE @select  VARCHAR(8000)  
        DECLARE @whereproj VARCHAR(8000)  
        DECLARE @whereemp VARCHAR(8000)  
        DECLARE @startdate AS DATETIME  
        DECLARE @enddate AS DATETIME  
        DECLARE @softdelete AS INT  
  
        --  FirstIn        
        --  ,RosterType        
        --  ,FlexibleWorkinghr        
        --  ,RES.Time_Card_No        
        --  ,Roster_ID        
        --  ,Roster_Name        
        --  ,RES.Emp_Name    
        --  ,Sub_Project_ID        
        --  ,Sub_Project_Name        
        --  ,TSDate    
        --  ,TimeStart    
        --  ,LastOut    
        --  ,Roster_Day    
        --  ,InShortTime    
        --  ,OutShortTime    
        --  ,NH    
        --  ,OT1    
        --  ,OT2    
        --  ,HoursWorked    
        --  ,RecordLock    
        --  ,RES.Remarks    
        --  ,E.Email EmailSuper        
        --  ,MyEmail    
        SET @startdate = CONVERT(DATETIME, @start_date, 103)  
        SET @enddate = CONVERT(DATETIME, @end_date, 103)  
  
        SELECT A.ID,E.Emp_Code Emp_ID,A.UserID,A.TimeEntry,A.EventID,A.TerminalSN,  
  CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) DATE, A.Remarks, S.ID SubProjID  
        INTO   #ActLogsTemp  
        FROM   Actatek_Logs A  
               INNER JOIN Employee E ON A.UserID = E.Time_Card_No  
    LEFT OUTER JOIN SubPRoject S On A.TerminalSN = S.Sub_Project_ID   
        WHERE  CONVERT(DATETIME, CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103), 103) BETWEEN @startdate AND @enddate  
        ORDER  BY UserID,TerminalSN,CONVERT(DATETIME, A.TimeEntry, 103)  
  
        IF Rtrim(@empid) != '-1'  
            BEGIN  
                SELECT @whereemp = 'Where Emp_ID Not In (' + @empid + ')'  
  
                SELECT @select = 'Delete From #ActLogsTemp ' + @whereemp  
  
                EXEC (@select)  
            END  
  
        IF Rtrim(@subprojid) != '-1'  
            BEGIN  
                SELECT @whereproj = 'Where SubProjID Not In (''' + @subprojid + ''')'  
  
                SELECT @select = 'Delete From #ActLogsTemp ' + @whereproj  
  
                EXEC (@select)  
            END  
  
        SELECT *  
        INTO   #ActLogsTempDisInProj  
        FROM   (SELECT DISTINCT E.Emp_Code,A.UserID Time_Card_No,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,S.Sub_Project_ID,EA.Roster_ID,RD.FlexibleWorkinghr,RD.BreakTimeNH,RD.BreakTimeOT,A.TerminalSN Terminal,A.UserID [User_ID],RD.ID RostID  
                FROM   #ActLogsTemp A  
                       INNER JOIN Employee E ON A.UserID = E.Time_Card_No  
                       INNER JOIN EmployeeAssignedToRoster EA ON E.Emp_Code = EA.Emp_ID  
                       INNER JOIN Roster R ON EA.Roster_ID = R.ID  
                       INNER JOIN SubProject S ON A.TerminalSN = S.Sub_Project_ID  
                       INNER JOIN RosterDetail RD ON EA.Roster_ID = RD.Roster_ID  
        AND CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)) D  
        ORDER  BY D.Emp_Code,D.Terminal,D.TSDate  
  
        SELECT DISTINCT TOP 0 E.Emp_Code,A.UserID Time_Card_No,S.Sub_Project_ID,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,EA.Roster_ID  
        INTO   #ActLogsPreFinal  
        FROM   #ActLogsTemp A  
               INNER JOIN Employee E ON A.UserID = E.Time_Card_No  
               INNER JOIN EmployeeAssignedToRoster EA ON E.Emp_Code = EA.Emp_ID  
               INNER JOIN Roster R ON EA.Roster_ID = R.ID  
               INNER JOIN SubProject S ON A.TerminalSN = S.Sub_Project_ID  
               INNER JOIN RosterDetail RD ON EA.Roster_ID = RD.Roster_ID  
                                             AND CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)  
  
        --        SELECT A.ID,E.Emp_Code,A.UserID,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,A.TimeEntry,A.EventID,A.TerminalSN    
        --        INTO   #ActLogsTempIn    
        --        FROM   #ActLogsTemp A    
        --               INNER JOIN Employee E ON A.UserID = E.Time_Card_No    
        --        WHERE  CONVERT(DATETIME, TimeEntry, 103) BETWEEN @startdate AND @enddate    
        --           AND EventID LIKE '%IN%'    
        --    
        --        SELECT A.ID,E.Emp_Code,A.UserID,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,A.TimeEntry,A.EventID,A.TerminalSN    
        --        INTO   #ActLogsTempOut    
        --        FROM   #ActLogsTemp A    
        --               INNER JOIN Employee E ON A.UserID = E.Time_Card_No    
        --        WHERE  CONVERT(DATETIME, TimeEntry, 103) BETWEEN @startdate AND @enddate    
        --           AND EventID LIKE '%OUT%'    
        SELECT *  
        INTO   #LoopActatek  
        FROM   #ActLogsTemp AT  
               LEFT OUTER JOIN #ActLogsTempDisInProj ATP ON AT.UserID = ATP.Time_Card_No  
                                                            AND AT.DATE = ATP.TSDate  
                                                            AND AT.TerminalSN = ATP.Sub_Project_ID  
  
        ALTER TABLE #ActLogsPreFinal ADD [In] DATETIME  
  
        ALTER TABLE #ActLogsPreFinal ADD [Out] DATETIME  
  
        IF (@sessid > 0)  
            BEGIN  
                SET @softdelete=2  
            END  
        ELSE  
            BEGIN  
                SET @softdelete=0  
            END  
  
        IF Rtrim(@isEmpty) = 'Yes'  
            BEGIN  
                SELECT @select = 'Delete From #RD Where InShortTime is not null Or OutShortTime is not null'  
  
                EXEC (@select)  
            END  
  
        --Select * From #ActLogsPreFinal    
        --Select * From #LoopActatek    
        DECLARE @Emp_ID AS VARCHAR(10)  
        DECLARE @User_ID AS VARCHAR(10)  
        DECLARE @EventID AS VARCHAR(20)  
        DECLARE @Terminal AS VARCHAR(20)  
        DECLARE @Date AS VARCHAR(10)  
        DECLARE @Emp_ID_Old AS VARCHAR(10)  
        DECLARE @User_ID_Old AS VARCHAR(10)  
        DECLARE @TimeEntry AS DATETIME  
        DECLARE @TimeEntry_Old AS DATETIME  
        DECLARE @EventID_Old AS VARCHAR(20)  
        DECLARE @Terminal_Old AS VARCHAR(20)  
        DECLARE @Date_Old AS VARCHAR(10)  
        DECLARE @Roster_ID AS INT  
        DECLARE @RostID AS INT  
        DECLARE @time AS VARCHAR(20)  
        DECLARE @TSDate AS VARCHAR(10)  
        DECLARE db_cursor CURSOR FOR  
            SELECT Emp_ID,UserID,TerminalSN,TSDate,EventID,CONVERT(DATETIME, TimeEntry, 103) TimeEntry,Roster_ID,RostID  
            FROM   #LoopActatek  
            WHERE  Roster_ID IS NOT NULL  
            ORDER  BY UserID,TerminalSN,TimeEntry  
  
        --READ_ONLY FORWARD_ONLY LOCAL     
        OPEN db_cursor  
        FETCH NEXT FROM db_cursor INTO @Emp_ID, @User_ID, @Terminal, @Date, @EventID, @TimeEntry, @Roster_ID, @RostID  
        WHILE (@@FETCH_STATUS = 0)  
            BEGIN  
                --SET @SETNO = Day(Convert(datetime,@Date_Old,103))+Month(Convert(datetime,@Date_Old,103))+@Roster_ID+@RostID    
                IF (@Emp_ID = @Emp_ID_Old)  
                   AND (@Terminal = @Terminal_Old)  
                   AND (@EventID_Old = 'IN'  
                        AND @EventID = 'OUT')  
           BEGIN  
                        INSERT INTO #ActLogsPreFinal  
                        SELECT @Emp_ID,@User_ID,@Terminal,@Date_Old,@Roster_ID,@TimeEntry_Old,@TimeEntry  
                    END  
                ELSE  
                    IF (@Emp_ID = @Emp_ID_Old)  
                       AND (@Terminal = @Terminal_Old)  
                       AND (@EventID_Old = 'IN'  
                            AND @EventID = 'IN')  
                        BEGIN  
                            INSERT INTO #ActLogsPreFinal  
                            SELECT @Emp_ID,@User_ID,@Terminal,@Date_Old,@Roster_ID,@TimeEntry_Old,NULL  
                        END  
                    ELSE  
                        IF (@Emp_ID = @Emp_ID_Old)  
                           AND (@Terminal = @Terminal_Old)  
                           AND (@EventID_Old = 'OUT'  
                                AND @EventID = 'OUT')  
                            BEGIN  
                                INSERT INTO #ActLogsPreFinal  
                                SELECT @Emp_ID,@User_ID,@Terminal,@Date,@Roster_ID,NULL,@TimeEntry  
                            END  
                        ELSE  
                            IF (@Emp_ID = @Emp_ID_Old)  
                               AND (@Terminal = @Terminal_Old)  
                               AND (@EventID_Old = 'IN'  
                                    AND @EventID != 'OUT')  
                                BEGIN  
                                    INSERT INTO #ActLogsPreFinal  
                                    SELECT @Emp_ID,@User_ID,@Terminal,@Date_Old,@Roster_ID,@TimeEntry_Old,NULL  
                                END  
  
                SET @Emp_ID_Old=@Emp_ID  
                SET @User_ID_Old=@User_ID  
                SET @Terminal_Old=@Terminal  
                SET @Date_Old=@Date  
                SET @EventID_Old=@EventID  
                SET @TimeEntry_Old=@TimeEntry  
  
                FETCH NEXT FROM db_cursor INTO @Emp_ID, @User_ID, @Terminal, @Date, @EventID, @TimeEntry, @Roster_ID, @RostID  
            END  
  
        CLOSE db_cursor  
  
        DEALLOCATE db_cursor  
  
        SELECT DISTINCT A.Emp_Code,A.Time_Card_No,A.Sub_project_ID,A.TSDate,A.[In] FirstIn,A.[Out] LastOut,Datediff(mi, [In], [Out]) TotMinuteWorked,dbo.Converttohours(Datediff(mi, [In], [Out])) TotHrsWorked,RD.*  
        INTO   #ActLogsNexFinal  
        FROM   #ActLogsPreFinal A  
               LEFT OUTER JOIN EmployeeAssignedToRoster EA ON A.Emp_Code = EA.Emp_ID  
               LEFT OUTER JOIN RosterDetail RD ON EA.Roster_ID = RD.Roster_ID  
                                                  AND A.TSDate = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)  
  
        SELECT 0 RecordLock, 0 HoursWorked,Cast(0.00 as float) NH, Cast(0.00 as float) OT1, Cast(0.00 as float) OT2,0 CompanyWorkHours,  
  0 HrsInMins,E.Wdays_Per_week, 0 ID, A.Emp_Code, isnull(E.Emp_Name,'') Emp_Name,A.Roster_ID,R.Roster_Name,A.TSDate,  
  LEFT(Datename(dw, CONVERT(DATETIME, A.TSDate, 103)), 3) Roster_Day,  
  TimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.EarlyInBy,'')),  
  A.FirstIn TimeEnd  
  ,CoTimeStart = CASE WHEN A.RosterType = 'FLEXIBLE' THEN CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.InTime,'')) Else null End  
  ,CoTimeEnd = CASE WHEN A.RosterType = 'FLEXIBLE' THEN CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.InTime,'')) Else null End,A.FirstIn, A.LastOut,  
  CONVERT(CHAR(5), CONVERT (DATETIME, A.FirstIn, 105), 108) InShortTime,   
  CONVERT(CHAR(5), CONVERT (DATETIME, A.LastOut, 105), 108) OutShortTime,  
  TodayPH = dbo.Isholiday(@compid, CONVERT (DATETIME, A.TSDate, 103)), 0 TomorrowPH, A.Time_Card_No,  
  A.Sub_project_ID,S.ID SubProjectID, S.Sub_Project_Name,   
  RD.Intime,RD.Outtime,RD.EarlyInBy,RD.LateInBy,RD.EarlyOutBy,RD.LateOutBy,RD.ClockInBefore,RD.ClockInAfter,RD.ClockOutBefore,  
  RD.ClockOutAfter,RD.BreakTimeNHHr,RD.BreakTimeOThr,RD.BreakTimeNH,RD.BreakTimeOT,RD.NightShift,  
  TimeLateInBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.LateInBy,'')),  
  TimeEarlyOutBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.EarlyOutBy,'')),  
  null TimeBreakTimeNHAfter,null TimeBreakTimeOTAfter,  
  BreakTimeNHInMin = CASE WHEN A.RosterType = 'FLEXIBLE' THEN RD.BreakTimeNH  Else 0 End,  
  BreakTimeOTInMin = CASE WHEN A.RosterType = 'FLEXIBLE' THEN RD.BreakTimeOT  Else 0 End,  
  RD.RosterType,RD.FlexibleWorkinghr,  
  RD.PullWorkTimein,  
  0 HoursWorkedMin, 0 NHMin, 0 OT1Min, 0 OT2Min  
  ,'' Remarks,0 TSSup,E.Email MyEmail,'' EmailSuper,Isnull(B.SETNO, 0) SETPASS  
        FROM   #ActLogsNexFinal A  
               LEFT OUTER JOIN (SELECT Emp_Code,Time_Card_No,Roster_ID,TSDate,COUNT(*) SETNO  
                                FROM   #ActLogsNexFinal  
                                WHERE  ([FirstIn] IS NULL  
                                         OR [LastOut] IS NULL)  
                                   AND RosterType = 'FLEXIBLE'  
                                GROUP  BY Emp_Code, Time_Card_No, Roster_ID, TSDate) B ON A.Emp_Code = B.Emp_Code  
                                                                                       AND A.Time_Card_No = B.Time_Card_No  
                                                                                       AND A.Roster_ID = B.Roster_ID  
                                                                                       AND A.TSDate = B.TSDate  
           LEFT OUTER JOIN Employee E ON E.Time_Card_No = A.Time_Card_No  
           LEFT OUTER JOIN SubProject S ON S.Sub_Project_ID = A.Sub_Project_ID  
           LEFT OUTER JOIN Roster R ON R.ID = A.Roster_ID  
           LEFT OUTER JOIN RosterDetail RD ON A.Roster_ID = RD.Roster_ID  
                                              AND A.TSDate = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)  
        ORDER  BY A.Emp_Code,A.Sub_Project_ID,CONVERT(DATETIME, A.TSDate, 103)  
  
        DROP TABLE #ActLogsTempDisInProj  
  
        DROP TABLE #ActLogsTemp  
  
        --DROP TABLE #ActLogsTempIn    
        --DROP TABLE #ActLogsTempOut    
        DROP TABLE #LoopActatek  
  
        DROP TABLE #ActLogsPreFinal  
  
        DROP TABLE #ActLogsNexFinal  
    END  
--Select * From Actatek_Logs Where USERID='1016' and year(CONVERT(DATETIME, timeentry, 103))=2010 and month(CONVERT(DATETIME, timeentry, 103))=9    
GO

----CREATE PROCEDURE [dbo].[Sp_getemployeepaydetails] @emp_code        VARCHAR(256),        
----                                                 @Year            VARCHAR(256),        
----                                                 @Month           VARCHAR(256),        
----                                                 @Day_Work        VARCHAR(256),        
----                                                 @OT1             VARCHAR(256),        
----                                                 @OT2             VARCHAR(256),        
----                                                 @BasicDayRate    VARCHAR(256),        
----                                                 @OT1Hrs          VARCHAR(256),        
----                                                 @OT2Hrs          VARCHAR(256),        
----                                                 @OT1Rate         VARCHAR(256),        
----                                                 @OT2Rate         VARCHAR(256),        
----                                                 @empcpfamount    VARCHAR(10),        
----                                                 @ordwages        VARCHAR(10),        
----                                                 @addwages        VARCHAR(10),        
----                                                 @cpfrate         VARCHAR(200),        
----                                                 @fundname        VARCHAR(10),        
----                                                 @fundamount      VARCHAR(10),        
----                                                 @fundgrossamount VARCHAR(10),        
----                                                 @stdatesubmonth  VARCHAR(2),        
----                                                 @endatesubmonth  VARCHAR(2),        
----                                                 @hourlyrate      VARCHAR(10),        
----                                                 @nhhrs           VARCHAR(10),        
----                                                 @daysworkedrate  VARCHAR(10)        
----AS        
----  DECLARE @startsubpay VARCHAR(10)        
----  DECLARE @endsubpay VARCHAR(10)        
----  DECLARE @startdtsub DATETIME        
----  DECLARE @enddtsub DATETIME        
----  Declare @CalcFundFH Varchar(1)    
----        
----    BEGIN    
----        SET @startsubpay = @stdatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)        
----        SET @endsubpay = @endatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)        
----        SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)        
----        SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)        
----    
----    
----      
----    
----    
----    
--------Added on Dec 6 for Auto And Manual Funds- Start    
----Select @CalcFundFH=CASE    
----WHEN @endatesubmonth = '15' AND ComputeFundFH = 1 THEN 'Y'    
----WHEN @endatesubmonth = '15' AND ComputeFundFH = 0 THEN 'N'    
----ELSE 'Y' End From Employee Where Emp_Code = @emp_code    
----  
----   
----  Select *,Sum(dbo.Getempfundcontribution(@fundgrossamount, Isnull(FundType, ''))) DedAmt Into #Deduction From    
----  (    
----  SELECT ED.Emp_Code,FundType = Case     
----        When ED.FundType=1 Then 'CDAC'    
----        When ED.FundType=2 Then 'ECF'    
----        When ED.FundType=3 Then 'MBMF'    
----        When ED.FundType=4 Then 'SINDA'    
----        END    
----  FROM   Emp_Deductions ED    
----         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID    
----  WHERE  ((trx_period >= @startdtsub    
----          AND trx_period <= @enddtsub)    
----         AND YEAR(trx_period) = YEAR(@startdtsub))    
----   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))    
----  AND  CONVERT(INT, @endatesubmonth) >=1 And @CalcFundFH = 'Y' And ED.Emp_Code = @emp_code    
----  GROUP  BY ED.Emp_Code,ED.Trx_ID, ED.FundType    
----  ) D Group By Emp_Code, FundType    
----  Union All
----  SELECT Emp_Code,FundType = Case     
----        When ED.FundType=5 Then 'CDAC'    
----       When ED.FundType=6 Then 'ECF'    
----        When ED.FundType=7 Then 'MBMF'    
----        When ED.FundType=8 Then 'SINDA'    
----        END,    
----  SUM(trx_amount) DedAmt    
----  FROM   Emp_Deductions ED    
----         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID    
----  WHERE  ((trx_period >= @startdtsub    
----          AND trx_period <= @enddtsub)    
----         AND YEAR(trx_period) = YEAR(@startdtsub))    
----   And ((ED.FundType >=5 And ED.FundType <=8))
----  AND  CONVERT(INT, @endatesubmonth) >=1 And @CalcFundFH = 'Y' And ED.Emp_Code = @emp_code    
----  GROUP  BY Emp_Code,ED.FundType    
----        
----    
----        SELECT EA.AddType,CAST(EA.AddAmt AS DECIMAL(9, 2)) AddAmt,RowOrDer        
----        FROM   (SELECT AddType=CASE        
----                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN ('' + CAST(@nhhrs AS VARCHAR) + ' is Normal Hours Worked and ' + CAST(@hourlyrate AS VARCHAR) + ' is Normal Hourly Rate')        
----                                 ELSE NULL        
----                               END,        
----                       --AddAmt=Case When Cast(@nhhrs as float) != 0 And Cast(@hourlyrate as float) > 0 Then Cast(@daysworkedrate as float) Else cast(0 as float) End,             
----      NULL AddAmt,        
----                       0 RowOrDer        
----                UNION        
----                SELECT AddType=CASE        
----                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@nhhrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@hourlyrate AS FLOAT) / 60) AS VARCHAR) + ') NH:'        
----                                 ELSE NULL        
----                               END,(dbo.Converttominutes(CAST(@nhhrs AS FLOAT))) * (CAST(@hourlyrate AS FLOAT) / 60) AddAmt,0.5 RowOrDer        
----                UNION        
----                SELECT '(' + CAST(@Day_Work AS VARCHAR) + ' Days) x (' + CAST(@BasicDayRate AS VARCHAR) + ' Day Rate) Days Worked:' AddType,CAST (@Day_Work AS FLOAT) * CAST (@BasicDayRate AS FLOAT) AddAmt,0 RowOrDer        
----                UNION        
---- SELECT AddType=CASE        
----                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT1Hrs AS VARCHAR) + ' is OT1 Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate')        
----                                 ELSE NULL        
----                               END,        
----                       --'' + CAST(@OT1Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate' AddType          
----                       NULL AddAmt,        
----        1 RowOrDer        
----                UNION        
----                SELECT AddType=CASE        
----                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT1Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT1Rate AS FLOAT) / 60) AS VARCHAR) + ') OT1:'        
----                                 ELSE NULL        
----                               END,CAST (@OT1 AS FLOAT) AddAmt,2 RowOrDer        
----                UNION        
----                SELECT AddType=CASE        
----                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT2Hrs AS VARCHAR) + ' is OT2 Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate')        
----                                 ELSE NULL        
----                               END,        
----                       --'' + CAST(@OT2Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate' AddType          
----                       NULL AddAmt,3 RowOrDer        
----                UNION        
----                SELECT AddType=CASE        
----                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT2Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT2Rate AS FLOAT) / 60) AS VARCHAR) + ') OT2:'        
----                                 ELSE NULL        
----                               END,CAST (@OT2 AS FLOAT) AddAmt,3.5 RowOrDer      
----                UNION        
----                SELECT EA.AddType + ':',EA.AddAmt,4 RowOrDer        
----                FROM   (SELECT EA.*,AT.[Desc] AddType        
----                        FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
----                 FROM   emp_additions EA        
----                                WHERE  (--MONTH(trx_period) = @month AND                        
----                                       (trx_period >= @startdtsub        
----                                        AND trx_period <= @enddtsub)        
----                                       AND YEAR(trx_period) = @Year        
----                                       AND Emp_Code = @emp_code)        
----           AND (EA.ClaimStatus = 'Approved'        
----           OR EA.ClaimStatus IS NULL)        
----                                GROUP  BY Emp_Code,Trx_Type) EA        
----                               INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID) EA) EA        
----        WHERE  AddType IS NOT NULL        
----           AND (AddAmt != 0        
----                 OR AddAmt IS NULL)        
----        ORDER  BY RowOrder        
----        
----        IF (@empcpfamount != 0)        
----            BEGIN        
----                SELECT *        
----                FROM   (SELECT 'EMPLOYEEE CPF CONTRIBUTIONS:' AddType,@empcpfamount AddAmt,0 RowORder        
----                        UNION ALL
----                        SELECT AddType = CASE        
----                                           WHEN Len(@cpfrate) >= 3 THEN REPLACE('{(' + @ordwages + ' Ord Wages+ ' + @addwages + ' Add Wages) And CPF Rate is: ' + @cpfrate + '}', '+ 0 Add Wages', '')        
----                                           ELSE REPLACE('{(' + @ordwages + ' Ord Wages + ' + @addwages + ' Add Wages) x' + @cpfrate + '% (CPF Rate)}', '+ 0 Add Wages', '')        
----                                         END,NULL AddAmt,1 RowORder        
----                        UNION ALL
----                        SELECT '(' + @fundgrossamount + ' Calculate on Fund) ' + @fundname + ':',@fundamount,2 RowORder        
----                        UNION All
----                        SELECT '(' + @fundgrossamount + ' Calculate on Fund) ' + FundType + ':',DedAmt,2 RowORder From #Deduction     
----                        UNION All        
----                        SELECT ED.AddType + ':',ED.AddAmt,3 RowORder        
----                        FROM   (SELECT ED.*,DT.[Desc] AddType        
----                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
----                                        FROM   emp_deductions ED        
----                                        WHERE  ((trx_period >= @startdtsub        
----                               AND trx_period <= @enddtsub)        
----                                               AND YEAR(trx_period) = @Year        
----                                               AND Emp_Code = @emp_code And (ED.FundType is NULL OR ED.FundType=0))
----                                        GROUP  BY Emp_Code,Trx_Type) ED        
----                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED        
----                WHERE  (AddAmt != 0        
----                     OR AddAmt IS NULL)    
----                ORDER  BY ED.RowOrder        
----            END        
----        ELSE        
----            BEGIN      
----                SELECT *        
----                FROM   (SELECT @fundname + ':' AddType,@fundamount AddAmt,2 RowORder        
----                        UNION        
----                        SELECT ED.AddType + ':' AddType,ED.AddAmt AddAmt,3 RowORder        
----                        FROM   (SELECT ED.*,DT.[Desc] AddType        
----                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
----                                        FROM   emp_deductions ED        
----                                        WHERE  ((trx_period >= @startdtsub        
----                                                AND trx_period <= @enddtsub)        
----                                               AND YEAR(trx_period) = @Year        
----                                               AND Emp_Code = @emp_code)        
----                                        GROUP  BY Emp_Code,Trx_Type) ED        
----                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED        
----                WHERE  ED.AddAmt != 0        
----                ORDER  BY ED.RowOrder  
----  END        
----    END     
----    
----DROP TABLE #Deduction    
----GO
-----Merging 9.0
CREATE PROC [dbo].[Sp_userrighttopayroll] 
			@company_id INT,
			@UserID  INT,
			@Type   Varchar(10),
			@TypeID  Varchar(10)
AS    
  
  DECLARE @WorkFlowID AS INT    
  DECLARE @RowID AS INT    
  DECLARE @ID AS INT    
  DECLARE @select VARCHAR(1000)    
  DECLARE @where VARCHAR(1000)    
  
 Select * INTO #EmployeeTemp From Employee
 IF (@Type = 'DEPART')
 BEGIN
  IF (@TypeID = '-1')
  BEGIN
	--SELECT  EMP_CODE,[NAME] = Case When termination_date is null Then (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,''))  Else (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,'')) + '[Terminated]' End INTO #EmployeeTemp FROM dbo.employee WHERE COMPANY_ID= @company_id ORDER BY EMP_NAME  
	SELECT @where = 'WHERE COMPANY_ID != '+ Convert(varchar(10),@company_id)
  END
  ELSE
  BEGIN  
   --SELECT  EMP_CODE,[NAME] = Case When Termination_Date is null Then (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,''))  Else (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,'')) + '[Terminated]' End INTO #EmployeeTemp FROM dbo.employee WHERE DEPT_ID = @TypeID AND COMPANY_ID= @company_id ORDER BY EMP_NAME  
   SELECT @where = 'WHERE DEPT_ID != ' + @TypeID + ' OR COMPANY_ID != '+ Convert(varchar(10),@company_id)    
  END  
 END  
 SELECT @select = 'Delete From #EmployeeTemp ' + @where  
 EXEC (@select)    
  CREATE TABLE #EmployeeWorkFlowLevel    
      (    
           ID             INT,    
           WORKFLOWID     INT,    
           ROWID          INT,    
           PAYROLLGROUPID INT    
      )    
    
  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID    
  INTO   #EmployeeWorkFlow  
  FROM   #EmployeeTemp EM  
         INNER JOIN (SELECT WL.*    
                     FROM   EmployeeWorkFlowLevel WL    
                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID    
    
  DECLARE curse CURSOR FOR    
      SELECT *    
      FROM   #EmployeeWorkFlow    
    
  OPEN curse    
    
  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID    
    
  WHILE @@FETCH_STATUS = 0    
      BEGIN    
          --PRINT @RowID                                                                        
          INSERT INTO #EmployeeWorkFlowLevel    
          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID    
          FROM   EmployeeWorkFlowLevel    
          WHERE  WorkFLowID = @WorkFLowID    
             AND RowID <= @RowID    
    
          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID    
      END    
    
  SELECT DISTINCT Te.ID,EG.Emp_ID    
  INTO   #EmployeeAssignedToPayrollGroup    
  FROM   #EmployeeWorkFlowLevel Te    
 INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID    
  WHERE  EG.Emp_ID = @UserID    
    
  CLOSE curse    
    
  DEALLOCATE curse    
  
  
  DELETE FROM #EmployeeTemp  
  WHERE  Pay_supervisor NOT IN (SELECT ID    
                                FROM   #EmployeeAssignedToPayrollGroup)    
     AND (Pay_supervisor > 0)   
  
  
 SELECT  EMP_CODE,[NAME] = Case When termination_date is null Then (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,''))  Else (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,'')) + '[Terminated]' End From #EmployeeTemp ORDER BY EMP_NAME  

GO


--Update  MultiProjectAssigned Set Emp_ID=53 Where ID = 4
--Select * From MultiProjectAssigned
--sp_ProcessTimesheetAdv '01/09/2010', '03/09/2010', 2, '53,68', '-1', 'No', 0, 99
CREATE PROCEDURE [dbo].[Sp_processtimesheetadv]   
					(								 @start_date VARCHAR(10),  
                                             @end_date   VARCHAR(10),  
                                             @compid     VARCHAR(10),  
                                             @empid      VARCHAR(8000),  
                                             @subprojid  VARCHAR(8000),  
                                             @isEmpty    VARCHAR(3),  
                                             @sessid     FLOAT,    
                                             @REPID      INT=0)  
AS  
    BEGIN  
        DECLARE @colname VARCHAR(8000)  
        DECLARE @select VARCHAR(8000)  
        DECLARE @whereproj VARCHAR(8000)  
        DECLARE @whereemp VARCHAR(8000)  
        DECLARE @wheresessid VARCHAR(100)  
        DECLARE @startdate AS DATETIME  
        DECLARE @enddate AS DATETIME  
        DECLARE @ConsEarlyInBy AS INT    
        DECLARE @softdelete AS INT    
        DECLARE @multiproj AS INT    
    
        SET @ConsEarlyInBy = 0    
        SET @startdate = CONVERT(DATETIME, @start_date, 103)    
        SET @enddate = CONVERT(DATETIME, @end_date, 103)    
     
        SELECT *    
        INTO   #ActLogsTemp    
        FROM   Actatek_Logs    

		DECLARE @proxyProj INT  
  
		SELECT @proxyProj = count(*) FROM SubProjectProxy Where SubProjectID=@subprojid  
  		
		---- There is  proxy project so check that   
		

  
		--Select DISTINCT SubProjectID Sub_Project_ID,Emp_ID,EntryDate Into ##EmployeeAssignedToProject From MultiProjectAssigned Where CONVERT(DATETIME, EntryDate, 103) BETWEEN CONVERT(DATETIME, @startdate, 103) And CONVERT(DATETIME, @end_date, 103)  
		Select DISTINCT Sub_Project_ID,Emp_ID Into ##EmployeeAssignedToProject From EmployeeAssignedToProject  
		---select * from ##EmployeeAssignedToProject 
		---Select * Into #SubProject1 From SubProject Where ID In (Select Sub_Project_ID From ##EmployeeAssignedToProject)  

		if @proxyProj >0   
			BEGIN 
				Select * Into #SubProject1 From SubProjectProxy Where SubProjectID In (Select Sub_Project_ID From ##EmployeeAssignedToProject)  
			END
		ELSE
			BEGIN
				Select * Into #SubProject From SubProject Where ID In (Select Sub_Project_ID From ##EmployeeAssignedToProject)
			END 
		-----select * from #SubProject1
		IF  @proxyProj >0   
			BEGIN
										IF (@sessid > 0)    
											BEGIN    
												SET @softdelete=2    
											END    
										ELSE    
											BEGIN    
												SET @softdelete=0    
											END    
								    
										SELECT ROWID = IDENTITY(INT, 1, 1),
											'NH' = CASE
												WHEN TodayPH = 1 THEN 0    
												WHEN Wdays_Per_week != 7  AND Roster_Day = 'Sun' THEN 0    
												WHEN Wdays_Per_week <= 7  AND TodayPH = 0 AND (HrsinMins - CompanyWorkHours) >= 0 THEN CompanyWorkHours    
												WHEN Wdays_Per_week <= 7  AND TodayPH = 0  AND (HrsinMins - CompanyWorkHours) < 0 THEN HrsinMins    
												ELSE 0    
											END,
											'OT1' = CASE    
												WHEN TodayPH = 1 THEN 0  WHEN Wdays_Per_week != 7    AND Roster_Day = 'Sun' THEN 0    
												WHEN Wdays_Per_week <= 7 AND TodayPH = 0   AND (HrsinMins - CompanyWorkHours) > 0 THEN (HrsinMins - CompanyWorkHours)    
												ELSE 0    
												END,
											'OT2' = CASE WHEN Wdays_Per_week != 7 AND Roster_Day = 'Sun' THEN HrsinMins    
												WHEN Wdays_Per_week <= 7  AND TodayPH = 1 THEN HrsinMins    
												ELSE 0    
												END,*,0 AS RecordFound    
											INTO   #RD    
											FROM   
											(SELECT 
												CompanyWorkHours=CASE    
													WHEN RosterType = 'NORMAL' THEN dbo.Converttominutes(dbo.Converttohours(Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin)))    
													WHEN RosterType = 'FLEXIBLE' THEN (FlexibleWorkingHr - BreakTimeNHInMin)    
													ELSE 0    
												END,
												HoursWorked HrsinMins,*    
												FROM   
													(
														SELECT Wdays_per_Week,ID,Emp_ID Emp_Code,Emp_Name,Roster_ID,Roster_Name,Roster_Date TSDate,
															 LEFT(Datename(dw, CONVERT(DATETIME, Roster_Date, 103)), 3) Roster_Day,TimeStart,TimeEnd,CoTimeStart,CoTimeEnd,FirstIn,LastOut,InShortTime,
															OutShortTime,
															HoursWorked = CASE WHEN RosterType = 'NORMAL' AND FirstIn IS NOT NULL  AND LastOut IS NOT NULL AND @ConsEarlyInBy = 0 AND (FirstIn BETWEEN TimeStart AND TimeLateInBy)                                                                                                                                                                                                                                                             
																AND (LastOut BETWEEN TimeEarlyOutBy AND CoTimeend) THEN (Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin + BreakTimeOTInMin))    
																WHEN RosterType = 'NORMAL' AND FirstIn IS NOT NULL AND LastOut IS NOT NULL AND @ConsEarlyInBy = 1  AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))    
																WHEN RosterType = 'NORMAL' AND FirstIn IS NOT NULL AND LastOut IS NOT NULL AND @ConsEarlyInBy = 0  AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, CoTimeStart, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))    
																WHEN RosterType='FLEXIBLE' Then (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))    
														   ELSE 0    
														 END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Sub_Project_Name,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,TimeLateInBy,TimeEarlyOutBy,TimeBreakTimeNHAfter,TimeBreakTimeOTAfter,BreakTimeNHInMin,BreakTimeOTInMin,RosterType,FlexibleWorkinghr,PullWorkTimein,
														Remarks=CASE WHEN InRemarks IS NULL AND OutRemarks IS NULL THEN ''    
																WHEN InRemarks IS NOT NULL AND OutRemarks IS NULL THEN InRemarks    
																WHEN InRemarks IS NULL    
																AND OutRemarks IS NOT NULL THEN OutRemarks    
																WHEN InRemarks IS NOT NULL    
																AND OutRemarks IS NOT NULL THEN InRemarks    
																END    
														FROM   (SELECT BreakTimeNHInMin = CASE    
																							WHEN RosterType = 'FLEXIBLE' THEN BreakTimeNH    
																							WHEN RosterType = 'NORMAL'    
																								 AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeNHAfter, 103) + ' ' + BreakTimeNHhr), 103) THEN BreakTimeNH    
																							ELSE 0    
																						  END,
																	BreakTimeOTInMin = CASE    
																						   WHEN RosterType = 'FLEXIBLE' THEN BreakTimeOT    
																						   WHEN RosterType = 'NORMAL'    
																									AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeOTAfter, 103) + ' ' + BreakTimeOThr), 103) THEN BreakTimeOT    
																							ELSE 0    
																							END,CONVERT(CHAR(5), CONVERT (DATETIME, FirstIn, 105), 108) InShortTime,CONVERT(CHAR(5), CONVERT (DATETIME, LastOut, 105), 108) OutShortTime,*    
																						FROM   (SELECT CoTimeEnd = CASE    
																						WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + OutTime), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + OutTime), 103)    
																							 ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + OutTime), 103)    
																						END,FirstIn=CASE    
																						WHEN RosterType = 'NORMAL' THEN 
																						(
																								SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
																								FROM   #ActLogsTemp AL    
																								WHERE  AL.SoftDelete = @softdelete    
																								AND AL.TerminalSN = R.Sub_Project_ID    
																								AND AL.UserID = R.Time_Card_No    
																								AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
																								AND Upper(AL.EventID) = 'IN'    
																								ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)  
																								WHEN RosterType = 'FLEXIBLE' THEN 
																								(SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
																										FROM   #ActLogsTemp AL    
																										WHERE  AL.SoftDelete = @softdelete    
																										AND AL.TerminalSN = R.Sub_Project_ID    
																										AND AL.UserID = R.Time_Card_No    
																										AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))    
																										AND Upper(AL.EventID) = 'IN'    
																										ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)    
																									ELSE NULL    
																									END,LastOut= CASE WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
																											FROM   #ActLogsTemp AL    
																											WHERE  AL.SoftDelete = @softdelete    
																											   AND AL.TerminalSN = R.Sub_Project_ID    
																											   AND AL.UserID = R.Time_Card_No    
																											   AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
																											   AND Upper(AL.EventID) = 'OUT'    
																											ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC)    
																											WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
																											FROM   #ActLogsTemp AL    
																									WHERE  AL.SoftDelete = @softdelete    
																											AND AL.TerminalSN = R.Sub_Project_ID    
																											AND AL.UserID = R.Time_Card_No    
																											AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))    
																											AND Upper(AL.EventID) = 'OUT'    
																											ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) Else Null END,(SELECT TOP 1 AL.Remarks    
																																										  FROM   #ActLogsTemp AL    
																																										  WHERE  AL.SoftDelete = @softdelete    
																																											 AND AL.TerminalSN = R.Sub_Project_ID    
																																											 AND AL.UserID = R.Time_Card_No    
																																											 AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
																																											 AND Upper(AL.EventID) = 'IN'    
																																										  ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC) InRemarks,(SELECT TOP 1 AL.Remarks    
																																																										 FROM   #ActLogsTemp AL    
																																																										 WHERE  AL.SoftDelete = @softdelete    
																																																											AND AL.TerminalSN = R.Sub_Project_ID    
																																																											AND AL.UserID = R.Time_Card_No    
																																																											AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
																																																											AND Upper(AL.EventID) = 'OUT'    
																																																										 ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) OutRemarks,*  FROM   (SELECT ID,Emp_ID,Emp_Name,Roster_ID,Roster_Name,Roster_Date,TimeStart,TimeEnd = CASE    
																																																				WHEN TimeEnd IS NULL THEN Dateadd(MINUTE, 1410, TimeStart)    ELSE TimeEnd    
																																																END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,Sub_Project_Name,CoTimeStart,Wdays_per_Week,TimeLateInBy,
																																																TimeEarlyOutBy = CASE  
																																																WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + EarlyOutBy), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + EarlyOutBy), 103)    
																																																ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + EarlyOutBy), 103)    
																																																END,TimeBreakTimeNHAfter = CASE    WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + BreakTimeNHHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeNHHr), 103)    
																																																ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + BreakTimeNHHr), 103)    
									 END,TimeBreakTimeOTAfter = CASE    
								                                                                                                                                                                                                                                                               
								  
																																																																				 WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + BreakTimeOTHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeOTHr), 103)    
								                                                                                                                                                                                                                                                               
								  
																																																																				 ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + BreakTimeOTHr), 103)    
								                                                                                                                                                                                                                                                               
								  
																																																																			   END,RosterType,FlexibleWorkinghr,PullWorkTimein    
																				FROM   (SELECT EY.Wdays_per_Week,Isnull(EY.emp_name, '') + ' ' + Isnull(EY.emp_lname, '') Emp_Name,RD.Roster_ID,RO.Roster_Name,CONVERT(VARCHAR, RD.Roster_Date, 103) Roster_Date,TimeStart = CONVERT(DATETIME, 
								  
								CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyInBy),TimeLateInBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.LateInBy),TimeEarlyOutBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyOutBy),CoTimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.InTime),Dateadd(MINUTE, -30, CONVERT(DATETIME, (SELECT TOP 1 CONVERT(VARCHAR, RDD.Roster_Date, 101) + ' ' + RDD.EarlyInBy FROM RosterDETail RDD WHERE CONVERT(DATETIME, RDD.Roster_Date, 103) > CONVERT(DATETIME, RD.Roster_Date, 103) ORDER BY RDD.Roster_Date ASC ), 101)) TimeEnd,RD.ID,TodayPH = dbo.Isholiday(@compid, RD.Roster_Date),TomorrowPH = dbo.Isholiday(@compid, RD.Roster_Date + 1),ER.Emp_ID,EY.Time_Card_No,    
																							   EP.Sub_Project_ID SubProjectID,    
																									   SP.Sub_Project_Proxy_ID Sub_Project_ID,    
																									   RD.Intime,RD.Outtime,RD.EarlyInBy,RD.LateInBy,RD.EarlyOutBy,RD.LateOutBy,RD.ClockInBefore,RD.ClockInAfter,RD.ClockOutBefore,RD.ClockOutAfter,RD.BreakTimeNHHr,RD.BreakTimeOThr,RD.BreakTimeNH,RD.BreakTimeOT,RD.NightShift,SP.Sub_Project_Proxy_ID   Sub_Project_Name,RD.RosterType,RD.FlexibleWorkinghr,RD.PullWorkTimein    
																						FROM   RosterDetail RD    
																							   INNER JOIN (SELECT DISTINCT Roster_ID,Emp_ID    
																										   FROM   EmployeeAssignedToRoster) ER ON RD.Roster_ID = ER.Roster_ID    
																							   INNER JOIN Employee EY ON ER.Emp_ID = EY.Emp_Code    
																							   INNER JOIN (  
								--                   SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID    
								--                                                                           FROM   ApprovedTimesheet A    
								--                                                                                  INNER JOIN SubProject S ON A.Sub_Project_ID = S.Sub_Project_ID    
								--                                                                                  INNER JOIN Employee E ON A.Time_Card_No = E.time_card_no    
								--                                                                           WHERE  A.SoftDelete = 0    
								--                                                                           UNION    
								--                                                                           SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID    
								--                                                                           FROM   Actatek_Logs A    
								--                                                                                  INNER JOIN SubProject S ON A.TerminalSn = S.Sub_Project_ID    
								--                                                                                  INNER JOIN Employee E ON A.UserID = E.time_card_no    
								--                                                                           WHERE  A.SoftDelete = 0    
								--                                                                           UNION    
																										   SELECT DISTINCT Sub_Project_ID,Emp_ID --,EntryDate   
																										   FROM   ##EmployeeAssignedToProject)  
																										  EP ON EP.Emp_ID = EY.Emp_Code --And EP.EntryDate=RD.Roster_Date  
																							   ---INNER JOIN #SubProject1 SP ON EP.Sub_Project_ID = SP.ID    
																								INNER JOIN #SubProject1 SP ON EP.Sub_Project_ID = SP.SubProjectID  
																							   INNER JOIN Roster RO ON RD.Roster_ID = RO.ID    
																						--Inner Join Actatek_Logs AL                                            
																						--On SP.Sub_Project_ID = AL.TerminalSN And  convert(varchar,RD.Roster_Date,103) = convert(Varchar,convert(datetime,AL.TimeEntry,103),103)                                            
																						WHERE  (RD.Roster_Date BETWEEN @startdate AND @enddate) --- AND SP.SubProjectID=@subprojid  
																						   AND EY.Company_ID = @compid) DE) R) E) E) E) E --Where (E.FirstIn is not null Or E.LastOut is not null)                                            
										ORDER  BY E.Emp_Code,E.TSDate,E.SubProjectID    

											
										
											
								  
										IF Rtrim(@empid) != '-1'    
											BEGIN    
												SELECT @whereemp = 'Where Emp_Code Not In (' + @empid + ')'    
								    
												SELECT @select = 'Delete From #RD ' + @whereemp    
								    
												EXEC (@select)    
											END    
								    
										IF Rtrim(@subprojid) != '-1'    
											BEGIN    
												SELECT @whereproj = 'Where SubProjectID Not In (' + @subprojid + ')'    
								    
												SELECT @select = 'Delete From #RD ' + @whereproj    
								    
												EXEC (@select)    
											END    
								    
										IF Rtrim(@isEmpty) = 'Yes'    
											BEGIN    
												SELECT @select = 'Delete From #RD Where InShortTime is not null Or OutShortTime is not null'    
								    
												EXEC (@select)    
											END    

											
								--    
										DECLARE @ROWID          INT,    
												@Time_Card_No   VARCHAR(10),    
												@Sub_Project_ID VARCHAR(20),    
												@Roster_ID      INT,    
												@TSDate         VARCHAR(10),    
												@LastOut        DATETIME,    
												@UDate          DATETIME    
										DECLARE TempCurs CURSOR FOR    
											SELECT ROWID,Time_Card_No,Sub_Project_ID,Roster_ID,TSDate    
											FROM   #RD    
								    
								  
										OPEN TempCurs    
								  
										FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate    
								    
										WHILE @@FETCH_STATUS = 0    
											BEGIN    
												SELECT @UDate = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)    
																 FROM   Actatek_Logs    
																 WHERE  Upper(TERMINALSN) = @Sub_Project_ID    
																	AND EventID LIKE '%IN%'    
																	AND CONVERT(CHAR(10), TimeEntry, 108) = @TSDATE    
																	AND SoftDelete = @softdelete    
																	AND UserID = @Time_Card_No    
																	AND Roster_ID = @Roster_ID    
																 ORDER  BY CONVERT(DATETIME, TimeEntry, 103) ASC)    
								  
												IF Len(Isnull(@UDate, 0)) > 1    
													BEGIN    
														UPDATE #RD    
														SET    FirstIn = @UDate    
														WHERE  ROWID = @ROWID    
														   AND FirstIn IS NOT NULL   And @UDate != '1900-01-01 00:00:00.000'  
													END    
								    
												SELECT @LastOut = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)    
																   FROM   Actatek_Logs    
																   WHERE  Upper(TERMINALSN) = @Sub_Project_ID    
																	  AND EventID LIKE '%OUT%'    
																	  AND SoftDelete = @softdelete    
																	  AND UserID = @Time_Card_No    
																	  AND Roster_ID = @Roster_ID    
																   ORDER  BY CONVERT(DATETIME, TimeEntry, 103) DESC)    
								    
												-- IF len(isnull(@LastOut,0)) > 1                                  
												-- Begin                                  
												--  Update #RD Set LastOut= @LastOut Where ROWID = @ROWID  And LastOut is not null                                   
												-- End                                  
												UPDATE #RD    
												SET    InShortTime = LEFT(CONVERT(CHAR(10), FirstIn, 108), 5)    
												WHERE  ROWID = @ROWID    
												   AND FirstIn IS NOT NULL    
								    
												UPDATE #RD    
												SET    OutShortTime = LEFT(CONVERT(CHAR(10), LastOut, 108), 5)    
												WHERE  ROWID = @ROWID    
												   AND LastOut IS NOT NULL    
								    
												FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate    
											END    
								    
										CLOSE TempCurs    
								    
										DEALLOCATE TempCurs    
								    
										UPDATE #RD    
										SET    OT1 = NH,    
											   NH = 0    
										WHERE  PullWorkTimein = 1    
								    
										UPDATE #RD    
										SET    OT2 = NH,    
											   NH = 0    
										WHERE  PullWorkTimein = 2    
								    
										UPDATE #RD    
										SET    NH = OT1,    
											   OT1 = 0    
										WHERE  PullWorkTimein = 3    
								    
										UPDATE #RD    
										SET    OT2 = OT1,    
											   OT1 = 0    
										WHERE  PullWorkTimein = 4    
								    
										UPDATE #RD    
										SET    NH = OT2,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 5    
								    
										UPDATE #RD    
										SET    OT1 = OT2,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 6    
								    
										UPDATE #RD    
										SET    NH = NH + OT1,    
											   OT1 = 0    
										WHERE  PullWorkTimein = 7    
								    
										UPDATE #RD    
										SET    OT1 = NH + OT1,    
											   NH = 0    
										WHERE  PullWorkTimein = 8    
								    
										UPDATE #RD    
										SET    OT2 = NH + OT1,    
											   NH = 0,    
											   OT1 = 0    
										WHERE  PullWorkTimein = 9    
								    
										UPDATE #RD    
										SET    OT1 = NH + OT2,    
											   NH = 0,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 10    
								    
										UPDATE #RD    
										SET    OT2 = NH + OT2,    
											   NH = 0    
										WHERE  PullWorkTimein = 11    
								    
										UPDATE #RD    
										SET    NH = NH + OT2,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 12    
								    
										UPDATE #RD    
										SET    NH = OT1 + OT2,    
											   OT1 = 0,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 13    
								    
										UPDATE #RD    
										SET    OT1 = OT1 + OT2,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 14    
								    
										UPDATE #RD    
										SET    OT2 = OT1 + OT2,    
											   OT1 = 0    
										WHERE  PullWorkTimein = 15    
								    
										UPDATE #RD    
										SET    NH = NH + OT1 + OT2,    
											   OT1 = 0,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 16    
								    
										UPDATE #RD    
										SET    OT1 = NH + OT1 + OT2,    
											   NH = 0,    
											   OT2 = 0    
										WHERE  PullWorkTimein = 17    
								    
										UPDATE #RD    
										SET    OT2 = NH + OT1 + OT2,    
											   NH = 0,    
											   OT1 = 0    
										WHERE  PullWorkTimein = 18    
								    
										UPDATE #RD    
										SET    HoursWorked = (NH + OT1 + OT2)    
										WHERE  PullWorkTimein > 0  

										----select * from  #RD   
								    
										IF (@sessid != -1)    
											BEGIN    
												SELECT RES.*,E.Email EmailSuper    
												FROM   (SELECT RecordLock = Isnull((SELECT TOP 1 ID    
																					FROM   ApprovedTimeSheet AT    
																					WHERE  AT.SoftDelete = @softdelete    
																					   AND AT.Roster_ID = R.Roster_ID    
																					   AND AT.Time_Card_No = R.Time_Card_No    
																					   AND AT.Sub_Project_ID = R.Sub_Project_ID    
																					   AND AT.TimeEntryStart = R.FirstIn    
																					   AND AT.TimeEntryEnd = R.LastOut), 0),dbo.Converttohours(R.HoursWorked) HoursWorked,    
											  dbo.Converttohours(R.NH) NH,dbo.Converttohours(R.OT1) OT1,dbo.Converttohours(R.OT2) OT2,    
											  R.CompanyWorkHours,R.HrsinMins,R.Wdays_per_Week,R.ID,R.Emp_Code,R.Emp_Name,R.Roster_ID,    
											  R.Roster_Name,R.TSDate,R.Roster_Day,R.TimeStart,R.TimeEnd,R.CoTimeStart,R.CoTimeEnd,    
											  R.FirstIn,R.LastOut,R.InShortTime,R.OutShortTime,R.TodayPH,R.TomorrowPH,R.Time_Card_No,    
											  --R.Sub_Project_ID,R.SubProjectID,R.Sub_Project_Name,R.Intime,R.Outtime,R.EarlyInBy,    
											  R.Sub_Project_ID,R.SubProjectID,S.Sub_Project_Name + ':' + R.Sub_Project_Name  Sub_Project_Name,R.Intime,R.Outtime,R.EarlyInBy,    
											  R.LateInBy,R.EarlyOutBy,R.LateOutBy,R.ClockInBefore,R.ClockInAfter,R.ClockOutBefore,    
											  R.ClockOutAfter,R.BreakTimeNHHr,R.BreakTimeOThr,R.BreakTimeNH,R.BreakTimeOT,R.NightShift,    
											  R.TimeLateInBy,R.TimeEarlyOutBy,R.TimeBreakTimeNHAfter,R.TimeBreakTimeOTAfter,    
											  R.BreakTimeNHInMin,R.BreakTimeOTInMin,R.RosterType,R.FlexibleWorkinghr,    
											  R.PullWorkTimein,R.HoursWorked HoursWorkedMin,R.NH NHMin,R.OT1 OT1Min,    
											  R.OT2 OT2Min,R.Remarks,TSSup =    
													  CASE    
													 WHEN (E.TimeSupervisor IS NULL    
														 OR E.TimeSupervisor = 0) THEN    
													 S.TimeSupervisor    
													 ELSE E.TimeSupervisor    
													  END,E.Email MyEmail    
														FROM   #RD R    
															   INNER JOIN Employee E ON R.Emp_Code = E.Emp_Code    
															   INNER JOIN SubProject S ON R.SubProjectID = S.ID) RES    
													   LEFT OUTER JOIN Employee E ON RES.TSSup = E.Emp_Code    
												ORDER  BY RES.Emp_Name    
											END    
								    
										IF (@REPID = 99) --SUMMARY PROJECT Then Employe Wise              
											BEGIN    
												SELECT RD.Time_Card_No,E.Emp_name [Full_Name],Sub_Project_Name,dbo.Converttohours(RD.HoursWorked) [Hours_Worked],dbo.Converttohours(RD.NH) NH,dbo.Converttohours(RD.OT1) OT1,dbo.Converttohours(RD.OT2) OT2,(E.Hourly_Rate) [Hourly_Rate],((E.Hourly_Rate * E.OT1Rate)) [OT1_Rate],((E.Hourly_Rate * E.OT2Rate)) [OT2_Rate],((E.Hourly_Rate) * dbo.Converttohours(RD.NH)) [Tot_NH],(((E.Hourly_Rate * E.OT1Rate)) * dbo.Converttohours(RD.OT1)) [TotOT1],(((E.Hourly_Rate * E.OT2Rate)) * dbo.Converttohours(RD.OT2)) [TotOT2],RD.HoursWorked [HoursWorked In Min],RD.NH [NH in Min],RD.OT1 [OT1 in Min],RD.OT2 [OT2 in Min],(E.Hourly_Rate / 60) [Hourly Rate in Min],((E.Hourly_Rate * E.OT1Rate) / 60) [OT1Rate in Min],((E.Hourly_Rate * E.OT2Rate) / 60) [OT2Rate in Min],((E.Hourly_Rate / 60) * RD.NH) [TotNH in Min],(((E.Hourly_Rate * E.OT1Rate) / 60) * RD.OT1) [Tot OT1 in Min],(((E.Hourly_Rate * E.OT2Rate) / 60) * RD.OT2) [Tot OT2 in Min],Emp_Code    
												FROM   (SELECT RD.Time_Card_No,SUM(HoursWorked) HoursWorked,CAST(SUM(NH) AS VARCHAR) NH,SUM(OT1) OT1,SUM(OT2) OT2,RD.Sub_Project_Name    
														FROM   #RD RD    
														GROUP  BY RD.Sub_Project_Name,RD.Time_Card_No) RD    
													   INNER JOIN Employee E ON RD.Time_Card_No = E.Time_Card_No    
												ORDER  BY Emp_Name    
											END    
								    
										IF (@REPID = 100)    
											BEGIN    
												SELECT Time_Card_No,Emp_Name Full_Name,Sub_Project_Name,TSDate [Date],InShortTime [In_Time],OutShortTime [Out_Time],dbo.Converttohours(HoursWorked) [Hours_Worked],dbo.Converttohours(NH) NH,dbo.Converttohours(OT1) OT1,dbo.Converttohours(OT2
								) OT2,Emp_Code,Remarks    
												FROM   #RD    
												ORDER  BY Emp_Name,TSDATE    
											END   
					END
			ELSE
					BEGIN
							        IF (@sessid > 0)    
            BEGIN    
                SET @softdelete=2    
            END    
        ELSE    
			IF (@sessid > 0)    
				BEGIN    
					SET @softdelete=2    
				END    
			ELSE    
				BEGIN    
					SET @softdelete=0    
				END    
    
			SELECT ROWID = IDENTITY(INT, 1, 1),'NH' = CASE    
                                                    WHEN TodayPH = 1 THEN 0    
                                                    WHEN Wdays_Per_week != 7    
                                                         AND Roster_Day = 'Sun' THEN 0    
                                                    WHEN Wdays_Per_week <= 7    
                                                         AND TodayPH = 0    
                                                         AND (HrsinMins - CompanyWorkHours) >= 0 THEN CompanyWorkHours    
                                                    WHEN Wdays_Per_week <= 7    
                                                         AND TodayPH = 0    
                                                         AND (HrsinMins - CompanyWorkHours) < 0 THEN HrsinMins    
                                                    ELSE 0    
                                                  END,'OT1' = CASE    
                                                                WHEN TodayPH = 1 THEN 0    
                                                                WHEN Wdays_Per_week != 7    
                                                                     AND Roster_Day = 'Sun' THEN 0    
                                                                WHEN Wdays_Per_week <= 7    
                                                                     AND TodayPH = 0    
                                                                     AND (HrsinMins - CompanyWorkHours) > 0 THEN (HrsinMins - CompanyWorkHours)    
                                                                ELSE 0    
                                                              END,'OT2' = CASE    
                                                                            WHEN Wdays_Per_week != 7    
                                        AND Roster_Day = 'Sun' THEN HrsinMins    
                                                                            WHEN Wdays_Per_week <= 7    
                                                                                 AND TodayPH = 1 THEN HrsinMins    
                                                ELSE 0    
                                                                          END,*,0 AS RecordFound    
        INTO   #RD1    
        FROM   (SELECT CompanyWorkHours=CASE    
                                          WHEN RosterType = 'NORMAL' THEN dbo.Converttominutes(dbo.Converttohours(Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin)))    
                                          WHEN RosterType = 'FLEXIBLE' THEN (FlexibleWorkingHr - BreakTimeNHInMin)    
                                          ELSE 0    
                                        END,HoursWorked HrsinMins,*    
                FROM   (SELECT Wdays_per_Week,ID,Emp_ID Emp_Code,Emp_Name,Roster_ID,Roster_Name,Roster_Date TSDate,LEFT(Datename(dw, CONVERT(DATETIME, Roster_Date, 103)), 3) Roster_Day,TimeStart,TimeEnd,CoTimeStart,CoTimeEnd,FirstIn,LastOut,InShortTime,OutShortTime,HoursWorked = CASE    
                                                                                                                                                                                                                                                               
  
                           WHEN RosterType = 'NORMAL'    
                                                                                                                                                                                                                                                               
  
                                AND FirstIn IS NOT NULL    
                                                                                                                                                                                                                                                               
  
                                AND LastOut IS NOT NULL    
                                                                                                                                                                                                                                                               
  
                                AND @ConsEarlyInBy = 0    
                                                                                                                                                                                                                                                               
  
                                AND (FirstIn BETWEEN TimeStart AND TimeLateInBy)    
                                                                                                                                                                                                                                                               
  
                                AND (LastOut BETWEEN TimeEarlyOutBy AND CoTimeend) THEN (Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin + BreakTimeOTInMin))    
                                                                                                                                                                                                                                                               
  
                           WHEN RosterType = 'NORMAL'    
                                                                                                                                                                                                                                                               
  
                                AND FirstIn IS NOT NULL    
                                                                                                                                                      
                                AND LastOut IS NOT NULL    
                                                                                                                                              AND @ConsEarlyInBy = 1    
                                                                                                                                                                                                                                                               
  
                                AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))    
                                                                                                                                                                                                                                                               
  
                           WHEN RosterType = 'NORMAL'    
                                                                                                                                                                                                                                                               
  
                                AND FirstIn IS NOT NULL    
                                                                                                                                                                                                                                                               
  
                                AND LastOut IS NOT NULL    
                                                                                                                                                                                                                                                               
  
                                AND @ConsEarlyInBy = 0    
                                                                                                                                                                                                                                                               
  
                                AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, CoTimeStart, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))    
                                                                                                                                                                                                                                                               
  
                           WHEN RosterType='FLEXIBLE' Then (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))    
                                                                                                                                                                                                                                                               
  
                           ELSE 0    
                                                                                                                                                                                                                                                               
  
                         END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Sub_Project_Name,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,TimeLateInBy,TimeEarlyOutBy,TimeBreakTimeNHAfter,TimeBreakTimeOTAfter,BreakTimeNHInMin,BreakTimeOTInMin,RosterType,FlexibleWorkinghr,PullWorkTimein,Remarks=CASE    
                                                                                                                            
                                                          WHEN InRemarks IS NULL    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                            AND OutRemarks IS NULL THEN ''    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                       WHEN InRemarks IS NOT NULL    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                            AND OutRemarks IS NULL THEN InRemarks    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                       WHEN InRemarks IS NULL    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                            AND OutRemarks IS NOT NULL THEN OutRemarks    
                                                                                                                                              
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                       WHEN InRemarks IS NOT NULL    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                            AND OutRemarks IS NOT NULL THEN InRemarks    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                     END    
                        FROM   (SELECT BreakTimeNHInMin = CASE    
                                                            WHEN RosterType = 'FLEXIBLE' THEN BreakTimeNH    
                                                            WHEN RosterType = 'NORMAL'    
                                                                 AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeNHAfter, 103) + ' ' + BreakTimeNHhr), 103) THEN BreakTimeNH    
                                                            ELSE 0    
                                                          END,BreakTimeOTInMin = CASE    
                                                                                   WHEN RosterType = 'FLEXIBLE' THEN BreakTimeOT    
                                                                                   WHEN RosterType = 'NORMAL'    
                                                                                        AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeOTAfter, 103) + ' ' + BreakTimeOThr), 103) THEN BreakTimeOT    
                                                                                   ELSE 0    
                                                                                 END,CONVERT(CHAR(5), CONVERT (DATETIME, FirstIn, 105), 108) InShortTime,CONVERT(CHAR(5), CONVERT (DATETIME, LastOut, 105), 108) OutShortTime,*    
                                FROM   (SELECT CoTimeEnd = CASE    
                                                             WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + OutTime), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(
  
 VARCHAR, TimeEnd, 103) + ' ' + OutTime), 103)    
                                                             ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + OutTime), 103)    
                END,FirstIn=CASE    
                                                                         WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
                                                                                                          FROM   #ActLogsTemp AL    
                                                                                                          WHERE  AL.SoftDelete = @softdelete    
                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID    
                                                                                                             AND AL.UserID = R.Time_Card_No    
                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
                                                                                                             AND Upper(AL.EventID) = 'IN'    
                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)  
                                                                         WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
                                                                                                            FROM   #ActLogsTemp AL    
                                                                                                            WHERE  AL.SoftDelete = @softdelete    
                                                                                                               AND AL.TerminalSN = R.Sub_Project_ID    
                                                                                                               AND AL.UserID = R.Time_Card_No    
                                                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))    
                                                                                                               AND Upper(AL.EventID) = 'IN'    
                                                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)    
                                                                         ELSE NULL    
                                                                       END,LastOut= CASE WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
                                                                            FROM   #ActLogsTemp AL    
                                                                            WHERE  AL.SoftDelete = @softdelete    
                                                                               AND AL.TerminalSN = R.Sub_Project_ID    
                                                                               AND AL.UserID = R.Time_Card_No    
                                                                               AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
                                                                               AND Upper(AL.EventID) = 'OUT'    
                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC)    
                   WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)    
                                                                            FROM   #ActLogsTemp AL    
                                        WHERE  AL.SoftDelete = @softdelete    
                                                                               AND AL.TerminalSN = R.Sub_Project_ID    
                                                                               AND AL.UserID = R.Time_Card_No    
                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))    
                                                                               AND Upper(AL.EventID) = 'OUT'    
                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) Else Null END,(SELECT TOP 1 AL.Remarks    
                                                                                                                                          FROM   #ActLogsTemp AL    
                                                                                                                                          WHERE  AL.SoftDelete = @softdelete    
                                                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID    
                                                                                                                                             AND AL.UserID = R.Time_Card_No    
                                                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
                                                                                                                                             AND Upper(AL.EventID) = 'IN'    
                                                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC) InRemarks,(SELECT TOP 1 AL.Remarks    
                                                                                                                                                                                                         FROM   #ActLogsTemp AL    
                                                                                                                                                                                                         WHERE  AL.SoftDelete = @softdelete    
                                                                                                                                                                                                            AND AL.TerminalSN = R.Sub_Project_ID    
                                                                                                                                                                                                            AND AL.UserID = R.Time_Card_No    
                                                                                                                                                                                                            AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))    
                                                                                                                                                                                                            AND Upper(AL.EventID) = 'OUT'    
                                                                                                                                                                                                         ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) OutRemarks,*    
                                        FROM   (SELECT ID,Emp_ID,Emp_Name,Roster_ID,Roster_Name,Roster_Date,TimeStart,TimeEnd = CASE    
                                                                                                                                  WHEN TimeEnd IS NULL THEN Dateadd(MINUTE, 1410, TimeStart)    
                                                                                                                                  ELSE TimeEnd    
                                                                                                                                END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,Sub_Project_Name,CoTimeStart,Wdays_per_Week,TimeLateInBy,TimeEarlyOutBy = CASE    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                           WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + 
EarlyOutBy), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + EarlyOutBy), 103)    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                           ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + EarlyOutBy), 103)    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                         END,TimeBreakTimeNHAfter = CASE    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                      WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, 
'01/01/2001', 103) + ' ' + BreakTimeNHHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeNHHr), 103)    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                      ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, 
TimeStart, 103) + ' ' + BreakTimeNHHr), 103)    
                                                                     
     END,TimeBreakTimeOTAfter = CASE    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                 WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + BreakTimeOTHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeOTHr), 103)    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                                 ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + BreakTimeOTHr), 103)    
                                                                                                                                                                                                                                                               
  
                                                                                                                                                                                                                                               END,RosterType,FlexibleWorkinghr,PullWorkTimein    
                                                FROM   (SELECT EY.Wdays_per_Week,Isnull(EY.emp_name, '') + ' ' + Isnull(EY.emp_lname, '') Emp_Name,RD.Roster_ID,RO.Roster_Name,CONVERT(VARCHAR, RD.Roster_Date, 103) Roster_Date,TimeStart = CONVERT(DATETIME, 
  
CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyInBy),TimeLateInBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.LateInBy),TimeEarlyOutBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyOutBy),CoTimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.InTime),Dateadd(MINUTE, -30, CONVERT(DATETIME, (SELECT TOP 1 CONVERT(VARCHAR, RDD.Roster_Date, 101) + ' ' + RDD.EarlyInBy FROM RosterDETail RDD WHERE CONVERT(DATETIME, RDD.Roster_Date, 103) > CONVERT(DATETIME, RD.Roster_Date, 103) ORDER BY RDD.Roster_Date ASC ), 101)) TimeEnd,RD.ID,TodayPH = dbo.Isholiday(@compid, RD.Roster_Date),TomorrowPH = dbo.Isholiday(@compid, RD.Roster_Date + 1),ER.Emp_ID,EY.Time_Card_No,    
                                                               EP.Sub_Project_ID SubProjectID,    
                                                                       SP.Sub_Project_ID Sub_Project_ID,    
                                                                       RD.Intime,RD.Outtime,RD.EarlyInBy,RD.LateInBy,RD.EarlyOutBy,RD.LateOutBy,RD.ClockInBefore,RD.ClockInAfter,RD.ClockOutBefore,RD.ClockOutAfter,RD.BreakTimeNHHr,RD.BreakTimeOThr,RD.BreakTimeNH,RD.BreakTimeOT,RD.NightShift,SP.Sub_Project_Name,RD.RosterType,RD.FlexibleWorkinghr,RD.PullWorkTimein    
                                                        FROM   RosterDetail RD    
                                                               INNER JOIN (SELECT DISTINCT Roster_ID,Emp_ID    
                                                                           FROM   EmployeeAssignedToRoster) ER ON RD.Roster_ID = ER.Roster_ID    
                                                               INNER JOIN Employee EY ON ER.Emp_ID = EY.Emp_Code    
                                                               INNER JOIN (  
--                   SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID    
--                                                                           FROM   ApprovedTimesheet A    
--                                                                                  INNER JOIN SubProject S ON A.Sub_Project_ID = S.Sub_Project_ID    
--                                                                                  INNER JOIN Employee E ON A.Time_Card_No = E.time_card_no    
--                                                                           WHERE  A.SoftDelete = 0    
--                                                                           UNION    
--                                                                           SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID    
--                                                                           FROM   Actatek_Logs A    
--                                                                                  INNER JOIN SubProject S ON A.TerminalSn = S.Sub_Project_ID    
--                                                                                  INNER JOIN Employee E ON A.UserID = E.time_card_no    
--                                                                           WHERE  A.SoftDelete = 0    
--                                                                           UNION    
                                                                           SELECT DISTINCT Sub_Project_ID,Emp_ID --,EntryDate   
                                                                           FROM   ##EmployeeAssignedToProject)  
                                                                          EP ON EP.Emp_ID = EY.Emp_Code --And EP.EntryDate=RD.Roster_Date  
                                                               INNER JOIN #SubProject SP ON EP.Sub_Project_ID = SP.ID    
                                                               INNER JOIN Roster RO ON RD.Roster_ID = RO.ID    
                                                        --Inner Join Actatek_Logs AL                                            
                                                        --On SP.Sub_Project_ID = AL.TerminalSN And  convert(varchar,RD.Roster_Date,103) = convert(Varchar,convert(datetime,AL.TimeEntry,103),103)                                            
                                                        WHERE  (RD.Roster_Date BETWEEN @startdate AND @enddate)    
                                                           AND EY.Company_ID = @compid) DE) R) E) E) E) E --Where (E.FirstIn is not null Or E.LastOut is not null)                                            
        ORDER  BY E.Emp_Code,E.TSDate,E.SubProjectID    
    
  
  
        IF Rtrim(@empid) != '-1'    
            BEGIN    
                SELECT @whereemp = 'Where Emp_Code Not In (' + @empid + ')'    
    
                SELECT @select = 'Delete From #RD1 ' + @whereemp    
    
                EXEC (@select)    
            END    
    
        IF Rtrim(@subprojid) != '-1'    
            BEGIN    
                SELECT @whereproj = 'Where SubProjectID Not In (' + @subprojid + ')'    
    
                SELECT @select = 'Delete From #RD1 ' + @whereproj    
    
                EXEC (@select)    
            END    
    
        IF Rtrim(@isEmpty) = 'Yes'    
            BEGIN    
                SELECT @select = 'Delete From #RD1 Where InShortTime is not null Or OutShortTime is not null'    
    
                EXEC (@select)    
    END    
    
        DECLARE @ROWID1          INT,    
                @Time_Card_No1   VARCHAR(10),    
                @Sub_Project_ID1 VARCHAR(20),    
                @Roster_ID1      INT,    
                @TSDate1         VARCHAR(10),    
                @LastOut1        DATETIME,    
                @UDate1          DATETIME    
        DECLARE TempCurs CURSOR FOR    
            SELECT ROWID,Time_Card_No,Sub_Project_ID,Roster_ID,TSDate    
            FROM   #RD1    
    
  
        OPEN TempCurs    
  
        FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No1, @Sub_Project_ID1, @Roster_ID1, @TSDate1    
    
        WHILE @@FETCH_STATUS = 0    
            BEGIN    
                SELECT @UDate1 = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)    
                                 FROM   Actatek_Logs    
                                 WHERE  Upper(TERMINALSN) = @Sub_Project_ID1    
                                    AND EventID LIKE '%IN%'    
                                    AND CONVERT(CHAR(10), TimeEntry, 108) = @TSDate1    
                                    AND SoftDelete = @softdelete    
                                    AND UserID = @Time_Card_No1    
                                    AND Roster_ID = @Roster_ID1    
                                 ORDER  BY CONVERT(DATETIME, TimeEntry, 103) ASC)    
  
                IF Len(Isnull(@UDate1, 0)) > 1    
                    BEGIN    
                        UPDATE #RD1    
                        SET    FirstIn = @UDate1    
                        WHERE  ROWID = @ROWID1    
                           AND FirstIn IS NOT NULL   And @UDate1 != '1900-01-01 00:00:00.000'  
                    END    
    
                SELECT @LastOut1 = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)    
                                   FROM   Actatek_Logs    
                                   WHERE  Upper(TERMINALSN) = @Sub_Project_ID1    
                                      AND EventID LIKE '%OUT%'    
                                      AND SoftDelete = @softdelete    
                                      AND UserID = @Time_Card_No1    
                                      AND Roster_ID = @Roster_ID1    
                                   ORDER  BY CONVERT(DATETIME, TimeEntry, 103) DESC)    
    
                -- IF len(isnull(@LastOut1,0)) > 1                                  
                -- Begin                                  
                --  Update #RD1 Set LastOut= @LastOut1 Where ROWID = @ROWID1  And LastOut is not null                                   
                -- End                                  
                UPDATE #RD1    
                SET    InShortTime = LEFT(CONVERT(CHAR(10), FirstIn, 108), 5)    
                WHERE  ROWID = @ROWID1    
                   AND FirstIn IS NOT NULL    
    
                UPDATE #RD1    
                SET    OutShortTime = LEFT(CONVERT(CHAR(10), LastOut, 108), 5)    
                WHERE  ROWID = @ROWID1    
                   AND LastOut IS NOT NULL    
    
                FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No1, @Sub_Project_ID1, @Roster_ID1, @TSDate1    
            END    
    
        CLOSE TempCurs    
    
        DEALLOCATE TempCurs    
    
        UPDATE #RD1    
        SET    OT1 = NH,    
               NH = 0    
        WHERE  PullWorkTimein = 1    
    
        UPDATE #RD1    
        SET    OT2 = NH,    
               NH = 0    
        WHERE  PullWorkTimein = 2    
    
        UPDATE #RD1    
        SET    NH = OT1,    
               OT1 = 0    
        WHERE  PullWorkTimein = 3    
    
        UPDATE #RD1    
        SET    OT2 = OT1,    
               OT1 = 0    
        WHERE  PullWorkTimein = 4    
    
        UPDATE #RD1    
        SET    NH = OT2,    
               OT2 = 0    
        WHERE  PullWorkTimein = 5    
    
        UPDATE #RD1    
        SET    OT1 = OT2,    
               OT2 = 0    
        WHERE  PullWorkTimein = 6    
    
        UPDATE #RD1    
        SET    NH = NH + OT1,    
               OT1 = 0    
        WHERE  PullWorkTimein = 7    
    
        UPDATE #RD1    
        SET    OT1 = NH + OT1,    
               NH = 0    
        WHERE  PullWorkTimein = 8    
    
        UPDATE #RD1    
        SET    OT2 = NH + OT1,    
               NH = 0,    
               OT1 = 0    
        WHERE  PullWorkTimein = 9    
    
        UPDATE #RD1    
        SET    OT1 = NH + OT2,    
               NH = 0,    
               OT2 = 0    
        WHERE  PullWorkTimein = 10    
    
        UPDATE #RD1    
        SET    OT2 = NH + OT2,    
               NH = 0    
        WHERE  PullWorkTimein = 11    
    
        UPDATE #RD1    
        SET    NH = NH + OT2,    
               OT2 = 0    
        WHERE  PullWorkTimein = 12    
    
        UPDATE #RD1    
        SET    NH = OT1 + OT2,    
               OT1 = 0,    
               OT2 = 0    
        WHERE  PullWorkTimein = 13    
    
        UPDATE #RD1    
        SET    OT1 = OT1 + OT2,    
               OT2 = 0    
        WHERE  PullWorkTimein = 14    
    
        UPDATE #RD1    
        SET    OT2 = OT1 + OT2,    
               OT1 = 0    
        WHERE  PullWorkTimein = 15    
    
        UPDATE #RD1    
        SET    NH = NH + OT1 + OT2,    
               OT1 = 0,    
               OT2 = 0    
        WHERE  PullWorkTimein = 16    
    
        UPDATE #RD1    
        SET    OT1 = NH + OT1 + OT2,    
               NH = 0,    
               OT2 = 0    
        WHERE  PullWorkTimein = 17    
    
        UPDATE #RD1    
        SET    OT2 = NH + OT1 + OT2,    
               NH = 0,    
               OT1 = 0    
        WHERE  PullWorkTimein = 18    
    
        UPDATE #RD1    
        SET    HoursWorked = (NH + OT1 + OT2)    
        WHERE  PullWorkTimein > 0    
    
        IF (@sessid != -1)    
            BEGIN    
                SELECT RES.*,E.Email EmailSuper    
                FROM   (SELECT RecordLock = Isnull((SELECT TOP 1 ID    
                                                    FROM   ApprovedTimeSheet AT    
                                                    WHERE  AT.SoftDelete = @softdelete    
                                                       AND AT.Roster_ID = R.Roster_ID    
                                                       AND AT.Time_Card_No = R.Time_Card_No    
                                                       AND AT.Sub_Project_ID = R.Sub_Project_ID    
                                                       AND AT.TimeEntryStart = R.FirstIn    
                                                       AND AT.TimeEntryEnd = R.LastOut), 0),dbo.Converttohours(R.HoursWorked) HoursWorked,    
              dbo.Converttohours(R.NH) NH,dbo.Converttohours(R.OT1) OT1,dbo.Converttohours(R.OT2) OT2,    
              R.CompanyWorkHours,R.HrsinMins,R.Wdays_per_Week,R.ID,R.Emp_Code,R.Emp_Name,R.Roster_ID,    
              R.Roster_Name,R.TSDate,R.Roster_Day,R.TimeStart,R.TimeEnd,R.CoTimeStart,R.CoTimeEnd,    
              R.FirstIn,R.LastOut,R.InShortTime,R.OutShortTime,R.TodayPH,R.TomorrowPH,R.Time_Card_No,    
              R.Sub_Project_ID,R.SubProjectID,R.Sub_Project_Name,R.Intime,R.Outtime,R.EarlyInBy,    
              R.LateInBy,R.EarlyOutBy,R.LateOutBy,R.ClockInBefore,R.ClockInAfter,R.ClockOutBefore,    
              R.ClockOutAfter,R.BreakTimeNHHr,R.BreakTimeOThr,R.BreakTimeNH,R.BreakTimeOT,R.NightShift,    
              R.TimeLateInBy,R.TimeEarlyOutBy,R.TimeBreakTimeNHAfter,R.TimeBreakTimeOTAfter,    
              R.BreakTimeNHInMin,R.BreakTimeOTInMin,R.RosterType,R.FlexibleWorkinghr,    
              R.PullWorkTimein,R.HoursWorked HoursWorkedMin,R.NH NHMin,R.OT1 OT1Min,    
              R.OT2 OT2Min,R.Remarks,TSSup =    
                      CASE    
                     WHEN (E.TimeSupervisor IS NULL    
                         OR E.TimeSupervisor = 0) THEN    
                     S.TimeSupervisor    
                     ELSE E.TimeSupervisor    
                      END,E.Email MyEmail    
                        FROM   #RD1 R    
                               INNER JOIN Employee E ON R.Emp_Code = E.Emp_Code    
                               INNER JOIN SubProject S ON R.SubProjectID = S.ID) RES    
                       LEFT OUTER JOIN Employee E ON RES.TSSup = E.Emp_Code    
                ORDER  BY RES.Emp_Name    
            END    
    
        IF (@REPID = 99) --SUMMARY PROJECT Then Employe Wise              
            BEGIN    
                SELECT RD.Time_Card_No,E.Emp_name [Full_Name],Sub_Project_Name,dbo.Converttohours(RD.HoursWorked) [Hours_Worked],dbo.Converttohours(RD.NH) NH,dbo.Converttohours(RD.OT1) OT1,dbo.Converttohours(RD.OT2) OT2,(E.Hourly_Rate) [Hourly_Rate],((E.Hourly_Rate * E.OT1Rate)) [OT1_Rate],((E.Hourly_Rate * E.OT2Rate)) [OT2_Rate],((E.Hourly_Rate) * dbo.Converttohours(RD.NH)) [Tot_NH],(((E.Hourly_Rate * E.OT1Rate)) * dbo.Converttohours(RD.OT1)) [TotOT1],(((E.Hourly_Rate * E.OT2Rate)) * dbo.Converttohours(RD.OT2)) [TotOT2],RD.HoursWorked [HoursWorked In Min],RD.NH [NH in Min],RD.OT1 [OT1 in Min],RD.OT2 [OT2 in Min],(E.Hourly_Rate / 60) [Hourly Rate in Min],((E.Hourly_Rate * E.OT1Rate) / 60) [OT1Rate in Min],((E.Hourly_Rate * E.OT2Rate) / 60) [OT2Rate in Min],((E.Hourly_Rate / 60) * RD.NH) [TotNH in Min],(((E.Hourly_Rate * E.OT1Rate) / 60) * RD.OT1) [Tot OT1 in Min],(((E.Hourly_Rate * E.OT2Rate) / 60) * RD.OT2) [Tot OT2 in Min],Emp_Code    
                FROM   (SELECT RD.Time_Card_No,SUM(HoursWorked) HoursWorked,CAST(SUM(NH) AS VARCHAR) NH,SUM(OT1) OT1,SUM(OT2) OT2,RD.Sub_Project_Name    
                        FROM   #RD1 RD    
                        GROUP  BY RD.Sub_Project_Name,RD.Time_Card_No) RD    
                       INNER JOIN Employee E ON RD.Time_Card_No = E.Time_Card_No    
                ORDER  BY Emp_Name    
            END    
    
        IF (@REPID = 100)    
            BEGIN    
                SELECT Time_Card_No,Emp_Name Full_Name,Sub_Project_Name,TSDate [Date],InShortTime [In_Time],OutShortTime [Out_Time],dbo.Converttohours(HoursWorked) [Hours_Worked],dbo.Converttohours(NH) NH,dbo.Converttohours(OT1) OT1,dbo.Converttohours(OT2) OT2,Emp_Code,Remarks    
                FROM   #RD1    
                ORDER  BY Emp_Name,TSDATE 
				DROP TABLE #RD1   
            END    

					END
 
    
				    
				DROP TABLE ##EmployeeAssignedToProject  
				DROP TABLE #ActLogsTemp    
    END    
  

GO


--sp_Workers_Summary_Print  '01/10/2010', 3  , -1  
CREATE PROC [dbo].[sp_Workers_Summary_Print]      
(    
  @DateEntry VARCHAR(50),  
  @compid int,  
  @projectid int    
)  
AS  
BEGIN  
   
  
 Select el.Emp_ID Into #LeaveTaken From Emp_Leaves_detail ed    
 Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id    
 Inner JOin Employee em on el.emp_id=em.emp_code    
 Inner JOin leave_types lt on el.leave_type=lt.id    
 Inner JOin EmployeeAssignedToWorkersList ew on el.emp_id=ew.emp_id    
 Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)      
 And el.status ='Approved'    
 And Company_ID = @compid     
    
 Select * Into #TempTable From    
 (    
  Select SP.Sub_Project_ID, SP.Sub_Project_Name,Em.Time_card_No,(isnull(Em.Emp_Name,'')+' ' +isnull(Em.Emp_LName,'')) FullName,(isnull(TS.Emp_Name,'')+' ' + isnull(TS.Emp_LName,'')) Supervisor,Tr.Trade,SP.ID,EM.ic_pp_number From MultiProjectAssigned MP Inner Join SubProject SP  
  On MP.SubProjectID = SP.ID Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Left Outer Join Employee TS On SP.TimeSupervisor= TS.Emp_Code Left Outer Join Trade Tr On Em.Trade_ID=Tr.ID  Where Em.Company_ID= @compid And Convert(Datetime,EntryDate,103) = 
  
  Convert(datetime,@DateEntry,103)        
 Union All  
  Select '-' Sub_Project_ID,'Unassigned Project' Sub_Project_Name,D.Time_Card_No,D.FullName,(isnull(TS.emp_name,'') + ' ' + isnull(TS.emp_lname,'')) Supervisor,Tr.Trade,10000 ID,D.ic_pp_number From (Select Emp_Code, Time_Card_No, ic_pp_number, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) FullName From Employee Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID
 From EmployeeAssignedToWorkersList))   
  as D Left Outer Join #LeaveTaken lt  On D.Emp_code = lt.Emp_ID     
  Left Outer Join Employee TS On D.Emp_Code= TS.Emp_Code    
  Left Outer Join Trade Tr On TS.Trade_ID=Tr.ID    
 ) D Order By Sub_Project_Name,FullName  
  
   
 IF (@projectid > 0)  
 BEGIN  
  DELETE FROM #TempTable WHERE ID != @projectid  
  
  Select '' Time_Card_No, '' FullName, '' PermitNumber, '' [IN Time], '' [Sign IN], '' [OUT Time], '' [Sign OUT], '' [Normal Hrs], '' [Overtime Hrs], (Select Sub_Project_Name From SubProject Where ID = @projectid) + ' - ' + Convert(varchar(50),Convert(Datetime,@DateEntry,101),107) Remarks  
  Union All  
  Select Time_Card_No, FullName, IC_PP_NUMBER PermitNumber,'' [IN Time],'' [Sign IN], '' [OUT Time], '' [Sign OUT], '' [Normal Hrs], '' [Overtime Hrs], '' Remarks  From #TempTable  
 END  
  
 IF (@projectid = 0)  
 BEGIN  
  Select Sub_Project_ID, Sub_Project_Name, Time_card_No, FullName, Trade From #TempTable T   
 END  
 IF (@projectid = -1)  
 BEGIN  
  DECLARE @ROWCOUNT INT  
  SET @ROWCOUNT = 0  
  DECLARE @ID INT, @TIME_CARD_NO VARCHAR(20)  
  DECLARE @IDOLD INT, @TIME_CARD_NOOLD VARCHAR(20)  
  
  DECLARE @TEMPTAB TABLE   
  (    
   ID INT,    
   TIME_CARD_NO VARCHAR(8000),  
   COUNTROW INT  
  )  
  
--  Select T.ID, T.Time_card_No  From #TempTable T   
--  Order By ID, Supervisor, Time_Card_No  
  
   
  Set @IDOLD    = 0  
  Set @TIME_CARD_NOOLD = ''  
   
  DECLARE curse CURSOR FOR  SELECT ID, Time_card_No  FROM   #TempTable   
    
  OPEN curse    
  FETCH NEXT FROM curse INTO @ID, @TIME_CARD_NO  
  WHILE @@FETCH_STATUS = 0    
  BEGIN    
   IF (@ID != @IDOLD And @TIME_CARD_NO != @TIME_CARD_NOOLD)  
   BEGIN  
    Set @ROWCOUNT = 1 
    Insert Into @TEMPTAB Select @ID, @TIME_CARD_NO, @ROWCOUNT+1  
   END  
   ELSE  
   BEGIN  
    Set @ROWCOUNT = @ROWCOUNT + 1  
    UPDATE @TEMPTAB SET Time_Card_No=Time_Card_No+','+@TIME_CARD_NO,COUNTROW=@ROWCOUNT WHERE ID = @IDOLD  
   END  
   Set @IDOLD    = @ID  
   Set @TIME_CARD_NOOLD = @TIME_CARD_NO  
   FETCH NEXT FROM curse INTO @ID, @TIME_CARD_NO  
  END    
  
  CLOSE curse    
  
  DEALLOCATE curse    
  
  SELECT isnull(SP.Sub_Project_Name,'Unassigned Project') Sub_Project_Name,T.Time_Card_No, isnull(EM.Time_Card_No,'') Supervisor,  
  COUNTROW FROM @TEMPTAB T  
  Left Outer Join SubProject SP On T.ID = SP.ID   
  Left Outer Join Employee EM On SP.timesupervisor = EM.Emp_Code  
  Order By Sub_Project_Name  
  
    
 END  
  
 Drop Table #TempTable  
 Drop Table #LeaveTaken    
END       
GO

--sp_Workers_Summary  '01/09/2010', 2
CREATE PROC [dbo].[sp_Workers_Summary]  
(
	@DateEntry VARCHAR(50),
	@compid int
)
AS   
BEGIN
	Declare @totlocassigned   as int
	Declare @totforassigned   as int
	Declare @totlocunassigned as int
	Declare @totforunassigned as int

	Declare @sumlocleave	as int
	Declare @sumforleave	as int

	Select * Into #LeaveType From Leave_Types lt
	Where id IN
	(
		Select Distinct lt.id ID From Emp_Leaves_detail ed 
		Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id 
		Inner JOin Employee em on el.emp_id=em.emp_code 
		Inner JOin leave_types lt on el.leave_type=lt.id 
		Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
		And Company_ID = @compid 
	)

	Select el.Emp_ID Into #LeaveTaken From Emp_Leaves_detail ed
	Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id
	Inner JOin Employee em on el.emp_id=em.emp_code
	Inner JOin leave_types lt on el.leave_type=lt.id
	Inner JOin EmployeeAssignedToWorkersList ew on el.emp_id=ew.emp_id
	Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
	And el.status ='Approved'
	And Company_ID = @compid 


	Select * From (Select Emp_Code, Time_Card_No, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) FullName From Employee Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)) as D Left Outer Join #LeaveTaken lt  On D.Emp_code = lt.Emp_ID Order By FullName

	Select SP.ID,SP.Sub_Project_Name From SubProject SP Inner Join Project PR On SP.Parent_Project_ID = PR.ID Left Outer Join Location LO On PR.Location_ID = LO.ID Where (LO.Company_ID = @compid OR LO.isShared='YES') And Active = 1
	Select @totlocassigned=Count(Emp_ID) From MultiProjectAssigned MP Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)  And Company_ID=@compid And (Em.emp_type='SC' Or Em.emp_type='SPR')
	Select @totforassigned=Count(Emp_ID) From MultiProjectAssigned MP Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)  And Company_ID=@compid And (Em.emp_type!='SC' And Em.emp_type!='SPR')
	Select @totlocunassigned=Count(Emp_Code)  From Employee Em Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)  And (Em.emp_type='SC' Or Em.emp_type='SPR')
	Select @totforunassigned=Count(Emp_Code)  From Employee Em Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)  And (Em.emp_type!='SC' And Em.emp_type!='SPR')
	--Select @totlocassigned=Count(Emp_ID) From MultiProjectAssigned MP Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)  And Company_ID=@compid
	--Select @totlocunassigned=Count(Emp_Code)  From Employee Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)

	Select @sumlocleave=sum(isnull(Cnt1,0)),@sumforleave = sum(isnull(Cnt2,0)) From #LeaveType lt
	Left Outer Join (
					Select lt.id ID, Count(Emp_ID) Cnt1  From Emp_Leaves_detail ed
					Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id
					Inner JOin Employee em on el.emp_id=em.emp_code
					Inner JOin leave_types lt on el.leave_type=lt.id
					Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
					And Company_ID = @compid 
					And (em.emp_type='SC' Or em.emp_type='SPR') 
					And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
					And el.status ='Approved'
					Group By lt.id
					) R1 On lt.id = R1.ID
	Left Outer Join (
					Select lt.id ID, Count(Emp_ID) Cnt2  From Emp_Leaves_detail ed 
					Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id 
					Inner JOin Employee em on el.emp_id=em.emp_code 
					Inner JOin leave_types lt on el.leave_type=lt.id 
					Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
					And Company_ID = @compid 
					And (Em.emp_type!='SC' And Em.emp_type!='SPR') 
					And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
					And el.status ='Approved'
					Group By lt.id
					) R2 On lt.id = R2.ID


	Select * Into #Temp From
	(
		Select 'Assigned' TType, @totlocassigned Locals, @totforassigned Foreigners, (@totlocassigned+@totforassigned) Total
		Union All
		Select 'UnAssigned' TType, @totlocunassigned Locals, @totforunassigned Foreigners, (@totlocunassigned+@totforunassigned) Total
		Union All
		Select 'Total' TType, (@totlocassigned+@totlocunassigned) Locals, (@totforassigned+@totforunassigned) Foreigners, (@totlocassigned+@totforassigned)+(@totlocunassigned+@totforunassigned) Total
		Union All
		Select * From
		(	
			Select lt.type [TType],isnull(Cnt1,0) [Local],isnull(Cnt2,0) [Foreign],(isnull(Cnt1,0)+isnull(Cnt2,0)) Total  From #LeaveType lt
			Left Outer Join (
							Select lt.id ID, Count(Emp_ID) Cnt1  From Emp_Leaves_detail ed
							Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id
							Inner JOin Employee em on el.emp_id=em.emp_code
							Inner JOin leave_types lt on el.leave_type=lt.id
							Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
							And Company_ID = @compid 
							And (em.emp_type='SC' Or em.emp_type='SPR') 
							And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
							And el.status ='Approved'
							Group By lt.id
							) R1 On lt.id = R1.ID
			Left Outer Join (
							Select lt.id ID, Count(Emp_ID) Cnt2  From Emp_Leaves_detail ed 
							Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id 
							Inner JOin Employee em on el.emp_id=em.emp_code 
							Inner JOin leave_types lt on el.leave_type=lt.id 
							Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
							And Company_ID = @compid 
							And (Em.emp_type!='SC' And Em.emp_type!='SPR') 
							And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
							And el.status ='Approved'
							Group By lt.id
							) R2 On lt.id = R2.ID
		) G1
		Union All
		Select 'Total' [TType], @sumlocleave [Local], @sumforleave [Foreign], (@sumlocleave+@sumforleave) Total
		Union All
		Select 'Available' [TType], (@totlocunassigned-@sumlocleave) [Local], (@totforunassigned-@sumforleave) [Foreign], ((@totlocunassigned+@totforunassigned)-(@sumlocleave+@sumforleave)) Total
	)  D

	Delete From #Temp WHere (Total is null  Or Total = 0) And (TType != 'Assigned' And TType!='UnAssigned')
	Select * From #Temp

	Drop Table #Temp
	Drop Table #LeaveType
	Drop Table #LeaveTaken
END   
GO


CREATE PROCEDURE [dbo].[sp_bulkdedtranspose]    
			(                      
				@compid		INT,          
				@monthid	INT ,			    
				@year		INT  
			)                      
			AS                       
       
			DECLARE @month		INT
			SELECT  @month = A.Month FROM PayrollMonthlyDetail A WHERE A.ROWID=@monthid

 
			SELECT * Into #Employee 
				FROM Employee 
				WHERE Company_ID=@compid 
				AND  termination_date IS NULL OR ((datepart(year,termination_date))>=@year AND (datepart(month,termination_date))>=@month)
				OR ((datepart(year,termination_date))>@year)	OR ((datepart(year,termination_date))=@year AND (datepart(month,termination_date))=@month)
     
          
						--Select * From Emp_Additions Where Emp_Code=89          
						--Update Emp_Additions Set isBulkAdd = 1 Where Emp_Code=89          
						--DECLARE @compid AS INT          
						--DECLARE @monthid AS INT          
						          
						--SET @compid = 2          
						--SET @monthid = 41          
						          
						--          
						--Select * From           
						--(          
						-- Select Emp_Code, ID, 0 AS Amount From Employee E          
						-- Cross Join (Select * From Additions_Types Where Company_ID=2) D          
						-- Where E.Company_ID=2          
						--) F          
						--          
						DECLARE @addid AS INT          
						DECLARE @addtext AS VARCHAR(1000)          
						DECLARE @sql AS VARCHAR(3000)          
						          
						SET @addtext=''          
						          
						DECLARE cur CURSOR FOR          
							SELECT TOP 20 ID          
							FROM   Deductions_Types          
							WHERE  ((Company_ID = @compid)OR (upper(isShared)='YES' AND Company_ID!=-1 ))
							ORDER  BY [desc]          
						          
						OPEN cur          
						          
						FETCH NEXT FROM cur INTO @addid          
						          
						WHILE @@FETCH_STATUS <> -1          
							BEGIN          
								SET @addtext = @addtext + '[' + CAST(@addid AS VARCHAR) + '],'          
						          
								FETCH NEXT FROM cur INTO @addid          
							END          
						          
						CLOSE cur          
						          
						DEALLOCATE cur          
						          
						SET @sql = 'SELECT  Emp_Code,FullName,Time_Card_No, ' + Substring(@addtext, 0, Len(@addtext)) + ' FROM           
						   (          
							Select * From           
							 ( Select R.*,trx_amount  Amount From           
						(          
						 Select Emp_Code, (isnull(Emp_Name,'''') + '' ''+ isnull(Emp_LName,''''))  FullName ,Time_Card_No, ID From #Employee           
						 Cross Join (Select * From Deductions_Types Where (upper(isShared)=''YES'' Or Company_ID=' + CAST(@compid AS VARCHAR) + ')) D           
						) R Left Outer Join (select trx_type,Emp_Code,Sum(Trx_Amount) Trx_Amount From emp_deductions ea       
						Inner Join Deductions_Types at On ea.trx_type = at.id Where BulkDedInMonth = ' + CAST(@monthid AS VARCHAR) + ' Group By Trx_Type,Emp_Code)          
						 E On R.Emp_Code = E.Emp_Code And R.ID = E.Trx_Type          
						)F) p PIVOT(Sum (Amount) FOR ID IN(' + Substring(@addtext, 0, Len(@addtext)) + ')) AS pvt Order By FullName'          
						    
						EXECUTE(@sql)          						    
						Drop Table #Employee 
						
				GO


		CREATE PROCEDURE [dbo].[sp_bulkaddtranspose]  
					 (                        
					   @compid   INT,            
					   @monthid  INT ,  
					   @year  INT     
					 )                        
					 AS    
					   DECLARE @month  INT  
					   SELECT  @month = A.Month FROM PayrollMonthlyDetail A WHERE A.ROWID=@monthid  
					  
					     
					   SELECT * Into #Employee   
						FROM Employee   
						WHERE Company_ID=@compid   
						AND  termination_date IS NULL OR ((datepart(year,termination_date))>=@year AND (datepart(month,termination_date))>=@month)  
						OR ((datepart(year,termination_date))>@year) OR ((datepart(year,termination_date))=@year AND (datepart(month,termination_date))=@month)  
					  
					  
					              
					   --Select * From Emp_Additions Where Emp_Code=89            
					   --Update Emp_Additions Set isBulkAdd = 1 Where Emp_Code=89            
					   --DECLARE @compid AS INT            
					   --DECLARE @monthid AS INT            
					               
					   --SET @compid = 2            
					   --SET @monthid = 41            
					               
					   --            
					   --Select * From             
					   --(            
					   -- Select Emp_Code, ID, 0 AS Amount From Employee E            
					   -- Cross Join (Select * From Additions_Types Where Company_ID=2) D            
					   -- Where E.Company_ID=2            
					   --) F            
					   --            
					   DECLARE @addid AS INT            
					   DECLARE @addtext AS VARCHAR(1000)            
					   DECLARE @sql AS VARCHAR(3000)            
					               
					   SET @addtext=''            
					               
					   DECLARE cur CURSOR FOR            
						SELECT TOP 20 ID            
						FROM   Additions_Types            
						WHERE  upper(tax_payable)='NO'        
						ORDER  BY [desc]            
					               
					   OPEN cur            
					               
					   FETCH NEXT FROM cur INTO @addid      
					               
					   WHILE @@FETCH_STATUS <> -1            
						BEGIN            
						 SET @addtext = @addtext + '[' + CAST(@addid AS VARCHAR(100)) + '],'            
					               
						 FETCH NEXT FROM cur INTO @addid            
						END            
					               
					   CLOSE cur            
					               
					   DEALLOCATE cur            
					               
					   SET @sql = 'SELECT Emp_Code,FullName,Time_Card_No, ' + Substring(@addtext, 0, Len(@addtext)) + ' FROM             
						  (            
						Select * From             
						 ( Select R.*,trx_amount  Amount From             
					   (            
						Select Emp_Code, (isnull(Emp_Name,'''') + '' ''+ isnull(Emp_LName,''''))  FullName ,Time_Card_No, ID From #Employee             
						Cross Join (Select * From Additions_Types Where upper(tax_payable)=''NO'' And (isShared=''Yes'' Or Company_ID=' + CAST(@compid AS VARCHAR) + ')) D             
					   ) R Left Outer Join (select trx_type,Emp_Code,Sum(Trx_Amount) Trx_Amount From emp_additions ea         
					   Inner Join Additions_Types at On ea.trx_type = at.id Where upper(tax_payable)=''NO'' And BulkAddinMonth = ' + CAST(@monthid AS VARCHAR) + ' Group By Trx_Type,Emp_Code)            
						E On R.Emp_Code = E.Emp_Code And R.ID = E.Trx_Type)F) p PIVOT(Sum (Amount) FOR ID IN(' + Substring(@addtext, 0, Len(@addtext)) + ')) AS pvt Order By FullName'                         
					   EXECUTE(@sql)            
					   Drop Table #Employee 
			GO


CREATE PROC [dbo].[Sp_approvemypayroll] @company_id INT,  
                                     @month      INT,  
                                     @year       INT,  
                                     @UserID     INT,  
                                     @Status     VARCHAR(1)  
AS  
  DECLARE @ID AS INT  
  DECLARE @WorkFlowID AS INT  
  DECLARE @RowID AS INT  
  DECLARE @DATEINYEAR TABLE (  
      ROWID           INT,  
      Emp_Code        INT,  
      [Year]          INT,  
      [Month]         INT,  
      [MonthName]     VARCHAR(100),  
      PayStartDate    DATETIME,  
      PayEndDate      DATETIME,  
      PaySubStartDate DATETIME,  
      PaySubEndDate   DATETIME,  
      PayStartDay     INT,  
      PayEndDay       INT,  
      PaySubStartDay  INT,  
      PaySubEndDay    INT,  
      ISEOM           VARCHAR(3))  
    
   
  INSERT @DATEINYEAR  
         (ROWID,Emp_Code,[Year],[Month],[MonthName],PayStartDate,PayEndDate,PaySubStartDate,PaySubEndDate,PayStartDay,PayEndDay,PaySubStartDay,PaySubEndDay,ISEOM)  
  EXEC Sp_getpayrollmonth @month,0,0  
    
  --SELECT trx_id,emp_id,(SELECT Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') 'emp_name'    
  --FROM   employee    
  --WHERE  emp_code = de.emp_id) emp_name,(SELECT DeptName    
  --FROM   Department    
  --WHERE  company_id = @company_id    
  --AND id = (SELECT dept_id    
  --FROM   employee    
  --WHERE  emp_code = de.emp_id)) DeptName,    
  --CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,AdditionsWONH = CASE    
  --WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0    
  --ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))    
  --END,(CONVERT(NUMERIC(18, 2), total_additions)) Additions,CONVERT(NUMERIC(18, 2), total_deductions) Deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay,OT1Rate,OT2Rate,OT1_wh,OT2_wh,CONVERT(NUMERIC(18, 2), Ot1_e) Ot1_e,CONVERT(NUMERIC(18, 2), OT2_e) OT2_e,wdays,OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount,  
  --Isnull((SELECT Pay_supervisor FROM   employee WHERE  emp_code = de.emp_id), 0) Pay_supervisor,    
  --(SELECT Isnull(email, '') FROM   employee WHERE  emp_code = de.emp_id) email,    
  --CONVERT(NUMERIC(18, 2), NH_e) NH_e     
  --INTO   #EmployeeTemp    
  --FROM   prepare_payroll_detail de    
  --WHERE  emp_id IN (SELECT emp_code    
  --                FROM   employee    
  --                WHERE  company_id = @company_id)    
  -- AND [status] = @Status    
  -- AND trx_id IN (SELECT trx_id    
  --                FROM   prepare_payroll_hdr    
  --                WHERE  (start_period >= (SELECT PaySubStartDate    
  --                                         FROM   @DATEINYEAR)    
  --                        AND end_period <= (SELECT PaySubEndDate    
  --                                           FROM   @DATEINYEAR))    
  --                   AND YEAR(start_period) = @year)    
  --ORDER  BY emp_name    
    
SELECT pd.trx_id,pd.emp_id,REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '') emp_name,de.deptname,em.Pay_supervisor,em.password,em.email,em.email_payslip,  
CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,  
AdditionsWONH = CASE  
 WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0  
 ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))  
 END,  
CONVERT(NUMERIC(18, 2), NH_e) NH_e,  
CONVERT(NUMERIC(18, 2), pd.Ot1_e) Ot1_e,  
CONVERT(NUMERIC(18, 2), pd.OT2_e) OT2_e,  
(CONVERT(NUMERIC(18, 2), total_additions)) Additions,  
CONVERT(NUMERIC(18, 2), total_deductions) Deductions,  
CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay, Time_Card_No  
--,pd.OT1Rate,pd.OT2Rate,pd.OT1_wh,pd.OT2_wh,    
--wdays,pd.OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,    
--pd.empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount    
  INTO   #EmployeeTemp  
  FROM   prepare_payroll_hdr ph  
         INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id  
         INNER JOIN Employee em ON pd.emp_id = em.emp_code  
         LEFT OUTER JOIN Department de ON em.dept_id = de.id  
  WHERE  pd.status = @Status  
     AND (CONVERT(DATETIME, ph.start_period, 103) >= (SELECT PaySubStartDate  
                                                      FROM   @DATEINYEAR)  
          AND CONVERT(DATETIME, ph.end_period, 103) <= (SELECT PaySubEndDate  
                                                        FROM   @DATEINYEAR))  
     AND em.company_id = @company_id  And em.emp_code = @UserID
  ORDER  BY REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '')  
    
    
  SELECT *  
  FROM   #EmployeeTemp  
    
  DROP TABLE #EmployeeTemp  
GO


CREATE PROCEDURE [dbo].[Sp_get_giro_emp] @company_id INT,
                                        @year       INT,
                                        @month      INT,
                                        @bank       INT,
                                        @bankaccno  VARCHAR(150),
                                        @valuedate  INT,
                                        @emp_list   VARCHAR(3000)=NULL
AS
  SET NOCOUNT ON

  DECLARE @startdtsub DATETIME
  DECLARE @enddtsub DATETIME

  SELECT @startdtsub = CONVERT(DATETIME, PaySubStartDate, 103),@enddtsub = CONVERT(DATETIME, PaySubEndDate, 103)
  FROM   PayrollMonthlyDetail
  WHERE  ROWID = @month

    BEGIN
        SELECT d.emp_id,Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') emp_name,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.basic_pay))) payrate,d.total_additions total_additions,d.total_deductions total_deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.netpay))) netpay,d.pay_mode,e.giro_bank,e.giro_acc_name,e.giro_acct_number,e.giro_branch,e.dept_id
        INTO   #EmpTem
        FROM   prepare_payroll_hdr h,prepare_payroll_detail d,employee e
        WHERE  h.trx_id = d.trx_id
           AND d.emp_id = e.emp_code
           AND (h.start_period = @startdtsub
                AND h.end_period = @enddtsub)
           AND YEAR(start_period) = @year
           AND d.status = 'G'
           AND e.company_id = @company_id
    END

  IF (Len(@emp_list) > 0)
      BEGIN
          DECLARE @sql AS VARCHAR(4000)

          SET @sql = 'Delete From #EmpTem Where Emp_ID Not in(' + Substring(@emp_list, 1, Len(@emp_list) - 1) + ')'

          EXEC (@sql)
      END
  SELECT R.Emp_ID emp_id,E.Emp_Name,E.Payrate,E.Total_Additions,E.Total_Deductions,(E.Netpay * R.Percentage) / 100 NetPay,E.Giro_Bank,
	R.Giro_Acct_Number,E.giro_branch Branch_Number,value_date,Bank_AccountNo,Bank_Name,Account_Name,PayeeBankName,Percentage,Bank_ID,E.Netpay GrossPay,D.DeptName
  FROM   (SELECT R.Emp_ID,B1.Bank_Code Giro_Bank,giro_acct_number Giro_Acct_Number,Bank_Branch Branch_Number,@valuedate value_date,Bank_AccountNo,Bank_Name,R.Giro_Acc_Name Account_Name,B2.[Desc] PayeeBankName,R.Perc Percentage,G.Bank_ID
          FROM   (SELECT E.Emp_ID,E.Pay_Mode,B.[Desc] Bank_Name,giro_acc_name,Giro_Acct_Number,100 - Isnull(R.Perc, 0) Perc
                  FROM   #EmpTem E
                         LEFT OUTER JOIN (SELECT Emp_ID,SUM(Percentage) Perc
                                          FROM   EmployeeBankInfo
                                          GROUP  BY Emp_ID) R ON E.Emp_ID = R.Emp_ID
                         LEFT OUTER JOIN Bank B ON E.Giro_Bank = B.Bank_Code) R
                 INNER JOIN Girobanks G ON R.Pay_Mode = G.ID
                 LEFT OUTER JOIN Bank B1 ON R.Pay_Mode = G.Bank_ID
                 LEFT OUTER JOIN Bank B2 ON G.bank_id = B2.ID
) R
         INNER JOIN #EmpTem E ON R.Emp_ID = E.Emp_ID
         LEFT OUTER JOIN Department D ON E.dept_id = D.id
  WHERE  Bank_ID = @bank
     AND Bank_AccountNo = @bankaccno
Union
  SELECT R.Emp_ID emp_id,E.Emp_Name,E.Payrate,E.Total_Additions,E.Total_Deductions,(E.Netpay * R.Percentage) / 100 NetPay,
	R.Giro_Bank,R.Giro_Acct_Number,Branch_Number,value_date,Bank_AccountNo,Bank_Name,Account_Name,PayeeBankName,Percentage,Bank_ID,E.Netpay GrossPay,D.DeptName
  FROM   (--SELECT R.Emp_ID,B1.Bank_Code Giro_Bank,giro_acct_number Giro_Acct_Number,Bank_Branch Branch_Number,@valuedate value_date,Bank_AccountNo,Bank_Name,R.Giro_Acc_Name Account_Name,B2.[Desc] PayeeBankName,R.Perc Percentage,G.Bank_ID
--          FROM   (SELECT E.Emp_ID,E.Pay_Mode,B.[Desc] Bank_Name,giro_acc_name,Giro_Acct_Number,100 - Isnull(R.Perc, 0) Perc
--                  FROM   #EmpTem E
--                         LEFT OUTER JOIN (SELECT Emp_ID,SUM(Percentage) Perc
--                                          FROM   EmployeeBankInfo
--                                          GROUP  BY Emp_ID) R ON E.Emp_ID = R.Emp_ID
--                         LEFT OUTER JOIN Bank B ON E.Giro_Bank = B.Bank_Code) R
--                 INNER JOIN Girobanks G ON R.Pay_Mode = G.ID
--                 INNER JOIN Bank B1 ON R.Pay_Mode = B1.ID
--                 INNER JOIN Bank B2 ON G.bank_id = B2.ID
--          UNION
          SELECT Emp_ID,B1.Bank_Code Giro_Bank,F.Giro_Acct_Number,F.Giro_Branch Branch_Number,@valuedate value_date,G1.Bank_AccountNo,B1.[Desc] Bank_Name,F.Giro_Acc_Name Account_Name,B2.[Desc] PayeeBankName,Percentage,G1.Bank_ID
          FROM   EmployeeBankInfo F
                 INNER JOIN Bank B1 ON F.Giro_Bank_ID = B1.ID
                 INNER JOIN GiroBanks G1 ON F.Payment_From = G1.ID
                 INNER JOIN Bank B2 ON G1.bank_id = B2.ID) R
         INNER JOIN #EmpTem E ON R.Emp_ID = E.Emp_ID
         LEFT OUTER JOIN Department D ON E.dept_id = D.id
  WHERE  Bank_ID = @bank
     AND Bank_AccountNo = @bankaccno

  DROP TABLE #EmpTem 

GO

--sp_getleavesumdetcomp  2010, '0,2,1', '0,8,12,14,13,16,15,10,19,11,9,18', 2, 1,12
CREATE PROC [dbo].[Sp_getleavesumdetcomp] @year       INT,    
                                     @CompID      VARCHAR(8000),    
                                     @LeaveID    VARCHAR(8000),    
                                     @ReportType INT = 0,    
                                     @frommonth  INT = -1,    
                                     @endmonth   INT = -1    
AS    
Declare @EmpID INT  
  BEGIN    
      IF ( @ReportType = 1 )    
        BEGIN    
            SET @endmonth = -1    
    
            IF ( @frommonth = 0 )    
              BEGIN    
                  SET @frommonth = 12    
              END    
        END    
    
      DECLARE @select AS VARCHAR(8000)    
      DECLARE @where VARCHAR(8000)    
      DECLARE @where1 VARCHAR(8000)    
      DECLARE @leaves AS INT    
      DECLARE @appliedon DATETIME    
      DECLARE @LEAVEAVAIL TABLE (    
        ID                    INT,    
        EMP_ID                INT,    
        LEAVE_YEAR            FLOAT,    
        [TYPE]                VARCHAR(50),    
        CompanyLeaveAllowed   FLOAT,    
        LeavesAllowed         FLOAT,    
        LY_Leaves_Bal         FLOAT,    
        LeavesEarned          FLOAT,    
        PaidLeaves            FLOAT,    
        UnpaidLeaves          FLOAT,    
        PendingLeaves         FLOAT,    
        LeavesAvailable       FLOAT,    
        TotalLeavesTaken      FLOAT,    
        ActualLeavesAvailable FLOAT,    
        leavesfromly          FLOAT,    
        SHOWLEAVEMODEL        INT )    
    
      SELECT EMP_CODE,Company_ID    
      INTO   ##EmployeeTemp    
      FROM   Employee    
    
      IF Len(@CompID) > 0    
        BEGIN    
            SELECT @where = 'Where Company_ID Not In (' + @CompID + ')'    
        END    
    
      IF Len(@LeaveID) > 0    
        BEGIN    
            SELECT @where1 = 'Where ID Not In (' + @LeaveID + ')'    
        END    
    
      SELECT @select = 'Delete From ##EmployeeTemp ' + @where    
    
      EXEC (@select)    
      SELECT TOP 1 @appliedon = DateInYear    
      FROM   dbo.DateInYear AS diy    
      WHERE  YEAR(DateInYear) = @year    
             AND MONTH(DateInYear) = @frommonth    
      ORDER  BY DateInYear DESC    
    
      --SET @today = CONVERT(VARCHAR(10), @appliedon, 103)                      
      IF ( @ReportType = 1 )    
        BEGIN    
            DECLARE db_cursor CURSOR FOR    
              SELECT Emp_Code    
              FROM   ##EmployeeTemp    
    
            OPEN db_cursor    
    
            FETCH NEXT FROM db_cursor INTO @EmpID    
    
            WHILE @@FETCH_STATUS = 0    
              BEGIN    
                  INSERT @LEAVEAVAIL    
                         (id,    
                          emp_id,    
                          leave_year,    
                          [TYPE],    
                          companyleaveallowed,    
                          LY_Leaves_Bal,    
                          leavesallowed,    
                          leavesearned,    
                          paidleaves,    
                          unpaidleaves,    
                          pendingleaves,    
                          leavesavailable,    
                          actualleavesavailable,    
                          totalleavestaken,    
                          SHOWLEAVEMODEL)    
                  EXEC Sp_getemployeeleavepolicy    
                    @EmpID,    
                    @year,    
                    @appliedon,    
                    0    
    
                  FETCH NEXT FROM db_cursor INTO @EmpID    
              END    
    
            CLOSE db_cursor    
    
            DEALLOCATE db_cursor    
    
            SELECT *    
            INTO   ##Temp    
            FROM   @LEAVEAVAIL    
    
            SELECT @select = 'Delete From ##Temp ' + @where1    
    
            EXEC (@select)    
    
            SELECT C.Company_Name, Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') [Full_Name],    
                   T.TYPE                                                 [Leave_Type],    
                   T.CompanyLeaveAllowed                                  CAL,    
                   Isnull(T.LeavesAllowed, 0)                             CYL,    
                   T.LY_Leaves_Bal           LYCF,    
                   T.LeavesEarned                                         CYLE,    
                   T.PaidLeaves                                           [Paid_Leaves],    
                   T.UnpaidLeaves                                         [Unpaid_Leaves],    
                   T.PendingLeaves                                        [Pending_Leaves],    
                   T.TotalLeavesTaken                                     [Leaves_Taken],    
                   T.ActualLeavesAvailable                                [Balance_Leaves]    
            FROM   ##Temp T    
                   Left OUTER JOIN Employee E    
                     ON T.Emp_ID = E.Emp_CODE  
     Inner Join Company C  
      On E.Company_ID = C.Company_ID    
            ORDER  BY C.Company_name,e.emp_name,    
                      T.TYPE    
    
            DROP TABLE ##EmployeeTemp    
    
            DROP TABLE ##Temp    
        END    
      ELSE    
        BEGIN    
            SELECT lt.id,    
                   Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') emp_name,    
                   lt.TYPE,    
                   el.start_date,    
                   el.end_date,    
                   res.paidleaves,    
                   res.unpaidleaves,    
                   el.approver,    
                   el.remarks,    
                   e.emp_code,  
     E.Company_ID  
            INTO   ##TempNew    
            FROM   (SELECT Res.emp_id,    
                           Res.trx_id,    
                           Res.leave_type        id,    
                           Res.Mth,    
                           SUM(Res.PaidLeaves)   PaidLeaves,    
                           SUM(Res.UnPaidLeaves) UnPaidLeaves    
                    FROM   (SELECT emp_id,    
                                   trx_id,    
                                   leave_type,    
                                   Mth,    
                                   PaidLeaves,    
                                   0 UnPaidLeaves    
                            FROM   (SELECT El.Emp_ID,    
                                           El.trx_id,    
                                           el.leave_type,    
                                           MONTH(Eld.leave_date)                                                        Mth,    
                                           CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) PaidLeaves    
                                    FROM   Emp_Leaves el    
                                           INNER JOIN emp_Leaves_Detail Eld    
                                             ON el.trx_id = eld.trx_id    
                                    WHERE  --El.Emp_ID = @empid AND                      
                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
                                      AND MONTH(Eld.Leave_Date) <= @endmonth )    
                                    AND YEAR(eld.leave_date) = @year    
                                    AND ( Eld.unpaid_leave = 0    
                                          AND eld.halfday_leave = 1 )    
                                    AND El.Status = 'Approved'    
                                    GROUP  BY El.Emp_Id,    
                                              El.trx_id,    
                                              el.leave_type,    
                                              MONTH(Eld.leave_date)    
                                    UNION ALL    
                                    SELECT El.Emp_Id,    
                                           El.trx_id,    
                                           el.leave_type,    
                                           MONTH(Eld.leave_date)   Mth,    
     COUNT(Eld.unpaid_leave) PaidLeaves    
                                    FROM   Emp_Leaves el    
                                           INNER JOIN emp_Leaves_Detail Eld    
                                             ON el.trx_id = eld.trx_id    
                                    WHERE  --El.Emp_ID = @empid AND                      
                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
      AND MONTH(Eld.Leave_Date) <= @endmonth )    
                                    AND YEAR(eld.leave_date) = @year    
                                    AND ( Eld.unpaid_leave = 0    
                                          AND eld.halfday_leave = 0 )    
                                    AND El.Status = 'Approved'    
                                    GROUP  BY El.Emp_Id,    
                                              El.trx_id,    
                                              el.leave_type,    
                                              MONTH(Eld.leave_date)) R    
                            UNION    
                            SELECT emp_id,    
                                   trx_id,    
                                   leave_type,    
                                   Mth,    
                                   0 PaidLeaves,    
                                   UnPaidLeaves    
                            FROM   (SELECT El.Emp_ID,    
                                           El.trx_id,    
                                           el.leave_type,    
                                           MONTH(Eld.leave_date)                                                        Mth,    
                                           CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) UnPaidLeaves    
                                    FROM   Emp_Leaves el    
                                           INNER JOIN emp_Leaves_Detail Eld    
                                             ON el.trx_id = eld.trx_id    
                                    WHERE  --El.Emp_ID = @empid AND                      
                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
                                      AND MONTH(Eld.Leave_Date) <= @endmonth )    
                                    AND YEAR(eld.leave_date) = @year    
                                    AND ( Eld.unpaid_leave = 1    
                                          AND eld.halfday_leave = 1 )    
                                    AND El.Status = 'Approved'    
                                    GROUP  BY El.Emp_Id,    
                                              El.trx_id,    
                                              el.leave_type,    
                                              MONTH(Eld.leave_date)    
                                    UNION ALL    
                                    SELECT El.Emp_Id,    
                                           El.trx_id,    
                                           el.leave_type,    
                                           MONTH(Eld.leave_date)   Mth,    
                                           COUNT(Eld.unpaid_leave) UnPaidLeaves    
                                    FROM   Emp_Leaves el    
                                           INNER JOIN emp_Leaves_Detail Eld    
                                             ON el.trx_id = eld.trx_id    
                                    WHERE  --El.Emp_ID = @empid AND                      
                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
                                      AND MONTH(Eld.Leave_Date) <= @endmonth )    
                                    AND YEAR(eld.leave_date) = @year    
                                    AND ( Eld.unpaid_leave = 1    
                                          AND eld.halfday_leave = 0 )    
                                    AND El.Status = 'Approved'    
                                    GROUP  BY El.Emp_Id,    
                                              El.trx_id,    
                                              el.leave_type,    
                                              MONTH(Eld.leave_date)) Res) Res    
                    GROUP  BY Res.emp_id,    
                              Res.trx_id,    
                              Res.leave_type,    
                              Res.Mth) Res    
                   INNER JOIN Emp_Leaves El    
                     ON Res.trx_ID = El.trx_ID    
                   INNER JOIN leave_types lt    
                     ON Res.id = lt.id    
                   INNER JOIN Employee E    
                     ON Res.Emp_ID = E.Emp_CODE    
    
            SELECT @select = 'Delete From ##TempNew ' + @where    
  
            EXEC (@select)    
    
            SELECT @select = 'Delete From ##TempNew ' + @where1    
    
            EXEC (@select)    
    
            SELECT  C.Company_Name,  
     T.Emp_name       [Full_Name],    
                   [Type]         [Leave_Type],    
                   [start_date]   [From_Date],    
                   [end_date]     [Till_Date],    
                   [paidleaves]   [Paid_Leaves],    
                   [unpaidleaves] [Unpaid_Leaves],    
                   [Approver],    
                   T.[Remarks]    
            FROM   ##TempNew   T  
   Inner Join Company C On T.Company_ID = C.Company_ID  
            ORDER  BY C.Company_Name,T.Emp_Name,    
                      [start_date]    
    
            DROP TABLE ##EmployeeTemp    
    
            DROP TABLE ##TempNew    
        END    
  END  

GO

CREATE PROCEDURE [dbo].[sp_dedtype_update]      
       @desc VARCHAR(100) ,      
       @cpf VARCHAR(10) ,      
       @id INT ,      
    @typeshared VARCHAR(3),
	@accountcode VARCHAR(20)
AS       
       BEGIN          
      
             UPDATE [deductions_types]      
             SET    [desc] = @desc, cpf = @cpf, isShared=@typeshared,accountcode=@accountcode
             WHERE  [id] = @id      
       END   
GO

CREATE PROCEDURE [dbo].[Sp_dedtype_add] @desc                VARCHAR(100),    
										@cpf                 VARCHAR(10),    
										@company_id          INT,
										@typeshared VARCHAR(3),
										@accountcode VARCHAR(20)
AS    
    BEGIN    
        INSERT INTO [deductions_types]    
                    ([desc],cpf,company_id,isShared,accountcode)    
        VALUES      (@desc,@cpf,@company_id,@typeshared,@accountcode)    
    END     
GO


--exec sp_processtimesheetforcomp '01/06/2010', '05/06/2010', '1,2', '-1', '-1', 'No', -1, 99
CREATE PROC [dbo].[sp_processtimesheetforcomp] 
(
	@start_date VARCHAR(10) ,                  
	@end_date VARCHAR(10) ,                  
	@compid VARCHAR(2000) ,                  
	@empid VARCHAR(8000) ,                  
	@subprojid VARCHAR(8000) ,                  
	@isEmpty VARCHAR(3),                
	@sessid float,    
	@REPID INT=0    
)             
AS
BEGIN
	DECLARE @FULLMONTH99 TABLE 
	(
		Time_Card_No VARCHAR(50),
		Full_Name VARCHAR(100),
		Sub_Project_Name VARCHAR(100),
		Hours_Worked float,
		NH float,
		OT1 float,
		OT2 float,
		Hourly_Rate float,
		OT1_Rate float,
		OT2_Rate float,
		Tot_NH float,
		TotOT1 float,
		TotOT2 float,
		[HoursWorked In Min] float,
		[NH In Min] float,
		[OT1 In Min] float,
		[OT2 In Min] float,
		[HourlyRate In Min] float,
		[OT1Rate In Min] float,
		[OT2Rate In Min] float,
		[TotNH In Min] float,
		[Tot OT1 In Min] float,
		[Tot OT2 In Min] float,
		[Emp_Code] Int
	)

	DECLARE @FULLMONTH100 TABLE 
	(
		Time_Card_No VARCHAR(50),
		Full_Name VARCHAR(100),
		Sub_Project_Name VARCHAR(100),
		[Date] varchar(12),
		[In_Time] varchar(5),
		[Out_Time] varchar(5),
		[Hours_Worked] varchar(5),
		[NH] varchar(5),
		[OT1] varchar(5),
		[OT2] varchar(5),
		[Emp_Code] Int
	)

	Declare @compvar varchar(100)
	Declare @RowData nvarchar(2000)
	Declare @SplitOn nvarchar(5)
	Set @SplitOn = ',' 
	Set @RowData = @compid

	Declare @Cnt int
	Set @Cnt = 0

	While (Charindex(@SplitOn,@RowData)>0)
	Begin

		set @compvar = ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))
		if (@REPID=99)
		BEGIN
			Insert Into @FULLMONTH99(Time_Card_No,Full_Name,Sub_Project_Name,Hours_Worked,NH,OT1,OT2,Hourly_Rate,OT1_Rate,OT2_Rate,Tot_NH,TotOT1,TotOT2,[HoursWorked In Min],[NH In Min],[OT1 In Min],[OT2 In Min],[HourlyRate In Min],[OT1Rate In Min],[OT2Rate In Min],[TotNH In Min],[Tot OT1 In Min],[Tot OT2 In Min],Emp_Code	)
			Exec sp_ProcessTimesheet @start_date, @end_date, @compvar, @empid, @subprojid, 'No', -1, 99
		END
		ELSE
		BEGIN
			Insert Into @FULLMONTH100(Time_Card_No,Full_Name,Sub_Project_Name,[Date],[In_Time],[Out_Time],[Hours_Worked],[NH],[OT1],[OT2],Emp_Code)
			Exec sp_ProcessTimesheet @start_date, @end_date, @compvar, @empid, @subprojid, 'No', -1, 100
		END

		Set @RowData = Substring(@RowData,Charindex(@SplitOn,@RowData)+1,len(@RowData))
		Set @Cnt = @Cnt + 1
	End
		--print ltrim(rtrim(@RowData))

		If (@REPID=99)
		BEGIN

			Insert Into @FULLMONTH99(Time_Card_No,Full_Name,Sub_Project_Name,Hours_Worked,NH,OT1,OT2,Hourly_Rate,OT1_Rate,OT2_Rate,Tot_NH,TotOT1,TotOT2,[HoursWorked In Min],[NH In Min],[OT1 In Min],[OT2 In Min],[HourlyRate In Min],[OT1Rate In Min],[OT2Rate In Min],[TotNH In Min],[Tot OT1 In Min],[Tot OT2 In Min],Emp_Code	)
			Exec sp_ProcessTimesheet @start_date, @end_date, @RowData, @empid, @subprojid, 'No', -1, 99
		END
		ELSE
		BEGIN
			Insert Into @FULLMONTH100(Time_Card_No,Full_Name,Sub_Project_Name,[Date],[In_Time],[Out_Time],[Hours_Worked],[NH],[OT1],[OT2],Emp_Code)
			Exec sp_ProcessTimesheet @start_date, @end_date, @RowData, @empid, @subprojid, 'No', -1, 100
		END

		If (@REPID=99)
		BEGIN
			Select C.Company_Name,F.* From @FULLMONTH99 F 
			Inner Join Employee E On F.Emp_Code=E.Emp_Code
			Inner Join Company C On E.Company_ID = C.Company_ID  Order By C.Company_Name,F.Full_Name
		END
		ELSE
		BEGIN
			Select C.Company_Name,F.* From @FULLMONTH100 F
			Inner Join Employee E On F.Emp_Code=E.Emp_Code
			Inner Join Company C On E.Company_ID = C.Company_Id Order By C.Company_Name,F.Full_Name
		END
END

GO

CREATE PROCEDURE sp_InsertDataBaseBackupLog
(
			@LogDetails NVARCHAR(250),
			@Log_Type  NVARCHAR(50)	
)
As
BEGIN
	SET NOCOUNT ON;
	DECLARE @Log_Date As DateTime
	SET @Log_Date = getdate()

	INSERT INTO DataBaseBackupLog
	VALUES
	(@LogDetails,@Log_Date,@Log_Type )

END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE sp_GetROLLBackLeaves  
(		
	@Groupid    INT,      
	@year       INT  
)     
AS  
 DECLARE @leave_type DECIMAL(8,2)  
 DECLARE @year_last DECIMAL(8,2)  
 DECLARE @cnt3 DECIMAL(8,2)  
 SET @leave_type=8   
 SET @year_last=@year-1   
  
 SELECT @cnt3 =  COUNT(*) FROM leaves_forefited  WHERE leave_year=@year_last AND emp_id IN  
 (  
  SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid   
 )  
  
 CREATE TABLE  #LeavesRB  
 (     
   emp_code            varchar(250),    
   emp_name            VARCHAR(50),      
   leaves_allowed_CY   DECIMAL(8,2),   
   leaves_allowed_LY   DECIMAL(8,2),
   
 )   
 IF @cnt3 >0  
  
  BEGIN  
    
   SELECT A.emp_code,A.emp_name,A.leaves_allowed,A.leave_year INTO ##temp1  
   FROM  
    (SELECT emp_code,emp_name,leaves_allowed,L.leave_year  
     FROM Employee E INNER JOIN leaves_allowed L   
     ON E.emp_group_id=L.group_id where  L.group_id=@Groupid and L.leave_type=@leave_type And L.leave_year IN (@year_last ,@year)     
     AND E.Termination_Date IS NULL AND E.emp_code IN (SELECT emp_id FROM leaves_forefited WHERE leave_year=@year_last and emp_id  IN 
		(SELECT emp_code FROM employee WHERE emp_group_id=@Groupid)))A

   INSERT INTO #LeavesRB  
   SELECT * FROM ##temp1 WHERE leave_year=@year 

   	 --select * from #LeavesRB
     
   DECLARE @cnt DECIMAL  
   SELECT @cnt =count(*) FROM #LeavesRB   
     
   DECLARE @emp_name varchar(250)  
     SELECT @emp_name = emp_name FROM ##temp1   
  
   DECLARE @cnt2 DECIMAL  
   SELECT @cnt2 =count(*) FROM ##temp1   
  
   DECLARE @leaves DECIMAL(8,2)  
   --SET @cnt=0  
   IF @cnt>0  
    BEGIN  
		-- print '1' 
     SELECT  @leaves = leaves_allowed  FROM ##temp1 WHERE leave_year=@year_last  	 
	
     UPDATE #LeavesRB SET leaves_allowed_LY=@leaves FROM #LeavesRB INNER JOIN ##temp1 ON 
		#LeavesRB.emp_code=##temp1.emp_code   -- WHERE emp_name=@emp_name   
	 
    END  
   ELSE   
    BEGIN  
     IF @cnt2>0  
		 --print '2' 
      BEGIN   
       --SELECT * FROM ##temp1 WHERE leave_year=2010  
       INSERT INTO #LeavesRB  
       SELECT emp_code,emp_name,NULL,leaves_allowed FROM ##temp1 WHERE leave_year=@year_last  
      END     
    END  
    DROP TABLE ##temp1  
   END   
  

	SELECT  A.LY_Leaves_Bal,A.Emp_ID INTO ##temp7 
	FROM
	(
		SELECT  LY_Leaves_Bal,Emp_ID  FROM LeavesAllowedInYears  where emp_id IN 
		(
			SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid AND Termination_Date IS NULL
		)and YEARS=@year_last   And LeaveType=1 	
	)A
	

	--select *  FROM LeavesAllowedInYears WHERE YEARS='2010' and emp_id='1036' and YEARS='2010' And LeaveType=1 
	--SELECT * FROM leaves_forefited  WHERE emp_id=1036 and leave_year=2010
	--	SELECT * FROM 
	SELECT A.leave_forward,A.emp_id	INTO ##temp8
	FROM
	(
		SELECT leave_forward,emp_id FROM leaves_forefited  WHERE emp_id IN 
		(
			SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid  AND Termination_Date IS NULL
			and leave_year=@year_last  
		)
	)A


CREATE TABLE  #LeavesRB1 
(     
	emp_code            varchar(250),		
	emp_name            VARCHAR(50),      
	leaves_allowed_CY   DECIMAL(8,2),   
	leaves_allowed_LY   DECIMAL(8,2),  
	leaves_CF_LY		DECIMAL(8,2),  
	leaves_CF_LY1		DECIMAL(8,2),
	leaves_elapsed		DECIMAL(8,2) 
)   
	
INSERT INTO #LeavesRB1 
SELECT emp_code,emp_name,leaves_allowed_CY,leaves_allowed_LY,0,0,0 FROM #LeavesRB

--SELECT * from #LeavesRB1 

DECLARE	@leaves_CF_LY		DECIMAL(8,2)  
DECLARE	@leaves_CF_LY1		DECIMAL(8,2)

UPDATE #LeavesRB1  SET #LeavesRB1.leaves_CF_LY=##temp7.LY_Leaves_Bal FROM ##temp7
--INNER JOIN  ##temp7 ON (#LeavesRB1.emp_code =##temp7.emp_id) 

UPDATE #LeavesRB1  SET #LeavesRB1.leaves_CF_LY1=##temp8.leave_forward FROM ##temp8
--INNER JOIN  ##temp8 ON (#LeavesRB1.emp_code =##temp8.emp_id)


SELECT A.emp_id,A.leave_forefited  INTO #tempLF FROM 
	(
		SELECT emp_id,leave_forefited FROM leaves_forefited 
		WHERE emp_id IN(SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid AND Termination_Date IS NULL
		and leave_year=@year_last)  and leave_year=@year_last
	)A

UPDATE #LeavesRB1  SET #LeavesRB1.leaves_elapsed=#tempLF.leave_forefited FROM #tempLF
INNER JOIN #LeavesRB1 ON (#LeavesRB1.emp_code=#tempLF.emp_id)

--SELECT * FROM ##temp1  
SELECT *
from #LeavesRB1  

DROP TABLE #LeavesRB 
DROP TABLE ##temp7 
DROP TABLE ##temp8
DROP TABLE #LeavesRB1 
DROP TABLE #tempLF
GO



--EXEC sp_EmployeeEarning '2011','11','',1,2,3,4,5,6,7,8,9,10,11,'I'
--
--SELECT * FROM EmployeeEarning
--
--DELETE FROM EmployeeEarning

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[sp_EmployeeEarning]    
        @IRYear VARCHAR(100),
		@Emp_ID varchar(100),
		@id varchar(100),
				
		@GrossPay float ,
		@Bonus float ,
		@DirectorFee float ,
		@Commission float ,
		@Pension float ,
		@TransAllow float ,
		@EntAllow float ,
		@OtherAllow float ,
		@EmployeeCPF float ,
		@Funds float ,
		@MBMF float,
        @flag char
AS     
       BEGIN   
			
			IF @GrossPay=''
				BEGIN
					SET @GrossPay=NULL			
				END	
			
			
			IF @Bonus=''
				BEGIN
					SET @Bonus=NULL			
				END
						
			IF @DirectorFee =''
				BEGIN
					SET @DirectorFee = NULL			
				END	
			END	
			
			IF @Commission=''
				BEGIN
					SET @Commission=NULL			
				END	
			
			IF @Pension=''
				BEGIN
					SET @Pension=NULL			
				END	
			
			IF @TransAllow=''
				BEGIN
					SET @TransAllow=NULL			
				END	
			
			IF @EntAllow=''
				BEGIN
					SET @EntAllow=NULL			
				END	
			
			IF @OtherAllow=''
				BEGIN
					SET @OtherAllow=NULL			
				END	
			
			IF @EmployeeCPF=''
				BEGIN
					SET @EmployeeCPF=NULL			
				END	
			
			IF @Funds=''
				BEGIN
					SET @Funds=NULL			
				END	
			
			IF @MBMF=''
				BEGIN
					SET @MBMF=NULL			
				END	
			
             IF (@flag = 'I')  
                BEGIN  
					--PRINT'I'  
					--PRINT @Emp_ID               
					Insert into EmployeeEarning  
					(
						IRYear,Emp_ID,GrossPay,Bonus,
						DirectorFee,Commission,
						Pension,TransAllow,EntAllow,
						OtherAllow,EmployeeCPF,Funds,MBMF
					)
					values 
					(
						@IRYear,@Emp_ID,@GrossPay,@Bonus,@DirectorFee,@Commission,@Pension,@TransAllow,@EntAllow,@OtherAllow,@EmployeeCPF,@Funds,@MBMF
					)
                END 
              
              IF (@flag = 'U')  
                BEGIN  
					--PRINT'U'                
                    Update EmployeeEarning 
						Set GrossPay=@GrossPay,
						Bonus=@Bonus,
						DirectorFee=@DirectorFee,
						Commission=@Commission,
						Pension=@Pension,
						TransAllow=@TransAllow,
						EntAllow=@EntAllow,
						OtherAllow=@OtherAllow,
						EmployeeCPF=@EmployeeCPF,
						Funds=@Funds,
						MBMF=@MBMF 
                    Where ID =@id            
					
                END                    
                        
                 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Save_Data_ACTATEK_LOGS]		  
		   @transid varchar(100)
	AS     
   BEGIN          
       
	INSERT INTO ACTATEK_LOGS    
		SELECT  userID AS userID,timeentry AS timeentry,eventID AS eventID,terminalSN AS terminalSN,NULL AS jpegPhoto,    
		company_id AS company_id,tranid AS tranid,'A' AS INSERTED,0 AS softdelete,0 AS NightShift,NULL AS SessionID,NULL AS Roster_ID,    
		NULL AS Remarks     
		FROM ACTATEK_LOGS_BC WHERE  tranid=@transid  AND  LEN(timeentry)>=1  AND LEN(tranid)>=1   AND convert(varchar, timeentry, 100) IS NOT NULL   
          
	DELETE FROM ACTATEK_LOGS_BC WHERE tranid=@transid    
               
   END  
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_BulkInsert_ValidTimeSheet_Data]    
	(    
		-- @filePath VARCHAR(1000),      
		@flag INT     
	)    
	 AS      
	 BEGIN  
		--- Insert Below Records From Front End Part ... ... ...  		  
		  BEGIN  
		   INSERT INTO ACTATEK_LOGS  
		   SELECT  WorkerID AS UserID,DateIn +' '+TimeIn AS timeentry,'IN' AS eventID,ProjectCode AS terminalSN,NULL AS jpegPhoto,  
			 company_id   AS company_id,tranid AS tranid,'A' AS INSERTED,0 AS softdelete,0 AS NightShift,NULL AS SessionID,NULL AS Roster_ID,  
			 NULL AS Remarks   
		   FROM ACTATEK_LOGS_TEMP WHERE LEN(TimeIn)=8  
		  
		   INSERT INTO ACTATEK_LOGS  
		   SELECT  WorkerID AS UserID,DateOut +' '+[TimeOut] AS timeentry,'OUT' AS eventID,ProjectCode AS terminalSN,NULL AS jpegPhoto,  
			 company_id   AS company_id,tranid AS tranid,'A' AS INSERTED,0 AS softdelete,0 AS NightShift,NULL AS SessionID,NULL AS Roster_ID,  
			 NULL AS Remarks   
		   FROM ACTATEK_LOGS_TEMP WHERE LEN([TimeOut])=8       
		     
		   --Delete data from ACTATEK_LOGS_TEMP Uncomment When SP is completed    
		   DELETE FROM ACTATEK_LOGS_TEMP     
		  END  
	 END  
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_BulkInsert_TimeSheet]      
(      
   @compid   INT
)      
 AS        
 BEGIN             

   UPDATE ACTATEK_LOGS_TEMP SET TimeIn =CASE WHEN LEN(TimeIn)=3 THEN    
           '0' + TimeIn    
         ELSE     
          TimeIn    
         END    
             
  UPDATE ACTATEK_LOGS_TEMP SET [TimeOut] = CASE WHEN LEN([TimeOut])=3 THEN    
          '0' + [TimeOut]    
         ELSE    
          [TimeOut]    
         END      
             
  UPDATE ACTATEK_LOGS_TEMP SET TimeIn = LEFT([TimeIn],2) +':' +RIGHT([TimeIn],2)+':00' WHERE TimeIn NOT IN ('0')    
     
  UPDATE ACTATEK_LOGS_TEMP SET [TimeOut] = LEFT([TimeOut],2) +':' +RIGHT([TimeOut],2)+':00' WHERE [TimeOut] NOT IN ('0')        
    
  SELECT * FROM ACTATEK_LOGS_TEMP WHERE LEN(TimeIn)!=8 AND LEN([TimeOut])!=8          
    
END

GO






--8.5 B

------GO
------IF EXISTS ( SELECT  *
------            FROM    sys.objects
------            WHERE   object_id = OBJECT_ID(N'sp_emppay_addAll'))
------   DROP PROCEDURE sp_emppay_addAll
------Merging 9.0
------IF EXISTS ( SELECT  *
------            FROM    sys.objects
------            WHERE   object_id = OBJECT_ID(N'sp_GetLastDatbaseLogDay'))
------   DROP PROCEDURE sp_GetLastDatbaseLogDay
------ Merging 9.0
------IF EXISTS ( SELECT  *
------            FROM    sys.objects
------            WHERE   object_id = OBJECT_ID(N'sp_BulkInsert_Holidays'))
------   DROP PROCEDURE sp_BulkInsert_Holidays
------ Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_empdeduc_add' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_empdeduc_add
------ Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_empdeduc_update' AND
------                    xtype = 'P' )
------DROP PROCEDURE sp_empdeduc_update
------ Merging 9.0 
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_payroll_Update' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_payroll_Update
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_genledger' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_genledger
------ Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_processtimesheetflexadv' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_processtimesheetflexadv
------ Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_GetEmployeePayDetails' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_GetEmployeePayDetails
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_userrighttopayroll' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_userrighttopayroll
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_getidamcdetails' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_getidamcdetails
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_Workers_Assigned' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_Workers_Assigned
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_processtimesheetadv' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_processtimesheetadv
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_Workers_Summary_Print' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_Workers_Summary_Print
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_Workers_Summary' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_Workers_Summary
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_getleftleaves' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_getleftleaves
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_getpivotclaimsadditions' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_getpivotclaimsadditions
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_getemployeeleavepolicybymonthly' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_getemployeeleavepolicybymonthly
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_allowed_leaves' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_allowed_leaves
------Merging 9.0

------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_bulkdedtranspose' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_bulkdedtranspose
-----Merging 
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_bulkaddtranspose' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_bulkaddtranspose
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_cpf_detail' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_cpf_detail
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_payroll_add' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_payroll_add
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_new_payslip_all2' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_new_payslip_all2
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_new_payslip_emp' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_new_payslip_emp
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_comp_add' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_comp_add
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_comp_update' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_comp_update
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_approvemypayroll' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_approvemypayroll
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_cpf_select' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_cpf_select
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_get_giro_emp' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_get_giro_emp
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_online_giro' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_online_giro
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_getleavesumdetcomp' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_getleavesumdetcomp
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_generatepayrolladvfullmonth' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_generatepayrolladvfullmonth
--------Meging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_generatepayrolladv' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_generatepayrolladv
--------Meging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_getemployeeleavepolicy' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_getemployeeleavepolicy
--------Meging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'sp_processtimesheetforcomp' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE sp_processtimesheetforcomp
--------meging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'sp_ProcessTimesheet' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE sp_ProcessTimesheet
--------merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_getleavesumdet' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_getleavesumdet
--------Merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_dedtype_add' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_dedtype_add
--------Merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'sp_dedtype_update' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE sp_dedtype_update
--------Merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'sp_addtype_update' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE sp_addtype_update
--------Merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_addtype_add' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_addtype_add
--------merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_approvepayroll' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_approvepayroll
--------Merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_RightsMenuHeader' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_RightsMenuHeader
-------- Merging 9.0
--------IF EXISTS ( SELECT  Name
--------            FROM    sysobjects
--------            WHERE   Name = N'Sp_userrightsall' AND
--------                    xtype = 'P' ) 
--------   DROP PROCEDURE Sp_userrightsall
--------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_emp_add' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_emp_add
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'Sp_emp_update' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE Sp_emp_update
------Merging 9.0
------IF EXISTS ( SELECT  Name
------            FROM    sysobjects
------            WHERE   Name = N'sp_GetEmployees' AND
------                    xtype = 'P' ) 
------   DROP PROCEDURE sp_GetEmployees
------Merging 9.0
------GO
------IF EXISTS ( SELECT  *
------            FROM    sys.objects
------            WHERE   object_id = OBJECT_ID(N'sp_InsertDataBaseBackupLog'))
------   DROP PROCEDURE sp_InsertDataBaseBackupLog
------go
------Merging 9.0


--------CREATE PROCEDURE [dbo].[Sp_emp_add] (@emp_name            [VARCHAR](50),        
--------                                     @emp_alias           [VARCHAR](50),        
--------                                     @nationality         [INT],        
--------                                     @emp_type            [VARCHAR](50),        
--------                                     @emp_lname           [VARCHAR](50),        
--------                                     @empcpftype          [INT],        
--------                                     @Insurance_number    VARCHAR(50),        
--------                                     @Insurance_expiry    VARCHAR(20),        
--------                                     @CSOC_number         VARCHAR(50),        
--------                                     @CSOC_expiry         VARCHAR(20),        
--------                                     @passport            VARCHAR(50),        
--------                                     @passport_expiry     VARCHAR(20),        
--------                                     @ic_pp_number        [VARCHAR](50),        
--------                                     @wp_exp_date         VARCHAR(20),        
--------                                     @pr_date             VARCHAR(20),        
--------                                     @address             [VARCHAR](50),        
--------                                     @country             [INT],        
--------                                     @postal_code         [VARCHAR](50),        
--------                                     @phone               [VARCHAR](50),        
--------                                     @hand_phone          [VARCHAR](50),        
--------                                     @email               [VARCHAR](50),        
--------                                     @sex                 [VARCHAR](50),        
--------                                     @religion            [INT],        
--------                                     @race                [INT],        
--------                                     @marital_status      [VARCHAR](50),        
--------                                     @place_of_birth      [VARCHAR](50),        
--------                                     @date_of_birth       VARCHAR(20),        
--------                                     @income_taxid        [VARCHAR](50),        
--------                                     @employee_cpf_acct   [VARCHAR](50),        
--------                                     @employer_cpf_acct   [VARCHAR](50),        
--------                                     @giro_bank           [VARCHAR](50),        
--------                                     @giro_code           [VARCHAR](50),        
--------                                     @giro_branch         [VARCHAR](50),        
--------                                     @giro_acct_number    [VARCHAR](50),        
--------                                     @cpf_entitlement     [CHAR](10),        
--------                                     @cpf_employer        [MONEY],        
--------                                     @department          [INT],        
--------                                     @cpf_employee        [MONEY],        
--------                                     @designation         [INT],  
--------                                     @trade               [INT],  
--------                                     @emp_supervisor      [INT],  
--------                                     @emp_clsupervisor    [INT],  
--------                                     @education           [VARCHAR](50),  
--------                                     @joining_date        VARCHAR(20),  
--------                                     @probation_period    [INT],  
--------                                     @confirmation_date   VARCHAR(20),  
--------                                     @empgroup            [INT],  
--------                                     @ot_entitlement      [CHAR](10),  
--------                                     @termination_date    VARCHAR(20),  
--------                                     @termination_reason  [VARCHAR](50),  
--------                                     @pay_frequency       [VARCHAR](50),  
--------                                     @payrate             [VARCHAR](100),  
--------                                     @hourlyRate          FLOAT,  
--------									 @hourlyRateMode      VARCHAR(3),  
--------                                     @dailyRateMode       VARCHAR(3),        
--------                                     @dailyRate           FLOAT,        
--------									 @wday_per_week       FLOAT,        
--------                                     @payment_mode        [VARCHAR](50),        
--------                                     @email_payslip       VARCHAR(10),        
--------                                     @fw_code             [VARCHAR](50),        
--------                                     @fw_levy             [MONEY],        
--------                                     @wh_tax_pct          [FLOAT],        
--------                                     @wh_tax_amt          [MONEY],        
--------                                     @sdf_required        [CHAR](10),        
--------                                     @cdac_fund           [MONEY],        
--------                                     @mbmf_fund           [MONEY],        
--------                                     @sinda_fund          [MONEY],        
--------                                     @ecf_fund            [MONEY],        
--------                                     @cchest_fund         [MONEY],        
--------                                     @remarks             VARCHAR(MAX),        
--------                                     @images              [VARCHAR](250),        
--------                                     @Company_Id          [INT],        
--------                                     @compcode            [VARCHAR](50),        
--------                                     @leaveCarryForward   FLOAT,        
--------                                     @giro_acc_name       VARCHAR(100),        
--------                                     @groupid             INT,        
--------                                     @localaddress2       VARCHAR(50),        
--------                                     @foreignaddress1     VARCHAR(50),        
--------                                     @foreignaddress2     VARCHAR(50),        
--------                                     @time_card_no        VARCHAR(50),        
--------                                     @foreignpostalcode   VARCHAR(50),        
--------                                     @pp_issue_date       VARCHAR(20),        
--------                                     @worker_levy         VARCHAR(50),        
--------                                     @wp_application_date VARCHAR(20),        
--------                                     @emp_ref_type        INT,        
--------                                     @fund_optout         INT,        
--------                                     @emp_category        INT,        
--------                                     @v1rate              FLOAT,        
--------                                     @v2rate              FLOAT,        
--------                                     @v3rate              FLOAT,        
--------                                     @v4rate              FLOAT,        
--------                                     @batch_no            INT,        
--------                                     @wp_issue_date       VARCHAR(20),        
--------                                     @photo_no            INT,        
--------                                     @wp_number           VARCHAR(50),        
--------                                     @shipyard_quota      VARCHAR(50),        
--------                                     @block_no            VARCHAR(50),        
--------                                     @street_name         VARCHAR(100),        
--------                                     @unit_no             VARCHAR(50),        
--------                                     @level_no            VARCHAR(50),        
--------                                     @ot1rate             FLOAT,        
--------                                     @ot2rate             FLOAT,        
--------                                     @EmeConPer           VARCHAR(50),        
--------                                     @EmeConPerRel        VARCHAR(50),        
--------                                     @EmeConPerPh1        VARCHAR(50),        
--------                                     @EmeConPerPh2        VARCHAR(50),        
--------                                     @EmeConPerAdd       VARCHAR(100),        
--------                                     @EmeConPerRem        VARCHAR(200),        
--------                                     @bloodgroup          VARCHAR(50),        
--------                                     @agent_id            INT,        
--------                                     @mye_cert_id         INT,        
--------                                     @wp_arrival_date     VARCHAR(20),        
--------                                     @pay_supervisor      [INT],        
--------                                     @safetypass_id     [INT],        
--------                                     @safetypass_sno      VARCHAR(50),        
--------                                     @safetypass_expiry   VARCHAR(20),        
--------									 @empstatid     [INT],        
--------									 @payrolltype    [INT],        
--------									 @compcpffh [INT],      
--------                                     @tssupervisor      [INT],        
--------									 @compfundfh [INT],      
--------									 @halfsalary [INT],      
--------                                     @UCode               INT OUTPUT)        
--------AS        
--------  DECLARE @leavemodel INT        
--------  --DECLARE @statusid [INT]        
--------  DECLARE @username VARCHAR(50)        
--------  DECLARE @password VARCHAR(50)        
--------  DECLARE @prorated_leaves INT        
--------  DECLARE @year_of_service INT        
--------  DECLARE @isEmployeeAliasExist INT        
--------        
--------  SELECT @isEmployeeAliasExist = COUNT(*)        
--------  FROM   Employee        
--------  WHERE  Company_Id = @Company_Id        
--------     AND Upper(emp_alias) = Upper(Ltrim(Rtrim(@emp_alias)))        
--------     AND Len(Ltrim(Rtrim(emp_alias))) > 0        
--------        
--------  SELECT @leavemodel = leave_model        
--------  FROM   dbo.company AS c        
--------  WHERE  company_id = @Company_Id        
--------        
--------  IF (@isEmployeeAliasExist = 0)        
--------      BEGIN        
--------          -- get Year of Service                                                                                          
--------          SELECT @year_of_service = Datediff(YEAR, CONVERT(DATETIME, @joining_date, 103), Getdate())        
--------        
--------          IF @year_of_service = 0        
--------              SET @year_of_service = 1        
--------        
--------          SELECT @prorated_leaves = prorated_leaves        
--------          FROM   company        
--------          WHERE  company_id = @Company_Id        
--------        
--------          IF @prorated_leaves IS NULL        
--------              SET @prorated_leaves = 3        
--------        
--------          IF @wp_exp_date = '01/01/1900'        
--------              OR @wp_exp_date = ''        
--------              SELECT @wp_exp_date = NULL        
--------        
--------          IF @Insurance_expiry = '01/01/1900'        
--------              OR @Insurance_expiry = ''        
--------              SELECT @Insurance_expiry = NULL        
--------        
--------          IF @CSOC_expiry = '01/01/1900'        
--------              OR @CSOC_expiry = ''        
--------              SELECT @CSOC_expiry = NULL        
--------        
--------          IF @passport_expiry = '01/01/1900'        
--------              OR @passport_expiry = ''        
--------              SELECT @passport_expiry = NULL        
--------        
--------          IF @pr_date = '01/01/1900'        
--------              OR @pr_date = ''        
--------              SELECT @pr_date = NULL        
--------        
--------          IF @date_of_birth = '01/01/1900'        
--------              OR @date_of_birth = ''        
--------              SELECT @date_of_birth = NULL        
--------        
--------          IF @joining_date = '01/01/1900'        
--------              OR @joining_date = ''        
--------              SELECT @joining_date = NULL        
--------        
--------          IF @confirmation_date = '01/01/1900'        
--------              OR @confirmation_date = ''        
--------              SELECT @confirmation_date = NULL        
--------        
--------          IF @termination_date = '01/01/1900'        
--------              OR @termination_date = ''        
--------              SELECT @termination_date = NULL        
--------        
--------          IF @pp_issue_date = '01/01/1900'        
--------              OR @pp_issue_date = ''        
--------              SELECT @pp_issue_date = NULL        
--------        
--------          IF @wp_application_date = '01/01/1900'        
--------              OR @wp_application_date = ''        
--------              SELECT @wp_application_date = NULL        
--------        
--------          IF @wp_issue_date = '01/01/1900'        
-------- OR @wp_issue_date = ''        
--------              SELECT @wp_issue_date = NULL        
--------        
--------          IF @wp_arrival_date = '01/01/1900'        
--------              OR @wp_arrival_date = ''        
--------              SELECT @wp_arrival_date = NULL        
--------        
--------          -- TIMECARD NO VALIDATION START                                                                        
--------         IF @time_card_no <> ''        
--------              BEGIN        
--------                  DECLARE @timeCardCount INT        
--------        
--------                  SET @timeCardCount = 0        
--------        
--------                  SELECT @timeCardCount = COUNT(time_card_no)        
--------                  FROM   employee        
--------                  WHERE  company_id = @Company_Id        
--------                     AND time_card_no = @time_card_no        
--------        
--------                  IF @timeCardCount > 0        
--------                      BEGIN        
--------                          RETURN 'TIMECARD ALREADY IN USE'        
--------                      END        
--------              END        
--------        
--------          -- TIMECARD VALIDATION END                                                                                         
----------          SELECT @statusid = StatusId        
----------          FROM   UserStatus        
----------          WHERE  Status = 'Active'        
--------        
--------          DECLARE @leaves_remaining FLOAT        
--------        
--------          IF @prorated_leaves IN (1, 2)        
--------              SELECT @leaves_remaining = leaves_allowed        
--------              FROM   prorated_leaves        
--------              WHERE  comp_id = @Company_Id        
--------                 AND group_id = @empgroup        
--------                 AND year_of_service = @year_of_service        
--------          ELSE        
--------              SELECT @leaves_remaining = leaves_allowed        
--------              FROM   leaves_allowed        
--------              WHERE  leave_type = (SELECT [id]        
--------                                   FROM   leave_types        
--------                                   WHERE  TYPE = 'Annual Leave')        
--------                 AND group_id = @empgroup        
--------        
--------          INSERT INTO [employee]        
--------                      ([emp_name],[emp_alias],[nationality_id],[emp_type],emp_lname,empcpftype,Insurance_number,Insurance_expiry,CSOC_number,CSOC_expiry,[passport],passport_expiry,[ic_pp_number],[wp_exp_date],[pr_date],[address],[country_id],[postal_code],[phone],[hand_phone],[email],[sex],[religion_id],[race_id],[marital_status],[place_of_birth],[date_of_birth],[income_taxid],[employee_cpf_acct],[employer_cpf_acct],[giro_bank],[giro_code],[giro_branch],[giro_acct_number],[cpf_entitlement],[cpf_employer],[dept_id],[cpf_employee],[desig_id],[trade_id],[emp_supervisor],[emp_clsupervisor],[education],[joining_date],[probation_period],[confirmation_date],[emp_group_id],[ot_entitlement],[termination_date],[termination_reason],[pay_frequency],[payrate],[payment_mode],[email_payslip],[fw_code],[fw_levy],[wh_tax_pct],[wh_tax_amt],[sdf_required],[cdac_fund],[mbmf_fund],[sinda_fund],[ecf_fund],[cchest_fund],[remarks],[images],[Company_Id],[StatusId],[GroupID],[leave_carry_forward],[giro_acc_name],[localaddress2],  [foreignaddress1],[foreignaddress2],[time_card_no],[foreignpostalcode],[pp_issue_date],[leaves_remaining],[worker_levy],[wp_application_date],[hourly_rate_mode],[hourly_rate],[daily_rate_mode],[daily_rate],[wdays_per_week],[emp_ref_no],[fund_optout],[emp_category],[v1rate],[v2rate],[v3rate],[v4rate],[batch_no],[wp_issue_date],[wp_arrival_date],[photo_no],[wp_number],[shipyard_quota],[block_no],[street_name],[unit_no],[level_no],[ot1rate],[ot2rate],[eme_cont_per],[eme_cont_per_rel],[eme_cont_per_ph1],[eme_cont_per_ph2],[eme_cont_per_add],[eme_cont_per_rem],[bloodgroup],[agent_id],[mye_cert_id],[pay_supervisor],payrolltype,ComputeCPFFH, ComputeFundFH, timesupervisor, halfsalary)        
--------          VALUES      (@emp_name,@emp_alias,@nationality,@emp_type,@emp_lname,@empcpftype,@Insurance_number,CONVERT(DATETIME, @Insurance_expiry, 103),@CSOC_number,CONVERT(DATETIME, @CSOC_expiry, 103),@passport,CONVERT(DATETIME, @passport_expiry, 103),@ic_pp_number,CONVERT(DATETIME, @wp_exp_date, 103),CONVERT(DATETIME, @pr_date, 103),@address,@country,@postal_code,@phone,@hand_phone,@email,@sex,@religion,@race,@marital_status,@place_of_birth,CONVERT(DATETIME, @date_of_birth, 103),@income_taxid,@employee_cpf_acct,@employer_cpf_acct,@giro_bank,@giro_code,@giro_branch,@giro_acct_number,@cpf_entitlement,@cpf_employer,@department,@cpf_employee,@designation,@trade,@emp_supervisor,@emp_clsupervisor,@education,CONVERT(DATETIME, @joining_date, 103),@probation_period,CONVERT(DATETIME, @confirmation_date, 103),@empgroup,@ot_entitlement,CONVERT(DATETIME, @termination_date, 103),@termination_reason,Rtrim(@pay_frequency),Encryptbyasymkey(Asymkey_id('AsymKey'), @payrate),@payment_mode,@email_payslip,@fw_code,@fw_levy,@wh_tax_pct,@wh_tax_amt,@sdf_required,@cdac_fund,@mbmf_fund,@sinda_fund,@ecf_fund,@cchest_fund,@remarks,@images,@Company_Id,@empstatid,@groupid,@leaveCarryForward,@giro_acc_name,@localaddress2,@foreignaddress1,@foreignaddress2,@time_card_no,@foreignpostalcode,CONVERT(DATETIME, @pp_issue_date, 103),@leaves_remaining,@worker_levy,CONVERT(DATETIME, @wp_application_date, 103),@hourlyRateMode,@hourlyRate,@dailyRateMode,@dailyRate,@wday_per_week,@emp_ref_type,@fund_optout,@emp_category,@v1rate,@v2rate,@v3rate,@v4rate,@batch_no,CONVERT(DATETIME, @wp_issue_date, 103),CONVERT(DATETIME, @wp_arrival_date, 103),@photo_no,@wp_number,@shipyard_quota,@block_no,@street_name,@unit_no,@level_no,@ot1rate,@ot2rate,@EmeConPer,@EmeConPerRel,@EmeConPerPh1,@EmeConPerPh2,@EmeConPerAdd,@EmeConPerRem,@bloodgroup,@agent_id,@mye_cert_id,@pay_supervisor,@payrolltype,@compcpffh, @compfundfh, @tssupervisor, @halfsalary)          
--------          SELECT @UCode = @@IDENTITY        
--------        
--------          SELECT @username = @compcode + CONVERT(VARCHAR(50), @@IDENTITY)        
--------        
--------          UPDATE employee        
--------          SET    username = @username        
--------          WHERE  emp_code = @@IDENTITY        
--------        
--------          UPDATE EmployeeBulkImport        
--------          SET    Status = 'Imported',        
--------                 Deleted = 4        
--------          WHERE  Deleted = 3        
--------             AND (Upper(Ltrim(Rtrim(NRIC))) = Upper(Ltrim(Rtrim(@ic_pp_number)))        
--------                   OR Upper(Ltrim(Rtrim(FIN))) = Upper(Ltrim(Rtrim(@ic_pp_number))))        
--------        
--------          IF (Isnull(@safetypass_id, 0) > 0)        
--------              BEGIN        
--------                  INSERT INTO [Safetypass_details]        
--------                              (empid,safetypass_id,safetypass_sno,safetypass_expiry)        
--------                  VALUES      (@UCode,@safetypass_id,@safetypass_sno,CONVERT(DATETIME, @safetypass_expiry, 103))        
--------              END        
--------        
--------          IF (@leavemodel = 3        
--------               OR @leavemodel = 4        
--------               OR @leavemodel = 6        
--------               OR @leavemodel = 8)  
--------              BEGIN  
--------                  --Insert Into EmployeeLeavesAllowed values(@@identity, 8, null, Year(GetDate()))  
--------                  EXEC Sp_yosleavesallowed @@IDENTITY,0        
--------              END        
-------- END  
--------GO
-------Merging 9.0
--sp_GetEmployees 2,1, 2        
--------CREATE PROCEDURE [dbo].[Sp_getemployees] @company_id INT,
--------                                         @show       INT,
--------                                         @UserID     INT
--------AS
--------    BEGIN
--------        DECLARE @select VARCHAR(8000)
--------        DECLARE @where VARCHAR(100)
--------
--------        SELECT *
--------        INTO   #EmployeeTemp
--------        FROM   Employee
--------
--------        DECLARE @ID AS INT
--------        DECLARE @WorkFlowID AS INT
--------        DECLARE @RowID AS INT
--------
--------        CREATE TABLE #Temp1
--------            (
--------                 ID             INT,
--------                 WORKFLOWID     INT,
--------                 ROWID          INT,
--------                 PAYROLLGROUPID INT
--------            )
--------
--------        DECLARE @grpname AS VARCHAR(20)
--------
--------        SELECT @grpname = GroupName
--------        FROM   UserGroups
--------        WHERE  GroupID IN (SELECT GroupID
--------                           FROM   Employee
--------                           WHERE  Emp_Code = @UserID)
--------
--------        SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID
--------        INTO   #Temp
--------        FROM   Employee EM
--------               INNER JOIN (SELECT WL.*
--------                           FROM   EmployeeWorkFlowLevel WL
--------                           WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID
--------
--------        DECLARE curse CURSOR FOR
--------            SELECT *
--------            FROM   #Temp
--------
--------        OPEN curse
--------
--------        FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
--------
--------        WHILE @@FETCH_STATUS = 0
--------            BEGIN
--------                --PRINT @RowID                  
--------                INSERT INTO #Temp1
--------                SELECT @ID,@WorkFlowID,RowID,PayrollGroupID
--------                FROM   EmployeeWorkFlowLevel
--------                WHERE  WorkFLowID = @WorkFLowID
--------                   AND RowID <= @RowID
--------
--------                FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
--------            END
--------
--------        SELECT DISTINCT Te.ID,EG.Emp_ID
--------        INTO   #Temp2
--------        FROM   #Temp1 Te
--------               INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID
--------        WHERE  EG.Emp_ID = @UserID
--------
--------        CLOSE curse
--------
--------        DEALLOCATE curse
--------
--------        IF (@grpname != 'Super Admin')
--------            BEGIN
--------                DELETE FROM #EmployeeTemp
--------                WHERE  Pay_supervisor NOT IN (SELECT ID
--------                                              FROM   #Temp2)
--------                   AND (Pay_supervisor > 0)
--------            END
--------
--------        SET @select='SELECT Pay_supervisor, emp_code, emp_name + '' '' + emp_lname AS emp_name,(SELECT DeptName FROM department WHERE id= dept_id) Department, time_card_no, empcpftype, emp_alias, emp_type, ic_pp_number, wp_exp_date,pr_date, address, pay_frequency, payrate, postal_code, phone, hand_phone, email,time_card_no, sex, marital_status, place_of_birth, date_of_birth, education,income_taxid, termination_reason, giro_bank, giro_code, giro_branch, giro_acct_number,joining_date, probation_period, confirmation_date, termination_date, cpf_entitlement,cpf_employer, cpf_employee, employee_cpf_acct, employer_cpf_acct, emp_supervisor,ot_entitlement, payment_mode, fw_code, fw_levy, sdf_required, cdac_fund, mbmf_fund,sinda_fund, ecf_fund, cchest_fund, email_payslip, wh_tax_pct, wh_tax_amt, remarks,images, Insurance_number, insurance_expiry, CSOC_number, CSOC_expiry, passport,passport_expiry, nationality_id, country_id, religion_id, race_id, desig_id, dept_id,emp_group_id, (SELECT empgroupname FROM emp_group WHERE [id]= e.emp_group_id) empgroupname, (SELECT Designation FROM Designation WHERE id= desig_id) Designation From #EmployeeTemp e '
--------
--------        IF (@show = 1
--------             OR @show = 0)
--------            BEGIN
--------                SELECT @where = ' Where StatusID=1 And Termination_Date is null And Company_ID=' + CAST(@company_id AS VARCHAR)
--------            END
--------
--------        IF (@show = 2)
--------            BEGIN
--------                SELECT @where = ' Where Termination_Date is not null  And Company_ID=' + CAST(@company_id AS VARCHAR)
--------            END
--------
--------        IF (@show = 3)
--------            BEGIN
--------                SELECT @where = ' Where 1=1  And Company_ID=' + CAST(@company_id AS VARCHAR)
--------            END
--------
--------        IF (@show = 4)
--------            BEGIN
--------                SELECT @where = ' Where StatusID=3 And Company_ID=' + CAST(@company_id AS VARCHAR)
--------            END
--------
--------        SET @select = @select + @where + ' Order By Emp_Name'
--------
--------        EXEC (@select)
--------
--------        DROP TABLE #EmployeeTemp
--------
--------        DROP TABLE #Temp1
--------
--------        DROP TABLE #Temp2
--------    END 
--------GO
-------Merging 9.0
----------CREATE PROCEDURE [dbo].[Sp_RightsMenuHeader]    
----------       @adminId AS NVARCHAR(30) ,    
----------       @comp_id AS NVARCHAR(5),    
----------       @ANBPRODUCT as varchar(3)  
----------AS   
----------
----------	Select * Into #U From UserRights
----------
----------	if (@comp_id  != 1)
----------	BEGIN
----------		Delete From #U Where RightName Like '%Consolidate%'
----------	END
----------  
---------- IF (@ANBPRODUCT = 'SME')  
---------- BEGIN  
----------       SELECT   RH.RIGHTID, RIGHTHEADER, UPPER(RightName) AS RightName    
----------       FROM     EMPLOYEE E    
----------       INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID    
----------       INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID    
----------       INNER JOIN #U UR ON GR.RightID = UR.RightID    
----------       RIGHT OUTER JOIN RightsHeader RH ON UR.HEADERID = RH.RIGHTID    
----------       INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID    
----------       WHERE    E.UserName = @adminId AND    
----------                RH.RIGHTID IS NOT NULL AND    
----------                C.COMPANY_ID = @comp_id  And (UR.Product = 0 OR UR.Product = 2 OR UR.Product is null)  
----------       GROUP BY RIGHTHEADER, RightName, RH.RIGHTID, RightOrder    
----------       ORDER BY RH.RIGHTID, RightOrder     
---------- END  
---------- IF (@ANBPRODUCT = 'WMS')  
---------- BEGIN  
----------       SELECT   RH.RIGHTID, RIGHTHEADER, UPPER(RightName) AS RightName    
----------       FROM     EMPLOYEE E    
----------       INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID    
----------       INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID    
----------       INNER JOIN #U UR ON GR.RightID = UR.RightID    
----------       RIGHT OUTER JOIN RightsHeader RH ON UR.HEADERID = RH.RIGHTID    
----------       INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID    
----------       WHERE    E.UserName = @adminId AND    
----------                RH.RIGHTID IS NOT NULL AND    
----------                C.COMPANY_ID = @comp_id  And (UR.Product = 1 OR UR.Product = 2)  
----------       GROUP BY RIGHTHEADER, RightName, RH.RIGHTID, RightOrder    
----------       ORDER BY RH.RIGHTID, RightOrder     
---------- END  
----------
----------Drop Table #U
----------
----------GO
-----------Merging 9.0
--------CREATE PROCEDURE [dbo].[Sp_userrightsall] @userid     AS NVARCHAR(30),
--------                                         @compId     AS INT,
--------                                         @ANBPRODUCT AS VARCHAR(3)
--------AS
--------
--------	Select * Into #U From UserRights
--------
--------	if (@compId  != 1)
--------	BEGIN
--------		Delete From #U Where RightName Like '%Consolidate%'
--------	END
--------
--------  IF (@ANBPRODUCT = 'SME')
--------      BEGIN
--------          SELECT GR.RIGHTID,Upper(RightName) AS RightName
--------          FROM   EMPLOYEE E
--------                 INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID
--------                 INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID
--------                 INNER JOIN #U UR ON GR.RightID = UR.RightID
--------                 INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID
--------          WHERE  (E.UserName = @userid
--------                   OR emp_alias = @userid)
--------             AND C.COMPANY_ID = @compId
--------             AND (UR.Product = 0
--------                   OR UR.Product = 2
--------                   OR UR.Product IS NULL)
--------          GROUP  BY RightName,GR.RIGHTID,RightOrder
--------          ORDER  BY GR.RightID
--------
--------      END
--------
--------  IF (@ANBPRODUCT = 'WMS')
--------      BEGIN
--------          SELECT GR.RIGHTID,Upper(RightName) AS RightName
--------          FROM   EMPLOYEE E
--------                 INNER JOIN UserGroups U ON E.GROUPID = U.GROUPID
--------                 INNER JOIN GroupRights GR ON U.GROUPID = GR.GROUPID
--------                 INNER JOIN #U UR ON GR.RightID = UR.RightID
--------                 INNER JOIN COMPANY C ON E.COMPANY_ID = C.COMPANY_ID
--------          WHERE  (E.UserName = @userid
--------                   OR emp_alias = @userid)
--------             AND C.COMPANY_ID = @compId
--------             AND (UR.Product = 1
--------                   OR UR.Product = 2)
--------          GROUP  BY RightName,GR.RIGHTID,RightOrder
--------          ORDER  BY GR.RightID
--------      END 
--------
--------Drop Table #U
--------GO
--------Merging 9.0
--------sp_ApprovePayRoll 2,131,2009,2,'P'  
--------sp_ApprovePayRoll 2,41,2010,2,'G'    
--------CREATE PROC [dbo].[Sp_approvepayroll] @company_id INT,
--------                                     @month      INT,
--------                                     @year       INT,
--------                                     @UserID     INT,
--------                                     @Status     VARCHAR(1)
--------AS
--------  DECLARE @ID AS INT
--------  DECLARE @WorkFlowID AS INT
--------  DECLARE @RowID AS INT
--------  DECLARE @DATEINYEAR TABLE (
--------      ROWID           INT,
--------      Emp_Code        INT,
--------      [Year]          INT,
--------      [Month]         INT,
--------      [MonthName]     VARCHAR(100),
--------      PayStartDate    DATETIME,
--------      PayEndDate      DATETIME,
--------      PaySubStartDate DATETIME,
--------      PaySubEndDate   DATETIME,
--------      PayStartDay     INT,
--------      PayEndDay       INT,
--------      PaySubStartDay  INT,
--------      PaySubEndDay    INT,
--------      ISEOM           VARCHAR(3))
--------  
--------  CREATE TABLE #Temp1
--------      (
--------           ID             INT,
--------           WORKFLOWID     INT,
--------           ROWID          INT,
--------           PAYROLLGROUPID INT
--------      )
--------  
--------  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID
--------  INTO   #Temp
--------  FROM   Employee EM
--------         INNER JOIN (SELECT WL.*
--------                     FROM   EmployeeWorkFlowLevel WL
--------                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID
--------  
--------  DECLARE curse CURSOR FOR
--------      SELECT *
--------      FROM   #Temp
--------  
--------  OPEN curse
--------  
--------  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
--------  
--------  WHILE @@FETCH_STATUS = 0
--------      BEGIN
--------          --PRINT @RowID                
--------          INSERT INTO #Temp1
--------          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID
--------          FROM   EmployeeWorkFlowLevel
--------          WHERE  WorkFLowID = @WorkFLowID
--------             AND RowID <= @RowID
--------  
--------          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
--------      END
--------  
--------  SELECT DISTINCT Te.ID,EG.Emp_ID
--------  INTO   #Temp2
--------  FROM   #Temp1 Te
--------         INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID
--------  WHERE  EG.Emp_ID = @UserID
--------  
--------  CLOSE curse
--------  
--------  DEALLOCATE curse
--------  
--------  INSERT @DATEINYEAR
--------         (ROWID,Emp_Code,[Year],[Month],[MonthName],PayStartDate,PayEndDate,PaySubStartDate,PaySubEndDate,PayStartDay,PayEndDay,PaySubStartDay,PaySubEndDay,ISEOM)
--------  EXEC Sp_getpayrollmonth @month,0,0
--------  
--------  --SELECT trx_id,emp_id,(SELECT Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') 'emp_name'  
--------  --FROM   employee  
--------  --WHERE  emp_code = de.emp_id) emp_name,(SELECT DeptName  
--------  --FROM   Department  
--------  --WHERE  company_id = @company_id  
--------  --AND id = (SELECT dept_id  
--------  --FROM   employee  
--------  --WHERE  emp_code = de.emp_id)) DeptName,  
--------  --CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,AdditionsWONH = CASE  
--------  --WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0  
--------  --ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))  
--------  --END,(CONVERT(NUMERIC(18, 2), total_additions)) Additions,CONVERT(NUMERIC(18, 2), total_deductions) Deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay,OT1Rate,OT2Rate,OT1_wh,OT2_wh,CONVERT(NUMERIC(18, 2), Ot1_e) Ot1_e,CONVERT(NUMERIC(18, 2), OT2_e) OT2_e,wdays,OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount,
--------  --Isnull((SELECT Pay_supervisor FROM   employee WHERE  emp_code = de.emp_id), 0) Pay_supervisor,  
--------  --(SELECT Isnull(email, '') FROM   employee WHERE  emp_code = de.emp_id) email,  
--------  --CONVERT(NUMERIC(18, 2), NH_e) NH_e   
--------  --INTO   #EmployeeTemp  
--------  --FROM   prepare_payroll_detail de  
--------  --WHERE  emp_id IN (SELECT emp_code  
--------  --                FROM   employee  
--------  --                WHERE  company_id = @company_id)  
--------  -- AND [status] = @Status  
--------  -- AND trx_id IN (SELECT trx_id  
--------  --                FROM   prepare_payroll_hdr  
--------  --                WHERE  (start_period >= (SELECT PaySubStartDate  
--------  --                                         FROM   @DATEINYEAR)  
--------  --                        AND end_period <= (SELECT PaySubEndDate  
--------  --                                           FROM   @DATEINYEAR))  
--------  --                   AND YEAR(start_period) = @year)  
--------  --ORDER  BY emp_name  
--------  
--------SELECT pd.trx_id,pd.emp_id,REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '') emp_name,de.deptname,em.Pay_supervisor,em.password,em.email,em.email_payslip,
--------CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,
--------AdditionsWONH = CASE
-------- WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0
-------- ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))
-------- END,
--------CONVERT(NUMERIC(18, 2), NH_e) NH_e,
--------CONVERT(NUMERIC(18, 2), pd.Ot1_e) Ot1_e,
--------CONVERT(NUMERIC(18, 2), pd.OT2_e) OT2_e,
--------(CONVERT(NUMERIC(18, 2), total_additions)) Additions,
--------CONVERT(NUMERIC(18, 2), total_deductions) Deductions,
--------CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay, Time_Card_No
----------,pd.OT1Rate,pd.OT2Rate,pd.OT1_wh,pd.OT2_wh,  
----------wdays,pd.OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,  
----------pd.empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount  
--------  INTO   #EmployeeTemp
--------  FROM   prepare_payroll_hdr ph
--------         INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id
--------         INNER JOIN Employee em ON pd.emp_id = em.emp_code
--------         LEFT OUTER JOIN Department de ON em.dept_id = de.id
--------  WHERE  pd.status = @Status
--------     AND (CONVERT(DATETIME, ph.start_period, 103) >= (SELECT PaySubStartDate
--------                                                      FROM   @DATEINYEAR)
--------          AND CONVERT(DATETIME, ph.end_period, 103) <= (SELECT PaySubEndDate
--------                                                        FROM   @DATEINYEAR))
--------     AND em.company_id = @company_id
--------  ORDER  BY REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '')
--------  
--------  DELETE FROM #EmployeeTemp
--------  WHERE  Pay_supervisor NOT IN (SELECT ID
--------                                FROM   #Temp2)
--------     AND (Pay_supervisor > 0)
--------  
--------  SELECT *
--------  FROM   #EmployeeTemp
--------  
--------  SELECT COUNT(*) Cnt
--------  FROM   #EmployeeTemp
--------  
--------  DROP TABLE #Temp
--------  
--------  DROP TABLE #Temp1
--------  
--------  DROP TABLE #Temp2
--------  
--------  DROP TABLE #EmployeeTemp
--------GO
--------Merging 9.0
--------CREATE PROCEDURE [dbo].[Sp_addtype_add] @desc                VARCHAR(100),  
--------                                       @cpf                 VARCHAR(10),  
--------                                       @company_id          INT,  
--------                                       @type_of_wage        VARCHAR(3),  
--------                                       @optionselection     VARCHAR(20),  
--------                                       @tax_payable         VARCHAR(3),  
--------                                       @tax_payable_options VARCHAR(5),  
--------                                       @typeshared VARCHAR(3),
--------                                       @accountcode VARCHAR(20)
--------AS  
--------    BEGIN  
--------        INSERT INTO [additions_types]  
--------                    ([desc],cpf,company_id,type_of_wage,optionselection,tax_payable,tax_payable_options, isShared,AccountCode)  
--------        VALUES      (@desc,@cpf,@company_id,@type_of_wage,@optionselection,@tax_payable,CASE  
--------                                                                                          WHEN Len(@tax_payable_options) > 0 THEN @tax_payable_options  
--------                                                                                          ELSE 0  
--------                                                                                        END, @typeshared,@accountcode)  
--------    END  
--------GO
--------Merging 9.0
--------CREATE PROCEDURE [dbo].[sp_addtype_update]    
--------       @desc VARCHAR(100) ,    
--------       @cpf VARCHAR(10) ,    
--------       @id INT ,    
--------       @type_of_wage VARCHAR(3) ,    
--------       @optionselection VARCHAR(20) ,    
--------       @formulatype INT ,    
--------       @formulacalc VARCHAR(50) ,    
--------       @tax_payable VARCHAR(3) ,    
--------       @tax_payable_options VARCHAR(5) ,  
--------       @typeshared VARCHAR(3),
--------       @accountcode VARCHAR(20)
--------AS     
--------       BEGIN        
--------    
--------             UPDATE [additions_types]    
--------             SET    [desc] = @desc, cpf = @cpf, type_of_wage = @type_of_wage, optionselection = @optionselection,    
--------                    formulatype = @formulatype, formulacalc = @formulacalc, tax_payable = @tax_payable,    
--------                    tax_payable_options = CASE WHEN LEN(@tax_payable_options) > 0 THEN @tax_payable_options    
--------                                               ELSE 0    
--------                                          END, isShared=@typeshared,AccountCode=@accountcode
--------             WHERE  [id] = @id    
--------       END    
--------GO
--------Merging 9.0
--------CREATE PROCEDURE [dbo].[Sp_dedtype_add] @desc                VARCHAR(100),    
--------                                       @cpf                 VARCHAR(10),    
--------                                       @company_id          INT,    
--------                                       @typeshared VARCHAR(3),
--------										@accountcode VARCHAR(20)
--------AS    
--------    BEGIN    
--------        INSERT INTO [deductions_types]    
--------                    ([desc],cpf,company_id,isShared,accountcode)    
--------        VALUES      (@desc,@cpf,@company_id,@typeshared,@accountcode)    
--------    END     
--------GO
----------CREATE PROCEDURE [dbo].[sp_dedtype_update]      
----------       @desc VARCHAR(100) ,      
----------       @cpf VARCHAR(10) ,      
----------       @id INT ,      
----------    @typeshared VARCHAR(3),
----------	@accountcode VARCHAR(20)
----------AS       
----------       BEGIN          
----------      
----------             UPDATE [deductions_types]      
----------             SET    [desc] = @desc, cpf = @cpf, isShared=@typeshared,accountcode=@accountcode
----------             WHERE  [id] = @id      
----------       END   
----------GO
---------Merging 9.0

------------Exec sp_GetLeaveSumDet 2010, '0,89,6,176,178,53,18,68,54,79,92,55,222,3,103,11,217,104,106,107,108,109,111,112,216,113,114,4,115,35,225,116,17,26,247,56,117,118,90,134,105,119,231,120,121,122,57,123,124,238,13,80,125,126,127,160,128,234,240,51,167,14,2,91,5,12,24,242,93,165,101,226,221,142,130,131,132,133,81,69,168,135,136,137,138,139,140,44,220,141,23,143,164,144,230,145,146,147,148,149,159,150,151,152,70,153,154,155,156,78,248,58,232,71,60,7,72,94,243,172,173,236,25,241,20,180,179,181,182,183,184,185,61,186,187,188,189,190,227,166,191,208,192,73,16,193,194,195,196,197,198,199,200,177,15,67,215,52,233,201,213,98,252,298,82,202,203,204,62,224,110,214,205,74,206,169,223,239,251,100,207,246,245,281,229,219,75,235,36,95,63,171,129,41,99,64,228,19,8,83,84,10,85,47,86,87,48,170,96,244,49,218,50,175,157,237,65,76,40,9,88,97,66,77', '0,8,21,12,14,13,16,15,10,19,11,9,18', 2, 1, 12
----------CREATE PROC [dbo].[Sp_getleavesumdet] @year       INT,
----------                                     @EmpID      VARCHAR(8000),
----------                                     @LeaveID    VARCHAR(8000),
----------                                     @ReportType INT = 0,
----------                                     @frommonth  INT = -1,
----------                                     @endmonth   INT = -1
----------AS
----------    BEGIN
----------        IF (@ReportType = 1)
----------            BEGIN
----------                SET @endmonth = -1
----------
----------                IF (@frommonth = 0)
----------                    BEGIN
----------                        SET @frommonth = 12
----------                    END
----------            END
----------
----------        DECLARE @select AS VARCHAR(8000)
----------        DECLARE @where VARCHAR(8000)
----------        DECLARE @where1 VARCHAR(8000)
----------        DECLARE @leaves AS INT
----------        DECLARE @appliedon DATETIME
----------        DECLARE @LEAVEAVAIL TABLE (
----------            ID                    INT,
----------            EMP_ID                INT,
----------            LEAVE_YEAR            FLOAT,
----------            [TYPE]                VARCHAR(50),
----------            CompanyLeaveAllowed   FLOAT,
----------            LeavesAllowed         FLOAT,
----------            LY_Leaves_Bal         FLOAT,
----------            LeavesEarned          FLOAT,
----------            PaidLeaves            FLOAT,
----------            UnpaidLeaves          FLOAT,
----------            PendingLeaves         FLOAT,
----------            LeavesAvailable       FLOAT,
----------            TotalLeavesTaken      FLOAT,
----------            ActualLeavesAvailable FLOAT,
----------            leavesfromly          FLOAT,
----------            SHOWLEAVEMODEL        INT )
----------
----------        SELECT EMP_CODE,Company_ID
----------        INTO   ##EmployeeTemp
----------        FROM   Employee
----------
----------        IF Len(@EmpID) > 0
----------            BEGIN
----------                SELECT @where = 'Where Emp_Code Not In (' + @EmpID + ')'
----------            END
----------
----------        IF Len(@LeaveID) > 0
----------            BEGIN
----------                SELECT @where1 = 'Where ID Not In (' + @LeaveID + ')'
----------            END
----------
----------        SELECT @select = 'Delete From ##EmployeeTemp ' + @where
----------
----------        EXEC (@select)
----------
----------        SELECT TOP 1 @appliedon = DateInYear
----------        FROM   dbo.DateInYear AS diy
----------        WHERE  YEAR(DateInYear) = @year
----------           AND MONTH(DateInYear) = @frommonth
----------        ORDER  BY DateInYear DESC
----------
----------        --SET @today = CONVERT(VARCHAR(10), @appliedon, 103)                      
----------        IF (@ReportType = 1)
----------            BEGIN
----------                DECLARE db_cursor CURSOR FOR
----------                    SELECT Emp_Code
----------                    FROM   ##EmployeeTemp
----------
----------                OPEN db_cursor
----------
----------                FETCH NEXT FROM db_cursor INTO @EmpID
----------
----------                WHILE @@FETCH_STATUS = 0
----------                    BEGIN
----------                        INSERT @LEAVEAVAIL
----------                               (id,emp_id,leave_year,[TYPE],companyleaveallowed,LY_Leaves_Bal,leavesallowed,leavesearned,paidleaves,unpaidleaves,pendingleaves,leavesavailable,actualleavesavailable,totalleavestaken,SHOWLEAVEMODEL)
----------                        EXEC Sp_getemployeeleavepolicy @EmpID,@year,@appliedon,0
----------
----------                        FETCH NEXT FROM db_cursor INTO @EmpID
----------                    END
----------
----------                CLOSE db_cursor
----------
----------                DEALLOCATE db_cursor
----------
----------                SELECT *
----------                INTO   ##Temp
----------                FROM   @LEAVEAVAIL
----------
----------                SELECT @select = 'Delete From ##Temp ' + @where1
----------
----------                EXEC (@select)
----------
----------                SELECT C.Company_Name,Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') [Full_Name],DeptName,T.TYPE [Leave_Type],T.CompanyLeaveAllowed CAL,Isnull(T.LeavesAllowed, 0) CYL,T.LY_Leaves_Bal LYCF,T.LeavesEarned CYLE,T.PaidLeaves [Paid_Leaves],T.UnpaidLeaves [Unpaid_Leaves],T.PendingLeaves [Pending_Leaves],T.TotalLeavesTaken [Leaves_Taken],T.ActualLeavesAvailable [Balance_Leaves]
----------                FROM   ##Temp T
----------                       LEFT OUTER JOIN Employee E ON T.Emp_ID = E.Emp_CODE
----------                       INNER JOIN Company C ON E.Company_ID = C.Company_ID
----------					   Left Outer join department d on E.dept_id = d.id
----------                ORDER  BY C.Company_name,e.emp_name,T.TYPE
----------
----------                DROP TABLE ##EmployeeTemp
----------
----------                DROP TABLE ##Temp
----------            END
----------        ELSE
----------            BEGIN
----------                SELECT lt.id,Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') emp_name,DeptName,lt.TYPE,el.start_date,el.end_date,res.paidleaves,res.unpaidleaves,el.approver,el.remarks,e.emp_code,E.Company_ID
----------                INTO   ##TempNew
----------                FROM   (SELECT Res.emp_id,Res.trx_id,Res.leave_type id,Res.Mth,SUM(Res.PaidLeaves) PaidLeaves,SUM(Res.UnPaidLeaves) UnPaidLeaves
----------                        FROM   (SELECT emp_id,trx_id,leave_type,Mth,PaidLeaves,0 UnPaidLeaves
----------                                FROM   (SELECT El.Emp_ID,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) PaidLeaves
----------                                        FROM   Emp_Leaves el
----------                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
----------                                        WHERE  --El.Emp_ID = @empid AND                      
----------                                        (MONTH(Eld.Leave_Date) >= @frommonth
----------                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
----------                                        AND YEAR(eld.leave_date) = @year
----------                                        AND (Eld.unpaid_leave = 0
----------                                         AND eld.halfday_leave = 1)
----------                                        AND El.Status = 'Approved'
----------                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)
----------                                        UNION ALL
----------                                        SELECT El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,COUNT(Eld.unpaid_leave) PaidLeaves
----------                                        FROM   Emp_Leaves el
----------                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
----------                                        WHERE  --El.Emp_ID = @empid AND                      
----------                                        (MONTH(Eld.Leave_Date) >= @frommonth
----------                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
----------                                        AND YEAR(eld.leave_date) = @year
----------                                        AND (Eld.unpaid_leave = 0
----------                                         AND eld.halfday_leave = 0)
----------                                        AND El.Status = 'Approved'
----------                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)) R
----------                                UNION
----------                                SELECT emp_id,trx_id,leave_type,Mth,0 PaidLeaves,UnPaidLeaves
----------                                FROM   (SELECT El.Emp_ID,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) UnPaidLeaves
----------                                        FROM   Emp_Leaves el
----------                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
----------                                        WHERE  --El.Emp_ID = @empid AND                      
----------                                        (MONTH(Eld.Leave_Date) >= @frommonth
----------                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
----------                                        AND YEAR(eld.leave_date) = @year
----------                                        AND (Eld.unpaid_leave = 1
----------                                         AND eld.halfday_leave = 1)
----------                                        AND El.Status = 'Approved'
----------                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)
----------                                        UNION ALL
----------                                        SELECT El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date) Mth,COUNT(Eld.unpaid_leave) UnPaidLeaves
----------                                        FROM   Emp_Leaves el
----------                                               INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
----------                                        WHERE  --El.Emp_ID = @empid AND                      
----------                                        (MONTH(Eld.Leave_Date) >= @frommonth
----------                                         AND MONTH(Eld.Leave_Date) <= @endmonth)
----------                                        AND YEAR(eld.leave_date) = @year
----------                                        AND (Eld.unpaid_leave = 1
----------                                         AND eld.halfday_leave = 0)
----------                                        AND El.Status = 'Approved'
----------                                        GROUP  BY El.Emp_Id,El.trx_id,el.leave_type,MONTH(Eld.leave_date)) Res) Res
----------                        GROUP  BY Res.emp_id,Res.trx_id,Res.leave_type,Res.Mth) Res
----------                       INNER JOIN Emp_Leaves El ON Res.trx_ID = El.trx_ID
----------                       INNER JOIN leave_types lt ON Res.id = lt.id
----------                       INNER JOIN Employee E ON Res.Emp_ID = E.Emp_CODE
----------						Left Outer join department d on E.dept_id = d.id
----------                SELECT @select = 'Delete From ##TempNew ' + @where
----------
----------                EXEC (@select)
----------
----------                SELECT @select = 'Delete From ##TempNew ' + @where1
----------
----------                EXEC (@select)
----------
----------                SELECT C.Company_Name,T.Emp_name [Full_Name],DeptName,[Type] [Leave_Type],[start_date] [From_Date],[end_date] [Till_Date],[paidleaves] [Paid_Leaves],[unpaidleaves] [Unpaid_Leaves],[Approver],T.[Remarks]
----------                FROM   ##TempNew T
----------                       INNER JOIN Company C ON T.Company_ID = C.Company_ID
----------                ORDER  BY C.Company_Name,T.Emp_Name,[start_date]
----------
----------                DROP TABLE ##EmployeeTemp
----------
----------                DROP TABLE ##TempNew
----------            END
----------    END 
----------
----------GO
----------Merging 9.0
----------sp_ProcessTimesheet '01/06/2010', '05/06/2010', 2, '-1', '7', 'No', 0, 0
--------CREATE PROCEDURE [dbo].[Sp_processtimesheet] (@start_date VARCHAR(10),
--------                                             @end_date   VARCHAR(10),
--------                                             @compid     VARCHAR(10),
--------                                             @empid      VARCHAR(8000),
--------                                             @subprojid  VARCHAR(8000),
--------                                             @isEmpty    VARCHAR(3),
--------                                             @sessid     FLOAT,
--------                                             @REPID      INT=0)
--------AS
--------    BEGIN
--------        DECLARE @colname VARCHAR(8000)
--------        DECLARE @select VARCHAR(8000)
--------        DECLARE @whereproj VARCHAR(8000)
--------        DECLARE @whereemp VARCHAR(8000)
--------        DECLARE @wheresessid VARCHAR(100)
--------        DECLARE @startdate AS DATETIME
--------        DECLARE @enddate AS DATETIME
--------        DECLARE @ConsEarlyInBy AS INT
--------        DECLARE @softdelete AS INT
--------
--------        SET @ConsEarlyInBy = 0
--------        SET @startdate = CONVERT(DATETIME, @start_date, 103)
--------        SET @enddate = CONVERT(DATETIME, @end_date, 103)
--------
--------		 SELECT *                
--------		 INTO   #ActLogsTemp                
--------		 FROM   Actatek_Logs                             
--------			WHERE  CONVERT(DATETIME, TimeEntry, 103) BETWEEN @startdate AND @enddate
--------			Order By  CONVERT(DATETIME, TimeEntry, 103)
--------
--------
--------        IF (@sessid > 0)
--------            BEGIN
--------                SET @softdelete=2
--------            --                      SELECT    @wheresessid = 'Where SessionID Not In (' + CONVERT(VARCHAR, @sessid) + ')'                                        
--------            --                      SELECT    @select = 'Delete From #ActLogsTemp ' + @wheresessid                                        
--------            --                      EXEC (@select)                                    
--------            END
--------        ELSE
--------            BEGIN
--------                SET @softdelete=0
--------            END
--------
--------        SELECT ROWID = IDENTITY(INT, 1, 1),'NH' = CASE
--------                                                    WHEN TodayPH = 1 THEN 0
--------                                                    WHEN Wdays_Per_week != 7
--------                                                         AND Roster_Day = 'Sun' THEN 0
--------                                                    WHEN Wdays_Per_week <= 7
--------                                                         AND TodayPH = 0
--------                                                         AND (HrsinMins - CompanyWorkHours) >= 0 THEN CompanyWorkHours
--------                                                    WHEN Wdays_Per_week <= 7
--------                                                         AND TodayPH = 0
--------                                                         AND (HrsinMins - CompanyWorkHours) < 0 THEN HrsinMins
--------                                                    ELSE 0
--------                                                  END,'OT1' = CASE
--------                                                                WHEN TodayPH = 1 THEN 0
--------                                                                WHEN Wdays_Per_week != 7
--------                                                                     AND Roster_Day = 'Sun' THEN 0
--------                                                                WHEN Wdays_Per_week <= 7
--------                                                                     AND TodayPH = 0
--------                                                                     AND (HrsinMins - CompanyWorkHours) > 0 THEN (HrsinMins - CompanyWorkHours)
--------                                                                ELSE 0
--------                                                              END,'OT2' = CASE
--------                                                                            WHEN Wdays_Per_week != 7
--------                                                                                 AND Roster_Day = 'Sun' THEN HrsinMins
--------                                                                            WHEN Wdays_Per_week <= 7
--------                                                                                 AND TodayPH = 1 THEN HrsinMins
--------                                                                            ELSE 0
--------                                                                          END,*,0 AS RecordFound
--------        INTO   #RD
--------        FROM   (SELECT CompanyWorkHours=CASE
--------                                          WHEN RosterType = 'NORMAL' THEN dbo.Converttominutes(dbo.Converttohours(Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin)))
--------                                          WHEN RosterType = 'FLEXIBLE' THEN (FlexibleWorkingHr - BreakTimeNHInMin)
--------                                          ELSE 0
--------                                        END,HoursWorked HrsinMins,*
--------                FROM   (SELECT Wdays_per_Week,ID,Emp_ID Emp_Code,Emp_Name,Roster_ID,Roster_Name,Roster_Date TSDate,LEFT(Datename(dw, CONVERT(DATETIME, Roster_Date, 103)), 3) Roster_Day,TimeStart,TimeEnd,CoTimeStart,CoTimeEnd,FirstIn,LastOut,InShortTime,OutShortTime,HoursWorked = CASE
--------                                                                                                                                                                                                                                                                                          WHEN RosterType = 'NORMAL'
--------                                                                                                                                                                                                                                                                                               AND FirstIn IS NOT NULL
--------                                                                                                                                                                                                                                                                                               AND LastOut IS NOT NULL
--------                                                                                                                                                                                                                                                                                               AND @ConsEarlyInBy = 0
--------                                                                                                                                                                                                                                                                                               AND (FirstIn BETWEEN TimeStart AND TimeLateInBy)
--------                                                                                                                                                                                                                                                                                               AND (LastOut BETWEEN TimeEarlyOutBy AND CoTimeend) THEN (Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin + BreakTimeOTInMin))
--------                                                                                                                                                                                                                                                                                          WHEN RosterType = 'NORMAL'
--------                                                                                                                                                                                                                                                                                               AND FirstIn IS NOT NULL
--------                                                                                                                                                                                                                                                                                               AND LastOut IS NOT NULL
--------                                                                                                                                                                                                                                                                                               AND @ConsEarlyInBy = 1
--------                                                                                                                                                                                                                                                                                               AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))
--------                                                                                                                                                                                                                                                                                          WHEN RosterType = 'NORMAL'
--------                                                                                                                                                                                                                                                                                               AND FirstIn IS NOT NULL
--------                                                                                                                                                                                                                                                                                               AND LastOut IS NOT NULL
--------                                                                                                                                                                                                                                                                                               AND @ConsEarlyInBy = 0
--------                                                                                                                                                                                                                                                                                               AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, CoTimeStart, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))
--------                                                                                                                                                                                                                                                                                          WHEN RosterType='FLEXIBLE' Then (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))
--------                                                                                                                                                                                                                                                                                          ELSE 0
--------                                                                                                                                                                                                                                                                                        END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Sub_Project_Name,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,TimeLateInBy,TimeEarlyOutBy,TimeBreakTimeNHAfter,TimeBreakTimeOTAfter,BreakTimeNHInMin,BreakTimeOTInMin,RosterType,FlexibleWorkinghr,PullWorkTimein,Remarks=CASE
nRemarks IS NULL
utRemarks IS NULL THEN ''
nRemarks IS NOT NULL
utRemarks IS NULL THEN InRemarks
nRemarks IS NULL
utRemarks IS NOT NULL THEN OutRemarks
nRemarks IS NOT NULL
utRemarks IS NOT NULL THEN InRemarks

--------                        FROM   (SELECT BreakTimeNHInMin = CASE
--------                                                            WHEN RosterType = 'FLEXIBLE' THEN BreakTimeNH
--------                                                            WHEN RosterType = 'NORMAL'
--------                                                                 AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeNHAfter, 103) + ' ' + BreakTimeNHhr), 103) THEN BreakTimeNH
--------                                                            ELSE 0
--------                                                          END,BreakTimeOTInMin = CASE
--------                                                                                   WHEN RosterType = 'FLEXIBLE' THEN BreakTimeOT
--------                                                                                   WHEN RosterType = 'NORMAL'
--------                                                                                        AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeOTAfter, 103) + ' ' + BreakTimeOThr), 103) THEN BreakTimeOT
--------                                                                                   ELSE 0
--------                                                                                 END,CONVERT(CHAR(5), CONVERT (DATETIME, FirstIn, 105), 108) InShortTime,CONVERT(CHAR(5), CONVERT (DATETIME, LastOut, 105), 108) OutShortTime,*
--------                                FROM   (SELECT CoTimeEnd = CASE
--------                                                             WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + OutTime), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT( VARCHAR, TimeEnd, 103) + ' ' + OutTime), 103)
--------                                                             ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + OutTime), 103)
--------                                                           END,FirstIn=CASE
--------                                                                         WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
--------                                                                                                          FROM   #ActLogsTemp AL
--------                                                                                                          WHERE  AL.SoftDelete = @softdelete
--------                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID
--------                                                                                                             AND AL.UserID = R.Time_Card_No
--------                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
--------                                                                                                             AND Upper(AL.EventID) = 'IN'
--------                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)
--------                                                                         WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
--------                                                                                                            FROM   #ActLogsTemp AL
--------                                                                                                            WHERE  AL.SoftDelete = @softdelete
--------                                                                                                               AND AL.TerminalSN = R.Sub_Project_ID
--------                                                                                                               AND AL.UserID = R.Time_Card_No
--------                                                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))
--------                                                                                                               AND Upper(AL.EventID) = 'IN'
--------                                                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)
--------                                                                         ELSE NULL
--------                                                                       END,LastOut= CASE WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
--------                                                                            FROM   #ActLogsTemp AL
--------                                                                            WHERE  AL.SoftDelete = @softdelete
--------                                                                               AND AL.TerminalSN = R.Sub_Project_ID
--------                                                                               AND AL.UserID = R.Time_Card_No
--------                                                                               AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
--------                                                                               AND Upper(AL.EventID) = 'OUT'
--------                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC)
--------																			WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)
--------                                                                            FROM   #ActLogsTemp AL
--------                                                                            WHERE  AL.SoftDelete = @softdelete
--------                                                                               AND AL.TerminalSN = R.Sub_Project_ID
--------                                                                               AND AL.UserID = R.Time_Card_No
--------                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))
--------                                                                               AND Upper(AL.EventID) = 'OUT'
--------                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) Else Null END,(SELECT TOP 1 AL.Remarks
--------                                                                                                                                          FROM   #ActLogsTemp AL
--------                                                                                                                                          WHERE  AL.SoftDelete = @softdelete
--------                                                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID
--------                                                                                                                                             AND AL.UserID = R.Time_Card_No
--------                                                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
--------                                                                                                                                             AND Upper(AL.EventID) = 'IN'
--------                                                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC) InRemarks,(SELECT TOP 1 AL.Remarks
--------                                                                                                                                                                                                         FROM   #ActLogsTemp AL
--------                                                                                                                                                                                                         WHERE  AL.SoftDelete = @softdelete
--------                                                                                                                                                                                                            AND AL.TerminalSN = R.Sub_Project_ID
--------                                                                                                                                                                                                            AND AL.UserID = R.Time_Card_No
--------                                                                                                                                                                                                            AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))
--------                                                                                                                                                                                                            AND Upper(AL.EventID) = 'OUT'
--------                                                                                                                                                                                                         ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) OutRemarks,*
--------                                        FROM   (SELECT ID,Emp_ID,Emp_Name,Roster_ID,Roster_Name,Roster_Date,TimeStart,TimeEnd = CASE
--------                                                                                                                                  WHEN TimeEnd IS NULL THEN Dateadd(MINUTE, 1410, TimeStart)
--------                                                                                                                                  ELSE TimeEnd
--------                                                                                                                                END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,Sub_Project_Name,CoTimeStart,Wdays_per_Week,TimeLateInBy,TimeEarlyOutBy = CASE
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + EarlyOutBy), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + EarlyOutBy), 103)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                          ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + EarlyOutBy), 103)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                        END,TimeBreakTimeNHAfter = CASE
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + BreakTimeNHHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeNHHr), 103)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + BreakTimeNHHr), 103)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   END,TimeBreakTimeOTAfter = CASE
reakTimeOTHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeOTHr), 103)
imeStart, 103) + ' ' + BreakTimeOTHr), 103)
osterType,FlexibleWorkinghr,PullWorkTimein
--------                                                FROM   (SELECT EY.Wdays_per_Week,Isnull(EY.emp_name, '') + ' ' + Isnull(EY.emp_lname, '') Emp_Name,RD.Roster_ID,RO.Roster_Name,CONVERT(VARCHAR, RD.Roster_Date, 103) Roster_Date,TimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyInBy),TimeLateInBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.LateInBy),TimeEarlyOutBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyOutBy),CoTimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.InTime),Dateadd(MINUTE, -30, CONVERT(DATETIME, (SELECT TOP 1 CONVERT(VARCHAR, RDD.Roster_Date, 101) + ' ' + RDD.EarlyInBy FROM RosterDETail RDD WHERE CONVERT(DATETIME, RDD.Roster_Date, 103) > CONVERT(DATETIME, RD.Roster_Date, 103) ORDER BY RDD.Roster_Date ASC ), 101)) TimeEnd,RD.ID,TodayPH = dbo.Isholiday(@compid, RD.Roster_Date),TomorrowPH = dbo.Isholiday(@compid, RD.Roster_Date + 1),ER.Emp_ID,EY.Time_Card_No,
--------                                                               EP.Sub_Project_ID SubProjectID,
--------                                                                       SP.Sub_Project_ID Sub_Project_ID,
--------                                                                       RD.Intime,RD.Outtime,RD.EarlyInBy,RD.LateInBy,RD.EarlyOutBy,RD.LateOutBy,RD.ClockInBefore,RD.ClockInAfter,RD.ClockOutBefore,RD.ClockOutAfter,RD.BreakTimeNHHr,RD.BreakTimeOThr,RD.BreakTimeNH,RD.BreakTimeOT,RD.NightShift,SP.Sub_Project_Name,RD.RosterType,RD.FlexibleWorkinghr,RD.PullWorkTimein
--------                                                        FROM   RosterDetail RD
--------                                                               INNER JOIN (SELECT DISTINCT Roster_ID,Emp_ID
--------                                                                           FROM   EmployeeAssignedToRoster) ER ON RD.Roster_ID = ER.Roster_ID
--------                                                               INNER JOIN Employee EY ON ER.Emp_ID = EY.Emp_Code
--------                                                               INNER JOIN (SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID
--------                                                                           FROM   ApprovedTimesheet A
--------                                                                                  INNER JOIN SubProject S ON A.Sub_Project_ID = S.Sub_Project_ID
--------                                                                                  INNER JOIN Employee E ON A.Time_Card_No = E.time_card_no
--------                                                                           WHERE  A.SoftDelete = 0
--------                                                                           UNION
--------                                                                           SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID
--------                                                                           FROM   #ActLogsTemp A
--------                                                                                  INNER JOIN SubProject S ON A.TerminalSn = S.Sub_Project_ID
--------                                                                                  INNER JOIN Employee E ON A.UserID = E.time_card_no
--------                                                                           WHERE  A.SoftDelete = 0
--------                                                                           UNION
--------                                                                           SELECT DISTINCT Sub_Project_ID,Emp_ID
--------                                                                           FROM   EmployeeAssignedToProject)
--------                                                                          --                  (SELECT DISTINCT                        
--------                                                                          --                   Sub_Project_ID, Emp_ID                        
--------                                                                          --                   FROM   EmployeeAssignedToProject)             
--------                                                                          EP ON EP.Emp_ID = EY.Emp_Code
--------                                                               INNER JOIN SubProject SP ON EP.Sub_Project_ID = SP.ID
--------                                                               INNER JOIN Roster RO ON RD.Roster_ID = RO.ID
--------                                                        --Inner Join #ActLogsTemp AL                                        
--------                                                        --On SP.Sub_Project_ID = AL.TerminalSN And  convert(varchar,RD.Roster_Date,103) = convert(Varchar,convert(datetime,AL.TimeEntry,103),103)                                        
--------                                                        WHERE  (RD.Roster_Date BETWEEN @startdate AND @enddate)
--------                                                           AND EY.Company_ID = @compid) DE) R) E) E) E) E --Where (E.FirstIn is not null Or E.LastOut is not null)                                        
--------        ORDER  BY E.Emp_Code,E.TSDate,E.SubProjectID
--------
--------        IF Rtrim(@empid) != '-1'
--------            BEGIN
--------                SELECT @whereemp = 'Where Emp_Code Not In (' + @empid + ')'
--------
--------                SELECT @select = 'Delete From #RD ' + @whereemp
--------
--------                EXEC (@select)
--------            END
--------
--------        IF Rtrim(@subprojid) != '-1'
--------            BEGIN
--------                SELECT @whereproj = 'Where SubProjectID Not In (' + @subprojid + ')'
--------
--------                SELECT @select = 'Delete From #RD ' + @whereproj
--------
--------                EXEC (@select)
--------            END
--------
--------        IF Rtrim(@isEmpty) = 'Yes'
--------            BEGIN
--------                SELECT @select = 'Delete From #RD Where InShortTime is not null Or OutShortTime is not null'
--------
--------                EXEC (@select)
--------            END
--------
--------        DECLARE @ROWID          INT,
--------                @Time_Card_No   VARCHAR(10),
--------                @Sub_Project_ID VARCHAR(20),
--------                @Roster_ID      INT,
--------                @TSDate         VARCHAR(10),
--------                @LastOut        DATETIME,
--------                @UDate          DATETIME
--------        DECLARE TempCurs CURSOR FOR
--------            SELECT ROWID,Time_Card_No,Sub_Project_ID,Roster_ID,TSDate
--------            FROM   #RD
--------
--------        OPEN TempCurs
--------
--------        FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate
--------
--------        WHILE @@FETCH_STATUS = 0
--------            BEGIN
--------                SELECT @UDate = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)
--------                                 FROM   #ActLogsTemp
--------                                 WHERE  Upper(TERMINALSN) = @Sub_Project_ID
--------                                    AND EventID LIKE '%IN%'
--------                                    AND CONVERT(CHAR(10), TimeEntry, 108) = @TSDATE
--------                                    AND SoftDelete = @softdelete
--------                                    AND UserID = @Time_Card_No
--------                                    AND Roster_ID = @Roster_ID
--------                                 ORDER  BY CONVERT(DATETIME, TimeEntry, 103) ASC)
--------
--------                IF Len(Isnull(@UDate, 0)) > 1
--------                    BEGIN
--------                        UPDATE #RD
--------                        SET    FirstIn = @UDate
--------                        WHERE  ROWID = @ROWID
--------                           AND FirstIn IS NOT NULL    And @UDate != '1900-01-01 00:00:00.000'
--------                    END
--------
--------                SELECT @LastOut = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)
--------                                   FROM   #ActLogsTemp
--------                                   WHERE  Upper(TERMINALSN) = @Sub_Project_ID
--------                                      AND EventID LIKE '%OUT%'
--------                                      AND SoftDelete = @softdelete
--------                                      AND UserID = @Time_Card_No
--------                                      AND Roster_ID = @Roster_ID
--------                                   ORDER  BY CONVERT(DATETIME, TimeEntry, 103) DESC)
--------
--------                -- IF len(isnull(@LastOut,0)) > 1                              
--------                -- Begin                              
--------                --  Update #RD Set LastOut= @LastOut Where ROWID = @ROWID  And LastOut is not null                               
--------                -- End                              
--------                UPDATE #RD
--------                SET    InShortTime = LEFT(CONVERT(CHAR(10), FirstIn, 108), 5)
--------                WHERE  ROWID = @ROWID
--------                   AND FirstIn IS NOT NULL
--------
--------                UPDATE #RD
--------                SET    OutShortTime = LEFT(CONVERT(CHAR(10), LastOut, 108), 5)
--------                WHERE  ROWID = @ROWID
--------                   AND LastOut IS NOT NULL
--------
--------                FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate
--------            END
--------
--------        CLOSE TempCurs
--------
--------        DEALLOCATE TempCurs
--------
--------        UPDATE #RD
--------        SET    OT1 = NH,
--------               NH = 0
--------        WHERE  PullWorkTimein = 1
--------
--------        UPDATE #RD
--------        SET    OT2 = NH,
--------               NH = 0
--------        WHERE  PullWorkTimein = 2
--------
--------        UPDATE #RD
--------        SET    NH = OT1,
--------               OT1 = 0
--------        WHERE  PullWorkTimein = 3
--------
--------        UPDATE #RD
--------        SET    OT2 = OT1,
--------               OT1 = 0
--------        WHERE  PullWorkTimein = 4
--------
--------        UPDATE #RD
--------        SET    NH = OT2,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 5
--------
--------        UPDATE #RD
--------        SET    OT1 = OT2,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 6
--------
--------        UPDATE #RD
--------        SET    NH = NH + OT1,
--------               OT1 = 0
--------        WHERE  PullWorkTimein = 7
--------
--------        UPDATE #RD
--------        SET    OT1 = NH + OT1,
--------               NH = 0
--------        WHERE  PullWorkTimein = 8
--------
--------        UPDATE #RD
--------        SET    OT2 = NH + OT1,
--------               NH = 0,
--------               OT1 = 0
--------        WHERE  PullWorkTimein = 9
--------
--------        UPDATE #RD
--------        SET    OT1 = NH + OT2,
--------               NH = 0,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 10
--------
--------        UPDATE #RD
--------        SET    OT2 = NH + OT2,
--------               NH = 0
--------        WHERE  PullWorkTimein = 11
--------
--------        UPDATE #RD
--------        SET    NH = NH + OT2,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 12
--------
--------        UPDATE #RD
--------        SET    NH = OT1 + OT2,
--------               OT1 = 0,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 13
--------
--------        UPDATE #RD
--------        SET    OT1 = OT1 + OT2,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 14
--------
--------        UPDATE #RD
--------        SET    OT2 = OT1 + OT2,
--------               OT1 = 0
--------        WHERE  PullWorkTimein = 15
--------
--------        UPDATE #RD
--------        SET    NH = NH + OT1 + OT2,
--------               OT1 = 0,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 16
--------
--------        UPDATE #RD
--------        SET    OT1 = NH + OT1 + OT2,
--------               NH = 0,
--------               OT2 = 0
--------        WHERE  PullWorkTimein = 17
--------
--------        UPDATE #RD
--------        SET    OT2 = NH + OT1 + OT2,
--------               NH = 0,
--------               OT1 = 0
--------        WHERE  PullWorkTimein = 18
--------
--------        UPDATE #RD
--------        SET    HoursWorked = (NH + OT1 + OT2)
--------        WHERE  PullWorkTimein > 0
--------
--------        IF (@sessid != -1)
--------            BEGIN
--------                SELECT RES.*,E.Email EmailSuper
--------                FROM   (SELECT RecordLock = Isnull((SELECT TOP 1 ID
--------                                                    FROM   ApprovedTimeSheet AT
--------                                                    WHERE  AT.SoftDelete = @softdelete
--------                                                       AND AT.Roster_ID = R.Roster_ID
--------                                                       AND AT.Time_Card_No = R.Time_Card_No
--------                                                       AND AT.Sub_Project_ID = R.Sub_Project_ID
--------                                                       AND AT.TimeEntryStart = R.FirstIn
--------                                                       AND AT.TimeEntryEnd = R.LastOut), 0),dbo.Converttohours(R.HoursWorked) HoursWorked,
--------														dbo.Converttohours(R.NH) NH,dbo.Converttohours(R.OT1) OT1,dbo.Converttohours(R.OT2) OT2,
--------														R.CompanyWorkHours,R.HrsinMins,R.Wdays_per_Week,R.ID,R.Emp_Code,R.Emp_Name,R.Roster_ID,
--------														R.Roster_Name,R.TSDate,R.Roster_Day,R.TimeStart,R.TimeEnd,R.CoTimeStart,R.CoTimeEnd,
--------														R.FirstIn,R.LastOut,R.InShortTime,R.OutShortTime,R.TodayPH,R.TomorrowPH,R.Time_Card_No,
--------														R.Sub_Project_ID,R.SubProjectID,R.Sub_Project_Name,R.Intime,R.Outtime,R.EarlyInBy,
--------														R.LateInBy,R.EarlyOutBy,R.LateOutBy,R.ClockInBefore,R.ClockInAfter,R.ClockOutBefore,
--------														R.ClockOutAfter,R.BreakTimeNHHr,R.BreakTimeOThr,R.BreakTimeNH,R.BreakTimeOT,R.NightShift,
--------														R.TimeLateInBy,R.TimeEarlyOutBy,R.TimeBreakTimeNHAfter,R.TimeBreakTimeOTAfter,
--------														R.BreakTimeNHInMin,R.BreakTimeOTInMin,R.RosterType,R.FlexibleWorkinghr,
--------														R.PullWorkTimein,R.HoursWorked HoursWorkedMin,R.NH NHMin,R.OT1 OT1Min,
--------														R.OT2 OT2Min,R.Remarks,TSSup =
--------																				  CASE
--------																					WHEN (E.TimeSupervisor IS NULL
--------																						   OR E.TimeSupervisor = 0) THEN
--------																					S.TimeSupervisor
--------																					ELSE E.TimeSupervisor
--------																				  END,E.Email MyEmail
--------                        FROM   #RD R
--------                               INNER JOIN Employee E ON R.Emp_Code = E.Emp_Code
--------                               INNER JOIN SubProject S ON R.SubProjectID = S.ID) RES
--------                       LEFT OUTER JOIN Employee E ON RES.TSSup = E.Emp_Code
--------                ORDER  BY RES.Emp_Name
--------            END
--------
--------        IF (@REPID = 99) --SUMMARY PROJECT Then Employe Wise          
--------            BEGIN
--------                SELECT RD.Time_Card_No,E.Emp_name [Full_Name],Sub_Project_Name,dbo.Converttohours(RD.HoursWorked) [Hours_Worked],dbo.Converttohours(RD.NH) NH,dbo.Converttohours(RD.OT1) OT1,dbo.Converttohours(RD.OT2) OT2,(E.Hourly_Rate) [Hourly_Rate],((E.Hourly_Rate * E.OT1Rate)) [OT1_Rate],((E.Hourly_Rate * E.OT2Rate)) [OT2_Rate],((E.Hourly_Rate) * dbo.Converttohours(RD.NH)) [Tot_NH],(((E.Hourly_Rate * E.OT1Rate)) * dbo.Converttohours(RD.OT1)) [TotOT1],(((E.Hourly_Rate * E.OT2Rate)) * dbo.Converttohours(RD.OT2)) [TotOT2],RD.HoursWorked [HoursWorked In Min],RD.NH [NH in Min],RD.OT1 [OT1 in Min],RD.OT2 [OT2 in Min],(E.Hourly_Rate / 60) [Hourly Rate in Min],((E.Hourly_Rate * E.OT1Rate) / 60) [OT1Rate in Min],((E.Hourly_Rate * E.OT2Rate) / 60) [OT2Rate in Min],((E.Hourly_Rate / 60) * RD.NH) [TotNH in Min],(((E.Hourly_Rate * E.OT1Rate) / 60) * RD.OT1) [Tot OT1 in Min],(((E.Hourly_Rate * E.OT2Rate) / 60) * RD.OT2) [Tot OT2 in Min],Emp_Code
--------                FROM   (SELECT RD.Time_Card_No,SUM(HoursWorked) HoursWorked,CAST(SUM(NH) AS VARCHAR) NH,SUM(OT1) OT1,SUM(OT2) OT2,RD.Sub_Project_Name
--------                        FROM   #RD RD
--------                        GROUP  BY RD.Sub_Project_Name,RD.Time_Card_No) RD
--------                       INNER JOIN Employee E ON RD.Time_Card_No = E.Time_Card_No
--------                ORDER  BY Emp_Name
--------            END
--------
--------        IF (@REPID = 100)
--------            BEGIN
--------                SELECT Time_Card_No,Emp_Name Full_Name,Sub_Project_Name,TSDate [Date],InShortTime [In_Time],OutShortTime [Out_Time],dbo.Converttohours(HoursWorked) [Hours_Worked],dbo.Converttohours(NH) NH,dbo.Converttohours(OT1) OT1,dbo.Converttohours(OT2) OT2,Emp_Code,Remarks
--------                FROM   #RD
--------                ORDER  BY Emp_Name,TSDATE
--------            END
--------
--------        DROP TABLE #RD
--------
--------        DROP TABLE #ActLogsTemp
--------    END
--------
--------GO
--------Merging 9.0
------------exec sp_processtimesheetforcomp '01/06/2010', '05/06/2010', '1,2', '-1', '-1', 'No', -1, 99
----------CREATE PROC [dbo].[sp_processtimesheetforcomp] 
----------(
----------	@start_date VARCHAR(10) ,                  
----------	@end_date VARCHAR(10) ,                  
----------	@compid VARCHAR(2000) ,                  
----------	@empid VARCHAR(8000) ,                  
----------	@subprojid VARCHAR(8000) ,                  
----------	@isEmpty VARCHAR(3),                
----------	@sessid float,    
----------	@REPID INT=0    
----------)             
----------AS
----------BEGIN
----------	DECLARE @FULLMONTH99 TABLE 
----------	(
----------		Time_Card_No VARCHAR(50),
----------		Full_Name VARCHAR(100),
----------		Sub_Project_Name VARCHAR(100),
----------		Hours_Worked float,
----------		NH float,
----------		OT1 float,
----------		OT2 float,
----------		Hourly_Rate float,
----------		OT1_Rate float,
----------		OT2_Rate float,
----------		Tot_NH float,
----------		TotOT1 float,
----------		TotOT2 float,
----------		[HoursWorked In Min] float,
----------		[NH In Min] float,
----------		[OT1 In Min] float,
----------		[OT2 In Min] float,
----------		[HourlyRate In Min] float,
----------		[OT1Rate In Min] float,
----------		[OT2Rate In Min] float,
----------		[TotNH In Min] float,
----------		[Tot OT1 In Min] float,
----------		[Tot OT2 In Min] float,
----------		[Emp_Code] Int
----------	)
----------
----------	DECLARE @FULLMONTH100 TABLE 
----------	(
----------		Time_Card_No VARCHAR(50),
----------		Full_Name VARCHAR(100),
----------		Sub_Project_Name VARCHAR(100),
----------		[Date] varchar(12),
----------		[In_Time] varchar(5),
----------		[Out_Time] varchar(5),
----------		[Hours_Worked] varchar(5),
----------		[NH] varchar(5),
----------		[OT1] varchar(5),
----------		[OT2] varchar(5),
----------		[Emp_Code] Int
----------	)
----------
----------	Declare @compvar varchar(100)
----------	Declare @RowData nvarchar(2000)
----------	Declare @SplitOn nvarchar(5)
----------	Set @SplitOn = ',' 
----------	Set @RowData = @compid
----------
----------	Declare @Cnt int
----------	Set @Cnt = 0
----------
----------	While (Charindex(@SplitOn,@RowData)>0)
----------	Begin
----------
----------		set @compvar = ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))
----------		if (@REPID=99)
----------		BEGIN
----------			Insert Into @FULLMONTH99(Time_Card_No,Full_Name,Sub_Project_Name,Hours_Worked,NH,OT1,OT2,Hourly_Rate,OT1_Rate,OT2_Rate,Tot_NH,TotOT1,TotOT2,[HoursWorked In Min],[NH In Min],[OT1 In Min],[OT2 In Min],[HourlyRate In Min],[OT1Rate In Min],[OT2Rate In Min],[TotNH In Min],[Tot OT1 In Min],[Tot OT2 In Min],Emp_Code	)
----------			Exec sp_ProcessTimesheet @start_date, @end_date, @compvar, @empid, @subprojid, 'No', -1, 99
----------		END
----------		ELSE
----------		BEGIN
----------			Insert Into @FULLMONTH100(Time_Card_No,Full_Name,Sub_Project_Name,[Date],[In_Time],[Out_Time],[Hours_Worked],[NH],[OT1],[OT2],Emp_Code)
----------			Exec sp_ProcessTimesheet @start_date, @end_date, @compvar, @empid, @subprojid, 'No', -1, 100
----------		END
----------
----------		Set @RowData = Substring(@RowData,Charindex(@SplitOn,@RowData)+1,len(@RowData))
----------		Set @Cnt = @Cnt + 1
----------	End
----------		--print ltrim(rtrim(@RowData))
----------
----------		If (@REPID=99)
----------		BEGIN
----------
----------			Insert Into @FULLMONTH99(Time_Card_No,Full_Name,Sub_Project_Name,Hours_Worked,NH,OT1,OT2,Hourly_Rate,OT1_Rate,OT2_Rate,Tot_NH,TotOT1,TotOT2,[HoursWorked In Min],[NH In Min],[OT1 In Min],[OT2 In Min],[HourlyRate In Min],[OT1Rate In Min],[OT2Rate In Min],[TotNH In Min],[Tot OT1 In Min],[Tot OT2 In Min],Emp_Code	)
----------			Exec sp_ProcessTimesheet @start_date, @end_date, @RowData, @empid, @subprojid, 'No', -1, 99
----------		END
----------		ELSE
----------		BEGIN
----------			Insert Into @FULLMONTH100(Time_Card_No,Full_Name,Sub_Project_Name,[Date],[In_Time],[Out_Time],[Hours_Worked],[NH],[OT1],[OT2],Emp_Code)
----------			Exec sp_ProcessTimesheet @start_date, @end_date, @RowData, @empid, @subprojid, 'No', -1, 100
----------		END
----------
----------		If (@REPID=99)
----------		BEGIN
----------			Select C.Company_Name,F.* From @FULLMONTH99 F 
----------			Inner Join Employee E On F.Emp_Code=E.Emp_Code
----------			Inner Join Company C On E.Company_ID = C.Company_ID  Order By C.Company_Name,F.Full_Name
----------		END
----------		ELSE
----------		BEGIN
----------			Select C.Company_Name,F.* From @FULLMONTH100 F
----------			Inner Join Employee E On F.Emp_Code=E.Emp_Code
----------			Inner Join Company C On E.Company_ID = C.Company_Id Order By C.Company_Name,F.Full_Name
----------		END
----------END
----------
----------GO
---------Meging 9.0
------------------Exec Sp_getemployeeleavepolicy 
------------------Exec Sp_getemployeeleavepolicy 53, 2010, '12/20/2010' , 0
----------------CREATE PROC [dbo].[Sp_getemployeeleavepolicy] @empid       INT,
----------------                                              @year        VARCHAR(4),
----------------                                              @applydateon DATETIME,
----------------                                              @filter      INT = 0
----------------AS
----------------  DECLARE @yearofchild INT
----------------  DECLARE @DateofJoiningMth INT
----------------  DECLARE @RndMonth INT
----------------  DECLARE @year_of_service INT
----------------  DECLARE @months_of_service INT
----------------  DECLARE @yearleaveallowed FLOAT
----------------  DECLARE @startdtsub_AN DATETIME
----------------  DECLARE @enddtsub_AN DATETIME
----------------  DECLARE @startdtsub_NONAN DATETIME
----------------  DECLARE @enddtsub_NONAN DATETIME
----------------  DECLARE @emptype VARCHAR(10)
----------------  DECLARE @username VARCHAR(20)
----------------  DECLARE @gid VARCHAR(4)
----------------  DECLARE @status VARCHAR(4)
----------------  DECLARE @leaveid INT
----------------  DECLARE @leavemodel INT
----------------  DECLARE @leavesum INT
----------------  DECLARE @monthdiff INT
----------------  DECLARE @joiningdate DATETIME
----------------  DECLARE @monthcount INT
----------------  DECLARE @companyid INT
----------------  DECLARE @childmonth INT
----------------  --DECLARE  @countsr INT                      
----------------  DECLARE @futuredate DATETIME
----------------
----------------  SET @months_of_service = 0
----------------  SET @year_of_service = 1
----------------
----------------  SELECT @username = username,@companyid = company_id,@emptype = emp_type,@joiningdate = joining_date,@futuredate = confirmation_date,@DateofJoiningMth = MONTH(joining_date)
----------------  FROM   dbo.employee AS e
----------------  WHERE  e.emp_code = @empid
----------------
----------------  SELECT @leavemodel = leave_model
----------------  FROM   dbo.company AS c
----------------  WHERE  company_id = @companyid
----------------
----------------  CREATE TABLE #yostemp
----------------      (
----------------           yos     INT,
----------------           STARTDT DATETIME,
----------------           ENDDT   DATETIME
----------------      )
----------------
----------------  CREATE TABLE #emltemp
----------------      (
----------------           emp_id         INT,
----------------           leave_type     INT,
----------------           LY_Leaves_Bal  FLOAT,
----------------           leaves_allowed FLOAT,
----------------           leave_year     INT
----------------      )
----------------
----------------
----------------  INSERT INTO #emltemp
----------------  SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
----------------  FROM   employeeleavesallowed
----------------  WHERE  LEave_Type != 8
----------------
----------------
----------------  IF (@leavemodel = 1
----------------       OR @leavemodel = 2
----------------       OR @leavemodel = 5
----------------       OR @leavemodel = 7)
----------------      BEGIN
----------------          INSERT INTO #emltemp
----------------          SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
----------------          FROM   employeeleavesallowed
----------------          WHERE  LEave_Type = 8
----------------      END
----------------
----------------  IF (@leavemodel = 4
----------------       OR @leavemodel = 6
----------------       OR @leavemodel = 8
----------------       OR @leavemodel = 3)
----------------      BEGIN
----------------          INSERT INTO #emltemp
----------------          SELECT emp_id,8,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leavesallowed),@year
----------------          FROM   YOSLeavesAllowed
----------------          WHERE  Emp_ID = @empid
----------------             AND LeavesAllowed > 0
----------------      END
----------------
----------------  --Select @startdtsub_AN, @enddtsub_AN                      
----------------  SELECT @leaveid = (SELECT id
----------------                     FROM   dbo.leave_types AS lt
----------------                     WHERE  lt.code = '0005')
----------------
----------------  EXEC @gid = dbo.[Get_empgroupid] @empid
----------------
----------------  --SET @months_of_service = Datediff(m,@joiningdate,@applydateon)                      
----------------  IF @year_of_service = 0
----------------      SET @year_of_service = 1
----------------
----------------  IF (@leavemodel = 4
----------------       OR @leavemodel = 6
----------------       OR @leavemodel = 8
----------------       OR @leavemodel = 3)
----------------      BEGIN
----------------          --SET @year_of_service = Abs(Datediff(yy,@joiningdate,@applydateon)) + 1                      
----------------          --SET @year_of_service = Ceiling(@months_of_service / 12) + 1              
----------------          DECLARE @startdtsub_AN_TEMP DATETIME
----------------          DECLARE @enddtsub_AN_TEMP DATETIME
----------------
----------------          SELECT @joiningdate = joining_date
----------------          FROM   dbo.employee AS e
----------------          WHERE  e.emp_code = @empid
----------------
----------------          SET @months_of_service = Datediff(m, @joiningdate, @applydateon)
----------------          SET @year_of_service = Ceiling(@months_of_service / 12) + 1
----------------
----------------          --  Insert Into #yostemp                  
----------------          --  EXEC SP_GETYOS @empid, @applydateon            
----------------          --            
----------------          SELECT @startdtsub_AN_TEMP = y.startdate,@enddtsub_AN_TEMP = y.enddate
----------------          FROM   YOSLeavesAllowed y
----------------          WHERE  y.emp_id = @empid
----------------             AND actual_yos = @year_of_service
----------------
----------------          INSERT INTO #yostemp
----------------          SELECT @year_of_service,CONVERT(VARCHAR(11), @startdtsub_AN_TEMP, 106) StartDate,CONVERT(VARCHAR(11), @enddtsub_AN_TEMP, 106) EndDate
----------------      END
----------------
----------------  IF (@LEAVEMODEL = 1
----------------       OR @LEAVEMODEL = 2
----------------       OR @LEAVEMODEL = 5
----------------       OR @LEAVEMODEL = 7)
----------------      BEGIN
----------------          SET @startdtsub_AN = CONVERT(DATETIME, '01/01/' + @year, 103)
----------------          SET @enddtsub_AN = CONVERT(DATETIME, '31/12/' + @year, 103)
----------------          SET @startdtsub_NONAN = CONVERT(DATETIME, '01/01/' + @year, 103)
----------------          SET @enddtsub_NONAN = CONVERT(DATETIME, '31/12/' + @year, 103)
----------------      END
----------------  ELSE
----------------      BEGIN
----------------          SET @startdtsub_NONAN = CONVERT(DATETIME, '01/01/' + @year, 103)
----------------          SET @enddtsub_NONAN = CONVERT(DATETIME, '31/12/' + @year, 103)
----------------
----------------          SELECT @startdtsub_AN = y.startdate,@enddtsub_AN = y.enddate
----------------          FROM   YOSLeavesAllowed y
----------------          WHERE  y.emp_id = @empid
----------------             AND actual_yos = @year_of_service
----------------      --      SET @startdtsub_AN = Convert(DATETIME,'01/' + Cast(@DateofJoiningMth AS VARCHAR) + '/' + @year,103)                      
----------------      --                            
----------------      --      IF (@DateofJoiningMth = 1)                      
----------------      --        BEGIN                      
----------------      --          SET @enddtsub_AN = Convert(DATETIME,'31/12/' + @year,103)                      
----------------      --        END              
----------------      --      ELSE              
----------------      --        BEGIN                      
----------------      --          SELECT @RndMonth = Day(Max(dateinyear))                      
----------------      --          FROM   dateinyear                      
----------------      --          WHERE  Year(dateinyear) = (Cast(@year AS INT) + 1) AND Month(dateinyear) = (@DateofJoiningMth - 1)                      
----------------      --                                
----------------      --          SET @enddtsub_AN = Convert(DATETIME,Cast(@RndMonth AS VARCHAR) + '/' + Cast((@DateofJoiningMth - 1) AS VARCHAR) + '/' + Cast((Cast(@year AS INT) + 1) AS VARCHAR),              
----------------      --                                     103)                      
----------------      --        END                   
----------------      END
----------------
----------------  SELECT @yearleaveallowed = Isnull(leaves_allowed, 0)
----------------  FROM   prorated_leaves
----------------  WHERE  group_id = @gid
----------------     AND comp_id = @companyid
----------------     AND year_of_service = @year_of_service
----------------
----------------  IF (@year_of_service > 10)
----------------      BEGIN
----------------          SELECT @yearleaveallowed = Isnull(leaves_allowed, 0)
----------------          FROM   prorated_leaves
----------------          WHERE  group_id = @gid
----------------             AND comp_id = @companyid
----------------             AND year_of_service = 10
----------------      END
----------------
----------------  CREATE TABLE #latemp
----------------      (
----------------           group_id       INT,
----------------           leave_type     INT,
----------------           leaves_allowed FLOAT,
----------------           leave_year     INT
----------------      )
----------------
----------------  IF (@leavemodel = 4
----------------       OR @leavemodel = 6
----------------       OR @leavemodel = 8
----------------       OR @leavemodel = 3)
----------------      BEGIN
----------------          INSERT INTO #latemp
----------------          SELECT @gid,8,@yearleaveallowed,@year
----------------
----------------          INSERT INTO #latemp
----------------          SELECT group_id,leave_type,CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
----------------          FROM   leaves_allowed
----------------          WHERE  leave_year = @year
----------------             AND leave_type != 8
----------------      END
----------------  ELSE
----------------      BEGIN
----------------          INSERT INTO #latemp
----------------          SELECT group_id,leave_type,CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
----------------          FROM   leaves_allowed
----------------      END
----------------
----------------  SELECT *,(CONVERT(DECIMAL(8, 2), (LY_Leaves_Bal)+(leavesallowed) - (paidleaves + pendingleaves))) leavesavailable,CONVERT(DECIMAL(8, 2), CAST(0 AS FLOAT)) actualleavesavailable
----------------  INTO   #leavetemp
----------------  FROM   (SELECT re.id,re.emp_id,re.leave_year,re.TYPE,companyleaveallowed = CASE
----------------                                                                               WHEN la.leaves_allowed IS NULL THEN 0.0
----------------                                                                               ELSE la.leaves_allowed
----------------                                                                             END,LY_Leaves_Bal = CASE
----------------                                                                                                   WHEN el.LY_Leaves_Bal IS NULL THEN 0
----------------                                                                                                   ELSE CONVERT(DECIMAL(8, 1), el.LY_Leaves_Bal)
----------------                                                                                                 END,leavesallowed = CASE
----------------                                                                                                                       WHEN el.leaves_allowed IS NULL THEN -100
----------------                                                                                                                       ELSE CONVERT(DECIMAL(8, 1), el.leaves_allowed)
----------------                                                                                                                     END,CONVERT(DECIMAL(8, 2), CAST(0 AS FLOAT)) leavesearned,paidleaves = CASE
----------------                                                                                                                                                                                              WHEN re.paidleaves IS NULL THEN 0.0
----------------                                                                                                                                                                                              ELSE re.paidleaves
----------------                                                                                                                                                                                            END,unpaidleaves = CASE
----------------                                                                                                                                                                                                                 WHEN re.unpaidleaves IS NULL THEN 0.0
----------------                                                                                                                                                                                                                 ELSE CONVERT(DECIMAL(8, 1), re.unpaidleaves)
----------------                                                                                                                                                                                                               END,pendingleaves = CASE
----------------                                                                                                                                                                                                                                     WHEN re.pendingleaves IS NULL THEN 0.0
----------------                                                                                                                                                                                                                                     ELSE CONVERT(DECIMAL(8, 1), re.pendingleaves)
----------------                                                                                                                                                                                                                                   END
----------------          FROM   (SELECT @empid emp_id,@year leave_year,d.id,d.TYPE,CONVERT(DECIMAL(8, 1), SUM(paidleaves)) paidleaves,CONVERT(DECIMAL(8, 1), SUM(unpaidleaves)) unpaidleaves,CONVERT(DECIMAL(8, 1), SUM(pendingleaves)) pendingleaves
----------------                  FROM   (SELECT d.id,Datename(MONTH, '1900/' + CAST(d.mth AS VARCHAR(2)) + '/01') mthname,d.TYPE,e.paidleaves,f.unpaidleaves,g.pendingleaves
----------------                          FROM   (SELECT DISTINCT (MONTH(dateinyear)) mth,l.id,l.TYPE
----------------                                  FROM   dateinyear
----------------                                         CROSS JOIN leave_types l
----------------                                  WHERE  l.companyid = -1
----------------                                      OR l.companyid = @companyid) d
----------------                                 LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(paidleaves) paidleaves
----------------                                                  FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(eld.halfday_leave)) / 2) paidleaves
----------------                                                          FROM   emp_leaves el
----------------                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------------                                                          WHERE  el.emp_id = @empid
----------------                                                             AND ((el.leave_type = 8
----------------                                                                   AND eld.leave_date >= @startdtsub_AN
----------------                                                                   AND eld.leave_date <= @enddtsub_AN)
----------------                                                                   OR (el.leave_type != 8
----------------                                                                       AND eld.leave_date >= @startdtsub_NONAN
----------------                                                                       AND eld.leave_date <= @enddtsub_NONAN))
----------------                                                             AND (eld.unpaid_leave = 0
----------------                                                                  AND eld.halfday_leave = 1)
----------------                                                             AND el.status = 'Approved'
----------------                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
----------------                                                          UNION ALL
----------------                                                          SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,COUNT(eld.unpaid_leave) paidleaves
----------------                                                          FROM   emp_leaves el
----------------                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------------                                                          WHERE  el.emp_id = @empid
----------------                                                             AND ((el.leave_type = 8
----------------                                                                   AND eld.leave_date >= @startdtsub_AN
----------------                                                                   AND eld.leave_date <= @enddtsub_AN)
----------------                                                                   OR (el.leave_type != 8
----------------                                                                       AND eld.leave_date >= @startdtsub_NONAN
----------------                                                                       AND eld.leave_date <= @enddtsub_NONAN))
----------------                                                             AND (eld.unpaid_leave = 0
----------------                                                                  AND eld.halfday_leave = 0)
----------------                                                             AND el.status = 'Approved'
----------------                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
----------------                                                  GROUP  BY d.emp_id,d.leave_type,d.mth) e ON d.mth = e.mth
----------------                                                                                              AND e.leave_type = d.id
----------------                                 LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(unpaidleaves) unpaidleaves
----------------                                                  FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), SUM(eld.unpaid_leave)) / 2) unpaidleaves
----------------                                                          FROM   emp_leaves el
----------------                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------------                                                          WHERE  el.emp_id = @empid
----------------                                                             AND ((el.leave_type = 8
----------------                                                                   AND eld.leave_date >= @startdtsub_AN
----------------                                                                   AND eld.leave_date <= @enddtsub_AN)
----------------                                                                   OR (el.leave_type != 8
----------------                                                                       AND eld.leave_date >= @startdtsub_NONAN
----------------                                                                       AND eld.leave_date <= @enddtsub_NONAN))
----------------                                                             AND (eld.unpaid_leave = 1
----------------                                                                  AND eld.halfday_leave = 1)
----------------                                                             AND el.status = 'Approved'
----------------                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
----------------                                                          UNION ALL
----------------                                                          SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), SUM(eld.unpaid_leave))) unpaidleaves
----------------                                                          FROM   emp_leaves el
----------------                                                                 INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------------                                                          WHERE  el.emp_id = @empid
----------------                                                             AND ((el.leave_type = 8
----------------                                                                   AND eld.leave_date >= @startdtsub_AN
----------------                                                                   AND eld.leave_date <= @enddtsub_AN)
----------------                                                                   OR (el.leave_type != 8
----------------                                                                       AND eld.leave_date >= @startdtsub_NONAN
----------------                                                                       AND eld.leave_date <= @enddtsub_NONAN))
----------------                                                             AND (eld.unpaid_leave = 1
----------------                                                                  AND eld.halfday_leave = 0)
----------------                                                             AND el.status = 'Approved'
----------------                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
----------------                                                  GROUP  BY d.emp_id,d.leave_type,d.mth) f ON d.mth = f.mth
----------------                                                                                              AND f.leave_type = d.id
----------------                                 LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(pl) pendingleaves
----------------                                                  FROM   (SELECT el.emp_id,el.leave_type,MONTH(ed.leave_date) mth,CAST(COUNT(halfday_leave) AS FLOAT) pl
----------------                                                          FROM   emp_leaves_detail ed
----------------                                                                 INNER JOIN emp_leaves el ON ed.trx_id = el.trx_id
----------------                                                          WHERE  el.emp_id = @empid
----------------                                                             AND el.status = 'Open'
----------------                                                             AND ((el.leave_type = 8
----------------                                                                   AND ed.leave_date >= @startdtsub_AN
----------------                                                                   AND ed.leave_date <= @enddtsub_AN)
----------------                                                                   OR (el.leave_type != 8
----------------                                                                       AND ed.leave_date >= @startdtsub_NONAN
----------------                                                                       AND ed.leave_date <= @enddtsub_NONAN))
----------------                                                             AND ed.unpaid_leave = 0
----------------                                                             AND ed.halfday_leave = 0
----------------                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(ed.leave_date)
----------------                                                          UNION ALL
----------------                                                          SELECT el.emp_id,el.leave_type,MONTH(ed.leave_date) mth,CAST(COUNT(halfday_leave) AS FLOAT) / 2 pl
----------------                                                          FROM   emp_leaves_detail ed
----------------                                                                 INNER JOIN emp_leaves el ON ed.trx_id = el.trx_id
----------------                                                          WHERE  el.emp_id = @empid
----------------                                                             AND el.status = 'Open'
----------------                                                             AND ((el.leave_type = 8
----------------                                                                   AND ed.leave_date >= @startdtsub_AN
----------------                                                                   AND ed.leave_date <= @enddtsub_AN)
----------------                                                                   OR (el.leave_type != 8
----------------                                                                       AND ed.leave_date >= @startdtsub_NONAN
----------------                                                                       AND ed.leave_date <= @enddtsub_NONAN))
----------------                                                             AND ed.unpaid_leave = 0
----------------                                                             AND ed.halfday_leave = 1
----------------                                                          GROUP  BY el.emp_id,el.leave_type,MONTH(ed.leave_date)) s
----------------                                                  GROUP  BY emp_id,leave_type,mth) g ON d.mth = g.mth
----------------                                                                                        AND g.leave_type = d.id) d
----------------                  GROUP  BY d.id,d.TYPE) re
----------------                 LEFT OUTER JOIN #emltemp el ON re.emp_id = el.emp_id
----------------                                                AND re.id = el.leave_type
----------------                                                AND re.leave_year = el.leave_year
----------------                 LEFT OUTER JOIN (SELECT la.group_id,la.leave_type,CONVERT(DECIMAL(8, 1), la.leaves_allowed) leaves_allowed,la.leave_year
----------------                                  FROM   #latemp la
----------------                                  UNION
----------------                                  SELECT @gid,@leaveid,0.0,@year) la ON re.id = la.leave_type
----------------                                                                        AND la.leave_year = @year
----------------                 INNER JOIN dbo.emp_group eg ON eg.id = la.group_id
----------------          WHERE  la.group_id = @gid) f
----------------
----------------  SELECT TOP 1 @status = family.status,@childmonth = Datediff(MONTH, dateofbirth, Getdate()), @yearofchild=year(dateofbirth)
----------------  FROM   family
----------------  WHERE  emp_id = @empid
----------------     AND Relation = 2
----------------  ORDER  BY dateofbirth DESC
----------------
----------------  --  IF @leavemodel = 1                      
----------------  --      OR @leavemodel = 3                      
----------------  --    BEGIN                      
----------------  --      UPDATE #leavetemp                      
----------------  --      SET    leavesearned = Isnull((SELECT Sum(Isnull(leaves_allowed,0))                      
----------------  --                                    FROM   employeeleavesallowed                      
----------------  --                                    WHERE  emp_id = @empid                      
----------------  --                AND leave_year <= @year                      
----------------  --                                           AND leave_type = 8),0)                      
----------------  --      WHERE  id = 8                      
----------------  --    END                      
----------------  IF @leavemodel = 1
----------------      OR @leavemodel = 3
----------------      BEGIN
----------------          UPDATE #leavetemp
----------------          SET    leavesearned = Isnull((SELECT SUM(Isnull(leaves_allowed, 0))
----------------                                        FROM   #emltemp
----------------                                        WHERE  emp_id = @empid
----------------                                           AND leave_year <= @year
----------------                                           AND leave_type = 8), 0)
----------------          WHERE  id = 8
----------------      END
----------------
----------------  IF @leavemodel = 2
----------------      OR @leavemodel = 5
----------------      OR @leavemodel = 7
----------------      BEGIN
----------------          UPDATE #leavetemp
----------------          SET    leavesearned = Isnull((SELECT dbo.Get_available_leaves_prorated1(CONVERT(VARCHAR(10), @applydateon, 103), @companyid, @username)), 0)
----------------          WHERE  id = 8
----------------      END
----------------
----------------  IF @leavemodel = 4
----------------      OR @leavemodel = 6
----------------      OR @leavemodel = 8
----------------      BEGIN
----------------          UPDATE #leavetemp
----------------          SET    leavesearned = Isnull((SELECT dbo.Get_available_leaves_prorated2(CONVERT(VARCHAR(10), @applydateon, 103), @companyid, @username)), 0)
----------------          WHERE  id = 8
----------------      END
----------------
----------------  UPDATE #leavetemp
----------------  SET    actualleavesavailable = (LY_Leaves_Bal) + (leavesearned - (paidleaves + pendingleaves))
----------------
----------------  ---                      
----------------
----------------  --IF (YEAR(@joiningdate) != YEAR(Getdate()))
----------------	IF (YEAR(@joiningdate) != Cast(@year as int))
----------------      BEGIN
----------------          SET @monthcount = 1
----------------      END
----------------  ELSE
----------------      BEGIN
----------------          SET @monthcount = MONTH(@joiningdate)
----------------      END
----------------
----------------	--START-SANTY-20thDec2010-For 3 Month issue and Confirmation Date.
----------------   --IF (Getdate() < @futuredate OR  ((Cast(@year as int)-7) > @yearofchild) OR ( year(GetDate())=year(@joiningdate) And Month(@joiningdate) >=10  )  )  
----------------	IF (((Cast(@year as int)-7) > @yearofchild) And getdate() > DATEADD(m, 3, @joiningdate))  
----------------	--END-SANTY-20thDec2010-For 3 Month issue and Confirmation Date.
----------------      BEGIN
----------------          DELETE FROM #leavetemp
----------------          WHERE  id = @leaveid
----------------      END
----------------  ELSE
----------------      BEGIN
----------------          IF (@status = 'S')
----------------              BEGIN
----------------                  IF (@leavemodel = 1)
----------------                      BEGIN
----------------                          SET @leavesum = 6
----------------                      END
----------------                  ELSE
----------------                      BEGIN
----------------                          IF (@monthcount = 1)
----------------                              BEGIN
----------------                                  SET @leavesum = 6
----------------                              END
----------------
----------------                          IF (@monthcount = 2)
----------------                              BEGIN
----------------                                  SET @leavesum = 6
----------------                              END
----------------
----------------                          IF (@monthcount = 3)
----------------                              BEGIN
----------------                                  SET @leavesum = 5
----------------                              END
----------------
----------------                          IF (@monthcount = 4)
----------------                              BEGIN
----------------                                  SET @leavesum = 5
----------------                              END
----------------
----------------                          IF (@monthcount = 5)
----------------                              BEGIN
----------------                                  SET @leavesum = 4
----------------                              END
----------------
----------------                          IF (@monthcount = 6)
----------------                              BEGIN
----------------                                  SET @leavesum = 4
----------------                              END
----------------
----------------                          IF (@monthcount = 7)
----------------                              BEGIN
----------------                                  SET @leavesum = 3
----------------                              END
----------------
----------------                          IF (@monthcount = 8)
----------------                              BEGIN
----------------                                  SET @leavesum = 3
----------------                              END
----------------
----------------                          IF (@monthcount = 9)
----------------                              BEGIN
----------------                                  SET @leavesum = 2
----------------                              END
----------------
----------------                          IF (@monthcount = 10)
----------------                              BEGIN
----------------                                  SET @leavesum = 0
----------------                              END
----------------
----------------                          IF (@monthcount = 11)
----------------                              BEGIN
----------------                                  SET @leavesum = 0
----------------                              END
----------------
----------------                          IF (@monthcount = 12)
----------------                              BEGIN
----------------                                  SET @leavesum = 0
----------------                              END
----------------                      END
----------------              END
----------------
----------------          IF (@status = 'N')
----------------              BEGIN
----------------                  SET @leavesum = 2
----------------              END
----------------
----------------
----------------
----------------          UPDATE #leavetemp
----------------          SET    companyleaveallowed = @leavesum,
----------------                 leavesallowed = @leavesum,
----------------                 leavesavailable = @leavesum - (paidleaves + unpaidleaves)
----------------          WHERE  id = @leaveid
----------------
----------------          UPDATE #leavetemp
----------------          SET    leavesavailable = (LY_Leaves_Bal) + leavesearned - (paidleaves + unpaidleaves)
----------------          WHERE  id = 8
----------------
----------------          UPDATE #leavetemp
----------------          SET    leavesavailable = 0.0
----------------          WHERE  leavesavailable < 0
----------------      END
----------------
----------------  IF (@status IS NULL)
----------------      BEGIN
----------------          DELETE FROM #leavetemp
----------------          WHERE  id = @leaveid
----------------      END
----------------
----------------  IF (@filter = 0)
----------------      BEGIN
----------------          UPDATE #leavetemp
----------------          SET    leavesallowed = NULL,
----------------                 leavesavailable = (LY_Leaves_Bal) + 0.0,
----------------                 actualleavesavailable = 0.00
----------------          WHERE  leavesallowed = -100
----------------
----------------          DELETE FROM #leavetemp
----------------          WHERE  (leavesavailable IS NULL)
----------------      END
----------------  ELSE
----------------      IF (@filter = -1)
----------------          BEGIN
----------------              DELETE FROM #leavetemp
----------------              WHERE  (leavesallowed = 0
----------------                       OR (leavesavailable IS NULL))
----------------                 AND id = 8
----------------                 AND emp_id NOT IN (SELECT emp_id
----------------                                    FROM   #emltemp
----------------                                    WHERE  leave_type = 8)
----------------
----------------              DELETE FROM #leavetemp
----------------              WHERE  leavesallowed = -100
----------------          END
----------------      ELSE
----------------          BEGIN
----------------              DELETE FROM #leavetemp
----------------              WHERE  id != @filter
----------------          END
----------------
----------------  UPDATE #leavetemp
----------------  SET    leavesearned = Isnull(leavesallowed, 0)
----------------  WHERE  id != 8
----------------
----------------  UPDATE #leavetemp
----------------  SET    actualleavesavailable = (leavesearned - (paidleaves + pendingleaves))
----------------  WHERE  id != 8
----------------
----------------  UPDATE #leavetemp
----------------  SET    actualleavesavailable = 0
----------------  WHERE  actualleavesavailable < 0
----------------
----------------  SELECT DISTINCT *,(paidleaves + unpaidleaves) totalleavestaken,ShowLeaveAllowed=CASE
----------------                                                                                    WHEN (ID = 8
----------------                                                                                          AND (@leavemodel = 3
----------------                                                                                                OR @leavemodel = 4
----------------                                                                                                OR @leavemodel = 6
----------------                                                                                                OR @leavemodel = 8)) THEN 1
----------------                                                                                    WHEN (ID = 12) THEN 1
----------------                                                                                    ELSE 0
----------------                                                                                  END
----------------  FROM   #leavetemp
----------------  ORDER  BY [TYPE]
----------------
----------------  DROP TABLE #leavetemp
----------------
----------------  DROP TABLE #latemp
----------------
----------------  DROP TABLE #emltemp
----------------
----------------  DROP TABLE #yostemp 
----------------GO
----------EXEC sp_GeneratePayRollAdv   2,1,2010,3,'3',1,31,16,31,134                      
----------EXEC sp sp_GeneratePayRollAdvFullMonth 2,1,2010,3,'112',1,31,1 ,31,134
----------sp_GetPayrollMonth 0,0,0
--------CREATE PROC [dbo].[Sp_generatepayrolladv] @company_id     INT,
--------                                         @month          INT,
--------                                         @year           INT,
--------                                         @UserID         INT,
--------                                         @EmpPassID      VARCHAR(200) ='',
--------                                         @stdatemonth    VARCHAR(2),
--------                                         @endatemonth    VARCHAR(2),
--------                                         @stdatesubmonth VARCHAR(2),
--------                                         @endatesubmonth VARCHAR(2),
--------                                         @monthidintbl   INT=0
--------AS
--------  DECLARE @CPFCalculate INT
--------  DECLARE @INTendatesubmonth INT
--------  DECLARE @EmployerCPFAmt VARCHAR(200)
--------  DECLARE @EmployeeCPFAmt VARCHAR(200)
--------  DECLARE @cpfamtemployer FLOAT
--------  DECLARE @cpfamtemployee FLOAT
--------  DECLARE @select VARCHAR(8000)
--------  DECLARE @where VARCHAR(200)
--------  DECLARE @compute NVARCHAR(150)
--------  DECLARE @param1 NVARCHAR(150)
--------  DECLARE @param2 NVARCHAR(150)
--------  DECLARE @EmpID INT
--------  DECLARE @startproll VARCHAR(10)
--------  DECLARE @endproll VARCHAR(10)
--------  DECLARE @startsubpay VARCHAR(10)
--------  DECLARE @endsubpay VARCHAR(10)
--------  DECLARE @startdtsub DATETIME
--------  DECLARE @enddtsub DATETIME
--------  DECLARE @startdtproll DATETIME
--------  DECLARE @enddtproll DATETIME
--------  DECLARE @startmonth INT
--------  DECLARE @startyear INT
--------  DECLARE @TotalDaysCountPayroll_5 FLOAT
--------  DECLARE @TotalDaysCountPayroll_5p FLOAT
--------  DECLARE @TotalDaysCountPayroll_6 FLOAT
--------  DECLARE @TotalDaysCountPayroll_7 FLOAT
--------  DECLARE @TotalDaysCount_5 FLOAT
--------  DECLARE @TotalDaysCount_5p FLOAT
--------  DECLARE @TotalDaysCount_6 FLOAT
--------  DECLARE @TotalDaysCount_7 FLOAT
--------  DECLARE @NoWrkgDaysSubPay FLOAT
--------  DECLARE @RollDays FLOAT
--------  DECLARE @roundunpaid INT
--------  DECLARE @roundnetpay INT
--------  DECLARE @roundaddition INT
--------  DECLARE @rounddeduction INT
--------  DECLARE @cpfceiling FLOAT
--------  DECLARE @lastyear INT
--------  DECLARE @AWCeiling FLOAT
--------  DECLARE @dt_date DATETIME
--------  DECLARE @lastdaymonth VARCHAR(2)
--------  DECLARE @ID AS INT
--------  DECLARE @WorkFlowID AS INT
--------  DECLARE @RowID AS INT
--------  DECLARE @payrolltype AS INT
--------
--------  SELECT @month = [Month], @CPFCalculate = CPFCalculate, @payrolltype = PayType
--------  FROM   payrollmonthlydetail
--------  WHERE  ROWID = @monthidintbl
--------
--------  SET @INTendatesubmonth = CONVERT(INT, @endatesubmonth)
--------
--------  DECLARE @CPFAWCALC TABLE (
--------      Emp_Code    INT,
--------      CMOW        FLOAT,
--------      LYOW        FLOAT,
--------      CYOW        FLOAT,
--------      CPFAWCIL    FLOAT,
--------      EST_AWCIL   FLOAT,
--------      ACTCIL      FLOAT,
--------      AWCM        FLOAT,
--------      AWB4CM      FLOAT,
--------      AWCM_AWB4CM FLOAT,
--------      AWCPF       FLOAT )
--------  DECLARE @FULLMONTH TABLE (
--------      Emp_Code             INT,
--------      FullName             VARCHAR(200),
--------      DeptName             VARCHAR(200),
--------      GroupName            VARCHAR(200),
--------      [Basic]              FLOAT,
--------      BasicPR              FLOAT,
--------      TotalAdditions       FLOAT,
--------      TotalAdditionsWONH   FLOAT,
--------      TotalDeductions      FLOAT,
--------      OT1Rate              FLOAT,
--------      OT2Rate              FLOAT,
--------      NHHrs                FLOAT,
--------      OT1Hrs               FLOAT,
--------      OT2Hrs               FLOAT,
--------      NH                   FLOAT,
--------      OT1                  FLOAT,
--------      OT2                  FLOAT,
--------      Days_Work            FLOAT,
--------      NetPay               FLOAT,
--------      OT                   VARCHAR(3),
--------      CPFOrdinaryCeil      FLOAT,
--------      CPFAdditionNet       FLOAT,
--------      CPFGross             FLOAT,
--------      EmployeeCPFAmt       FLOAT,
--------      EmployerCPFAmt       FLOAT,
--------      CPFAmount            FLOAT,
--------      CPF                  CHAR(3),
--------      EmpCPFtype           VARCHAR(100),
--------      PRAge                INT,
--------      CPFCeiling           FLOAT,
--------      FundType             VARCHAR(50),
--------      FundAmount           FLOAT,
--------      UnPaidLeaves         FLOAT,
--------      TotalUnPaid          FLOAT,
--------      PayType              VARCHAR(10),
--------      Daily_rate_mode      VARCHAR(100),
--------      Daily_Rate           FLOAT,
--------      ActualBasic          FLOAT,
--------      Pay_Mode             INT,
--------      EmployeeGiro         VARCHAR(100),
--------      EmployerGiro         VARCHAR(100),
--------      GiroBank             VARCHAR(100),
--------      Emp_Type             VARCHAR(100),
--------      WorkingDaysInWeek    FLOAT,
--------      CPFType              FLOAT,
--------      Hourly_rate          FLOAT,
--------      Join_Date            DATETIME,
--------      Term_Date            DATETIME,
--------      Pr_date              DATETIME,
--------      RollDays             FLOAT,
--------      WrkgDaysInRoll       FLOAT,
--------      BasicPayInRoll       FLOAT,
--------      SubPayDays           FLOAT,
--------      WrkgDaysInSubPay     FLOAT,
--------      BasicDayRate         FLOAT,
--------      BasicDayRateWORound  FLOAT,
--------      BasicNorSubPay       FLOAT,
--------      UnpaidFullDay        FLOAT,
--------      UnpaidHalfDay        FLOAT,
--------      PaidFullDay          FLOAT,
--------      PaidHalfDay          FLOAT,
--------      UnPaidDeduct         FLOAT,
--------      UnpaidFullDayPR      FLOAT,
--------      UnpaidHalfDayPR      FLOAT,
--------      UnPaidDeductPR       FLOAT,
--------      Add4NW               FLOAT,
--------      Add4OW               FLOAT,
--------      Add4AW               FLOAT,
--------      Add4AWNOCPF          FLOAT,
--------      AdditionalWages      FLOAT,
--------      DedAmt               FLOAT,
--------      DedCPFAmt            FLOAT,
--------      ActSatDaySpan        FLOAT,
--------      ActSunDaySpan        FLOAT,
--------      ActWrkgDaysSpan      FLOAT,
--------      ActPRSatDaySpan      FLOAT,
--------      ActPRSunDaySpan      FLOAT,
--------      ActPRWrkgDaysSpan    FLOAT,
--------      DaysWorkedRate       FLOAT,
--------      CPFOrdinary          FLOAT,
--------      Age_Group            FLOAT,
--------      Age                  FLOAT,
--------      OT1SysRate           FLOAT,
--------      OT2SysRate           FLOAT,
--------      CalculateCPF         VARCHAR(1),
--------      CPFEmployeePerc      FLOAT,
--------      CPFEmployerPerc      FLOAT,
--------      EmployeeCPFRow       VARCHAR(200),
--------      EmployerCPFRow       VARCHAR(200),
--------      GrossWithAddition    FLOAT,
--------      GrossWithOutAddition FLOAT,
--------      FundGrossAmount      FLOAT,
--------      SDLFundGrossAmount   FLOAT,
--------      CMOW                 FLOAT,
--------      LYOW                 FLOAT,
--------      CYOW                 FLOAT,
--------      CPFAWCIL             FLOAT,
--------      EST_AWCIL            FLOAT,
--------      ACTCIL               FLOAT,
--------      AWCM                 FLOAT,
--------      AWB4CM               FLOAT,
--------      AWCM_AWB4CM          FLOAT,
--------      AWSUBJCPF            FLOAT,
--------      MediumUrl            VARCHAR(1000),
--------      Time_Card_No         VARCHAR(50),
--------      Fund_OptOut          INT,
--------      SDF_Required         INT )
--------
--------  CREATE TABLE #EmployeeWorkFlowLevel
--------      (
--------           ID             INT,
--------           WORKFLOWID     INT,
--------           ROWID          INT,
--------           PAYROLLGROUPID INT
--------      )
--------
--------  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID
--------  INTO   #EmployeeWorkFlow
--------  FROM   Employee EM
--------         INNER JOIN (SELECT WL.*
--------                     FROM   EmployeeWorkFlowLevel WL
--------                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID
--------
--------  DECLARE curse CURSOR FOR
--------      SELECT *
--------      FROM   #EmployeeWorkFlow
--------
--------  OPEN curse
--------
--------  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
--------
--------  WHILE @@FETCH_STATUS = 0
--------      BEGIN
--------          --PRINT @RowID                                                                    
--------          INSERT INTO #EmployeeWorkFlowLevel
--------          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID
--------          FROM   EmployeeWorkFlowLevel
--------          WHERE  WorkFLowID = @WorkFLowID
--------             AND RowID <= @RowID
--------
--------          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID
--------      END
--------
--------  SELECT DISTINCT Te.ID,EG.Emp_ID
--------  INTO   #EmployeeAssignedToPayrollGroup
--------  FROM   #EmployeeWorkFlowLevel Te
--------         INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID
--------  WHERE  EG.Emp_ID = @UserID
--------
--------  CLOSE curse
--------
--------  DEALLOCATE curse
--------
--------  SELECT TOP 1 @lastdaymonth = dateinyear
--------  FROM   (SELECT CONVERT(FLOAT, Datename(dd, DateInYear)) dateinyear
--------          FROM   DateInYear
--------          WHERE  MONTH(DateInYear) = @month
--------             AND Datename(yy, DateInYear) = @year) DY
--------  ORDER  BY dateinyear DESC
--------
--------  SET @AWCeiling = 76500
--------  SET @startproll = @stdatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
--------  SET @endproll = @endatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
--------  SET @startsubpay = @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
--------  SET @endsubpay = @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)
--------  SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)
--------  SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)
--------  SET @startdtproll = CONVERT(DATETIME, @startproll, 103)
--------  SET @enddtproll = CONVERT(DATETIME, @endproll, 103)
--------  SET @startmonth = MONTH(@startdtsub)
--------  SET @startyear = YEAR(@startdtsub)
--------  SET @RollDays = (Datediff(dw, @startdtproll, @enddtproll) + 1)
--------  SET @lastyear = @startyear - 1
--------  SET @dt_date = CONVERT(DATETIME, @startsubpay, 103)
--------  SET @param1 = N'@cpfamtemployer float output'
--------  SET @param2 = N'@cpfamtemployee float output'
--------  SET @NoWrkgDaysSubPay = (Datediff(dw, @startdtsub, @enddtsub) + 1)
--------
--------  IF Len(@EmpPassID) > 0
--------      BEGIN
--------          SELECT @where = 'Where Emp_Code Not In (' + @EmpPassID + ')'
--------      END
--------
--------  SELECT @cpfceiling = monthly_cpf_ceil,@roundunpaid = basicrnd,@roundnetpay = netpayrnd,@roundaddition = additionsrnd,@rounddeduction = deductionsrnd
--------  FROM   Company
--------  WHERE  Company_ID = @company_id
--------
--------  -- Dump The Required Employees in one Temp Table                                                                                                                                               
--------  SELECT Emp_Code,Emp_Name,Emp_Lname,IC_PP_NUMBER,Sex,Emp_Group_Id,Race_ID,Dept_Id,Date_Of_Birth,Joining_Date,Termination_Date,PR_Date = CASE
--------                                                                                                                                           WHEN Emp_Type = 'SC' THEN CONVERT(DATETIME, '01/01/1910', 103)
--------                                                                                                                                           ELSE PR_Date
--------                                                                                                                                         END,Emp_Type,CPF_Entitlement,OT_Entitlement,Payment_Mode,Pay_Frequency,EmpCPFType,Wdays_per_Week,Hourly_Rate_Mode,Hourly_Rate,Daily_Rate_Mode,Daily_Rate,PayRateCust=CASE
--------                                                                                                                                                                                                                                                                                                                WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.Payrate)))
--------                                                                                                                                                                                                                                                                                                                ELSE 0
--------                                                                                                                                                                                                                                                                                                              END,Round(CAST(Isnull(Datediff(m, Isnull(date_of_birth, 0), @dt_date), 0) AS FLOAT) / 12, 2) Age,dbo.Fn_getagegroup(Em.Emp_Code, @dt_date) AS Age_Group,FundType = CASE
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%CHIN%' THEN 'CDAC'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%MALAY%' THEN 'MBMF'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%INDIA%' THEN 'SINDA'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN (Emp_Type = 'SPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SDPR'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OR Emp_Type = 'SC')
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Fund_OptOut = 0
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND Upper(Ra.Race) LIKE '%EURA%' THEN 'ECF'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ELSE ''
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 END,Giro_acct_number,giro_bank,CalculateCPF = CASE
ntitlement = 'Y'
mp_Type = 'SPR'
mp_Type = 'SDPR'
mp_Type = 'SC')) THEN 'Y'

--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               END,OT1Rate,Ot2Rate,OT1Rate OT1SysRate,OT2Rate OT2SysRate,Isnull(Pay_supervisor, 0) Pay_supervisor,sdf_required,time_card_no,Fund_Optout,CalcCPFFH=CASE
endatesubmonth = '15'
omputeCPFFH = 1 THEN 'Y'
endatesubmonth = '15'
omputeCPFFH = 0 THEN 'N'
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ELSE 'Y'
alcFundFH=CASE
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WHEN @endatesubmonth = '15'
omputeFundFH = 1 THEN 'Y'
endatesubmonth = '15'
omputeFundFH = 0 THEN 'N'

--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 END,0 PayProcessFH, HalfSalary
--------  INTO   #EmployeeTemp
--------  FROM   Employee Em
--------         INNER JOIN Race Ra ON Em.Race_ID = Ra.ID
--------  WHERE  (Em.Payrate IS NOT NULL)
--------     AND PayrollType = @payrolltype
--------     AND (Em.Joining_Date <= @enddtsub)
--------     AND (Em.Termination_Date IS NULL
--------           OR (Em.termination_date >= @startdtsub))
--------     AND (Em.Company_id = @company_id)
--------     AND (Em.StatusID = 1
--------           OR (Em.StatusID = 2
--------               AND @enddtsub <= Em.termination_date)
--------           OR (Em.StatusID = 2
--------               AND Em.termination_date >= @startdtsub
--------               AND Em.termination_date <= @enddtsub));
--------
--------WITH EPHOLD AS 
--------(
--------	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate) AS 'RowNo', 
--------	ID, Emp_ID, PayRate
--------	FROM EmployeePayHistory  Where FromDate >@enddtsub
--------)
--------Select	Emp_ID,
--------		PayRateCust=CASE
--------		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
--------		ELSE 0
--------		END
--------Into #EmpPayTempOLD From EPHOLD Where RowNo = 1 And PayRate is not null
--------
--------UPDATE E
--------SET    PayRateCust = ET.PayRateCust
--------FROM   #EmployeeTemp E
--------INNER JOIN #EmpPayTempOLD ET ON E.Emp_Code = ET.Emp_ID;
--------
--------
--------WITH EPH AS 
--------(
--------	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate Desc) AS 'RowNo', 
--------	ID, Emp_ID, PayRate
--------	FROM EmployeePayHistory  Where FromDate <=@enddtsub
--------)
--------Select	Emp_ID,
--------		PayRateCust=CASE
--------		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
--------		ELSE 0
--------		END
--------Into #EmpPayTemp From EPH Where RowNo = 1 And PayRate is not null
--------
--------
--------UPDATE E
--------SET    PayRateCust = ET.PayRateCust
--------FROM   #EmployeeTemp E
--------INNER JOIN #EmpPayTemp ET ON E.Emp_Code = ET.Emp_ID
--------
--------  SELECT @select = 'Delete From #EmployeeTemp ' + @where
--------
--------  EXEC (@select)
--------
--------  DELETE FROM #EmployeeTemp
--------  WHERE  Emp_Code IN (SELECT pd.Emp_ID
--------                      FROM   prepare_payroll_hdr ph
--------                             INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID
--------                      WHERE  pd.[Status] != 'R'
--------                             --AND MONTH(ph.start_period) = Convert(Varchar,@startmonth)                                           
--------                             AND (ph.start_period >= @startdtsub
--------                                  AND ph.end_period <= @enddtsub)
--------                             AND YEAR(ph.start_period) = CONVERT(VARCHAR, @startyear))
--------
--------  DELETE FROM #EmployeeTemp
--------  WHERE  Pay_supervisor NOT IN (SELECT ID
--------                                FROM   #EmployeeAssignedToPayrollGroup)
--------     AND (Pay_supervisor > 0)
--------
--------  IF (@stdatesubmonth = '16')
--------      BEGIN
--------          UPDATE E
--------          SET    PayProcessFH = 1
--------          FROM   #EmployeeTemp E
--------                 INNER JOIN (SELECT PD.Emp_ID,COUNT(pd.Emp_ID) FHEmpCount
--------                             FROM   Prepare_Payroll_Detail pd
--------                                    INNER JOIN prepare_payroll_hdr ph ON pd.trx_id = ph.trx_id
--------                             WHERE  ([Status] = 'G')
--------                                AND ph.end_period = (SELECT PaySubEndDate
--------                                                     FROM   PayrollMonthlyDetail
--------                                                     WHERE  ROWID = (@monthidintbl - 1))
--------                             GROUP  BY pd.emp_id) P ON E.Emp_Code = P.Emp_ID
--------
--------			Update #EmployeeTemp Set PayProcessFH = 1 Where Joining_Date Between @startdtsub And @enddtsub
--------      END
--------  ELSE
--------	BEGIN
--------          UPDATE #EmployeeTemp
--------          SET    PayProcessFH = 1
--------	END
--------
--------  --Delete From #EmployeeTemp                                                                      
--------  --Where Emp_Code Not In                                                 
--------  --(                                                                      
--------  -- Select Emp_Code From                                                                    
--------  -- (                                                   
--------  --  Select EM.Emp_Code,WL.WorkFlowID From EmployeeWorkFlowLevel WL                                                                    
--------  --  Inner Join Employee EM On WL.ID = EM.Pay_supervisor                                                                    
--------  --  Where WL.FlowType=1 And (EM.Pay_supervisor is not null or EM.Pay_supervisor > 0 )                                                        
--------  -- ) Re Inner Join #WLTemp WL On Re.WorkFlowID=WL.WorkFlowID                                      
--------  --) And (Pay_supervisor is not null or Pay_supervisor > 0)                                                                      
--------  --Start Here on 7th Jan 2010...1757                                        
--------  --Calculate Total No of Public Holidays in Payroll Period                                           
--------  DECLARE @PUBLICHOLIDAYSMONTH FLOAT
--------  DECLARE @PUBLICHOLIDAYSBYMONTH FLOAT
--------
--------  SELECT @PUBLICHOLIDAYSMONTH = COUNT(Holiday_Date)
--------  FROM   Public_Holidays PH
--------  WHERE  (PH.Holiday_Date >= @startdtproll
--------          AND PH.Holiday_Date <= @enddtproll)
--------     AND (Datepart(weekday, Holiday_Date) != 1
--------          AND Datepart(weekday, Holiday_Date) != 7)
--------	 And (CompanyID=@company_id Or CompanyID=-1)
--------
--------  SELECT @PUBLICHOLIDAYSBYMONTH = COUNT(Holiday_Date)
--------  FROM   Public_Holidays PH
--------  WHERE  (PH.Holiday_Date >= @startdtsub
--------          AND PH.Holiday_Date <= @enddtsub)
--------     AND (Datepart(weekday, Holiday_Date) != 1
--------          AND Datepart(weekday, Holiday_Date) != 7)
--------	 And (CompanyID=@company_id Or CompanyID=-1)
--------
--------  --CONSIDER 0 to PH in PAYROLL @PUBLICHOLIDAYSMONTH and @PUBLICHOLIDAYSBYMONTH                        
--------  SET @PUBLICHOLIDAYSMONTH = 0
--------  SET @PUBLICHOLIDAYSBYMONTH = 0
--------
--------  --Calculate Total No of Working Days in Payroll Period                                                                                  
--------  SELECT @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSMONTH
--------  FROM   (SELECT TotalDaysCount_5 = CASE
--------                                      WHEN (R.DaysPattern_5 = 5
--------                                            AND (R.[WeekDay] = 1
--------                                                  OR R.[WeekDay] = 7)) THEN 0
--------                                      ELSE R.CntDay
--------                                    END,TotalDaysCount_5p = CASE
--------                                                              WHEN (R.DaysPattern_5p = 5.5
--------                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)
--------                                                              WHEN (R.DaysPattern_5p = 5.5
--------                                                                    AND (R.[WeekDay] = 1)) THEN 0
--------                                                              ELSE R.CntDay
--------                                                            END,TotalDaysCount_6 = CASE
--------                                                                                     WHEN (R.DaysPattern_6 = 6
--------                                                                                           AND (R.[WeekDay] = 1)) THEN 0
--------                                                                                     ELSE R.CntDay
--------                                                                                   END,TotalDaysCount_7 = CASE
--------                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay
--------                                                                                                          END
--------          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7
--------                  FROM   DateInYear Dt
--------                  WHERE  (Dt.DateInYear >= @startdtproll
--------                      AND Dt.DateInYear <= @enddtproll)
--------                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res
--------
--------  --Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens                                                                 
--------  SELECT @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSBYMONTH
--------  FROM   (SELECT TotalDaysCount_5 = CASE
--------                                      WHEN (R.DaysPattern_5 = 5
--------                                            AND (R.[WeekDay] = 1
--------                                                  OR R.[WeekDay] = 7)) THEN 0
--------                                      ELSE R.CntDay
--------                                    END,TotalDaysCount_5p = CASE
--------                                                              WHEN (R.DaysPattern_5p = 5.5
--------                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)
--------                                                              WHEN (R.DaysPattern_5p = 5.5
--------                                                                    AND (R.[WeekDay] = 1)) THEN 0
--------                                                              ELSE R.CntDay
--------                                                            END,TotalDaysCount_6 = CASE
--------                                                                                     WHEN (R.DaysPattern_6 = 6
--------                                                                                           AND (R.[WeekDay] = 1)) THEN 0
--------                                                                                     ELSE R.CntDay
--------                                                                                   END,TotalDaysCount_7 = CASE
--------                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay
--------                                                                                                          END
--------          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7
--------                  FROM   DateInYear Dt
--------                  WHERE  (Dt.DateInYear >= @startdtsub
--------                      AND Dt.DateInYear <= @enddtsub)
--------                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res
--------
--------                                                                                                   
--------  SELECT E.Emp_Code,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.Joining_Date >= E.PR_Date AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR
--------                     (E.PR_Date IS NOT
--------                     NULL AND
--------                     E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date > @startdtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND E.PR_Date < @startdtsub AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date <= @startdtsub AND E.PR_Date >= @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) ))) ActPRSatDaySpan,
--------                (SELECT COUNT(Datepart(weekday, DateInYear))
--------                 FROM   DateInYear Dt
--------                 WHERE  (E.PR_Date IS NOT NULL
--------                     AND E.Termination_Date IS NULL
--------                     AND E.PR_Date >= @startdtsub
--------                     AND E.PR_Date <= @enddtsub
--------                     AND E.Joining_Date < @startdtsub
--------                     AND Dt.DateInYear >= E.PR_Date
--------                     AND Dt.DateInYear <= @enddtsub
--------                     AND (Datepart(weekday, DateInYear) = 1))
--------                     OR (E.PR_Date IS NOT NULL
--------                         AND E.Termination_Date IS NULL
--------                         AND E.PR_Date >= @startdtsub
--------                         AND E.PR_Date <= @enddtsub
--------                         AND E.Joining_Date >= @startdtsub
--------                         AND E.Joining_Date <= @enddtsub
--------                         AND E.PR_Date >= E.Joining_Date
--------                         AND Dt.DateInYear >= E.PR_Date
--------                         AND Dt.DateInYear <= @enddtsub
--------                         AND (Datepart(weekday, DateInYear) = 1))
--------                     OR (E.PR_Date IS NOT NULL
--------                         AND E.Termination_Date IS NULL
--------                         AND E.PR_Date >= @startdtsub
--------                         AND E.PR_Date <= @enddtsub
--------                         AND E.Joining_Date >= @startdtsub
--------                         AND E.Joining_Date <= @enddtsub
--------                         AND E.Joining_Date >= E.PR_Date
--------                         AND Dt.DateInYear >= E.Joining_Date
--------                         AND Dt.DateInYear <= @enddtsub
--------                         AND (Datepart(weekday, DateInYear) = 1))
--------                     OR (E.PR_Date IS NOT NULL
--------                         AND E.Termination_Date IS NOT NULL
--------                         AND E.Termination_Date >= @startdtsub
--------                         AND E.Termination_Date <= @enddtsub
--------                         AND E.Joining_Date > @startdtsub
--------                         AND E.PR_Date >= E.Joining_Date
--------                         AND Dt.DateInYear >= E.PR_Date
--------                         AND Dt.DateInYear <= E.Termination_Date
--------                         AND (Datepart(weekday, DateInYear) = 1))
--------                     OR (E.PR_Date IS NOT NULL
--------                         AND E.Termination_Date IS NOT NULL
--------                         AND E.Termination_Date >= @startdtsub
--------                         AND E.Termination_Date <= @enddtsub
--------                         AND E.Joining_Date < @startdtsub
--------                         AND E.PR_Date < @startdtsub
--------                         AND Dt.DateInYear >= @startdtsub
--------                         AND Dt.DateInYear <= E.Termination_Date
--------                         AND (Datepart(weekday, DateInYear) = 1))
--------                     OR (E.PR_Date IS NOT NULL
--------                         AND E.Termination_Date IS NOT NULL
--------                         AND E.Termination_Date >= @startdtsub
--------                         AND E.Termination_Date <= @enddtsub
--------                         AND E.Joining_Date <= @startdtsub
--------                         AND E.PR_Date >= @startdtsub
--------                         AND Dt.DateInYear >= E.PR_Date
--------                         AND Dt.DateInYear <= E.Termination_Date
--------                         AND (Datepart(weekday, DateInYear) = 1))) ActPRSunDaySpan
--------  INTO   #PRSatSunDaysTemp
--------  FROM   #EmployeeTemp E
--------
--------  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is not PR and works during PR Period.                                                                                                                        
--------  SELECT Emp_Code,(SELECT COUNT(Datepart(weekday, DateInYear))
--------                   FROM   DateInYear Dt
--------                   WHERE  (((E.Termination_Date >= @startdtsub
--------                             AND E.Termination_Date <= @enddtsub)
--------                            AND E.Joining_Date >= @startdtsub)
--------                       AND Dt.DateInYear >= E.Joining_Date
--------                       AND Dt.DateInYear <= E.Termination_Date
--------                       AND (Datepart(weekday, DateInYear) = 1))
--------                       OR (((E.Termination_Date >= @startdtsub
--------                             AND E.Termination_Date <= @enddtsub)
--------                            AND E.Joining_Date < @startdtsub)
--------                           AND Dt.DateInYear >= @startdtsub
--------                           AND Dt.DateInYear <= E.Termination_Date
--------                           AND (Datepart(weekday, DateInYear) = 1))
--------                       OR ((E.Termination_Date IS NULL
--------                            AND (E.Joining_Date > @startdtsub
--------                                 AND E.Joining_Date <= @enddtsub))
--------                           AND Dt.DateInYear >= E.Joining_Date
--------                           AND Dt.DateInYear <= @enddtsub
--------                           AND (Datepart(weekday, DateInYear) = 1))
--------                       OR ((E.Termination_Date IS NULL
--------                            AND (E.Joining_Date < @startdtsub))
--------                           AND Dt.DateInYear >= @startdtsub
--------                           AND Dt.DateInYear <= @enddtsub
--------                           AND (Datepart(weekday, DateInYear) = 1))
--------                       OR ((E.Termination_Date > @enddtsub
--------                            AND E.Joining_Date < @startdtsub)
--------                           AND Dt.DateInYear >= @startdtsub
--------                           AND Dt.DateInYear <= @enddtsub
--------                           AND (Datepart(weekday, DateInYear) = 1))) ActSunDaySpan,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date >= @startdtsub ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date < @startdtsub ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date > @startdtsub AND E.Joining_Date <= @enddtsub ) ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date < @startdtsub) ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday,
--------                                                                                    DateInYear) = 7) ) OR ((E.Termination_Date > @enddtsub AND E.Joining_Date < @startdtsub )
--------                                                                                    AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) ))) ActSatDaySpan
--------  INTO   #SatSunDaysTemp
--------  FROM   #EmployeeTemp E
--------
--------  -- Calculate Unpaid FullDay for the Employees who took leaves during the PR Period                                                                                                                                          
--------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) UnpaidFullDayPR
--------  INTO   #UnpaidFullDayPR
--------  FROM   Emp_Leaves el
--------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
--------         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code
--------  WHERE  (Eld.Leave_Date >= @startdtsub
--------          AND Eld.Leave_Date <= @enddtsub)
--------     AND (Eld.unpaid_leave = 1
--------          AND eld.halfday_leave = 0)
--------     AND El.Status = 'Approved'
--------     AND ((E.PR_Date IS NOT NULL
--------           AND E.Termination_Date IS NULL
--------           AND E.PR_Date >= @startdtsub
--------           AND E.PR_Date <= @enddtsub
--------           AND E.Joining_Date < @startdtsub
--------           AND Eld.Leave_Date >= E.PR_Date
--------           AND Eld.Leave_Date <= @enddtsub)
--------           OR (E.PR_Date IS NOT NULL
--------               AND E.Termination_Date IS NULL
--------               AND E.PR_Date >= @startdtsub
--------               AND E.PR_Date <= @enddtsub
--------               AND E.Joining_Date >= @startdtsub
--------               AND E.Joining_Date <= @enddtsub
--------               AND E.PR_Date >= E.Joining_Date
--------               AND Eld.Leave_Date >= E.PR_Date
--------               AND Eld.Leave_Date <= @enddtsub)
--------           OR (E.PR_Date IS NOT NULL
--------               AND E.Termination_Date IS NOT NULL
--------               AND E.Termination_Date >= @startdtsub
--------               AND E.Termination_Date <= @enddtsub
--------               AND E.Joining_Date > @startdtsub
--------               AND E.PR_Date >= E.Joining_Date
--------               AND Eld.Leave_Date >= E.PR_Date
--------               AND Eld.Leave_Date <= E.Termination_Date)
--------           OR (E.PR_Date IS NOT NULL
--------               AND E.Termination_Date IS NOT NULL
--------               AND E.Termination_Date >= @startdtsub
--------               AND E.Termination_Date <= @enddtsub
--------               AND E.Joining_Date < @startdtsub
--------               AND E.PR_Date < @startdtsub
--------               AND Eld.Leave_Date >= @startdtsub
--------               AND Eld.Leave_Date <= E.Termination_Date))
--------  GROUP  BY El.Emp_Id
--------
--------  -- Calculate Unpaid Half Day for the Employees who took leaves during the PR Period                                                            
--------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 UnpaidHalfDayPR
--------  INTO   #UnpaidHalfDayPR
--------  FROM   Emp_Leaves el
--------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
--------         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code
--------  WHERE  (Eld.Leave_Date >= @startdtsub
--------          AND Eld.Leave_Date <= @enddtsub)
--------     AND (Eld.unpaid_leave = 1
--------          AND eld.halfday_leave = 1)
--------     AND El.Status = 'Approved'
--------     AND ((E.PR_Date IS NOT NULL
--------           AND E.Termination_Date IS NULL
--------           AND E.PR_Date >= @startdtsub
--------           AND E.PR_Date <= @enddtsub
--------           AND E.Joining_Date < @startdtsub
--------           AND Eld.Leave_Date >= E.PR_Date
--------           AND Eld.Leave_Date <= @enddtsub)
--------           OR (E.PR_Date IS NOT NULL
--------               AND E.Termination_Date IS NULL
--------               AND E.PR_Date >= @startdtsub
--------               AND E.PR_Date <= @enddtsub
--------               AND E.Joining_Date >= @startdtsub
--------               AND E.Joining_Date <= @enddtsub
--------               AND E.PR_Date >= E.Joining_Date
--------               AND Eld.Leave_Date >= E.PR_Date
--------               AND Eld.Leave_Date <= @enddtsub)
--------           OR (E.PR_Date IS NOT NULL
--------               AND E.Termination_Date IS NOT NULL
--------               AND E.Termination_Date >= @startdtsub
--------               AND E.Termination_Date <= @enddtsub
--------               AND E.Joining_Date > @startdtsub
--------               AND E.PR_Date >= E.Joining_Date
--------               AND Eld.Leave_Date >= E.PR_Date
--------               AND Eld.Leave_Date <= E.Termination_Date)
--------           OR (E.PR_Date IS NOT NULL
--------               AND E.Termination_Date IS NOT NULL
--------               AND E.Termination_Date >= @startdtsub
--------               AND E.Termination_Date <= @enddtsub
--------               AND E.Joining_Date < @startdtsub
--------               AND E.PR_Date < @startdtsub
--------               AND Eld.Leave_Date >= @startdtsub
--------               AND Eld.Leave_Date <= E.Termination_Date))
--------  GROUP  BY El.Emp_Id
--------
--------  -- Calculate Paid Half Day for the Employees who took leaves during working days                                                                                                                                                
--------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 PaidHalfDay
--------  INTO   #PaidHalfDay
--------  FROM   Emp_Leaves el
--------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
--------  WHERE  (Eld.Leave_Date >= @startdtsub
--------          AND Eld.Leave_Date <= @enddtsub)
--------     AND (Eld.unpaid_leave = 0
--------          AND eld.halfday_leave = 1)
--------     AND El.Status = 'Approved'
--------  GROUP  BY El.Emp_Id
--------
--------  -- Calculate Paid Full Day for the Employees who took leaves during working days                                                                                  
--------  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) PaidFullDay
--------  INTO   #PaidFullDay
--------  FROM   Emp_Leaves el
--------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
--------  WHERE  (Eld.Leave_Date >= @startdtsub
--------          AND Eld.Leave_Date <= @enddtsub)
--------     AND (Eld.unpaid_leave = 0
--------          AND eld.halfday_leave = 0)
--------     AND El.Status = 'Approved'
--------  GROUP  BY El.Emp_Id
--------
--------  -- Calculate UnPaid Half Day for the Employees who took leaves during working days                                            
--------  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) / 2 UnpaidHalfDay
--------  INTO   #UnpaidHalfDay
--------  FROM   Emp_Leaves el
--------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
--------  WHERE  (Eld.Leave_Date >= @startdtsub
--------          AND Eld.Leave_Date <= @enddtsub)
--------     AND (Eld.unpaid_leave = 1
--------          AND eld.halfday_leave = 1)
--------     AND El.Status = 'Approved'
--------  GROUP  BY El.Emp_Id
--------
--------  -- Calculate UnPaid Full Day for the Employees who took leaves during working days                                                                                                                             
--------  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) UnpaidFullDay
--------  INTO   #UnpaidFullDay
--------  FROM   Emp_Leaves el
--------         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id
--------  WHERE  (Eld.Leave_Date >= @startdtsub
--------          AND Eld.Leave_Date <= @enddtsub)
--------     AND (Eld.unpaid_leave = 1
--------          AND eld.halfday_leave = 0)
--------     AND El.Status = 'Approved'
--------  GROUP  BY El.Emp_Id
--------
--------  --Calc Deduction Amounts For Employees                                                                                                                                           
--------  SELECT Emp_Code,SUM(trx_amount) DedAmt
--------  INTO   #Deduction
--------  FROM   Emp_Deductions ED
--------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID
--------  WHERE  (--MONTH(trx_period) = @startmonth AND                                                    
--------         (trx_period >= @startdtsub
--------          AND trx_period <= @enddtsub)
--------         AND YEAR(trx_period) = @startyear)
--------   And ((ED.FundType is NULL OR ED.FundType = 0) Or (ED.FundType >=5 And ED.FundType <=8)) --Added on Dec 6 for Auto And Manual Funds- Start  
--------  GROUP  BY Emp_Code
--------
--------
--------  --Calc Deduction Amounts Applicable CPF on Deduction For Employees                                                            
--------  SELECT ED.Emp_Code,SUM(ED.trx_amount) DedCPFAmt
--------  INTO   #DeductionCPF
--------  FROM   Emp_Deductions ED
--------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID
--------  WHERE  (--MONTH(ED.trx_period) = @startmonth AND                                                    
--------         (trx_period >= @startdtsub
--------          AND trx_period <= @enddtsub)
--------         AND YEAR(ED.trx_period) = @startyear)
--------         AND DT.CPF = 'Yes'
--------  GROUP  BY Emp_Code
--------
--------  --Calc Add for Wages  when CPF Yes                                                                                           
--------  SELECT Emp_Code,SUM(trx_amount) Add4AW
--------  INTO   #Add4AW
--------  FROM   emp_additions EA
--------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
--------  WHERE  --Status='L' And                                                    
--------  (--MONTH(trx_period) = @startmonth AND                                                    
--------  (trx_period >= @startdtsub
--------   AND trx_period <= @enddtsub)
--------  AND YEAR(trx_period) = @startyear)
--------  AND AT.CPF = 'Yes'
--------  AND AT.Type_Of_Wage = 'A'
--------  AND (EA.ClaimStatus = 'Approved'
--------        OR EA.ClaimStatus IS NULL)
--------  GROUP  BY Emp_Code
--------
--------  --Calc Add for Wages  when CPF NO                                                                                           
--------  SELECT Emp_Code,SUM(trx_amount) Add4AWNOCPF
--------  INTO   #Add4AWNOCPF
--------  FROM   emp_additions EA
--------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
--------  WHERE  --Status='L' And                                                    
--------  (--MONTH(trx_period) = @startmonth AND                                                    
--------  (trx_period >= @startdtsub
--------   AND trx_period <= @enddtsub)
--------  AND YEAR(trx_period) = @startyear)
--------  AND AT.CPF = 'No'
--------  AND AT.Type_Of_Wage = 'A'
--------  AND (EA.ClaimStatus = 'Approved'
--------        OR EA.ClaimStatus IS NULL)
--------  GROUP  BY Emp_Code
--------
--------  --Calc Add For Ordinary Wages                                                    
--------  SELECT Emp_Code,SUM(trx_amount) Add4OW
--------  INTO   #Add4OW
--------  FROM   emp_additions EA
--------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
--------  WHERE  --Status='L' And                                   
--------  (--MONTH(trx_period) = @startmonth AND                                                    
--------  (trx_period >= @startdtsub
--------   AND trx_period <= @enddtsub)
--------  AND YEAR(trx_period) = @startyear)
--------  AND AT.CPF = 'Yes'
--------  AND (AT.Type_Of_Wage = 'O'
--------        OR AT.Type_Of_Wage IS NULL)
--------  AND (EA.ClaimStatus = 'Approved'
--------        OR EA.ClaimStatus IS NULL)
--------  GROUP  BY Emp_Code
--------
--------  --Calc Add For Normal Wages                                                                              
--------  SELECT Emp_Code,SUM(trx_amount) Add4NW
--------  INTO   #Add4NW
--------  FROM   emp_additions EA
--------         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID
--------  WHERE  --Status='L' And                                                                                                                                                 
--------  (--MONTH(trx_period) = @startmonth AND                                                    
--------  (trx_period >= @startdtsub
--------   AND trx_period <= @enddtsub)
--------  AND YEAR(trx_period) = @startyear)
--------  AND AT.CPF = 'No'
--------  AND (AT.Type_Of_Wage = 'O'
--------        OR AT.Type_Of_Wage IS NULL)
--------  AND (EA.ClaimStatus = 'Approved'
--------        OR EA.ClaimStatus IS NULL)
--------  GROUP  BY Emp_Code
--------
--------  --Calc Employee Overtime                           
--------  SELECT Emp_Code,dbo.Converttohours(SUM(dbo.Converttominutes(overtime1))) overtime1,dbo.Converttohours(SUM(dbo.Converttominutes(overtime2))) overtime2,SUM(Days_Work) Days_Work,dbo.Converttohours(SUM(dbo.Converttominutes(NH_Work))) NH_Work
--------  INTO   #EOT
--------  FROM   emp_overtime
--------  WHERE  ((--Trx_Month = @monthidintbl AND                                                    
--------          (payrollstdate >= @startdtsub
--------           AND payrollstdate <= @enddtsub)
--------          AND Trx_Year = @startyear)
--------           OR Trx_Month IS NULL)
--------  GROUP  BY Emp_Code
--------
--------  --Select @TotalDaysCount_5,@TotalDaysCount_5p,@TotalDaysCount_6,@TotalDaysCount_7                                                                                                        
--------  SELECT *,([Basic] - TotalUnPaid) ActualBasic,CPFOrdinary = CASE
--------                                                               WHEN (CPF = 'Y'
--------                                                                     AND Emp_Type = 'SPR'
--------                                                                      OR Emp_Type = 'SDPR'
--------                                                                      OR Emp_Type = 'SC')
--------                                                                    AND [BasicPR] <= 0 THEN (([Basic] - TotalUnPaid) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)
--------                                                               ELSE (([BasicPR] - UnpaidDeductPR) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)
--------                                                             END,GrossWithOutAddition = CASE
--------                                                                                          WHEN (CPF = 'Y'
--------                                                                                                AND Emp_Type = 'SPR'
--------                                                                                                 OR Emp_Type = 'SDPR'
--------                                                                                                 OR Emp_Type = 'SC')
--------                                                                                               AND [BasicPR] <= 0
--------                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)
--------                                                                                          WHEN (CPF = 'Y'
--------                                                                                                AND Emp_Type = 'SPR'
--------                                                                                                 OR Emp_Type = 'SDPR'
--------                                                                                                 OR Emp_Type = 'SC')
--------                                                                                               AND [BasicPR] <= 0
--------                                                                                               AND @roundnetpay = -1 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)
--------                                                                                          WHEN ([BasicPR] > 0
--------                                                                                                AND @roundnetpay = -1) THEN Isnull(CAST((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)
--------                                                                                          WHEN ([BasicPR] > 0
--------                                                                                                AND @roundnetpay >= 0) THEN Isnull(CAST(Round((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)
--------                                                                                          WHEN (Emp_Type = 'WP'
--------                                                                                                 OR Emp_Type = 'DP'
--------                                                                                                 OR Emp_Type = 'EP'
--------                                                                                                 OR Emp_Type = 'SP')
--------                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)
--------                                                                                          WHEN (Emp_Type = 'WP'
--------                                                                                                 OR Emp_Type = 'DP'
--------                                                                                                 OR Emp_Type = 'EP'
--------                                                                                                 OR Emp_Type = 'SP')
--------                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)
--------                                                                                        END
--------  INTO   #PriorGenPayroll
--------  FROM   (SELECT *,[BasicPR] = CASE
--------                                 WHEN (PR_Date >= @startdtsub)
--------                                      AND (Emp_Type = 'SPR'
--------                                            OR Emp_Type = 'SDPR'
--------                                            OR Emp_Type = 'SC') THEN Round(CONVERT(DECIMAL(8, 2), (ActPRWrkgDaysSpan * BasicDayRateWORound)), 2)
--------                                 ELSE -1
--------                               --Else Round(convert(decimal(8,2),(ActWrkgDaysSpan*BasicDayRateWORound)),2)                                                                                                                   
--------                               END,[Basic] = CASE
--------                                               WHEN PayType = 'D'
--------                                                    AND CONVERT(DECIMAL(8, 2), PayRateCust) <= 0 THEN 0
--------                                               WHEN ActPRWrkgDaysSpan > 0 THEN Round(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)
--------                                               ELSE Round(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)
--------                                             END
--------          FROM   (SELECT E.Emp_Code,E.FullName,E.Emp_Type,E.DeptName,E.GroupName,E.EmployeeGiro,E.EmployerGiro,E.GiroBank,E.PRAge,E.WorkingDaysInWeek,E.OT,E.CPF,E.CPFType,E.PayType,E.Daily_rate_mode,E.Daily_Rate,E.Pay_Mode,E.Hourly_rate,E.Join_Date Join_Date,E.Term_Date Term_Date,E.Pr_date Pr_date,E.RollDays,E.WrkgDaysInRoll,E.BasicPayInRoll,E.SubPayDays,E.WrkgDaysInSubPay,E.BasicDayRate,E.BasicDayRateWORound,(E.BasicDayRate * E.ActWrkgDaysSpan) BasicNorSubPay,E.UnpaidFullDay,E.UnpaidHalfDay,E.PaidFullDay,E.PaidHalfDay,E.UnPaidDeduct,E.UnpaidFullDayPR,E.UnpaidHalfDayPR,E.UnPaidDeductPR,(E.UnPaidDeduct + E.UnPaidDeductPR) TotalUnPaid,E.Days_Work,E.NH_Work,E.OT1Rate,E.NHHrs,E.OT1Hrs,E.OT1,E.OT2Rate,E.OT2Hrs,E.OT2,E.Add4NW,E.Add4OW,E.NH,E.Add4AW,E.Add4AWNOCPF,E.AdditionalWages,E.DedAmt,E.DedCPFAmt,E.ActSatDaySpan,E.ActSunDaySpan,E.ActWrkgDaysSpan,E.ActPRSatDaySpan,E.ActPRSunDaySpan,ActPRWrkgDaysSpan = CASE
ate IS NULL
ate > @enddtsub) THEN 0
ate IS NOT NULL
erm_Date IS NOT NULL
ate >= @startdtsub
ate <= @enddtsub)
erm_Date >= @enddtsub) THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (
ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NOT NULL
ate >= @startdtsub
ate <= @enddtsub)
erm_Date < @enddtsub) THEN (Datediff(dw, E.PR_Date, E.Term_Date) + 1)

ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NULL
ate <= @startdtsub
oin_Date <= @enddtsub) THEN E.ActWrkgDaysSpan
ate IS NOT NULL
erm_Date IS NOT NULL
ate < @startdtsub
oin_Date < @startdtsub
erm_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, E.Term_Date) + 1)

ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NOT NULL
ate < @startdtsub
oin_Date >= @startdtsub
oin_Date <= @enddtsub
erm_Date <= @enddtsub) THEN E.ActWrkgDaysSpan
ate IS NOT NULL
erm_Date IS NULL
ate >= @startdtsub
ate <= @enddtsub)
oin_Date <= @startdtsub) THEN
atediff(dw, E.PR_Date, @enddtsub) + 1) - (
ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NULL
ate >= @startdtsub
ate <= @enddtsub)
oin_Date >= @startdtsub
oin_Date <= @enddtsub)
oin_Date < E.PR_Date THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (
ctPRSatDaySpan + ActPRSunDaySpan)
ate IS NOT NULL
erm_Date IS NULL
ate >= @startdtsub
ate <= @enddtsub)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND E.Join_Date >= @startdtsub
oin_Date <= @enddtsub)
oin_Date >= E.PR_Date THEN (Datediff(dw, E.Join_Date, @enddtsub) + 1) - (
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ActPRSatDaySpan + ActPRSunDaySpan)
ctWrkgDaysSpan
aysWorkedRate,E.CalculateCPF,E.PayRateCust
--------                  FROM   (SELECT T.Emp_Code,T.FullName,T.Emp_Type,T.DeptName,T.GroupName,T.EmployeeGiro,T.EmployerGiro,T.GiroBank,T.PRAge,T.WorkingDaysInWeek,T.OT,T.CPF,T.CPFType,T.PayType,T.Daily_rate_mode,T.Daily_Rate,T.Pay_Mode,T.Hourly_rate,T.Join_Date Join_Date,T.Term_Date Term_Date,T.Pr_date Pr_date,T.RollDays,T.WrkgDaysInRoll,T.BasicPayInRoll,T.SubPayDays,T.WrkgDaysInSubPay,T.BasicDayRate,T.BasicDayRate BasicDayRateWORound,T.UnpaidFullDay,T.UnpaidHalfDay,T.PaidFullDay,T.PaidHalfDay,T.UnpaidFullDayPR,T.UnpaidHalfDayPR,T.Days_Work,T.NH_Work,T.OT1Rate,Isnull(T.NHHrs, 0) NHHrs,Isnull(T.OT1Hrs, 0) OT1Hrs,OT1 = CASE
roundaddition = -1 THEN T.OT1
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ELSE Round(T.OT1, @roundaddition)

roundaddition = -1 THEN T.NH
ound(T.NH, @roundaddition)
ate,Isnull(T.OT2Hrs, 0) OT2Hrs,OT2 = CASE
roundaddition = -1 THEN T.OT2
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ELSE Round(T.OT2, @roundaddition)
dd4NW = CASE
roundaddition = -1 THEN T.Add4NW
ound(T.Add4NW, @roundaddition)
dd4OW = CASE
roundaddition = -1 THEN T.Add4OW
ound(T.Add4OW, @roundaddition)
dd4AW = CASE
roundaddition = -1 THEN T.Add4AW
ound(T.Add4AW, @roundaddition)
dd4AWNOCPF = CASE
roundaddition = -1 THEN T.Add4AWNOCPF
ound(T.Add4AWNOCPF, @roundaddition)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             END,AdditionalWages = CASE
roundaddition = -1 THEN T.AdditionalWages
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE Round(T.AdditionalWages, @roundaddition)
edAmt = CASE
rounddeduction = -1 THEN T.DedAmt
ound(T.DedAmt, @rounddeduction)
edCPFAmt = CASE
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHEN @rounddeduction = -1 THEN T.DedCPFAmt
ound(T.DedCPFAmt, @rounddeduction)
ctSatDaySpan,T.ActSunDaySpan,ActWrkgDaysSpan = CASE
oin_Date IS NULL) THEN T.WrkgDaysInSubPay
oin_Date <= @startdtsub
erm_Date IS NULL) And HalfSalary=0 THEN (T.WrkgDaysInSubPay)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        WHEN (T.Join_Date <= @startdtsub
erm_Date IS NULL) And HalfSalary=1 THEN T.WrkgDaysInRoll/2 --(T.WrkgDaysInSubPay)
oin_Date > @startdtsub
erm_Date IS NULL) THEN ((@RollDays - DAY(T.Join_Date) - Datediff(dw, @enddtsub, @enddtproll)) + 1) - (ActSatDaySpan + ActSunDaySpan)
oin_Date >= @startdtsub
oin_Date <= @enddtsub
erm_Date IS NOT NULL
erm_Date > @enddtsub) THEN (Datediff(dw, T.Join_Date, @enddtsub) + 1) - (ActSatDaySpan + ActSunDaySpan)
oin_Date <= @startdtsub
erm_Date IS NOT NULL
erm_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        WHEN (T.Join_Date >= @startdtsub
oin_Date <= @enddtsub
erm_Date IS NOT NULL
erm_Date <= @enddtsub) THEN (Datediff(dw, T.Join_Date, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)
rkgDaysInSubPay
ctPRSatDaySpan,T.ActPRSunDaySpan,UnPaidDeduct = CASE
roundunpaid = -1 THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate * (T.UnpaidFullDay + T.UnpaidHalfDay))
ound(CONVERT(DECIMAL(8, 2), (Round(T.BasicDayRate, @roundunpaid) * (T.UnpaidFullDay +
npaidHalfDay))),
roundunpaid)
nPaidDeductPR = CASE
roundunpaid = -1 THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate *
npaidFullDayPR +
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                T.UnpaidHalfDayPR))
ound(CONVERT(DECIMAL(8, 2), (Round(T.BasicDayRate, @roundunpaid) *
npaidFullDayPR
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               +
npaidHalfDayPR))),
roundunpaid)
aysWorkedRate = CASE
ayType = 'D'
aily_rate_mode = 'A'
roundaddition >= 0 THEN Round((
asicDayRate * T.Days_Work),
roundaddition)
ayType = 'D'
aily_rate_mode = 'A'
roundaddition = -1 THEN (
asicDayRate * T.Days_Work)
ayType = 'D'
aily_rate_mode = 'M'
roundaddition >= 0 THEN Round(
aily_Rate * T.Days_Work,
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @roundaddition)
ayType = 'D'
aily_rate_mode = 'M'
roundaddition = -1 THEN (T.Daily_Rate * T.Days_Work)
ayType = 'H'
roundaddition >= 0 THEN Round((
ourly_Rate / 60) *
dbo.Converttominutes(
snull(T.NH_Work, 0))),
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           @roundaddition)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         --ROUND((T.Hourly_Rate * T.NH_Work), @roundaddition)                               
ayType = 'H'
roundaddition = -1 THEN (
ourly_Rate / 60) * dbo.Converttominutes(
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Isnull(T.NH_Work, 0))

ourly_Rate * T.NH_Work)                    

alculateCPF,T.PayRateCust
--------                          FROM   (SELECT Em.Emp_Code,(Em.emp_name + ' ' + Em.emp_lname) FullName,Em.Emp_Type,DEPT.DeptName,EG.EmpGroupName GroupName,--Em.Sex, EG.EmpGroupName GroupName, Ic_PP_Number NRICPREPWP,                                             
--------                                         Em.giro_acct_number EmployeeGiro,GIRO.bank_accountno EmployerGiro,giro_bank GiroBank,PRAge = CASE
--------                                                                                                                                        WHEN (Em.Emp_Type = 'SC') THEN 3
--------                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'
--------                                                                                                                                               OR Em.Emp_Type = 'SDPR')
--------                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) > 24) THEN 3
--------                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'
--------                                                                                                                                               OR Em.Emp_Type = 'SDPR')
--------                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) <= 12) THEN 1
--------                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'
--------                                                                                                                                               OR Em.Emp_Type = 'SDPR')
--------                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) > 12
--------                                                                                                                                                  AND Datediff(m, Em.pr_date, @startdtsub) <= 24) THEN 2
--------                                                                                                                                        ELSE 0
--------                                                                                                                                      END,Em.wdays_per_week WorkingDaysInWeek,Em.Ot_Entitlement OT,Em.Cpf_entitlement CPF,Em.EmpCPFtype CPFType,Em.Pay_Frequency PayType,Em.Payment_Mode Pay_Mode,Em.Joining_Date Join_Date,Em.Termination_date Term_Date,Em.Pr_date,Em.Hourly_rate,@RollDays RollDays,WrkgDaysInRoll = CASE
--------                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCountPayRoll_5
--------                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCountPayRoll_5p
--------                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCountPayRoll_6
--------                                                                                                                                                                                                                                                                                                                                                                                                                          WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCountPayRoll_7
--------                                                                                                                                                                                                                                                                                                                                                                                                                        END,Em.PayRateCust AS BasicPayInRoll,@NoWrkgDaysSubPay SubPayDays,WrkgDaysInSubPay = CASE
m.wdays_per_week = 5) THEN @TotalDaysCount_5
m.wdays_per_week = 5.5) THEN @TotalDaysCount_5p
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCount_6
m.wdays_per_week = 7) THEN @TotalDaysCount_7
asicDayRate = CASE
m.wdays_per_week >= 5
daily_rate_mode = 'M'
daily_rate > 0) THEN Em.daily_rate
m.wdays_per_week = 5
roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5)
m.wdays_per_week = 5
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5), @roundunpaid)
m.wdays_per_week = 5.5
roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5p)
m.wdays_per_week = 5.5
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5p), @roundunpaid)
m.wdays_per_week = 6
roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_6)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WHEN (Em.wdays_per_week = 6
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_6), @roundunpaid)
m.wdays_per_week = 7
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_7)
m.wdays_per_week = 7
roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_7), @roundunpaid)
hen (Em.wdays_per_week >= 5  And daily_rate_mode='M') Then daily_rate                                   
snull(UFD.UnpaidFullDay, 0) - Isnull(UFPR.UnpaidFullDayPR, 0)) UnpaidFullDay,(Isnull(UHD.UnpaidHalfDay, 0) - Isnull(UHPR.UnpaidHalfDayPR, 0)) UnpaidHalfDay,Isnull(PFD.PaidFullDay, 0) PaidFullDay,Isnull(PHD.PaidHalfDay, 0) PaidHalfDay,Isnull(UFPR.UnpaidFullDayPR, 0) UnpaidFullDayPR,Isnull(UHPR.UnpaidHalfDayPR, 0) UnpaidHalfDayPR,(Em.hourly_rate * Em.Ot1Rate) OT1Rate,EOT.NH_Work NHHrs,EOT.overtime1 OT1Hrs,
--------                                                 CONVERT(DECIMAL(8, 2), (((Em.hourly_rate * Em.Ot1Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime1, 0)))) OT1,(Em.hourly_rate * Em.Ot2Rate) OT2Rate,EOT.overtime2 OT2Hrs,CONVERT(DECIMAL(8, 2), (((Em.hourly_rate * Em.Ot2Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime2, 0)))) OT2,CONVERT(DECIMAL(8, 2), (((Em.hourly_rate)/60) * dbo.Converttominutes(Isnull(EOT.NH_Work, 0)))) NH,
--------                                                         Days_Work = CASE
--------                                                                       WHEN Em.Pay_Frequency = 'D' THEN Isnull(EOT.Days_Work, 0)
--------                                                                       ELSE 0
--------                                                                     END,NH_Work = CASE
--------                                                                                     WHEN Em.Pay_Frequency = 'H' THEN Isnull(EOT.NH_Work, 0)
--------                                                                                     ELSE 0
--------                                                                                   END,ActSatDaySpan = CASE
--------                                                                                                         WHEN (Em.wdays_per_week = 5.5) THEN SSD.ActSatDaySpan / 2
--------                                                                                                         WHEN (Em.wdays_per_week = 6) THEN 0
--------                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0
--------                                                                                                         ELSE SSD.ActSatDaySpan
--------                                                                                                       END,ActSunDaySpan = CASE
--------                                                                                                                             WHEN (Em.wdays_per_week = 7) THEN 0
--------                                                                                                                             ELSE SSD.ActSunDaySpan
--------                                                                                                                           END,ActPRSatDaySpan = CASE
--------                                                                                                                                                   WHEN (Em.wdays_per_week = 5.5) THEN SSDPR.ActPRSatDaySpan / 2
--------                                                                                                                                                   WHEN (Em.wdays_per_week = 6) THEN 0
--------                                                                                                                                                   WHEN (Em.wdays_per_week = 7) THEN 0
--------                                                                                                                                                   ELSE SSDPR.ActPRSatDaySpan
--------                                                                                                                                                 END,ActPRSunDaySpan = CASE
--------                                                                                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0
--------                                                                                                                                                                         ELSE SSDPR.ActPRSunDaySpan
--------                                                                                                                                                                       END,Isnull(Add4NW.Add4NW, 0) Add4NW,Isnull(Add4OW.Add4OW, 0) Add4OW,Isnull(Add4AW.Add4AW, 0) Add4AW,Isnull(Add4AWNOCPF.Add4AWNOCPF, 0) Add4AWNOCPF,(Isnull(Add4NW.Add4NW, 0) + Isnull(Add4OW.Add4OW, 0) + Isnull(Add4AW.Add4AW, 0)) AdditionalWages,Isnull(Ded.DedAmt, 0) DedAmt,Isnull(DCPF.DedCPFAmt, 0) DedCPFAmt,CalculateCPF,Daily_rate_mode,Daily_Rate = CASE
roundunpaid = -1 THEN Daily_Rate
ound(Daily_Rate, @roundunpaid)
--------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      END,Em.PayRateCust,Em.HalfSalary
--------                                  FROM   #EmployeeTemp Em
--------                                         LEFT OUTER JOIN Department DEPT ON Em.Dept_Id = DEPT.Id
--------                                         LEFT OUTER JOIN Emp_Group EG ON Em.emp_group_id = EG.Id
--------                                         LEFT OUTER JOIN GiroBanks GIRO ON Em.Payment_Mode = GIRO.ID
--------                                         LEFT OUTER JOIN Race RA ON Em.Race_Id = RA.ID
--------                                         LEFT OUTER JOIN #UnpaidFullDay UFD ON Em.Emp_Code = UFD.Emp_Id
--------                                         LEFT OUTER JOIN #UnpaidHalfDay UHD ON Em.Emp_Code = UHD.Emp_Id
--------                                         LEFT OUTER JOIN #PaidFullDay PFD ON Em.Emp_Code = PFD.Emp_Id
--------                                         LEFT OUTER JOIN #PaidHalfDay PHD ON Em.Emp_Code = PHD.Emp_Id
--------                                         LEFT OUTER JOIN #UnpaidFullDayPR UFPR ON Em.Emp_Code = UFPR.Emp_Id
--------                                         LEFT OUTER JOIN #UnpaidHalfDayPR UHPR ON Em.Emp_Code = UHPR.Emp_Id
--------                                         LEFT OUTER JOIN #EOT EOT ON Em.Emp_Code = EOT.Emp_Code
--------                                         LEFT OUTER JOIN #SatSunDaysTemp SSD ON Em.Emp_Code = SSD.Emp_Code
--------                                         LEFT OUTER JOIN #PRSatSunDaysTemp SSDPR ON Em.Emp_Code = SSDPR.Emp_Code
--------                                         LEFT OUTER JOIN #Add4NW Add4NW ON Em.Emp_Code = Add4NW.Emp_Code
--------                                         LEFT OUTER JOIN #Add4OW Add4OW ON Em.Emp_Code = Add4OW.Emp_Code
--------                                         LEFT OUTER JOIN #Add4AW Add4AW ON Em.Emp_Code = Add4AW.Emp_Code
--------                                         LEFT OUTER JOIN #Add4AWNOCPF Add4AWNOCPF ON Em.Emp_Code = Add4AWNOCPF.Emp_Code
--------                                         LEFT OUTER JOIN #Deduction Ded ON Em.Emp_Code = Ded.Emp_Code
--------                                         LEFT OUTER JOIN #DeductionCPF DCPF ON Em.Emp_Code = DCPF.Emp_Code) T) E) F) G
--------  ORDER  BY G.FullName
--------
--------  --Added on Dec 6 for Auto And Manual Funds- Start
--------  SELECT Emp_Code,ED.Trx_ID,FundType = Case
--------        When ED.FundType=1 Then 'CDAC'  
--------        When ED.FundType=2 Then 'ECF'  
--------        When ED.FundType=3 Then 'MBMF'  
--------        When ED.FundType=4 Then 'SINDA'  
--------        END  
--------  INTO   #FundPerc  
--------  FROM   Emp_Deductions ED  
--------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
--------  WHERE  (--MONTH(trx_period) = @startmonth AND
--------         (trx_period >= @startdtsub  
--------          AND trx_period <= @enddtsub)  
--------         AND YEAR(trx_period) = @startyear)  
--------   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))  
--------  GROUP  BY Emp_Code, ED.trx_id, ED.FundType  
--------
-------- UPDATE P  
-------- SET    P.DedAmt = isnull(P.DedAmt,0)+ isnull(EM.DedAmt,0)  
-------- FROM   #PriorGenPayroll P  
--------   INNER JOIN ( Select EM.Emp_Code,--F.FundType,  
--------  Sum(dbo.Getempfundcontribution((Isnull((P.GrossWithOutAddition + P.Add4AW + P.Add4AWNOCPF + P.Add4OW), 0)), Isnull(F.FundType, ''))) DedAmt  
-------- From #FundPerc F  
--------INNER JOIN #EmployeeTemp EM ON F.Emp_Code = EM.Emp_Code  
--------INNER JOIN #PriorGenPayroll P ON F.Emp_Code = P.Emp_Code  
--------Where  @INTendatesubmonth >=1 And EM.CalcFundFH = 'Y'  Group By EM.Emp_Code  
--------) EM ON P.Emp_Code = EM.Emp_Code  
--------  
----------Added on Dec 6 for Auto And Manual Funds- End  
--------
--------  --CALCULATE AW FOR CPF                                                    
--------  DECLARE @EMPLID INT
--------  DECLARE @BASICEMP FLOAT
--------  DECLARE db_cursor_old CURSOR FOR
--------      SELECT Emp_Code,[BASIC]
--------      FROM   #PriorGenPayroll
--------
--------  OPEN db_cursor_old
--------
--------  FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP
--------
--------  WHILE @@FETCH_STATUS = 0
--------      BEGIN
--------          IF (@stdatesubmonth = '16'
--------               OR @endatesubmonth = '28'
--------               OR @endatesubmonth = '29'
--------               OR @endatesubmonth = '30'
--------               OR @endatesubmonth = '31')
--------              BEGIN
--------                  INSERT @CPFAWCALC
--------                         (Emp_Code,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWCPF)
--------                  SELECT *
--------                  FROM   dbo.Fn_calculatecpfaw (@company_id, @month, @year, @EMPLID, @BASICEMP)
--------              END
--------
--------          FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP
--------      END
--------
--------  CLOSE db_cursor_old
--------
--------  DEALLOCATE db_cursor_old
--------                                                                                                                              
--------  SELECT *
--------  INTO   #FinalPre
--------  FROM   (SELECT *,EmployeeCPF = CASE
--------                                   WHEN (Em.CPFGross > 0
--------                                         AND Em.CPFGross <= 1500) THEN 0
--------                                   WHEN (Em.CPFGross <= 0) THEN 0
--------                                   ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployeePerc), 0)) / 100
--------                                 END,EmployerCPF = CASE
--------                                                     --WHEN @endatesubmonth = '15' THEN 0    
--------                                                     WHEN Em.CPFGross <= 1500
--------                                                          AND Em.CPFGross > 0 THEN 0
--------                                                     WHEN Em.CPFGross <= 0 THEN 0
--------                                                     ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployerPerc), 0)) / 100
--------                                                   END,REPLACE((SELECT Top 1 employee_cpf
--------                                                                FROM   CPFAmount_detail
--------                                                                WHERE  hdr_id = (SELECT row_id
--------                                                                                 FROM   CPFAmount_hdr
--------                                                                                 WHERE  pr_years = Em.PRAge
--------                                                                                    AND emp_group = Em.EmpCPFType
--------                                                                                    AND Em.CPFGross BETWEEN sal_from AND sal_to)
--------                                                                   AND age_group = Em.Age_Group
--------                                                                   AND CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployeeCPFRow,REPLACE((SELECT Top 1 employer_cpf
--------                                                                                                                                                   FROM   CPFAmount_detail
--------                                                                                                                                                   WHERE  hdr_id = (SELECT row_id
--------                                                                                                                                                                    FROM   CPFAmount_hdr
--------                                                                                                                                                                    WHERE  pr_years = Em.PRAge
--------                                                                                                                                                                       AND emp_group = Em.EmpCPFType
--------                                                                                                                                                                       AND Em.CPFGross BETWEEN sal_from AND sal_to)
--------                                                                                                                                                      AND age_group = Em.Age_Group
--------                                                                                                                                                      AND CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployerCPFRow
--------          FROM   (SELECT *,CPFAdditionNet = CASE
--------                                              WHEN CPFAdditionNetRev < 0 THEN 0
--------                                              ELSE CPFAdditionNetRev
--------                                            END,CPFAdditionNetRev AWSUBJCPF,CPFGross = CASE
--------                                                                                         WHEN (CalculateCPF = 'Y'
--------                                                                                               AND CalcCPFFH = 'Y'
--------                                                                                               AND CPFAdditionNetRev >= 0) THEN ((CPFOrdinaryCeil + CPFAdditionNetRev))
--------                                                                                         WHEN (CalculateCPF = 'Y'
--------                                                                                               AND CalcCPFFH = 'Y'
--------                                                                                               AND CPFAdditionNetRev < 0) THEN (CPFOrdinaryCeil)
--------                                                                                         ELSE 0
--------                                                                                       END,CPFEmployerPerc = CASE
--------                                                                                                               WHEN (CalculateCPF = 'Y'
--------                                                                                                                     AND CalcCPFFH = 'Y') THEN dbo.Getemployercpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)
--------                                                                                                               ELSE 0
--------                                                                                                             END,CPFEmployeePerc = CASE
--------                                                                                                                                     WHEN (CalculateCPF = 'Y'
--------                                                                                                                                           AND CalcCPFFH = 'Y') THEN dbo.Getemployeecpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)
--------                                                                                                                                     ELSE 0
--------                                                                                                                                   END
--------                  FROM   (SELECT J5.*,CPFOrdinaryCeil = CASE
--------                                                          WHEN (J5.CalculateCPF = 'Y')
--------                                                               AND (CPFOrdinary) >= @cpfceiling THEN @cpfceiling
--------                                                          WHEN (J5.CalculateCPF = 'Y')
--------                                                               AND (CPFOrdinary) < @cpfceiling THEN Isnull((CPFOrdinary), 0)
--------                                                          ELSE 0
--------                                                        END,
--------                                 --dbo.fn_GENPayrollAWCalc(@startmonth, @startyear, Em.Emp_Code, J5.Basic) AS CPFAdditionNetRev ,                                                        
--------                                 Isnull(J7.AWCPF, 0) CPFAdditionNetRev,Em.EmpCPFtype,Em.Age_Group,Em.Age,Em.FundType,Ot1SysRate,OT2SysRate,J7.CMOW,J7.LYOW,J7.CYOW,J7.CPFAWCIL,J7.EST_AWCIL,J7.ACTCIL,J7.AWCM,J7.AWB4CM,J7.AWCM_AWB4CM,EM.sdf_required,EM.Time_Card_No,EM.Fund_Optout,EM.CalcCPFFH,EM.CalcFundFH,EM.PayProcessFH,EM.HalfSalary
--------                          FROM   #EmployeeTemp Em --LEFT OUTER JOIN #CYOWPaidWithCPFCeilRecal J6 ON Em.Emp_Code = J6.Emp_Code                                                            
--------                                 --LEFT OUTER JOIN #CYOWPaidWithCPFCeil J1 ON Em.Emp_Code = J1.Emp_Code                                            
--------                                 --LEFT OUTER JOIN #AWPAIDCurYear J2 ON Em.Emp_Code = J2.Emp_Code                                                            
--------                                 --LEFT OUTER JOIN #LYOWPaidWithCPFCeil J3 ON Em.Emp_Code = J3.Emp_Code                                                            
--------                                 --LEFT OUTER JOIN #AWPAIDCurYearMonth J4 ON Em.Emp_Code = J4.Emp_Code                                                            
--------                                 LEFT OUTER JOIN #PriorGenPayroll J5 ON Em.Emp_Code = J5.Emp_Code
--------                                 LEFT OUTER JOIN @CPFAWCALC J7 ON Em.Emp_Code = J7.Emp_Code) Em) Em) Em
--------  ORDER  BY Em.FullName
--------
--------  --Calculate Employer and Employee CPF Contribution                                                                                                                                           
--------  DECLARE db_cursor CURSOR FOR
--------      SELECT Emp_Code,EmployerCPFRow,EmployeeCPFRow
--------      FROM   #FinalPre
--------      WHERE  EmployeeCPFRow IS NOT NULL
--------          OR EmployerCPFRow IS NOT NULL
--------
--------  OPEN db_cursor
--------
--------  FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt
--------
--------  WHILE @@FETCH_STATUS = 0
--------      BEGIN
--------          SET @compute = N'set @cpfamtemployer= ' + @EmployerCPFAmt
--------
--------          EXEC Sp_executesql @compute,@param1,@cpfamtemployer OUTPUT
--------
--------          SET @compute = N'set @cpfamtemployee= ' + @EmployeeCPFAmt
--------
--------          EXEC Sp_executesql @compute,@param2,@cpfamtemployee OUTPUT
--------
--------          --Exclusive for Full MONTH START                                                            
--------          --       UPDATE   #FinalPre                                                    
--------          --       SET      EmployerCPF = @cpfamtemployer, EmployeeCPF = @cpfamtemployee                                                    
--------          --       WHERE    Emp_Code = @EmpID                                                                                                                    
--------          UPDATE #FinalPre
--------          SET    EmployeeCPF = @cpfamtemployee
--------          WHERE  Emp_Code = @EmpID
--------
--------          --IF (@endatesubmonth != '15')
--------          --BEGIN    
--------          UPDATE #FinalPre
--------          SET    EmployerCPF = @cpfamtemployer
--------          WHERE  Emp_Code = @EmpID
--------
--------          --END    
--------          --Exclusive for Full MONTH END                                    
--------          FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt
--------      END
--------
--------  CLOSE db_cursor
--------
--------  DEALLOCATE db_cursor
--------
--------  SELECT *
--------  INTO   #Final
--------  FROM   (SELECT Emp_Code,FullName,DeptName,GroupName,[Basic],[BasicPR],TotalAdditions,TotalAdditionsWONH=CASE
--------                                                                                                            WHEN (Isnull(TotalAdditions, 0) - Isnull(NH, 0)) <= 0 THEN (Isnull(NH, 0) - Isnull(TotalAdditions, 0))
--------                                                                                                            ELSE (Isnull(TotalAdditions, 0) - Isnull(NH, 0))
--------                                                                                                          END,TotalDeductions,OT1Rate,OT2Rate,NHHrs,OT1Hrs,OT2Hrs,NH,OT1,OT2,Days_Work,CAST(Round(([Basic] + OT1 + OT2 + DaysWorkedRate + Add4NW + Add4OW + Add4AW + Add4AWNOCPF) - TotalDeductions, @roundnetpay) AS DECIMAL(9, 2)) NetPay,OT,CPFOrdinaryCeil,CPFAdditionNet,CPFGross,EmployeeCPFAmt,EmployerCPFAmt,(EmployeeCPFAmt + EmployerCPFAmt) CPFAmount,CPF,EmpCPFtype,PRAge,@cpfceiling CPFCeiling,FundType,FundAmount,(UnpaidFullDay + UnpaidHalfDay + UnpaidFullDayPR + UnpaidHalfDayPR) UnPaidLeaves,TotalUnPaid,PayType,Daily_rate_mode,Daily_Rate,ActualBasic,Pay_Mode,EmployeeGiro,EmployerGiro,GiroBank,Emp_Type,WorkingDaysInWeek,CPFType,Hourly_rate,Join_Date,Term_Date,Pr_date,RollDays,WrkgDaysInRoll,BasicPayInRoll,SubPayDays,WrkgDaysInSubPay,BasicDayRate,BasicDayRateWORound,BasicNorSubPay,UnpaidFullDay,UnpaidHalfDay,PaidFullDay,PaidHalfDay,UnPaidDeduct,UnpaidFullDayPR,UnpaidHalfDayPR,UnPaidDeductPR,
--------                 Add4NW,
--------                        Add4OW,Add4AW,Add4AWNOCPF,AdditionalWages,DedAmt,DedCPFAmt,ActSatDaySpan,ActSunDaySpan,ActWrkgDaysSpan,ActPRSatDaySpan,ActPRSunDaySpan,ActPRWrkgDaysSpan,DaysWorkedRate,CPFOrdinary,Age_Group,Age,OT1SysRate,OT2SysRate,CalculateCPF,CPFEmployeePerc,CPFEmployerPerc,EmployeeCPFRow,EmployerCPFRow,CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + TotalAdditions), @roundnetpay) AS DECIMAL(9, 2)) GrossWithAddition,Isnull(GrossWithOutAddition, 0) GrossWithOutAddition,Isnull(FundGrossAmount, 0) FundGrossAmount,SDLFundGrossAmount,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF,('EmployeePayReport.aspx?qsEmpID=' + CONVERT(VARCHAR, Emp_Code) + '&qsMonth=' + CONVERT(VARCHAR, @monthidintbl) + '&qsYear=' + CONVERT(VARCHAR, @year) + '&st=' + @stdatemonth + '&en=' + @endatemonth + '&stmonth=' + @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&endmonth=' + @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' +
year AS VARCHAR) + '&monthintbl=' + CAST(@monthidintbl AS VARCHAR)) AS MediumUrl,Time_Card_No,Fund_OptOut,SDF_Required,PayProcessFH,HalfSalary
--------          FROM   (SELECT *,CAST((Add4NW + Add4OW + Add4AW + Add4AWNOCPF + DaysWorkedRate) AS DECIMAL(9, 2)) TotalAdditions,CAST((UnPaidDeduct + UnpaidDeductPR + DedAmt + EmployeeCPFAmt + FundAmount) AS DECIMAL(9, 2)) TotalDeductions
--------                  FROM   (SELECT *,Floor(EmployeeCPF) EmployeeCPFAmt,Round(((Abs(Floor(EmployeeCPF) - EmployeeCPF)) + EmployerCPF), 0) EmployerCPFAmt,FundAmount = CASE
--------                                                                                                                                                                     WHEN @INTendatesubmonth >= 1
--------                                                                                                                                                                          AND CalcFundFH = 'Y' THEN dbo.Getempfundcontribution((Isnull((GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW), 0)), Isnull(FundType, ''))
--------                                                                                                                                                                     ELSE 0
--------                                                                                                                                                                   END,FundGrossAmount = CASE
--------                                                                                                                                                                                           WHEN Fund_Optout = 0
--------                                                                                                                                                                                                AND @INTendatesubmonth >= 1
--------                                                                                                                                                                                                AND CalcFundFH = 'Y' THEN (GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW) - DedCPFAmt
--------                                                                                                                                                                                           ELSE 0
--------                                                                                                                                                                                         END,SDLFundGrossAmount = CASE
--------                                                                                                                                                                                                                    WHEN SDF_Required = 2
--------                                                                                                                                                                                                                         --                                                                                                                                                                                                                         AND (PR_Date <= @startdtsub)    
--------                                                                                                                                                                                                                         --                                                                                                                                                                                                                         AND (Emp_Type = 'SPR'    
--------                                                                                                                                                                                                                         --                                                                                                                                                                                                                   OR Emp_Type = 'SDPR'    
--------                                                                                                                                                                                                                         --                                                                                                                                                                                                                               OR Emp_Type = 'SC')    
--------                                                                                                                                                                                                                         --AND @INTendatesubmonth >= 16 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate)-DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)  // Commenting on 10thJune10, Since SDL was not falling in the cond hence now v made the change i.e pr date >= to <= and adding below line    
--------                                                                                                                                                                                                                         AND @INTendatesubmonth >= 1 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate + Add4AW + Add4AWNOCPF + Add4OW) - DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)
--------                                                                                                                                                                                                                    ELSE 0
--------                                                                                                                                                                                                                  END
--------                          FROM   #FinalPre) Res) Res) Res
--------
--------  --Below Part will Remain only in sp_generatepayrolladv                                          
--------  --Start from Here                                    
--------  IF (@stdatesubmonth = '16')
--------      BEGIN
--------          INSERT @FULLMONTH
--------                 (Emp_Code,FullName,DeptName,GroupName,[Basic],BasicPR,TotalAdditions,TotalAdditionsWONH,TotalDeductions,OT1Rate,OT2Rate,NHHrs,OT1Hrs,OT2Hrs,NH,OT1,OT2,Days_Work,NetPay,OT,CPFOrdinaryCeil,CPFAdditionNet,CPFGross,EmployeeCPFAmt,EmployerCPFAmt,CPFAmount,CPF,EmpCPFtype,PRAge,CPFCeiling,FundType,FundAmount,UnPaidLeaves,TotalUnPaid,PayType,Daily_rate_mode,Daily_Rate,ActualBasic,Pay_Mode,EmployeeGiro,EmployerGiro,GiroBank,Emp_Type,WorkingDaysInWeek,CPFType,Hourly_rate,Join_Date,Term_Date,Pr_date,RollDays,WrkgDaysInRoll,BasicPayInRoll,SubPayDays,WrkgDaysInSubPay,BasicDayRate,BasicDayRateWORound,BasicNorSubPay,UnpaidFullDay,UnpaidHalfDay,PaidFullDay,PaidHalfDay,UnPaidDeduct,UnpaidFullDayPR,UnpaidHalfDayPR,UnPaidDeductPR,Add4NW,Add4OW,Add4AW,Add4AWNOCPF,AdditionalWages,DedAmt,DedCPFAmt,ActSatDaySpan,ActSunDaySpan,ActWrkgDaysSpan,ActPRSatDaySpan,ActPRSunDaySpan,ActPRWrkgDaysSpan,DaysWorkedRate,CPFOrdinary,Age_Group,Age,OT1SysRate,OT2SysRate,CalculateCPF,CPFEmployeePerc,
--------                  CPFEmployerPerc
--------                  ,
--------                  EmployeeCPFRow,EmployerCPFRow,GrossWithAddition,GrossWithOutAddition,FundGrossAmount,SDLFundGrossAmount,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF,MediumUrl,Time_Card_No,Fund_OptOut,SDF_Required)
--------          EXEC Sp_generatepayrolladvfullmonth @company_id,@month,@year,@UserID,@EmpPassID,@stdatemonth,@endatemonth,1,@lastdaymonth,@monthidintbl
--------
--------          --EXEC sp_GeneratePayRollAdvFullMonth 2,1,2010,2,'53',1,31,1,31                                      
--------          --SELECT * FROM @FULLMONTH                                          
--------          UPDATE F
--------          SET    F.CPFOrdinaryCeil = Isnull(FM.CPFOrdinaryCeil, 0),
--------                 F.CPFAdditionNet = Isnull(FM.CPFAdditionNet, 0),
--------                 F.CPFGross = Isnull(FM.CPFGross, 0),
--------                 F.EmployeeCPFAmt = (Isnull(FM.EmployeeCPFAmt, 0) - Isnull(PD.empcpf, 0)),
--------                 F.EmployerCPFAmt = (Isnull(FM.EmployerCPFAmt, 0) - Isnull(PD.employercpf, 0)),
--------                 F.GrossWithOutAddition = Isnull(FM.GrossWithOutAddition, 0),
--------                 F.CPFCeiling = Isnull(FM.CPFCeiling, 0),
--------                 F.CPFOrdinary = Isnull(FM.CPFOrdinary, 0),
--------                 F.CPFEmployeePerc = Isnull(FM.CPFEmployeePerc, 0),
--------                 F.CPFEmployerPerc = Isnull(FM.CPFEmployerPerc, 0),
--------                 F.EmployeeCPFRow = Isnull(FM.EmployeeCPFRow, 0),
--------                 F.EmployerCPFRow = Isnull(FM.EmployerCPFRow, 0),
--------                 F.FundGrossAmount = Isnull(FM.FundGrossAmount, 0),
--------                 F.SDLFundGrossAmount = Isnull(FM.SDLFundGrossAmount, 0),
--------                 F.CMOW = Isnull(FM.CMOW, 0),
--------                 F.LYOW = Isnull(FM.LYOW, 0),
--------                 F.CYOW = Isnull(FM.CYOW, 0),
--------                 F.CPFAWCIL = Isnull(FM.CPFAWCIL, 0),
--------                 F.EST_AWCIL = Isnull(FM.EST_AWCIL, 0),
--------                 F.ACTCIL = Isnull(FM.ACTCIL, 0),
--------                 F.AWCM = Isnull(FM.AWCM, 0),
--------                 F.AWB4CM = Isnull(FM.AWB4CM, 0),
--------                 F.AWCM_AWB4CM = Isnull(FM.AWCM_AWB4CM, 0),
--------                 F.AWSUBJCPF = Isnull(FM.AWSUBJCPF, 0),
--------                 F.FundType = Isnull(FM.FundType, 0),
--------                 F.CPFAmount = (Isnull(FM.EmployeeCPFAmt, 0) - Isnull(PD.empcpf, 0)) + (Isnull(FM.EmployerCPFAmt, 0) - Isnull(PD.employercpf, 0))
--------          --F.FundAmount    = isnull(FM.FundAmount,0)--,            
--------          --F.TotalDeductions   = (isnull(FM.TotalDeductions,0)-isnull(F.TotalDeductions,0) + isnull(FM.FundAmount,0))                                      
--------          FROM   #Final F
--------                 INNER JOIN @FULLMONTH FM ON F.Emp_Code = FM.Emp_Code
--------                 INNER JOIN (SELECT emp_id,empcpf,employercpf
--------                             FROM   prepare_payroll_detail
--------                             WHERE  trx_id IN (SELECT trx_id
--------                                               FROM   prepare_payroll_hdr
--------                                               WHERE  Start_Period >= CONVERT(DATETIME, ('01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103)
--------                                                  AND End_Period <= CONVERT(DATETIME, ('15/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103))
--------                                AND ([Status] = 'P'
--------                                      OR [Status] = 'G'
--------                                      OR [Status] = 'A')) PD ON F.Emp_Code = PD.Emp_ID
--------
--------          UPDATE F
--------          SET    F.FundAmount = Isnull(FM.FundAmount, 0) - Isnull(PD.Fund_Amount, 0)
--------          --, F.TotalDeductions = F.UnPaidDeduct + F.UnpaidDeductPR + F.DedAmt + F.EmployeeCPFAmt + F.FundAmount    
--------          FROM   #Final F
--------                 INNER JOIN @FULLMONTH FM ON F.Emp_Code = FM.Emp_Code
--------                 INNER JOIN (SELECT emp_id,empcpf,employercpf,Fund_Amount
--------                             FROM   prepare_payroll_detail
--------                             WHERE  trx_id IN (SELECT trx_id
--------                                               FROM   prepare_payroll_hdr
--------                                               WHERE  Start_Period >= CONVERT(DATETIME, ('01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103)
--------                                                  AND End_Period <= CONVERT(DATETIME, ('15/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103))
--------                                AND ([Status] = 'P'
--------                                      OR [Status] = 'G'
--------                                      OR [Status] = 'A')) PD ON F.Emp_Code = PD.Emp_ID
--------
--------          UPDATE F
--------          SET    F.TotalDeductions = F.UnPaidDeduct + F.UnpaidDeductPR + F.DedAmt + F.EmployeeCPFAmt + F.FundAmount
--------          FROM   #Final F
--------                 INNER JOIN @FULLMONTH FM ON F.Emp_Code = FM.Emp_Code
--------                 INNER JOIN (SELECT emp_id,empcpf,employercpf
--------                             FROM   prepare_payroll_detail
--------                             WHERE  trx_id IN (SELECT trx_id
--------                                               FROM   prepare_payroll_hdr
--------                                               WHERE  Start_Period >= CONVERT(DATETIME, ('01/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103)
--------                                                  AND End_Period <= CONVERT(DATETIME, ('15/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)), 103))
--------                                AND ([Status] = 'P'
--------                                      OR [Status] = 'G'
--------                                      OR [Status] = 'A')) PD ON F.Emp_Code = PD.Emp_ID
--------
--------          UPDATE #Final
--------          SET    NetPay = ([Basic] + TotalAdditions + OT1 + OT2) - TotalDeductions
--------          WHERE  BasicPR = -1
--------
--------          UPDATE #Final
--------          SET    NetPay = (BasicPR + TotalAdditions + OT1 + OT2) - TotalDeductions
--------          WHERE  BasicPR != -1
--------      END
--------
--------  ---END HERE                                          
--------  SELECT *
--------  FROM   #Final F
--------  ORDER  BY FullName
--------
--------  DROP TABLE #Final
--------
--------  DROP TABLE #FinalPre
--------
--------  DROP TABLE #EmployeeTemp
--------
--------  DROP TABLE #PRSatSunDaysTemp
--------
--------  DROP TABLE #SatSunDaysTemp
--------
--------  DROP TABLE #UnpaidFullDayPR
--------
--------  DROP TABLE #UnpaidHalfDayPR
--------
--------  DROP TABLE #PaidHalfDay
--------
--------  DROP TABLE #PaidFullDay
--------
--------  DROP TABLE #UnpaidHalfDay
--------
--------  DROP TABLE #UnpaidFullDay
--------
--------  DROP TABLE #Add4AW
--------
--------  DROP TABLE #Add4OW
--------
--------  DROP TABLE #Add4NW
--------
--------  DROP TABLE #EOT
--------
--------  DROP TABLE #PriorGenPayroll
--------
--------  --DROP TABLE #AWPAIDCurYear  
--------  --DROP TABLE #CYOWPaidWithCPFCeil  
--------  --DROP TABLE #CYOWPaidWithCPFCeilRecal  
--------  --DROP TABLE #AWPAIDCurYearMonth  
--------  --DROP TABLE #LYOWPaidWithCPFCeil  
--------  DROP TABLE #Deduction
--------
--------  DROP TABLE #DeductionCPF
--------
--------  DROP TABLE #EmployeeWorkFlow
--------
--------  DROP TABLE #EmployeeWorkFlowLevel
--------
--------  DROP TABLE #EmployeeAssignedToPayrollGroup 
--------
--------  DROP TABLE #EmpPayTemp
--------
--------  DROP TABLE #EmpPayTempOLD
--------
--------  DROP TABLE #FundPerc
--------
--------GO
--------Meging 9.0
----CREATE PROC [dbo].[Sp_generatepayrolladvfullmonth] @company_id     INT,  
----                                                  @month          INT,  
----                                                  @year           INT,  
----                                                  @UserID         INT,  
----                                                  @EmpPassID      VARCHAR(200) ='',  
----                                                  @stdatemonth    VARCHAR(2),  
----                                                  @endatemonth    VARCHAR(2),  
----                                                  @stdatesubmonth VARCHAR(2),  
----                                                  @endatesubmonth VARCHAR(2),  
----                                                  @monthidintbl   INT=0  
----AS  
----  DECLARE @CPFCalculate INT  
----  DECLARE @INTendatesubmonth INT  
----  DECLARE @EmployerCPFAmt VARCHAR(200)  
----  DECLARE @EmployeeCPFAmt VARCHAR(200)  
----  DECLARE @cpfamtemployer FLOAT  
----  DECLARE @cpfamtemployee FLOAT  
----  DECLARE @select VARCHAR(8000)  
----  DECLARE @where VARCHAR(200)  
----  DECLARE @compute NVARCHAR(150)  
----  DECLARE @param1 NVARCHAR(150)  
----  DECLARE @param2 NVARCHAR(150)  
----  DECLARE @EmpID INT  
----  DECLARE @startproll VARCHAR(10)  
----  DECLARE @endproll VARCHAR(10)  
----  DECLARE @startsubpay VARCHAR(10)  
----  DECLARE @endsubpay VARCHAR(10)  
----  DECLARE @startdtsub DATETIME  
----  DECLARE @enddtsub DATETIME  
----  DECLARE @startdtproll DATETIME  
----  DECLARE @enddtproll DATETIME  
----  DECLARE @startmonth INT  
----  DECLARE @startyear INT  
----  DECLARE @TotalDaysCountPayroll_5 FLOAT  
----  DECLARE @TotalDaysCountPayroll_5p FLOAT  
----  DECLARE @TotalDaysCountPayroll_6 FLOAT  
----  DECLARE @TotalDaysCountPayroll_7 FLOAT  
----  DECLARE @TotalDaysCount_5 FLOAT  
----  DECLARE @TotalDaysCount_5p FLOAT  
----  DECLARE @TotalDaysCount_6 FLOAT  
----  DECLARE @TotalDaysCount_7 FLOAT  
----  DECLARE @NoWrkgDaysSubPay FLOAT  
----  DECLARE @RollDays FLOAT  
----  DECLARE @roundunpaid INT  
----  DECLARE @roundnetpay INT  
----  DECLARE @roundaddition INT  
----  DECLARE @rounddeduction INT  
----  DECLARE @cpfceiling FLOAT  
----  DECLARE @lastyear INT  
----  DECLARE @AWCeiling FLOAT  
----  DECLARE @dt_date DATETIME  
----  DECLARE @lastdaymonth VARCHAR(2)  
----  DECLARE @ID AS INT  
----  DECLARE @WorkFlowID AS INT  
----  DECLARE @RowID AS INT  
----  Declare @payrolltype as int  
----  
----  SELECT @CPFCalculate = CPFCalculate , @payrolltype=PayType   
----  FROM   payrollmonthlydetail  
----  WHERE  ROWID = @monthidintbl  
----  
----  SET @INTendatesubmonth = CONVERT(INT, @endatesubmonth)  
----  
----  DECLARE @CPFAWCALC TABLE (  
----      Emp_Code    INT,  
----      CMOW        FLOAT,  
----      LYOW        FLOAT,  
----      CYOW        FLOAT,  
----      CPFAWCIL    FLOAT,  
----      EST_AWCIL   FLOAT,  
----      ACTCIL      FLOAT,  
----      AWCM        FLOAT,  
----      AWB4CM      FLOAT,  
----      AWCM_AWB4CM FLOAT,  
----      AWCPF       FLOAT )  
----  
----  CREATE TABLE #EmployeeWorkFlowLevel  
----      (  
----           ID             INT,  
----           WORKFLOWID     INT,  
----           ROWID          INT,  
----           PAYROLLGROUPID INT  
----      )  
----  
----  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID  
----  INTO   #EmployeeWorkFlow  
----  FROM   Employee EM  
----         INNER JOIN (SELECT WL.*  
----                     FROM   EmployeeWorkFlowLevel WL  
----                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID  
----  
----  DECLARE curse CURSOR FOR  
----      SELECT *  
----      FROM   #EmployeeWorkFlow  
----  
----  OPEN curse  
----  
----  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID  
----  
----  WHILE @@FETCH_STATUS = 0  
----      BEGIN  
----          --PRINT @RowID                                               
----          INSERT INTO #EmployeeWorkFlowLevel  
----          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID  
----          FROM   EmployeeWorkFlowLevel  
----          WHERE  WorkFLowID = @WorkFLowID  
----             AND RowID <= @RowID  
----  
----          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID  
----      END  
----  
----  SELECT DISTINCT Te.ID,EG.Emp_ID  
----  INTO   #EmployeeAssignedToPayrollGroup  
----  FROM   #EmployeeWorkFlowLevel Te  
----         INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID  
----  WHERE  EG.Emp_ID = @UserID  
----  
----  CLOSE curse  
----    DEALLOCATE curse  
----  
----  SELECT TOP 1 @lastdaymonth = dateinyear  
----  FROM   (SELECT CONVERT(FLOAT, Datename(dd, DateInYear)) dateinyear  
----          FROM   DateInYear  
----          WHERE  MONTH(DateInYear) = @month  
----             AND Datename(yy, DateInYear) = @year) DY  
----  ORDER  BY dateinyear DESC  
----  
----  SET @AWCeiling = 76500  
----  SET @startproll = @stdatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
----  SET @endproll = @endatemonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
----  SET @startsubpay = @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
----  SET @endsubpay = @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)  
----  SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)  
----  SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)  
----  SET @startdtproll = CONVERT(DATETIME, @startproll, 103)  
----  SET @enddtproll = CONVERT(DATETIME, @endproll, 103)  
----  SET @startmonth = MONTH(@startdtsub)  
----  SET @startyear = YEAR(@startdtsub)  
----  SET @RollDays = (Datediff(dw, @startdtproll, @enddtproll) + 1)  
----  SET @lastyear = @startyear - 1  
----  SET @dt_date = CONVERT(DATETIME, @startsubpay, 103)  
----  SET @param1 = N'@cpfamtemployer float output'  
----  SET @param2 = N'@cpfamtemployee float output'  
----  SET @NoWrkgDaysSubPay = (Datediff(dw, @startdtsub, @enddtsub) + 1)  
----  
----  IF Len(@EmpPassID) > 0  
----      BEGIN  
----          SELECT @where = 'Where Emp_Code Not In (' + @EmpPassID + ')'  
----      END  
----  
----  SELECT @cpfceiling = monthly_cpf_ceil,@roundunpaid = basicrnd,@roundnetpay = netpayrnd,@roundaddition = additionsrnd,@rounddeduction = deductionsrnd  
----  FROM   Company  
----  WHERE  Company_ID = @company_id  
----  
----  -- Dump The Required Employees in one Temp Table                                                                                                                                                
----  SELECT Emp_Code,Emp_Name,Emp_Lname,IC_PP_NUMBER,Sex,Emp_Group_Id,Race_ID,Dept_Id,Date_Of_Birth,Joining_Date,Termination_Date,PR_Date = CASE  
----                                                                                                                                           WHEN Emp_Type = 'SC' THEN CONVERT(DATETIME, '01/01/1910', 103)  
----                                                                                                                                           ELSE PR_Date  
----                                                                                                                                         END,Emp_Type,CPF_Entitlement,OT_Entitlement,Payment_Mode,Pay_Frequency,EmpCPFType,Wdays_per_Week,Hourly_Rate_Mode,Hourly_Rate,Daily_Rate_Mode,Daily_Rate,PayRateCust=CASE  
----                                                                                                                                                                                                                                                               
----                                                 WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Em.Payrate)))  
----                                                                                                                                                                                                                                                               
----                                                 ELSE 0  
----                                                                                                                                                                                                                                                               
----                                               END,Round(CAST(Isnull(Datediff(m, Isnull(date_of_birth, 0), @dt_date), 0) AS FLOAT) / 12, 2) Age,dbo.Fn_getagegroup(Em.Emp_Code, @dt_date) AS Age_Group,FundType = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                      WHEN (Emp_Type = 'SPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                         AND Fund_OptOut = 0  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%CHIN%' THEN 
----'CDAC'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                  AND Fund_OptOut = 0  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%MALAY%' THEN
---- 'MBMF'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                           OR Emp_Type = 'SDPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                         AND Fund_OptOut = 0  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%INDIA%' THEN
---- 'SINDA'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                    WHEN (Emp_Type = 'SPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                  OR Emp_Type = 'SDPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                           OR Emp_Type = 'SC')  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                         AND Fund_OptOut = 0  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                         AND Upper(Ra.Race) LIKE '%EURA%' THEN 
----'ECF'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                    ELSE ''  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                  END,Giro_acct_number,giro_bank,CalculateCPF =
---- CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----   WHEN (CPF_Entitlement = 'Y'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----         AND (Emp_Type = 'SPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----               OR Emp_Type = 'SDPR'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----               OR Emp_Type = 'SC')) THEN 'Y'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----   ELSE 'N'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
---- END,OT1Rate,Ot2Rate,OT1Rate OT1SysRate,OT2Rate OT2SysRate,Isnull(Pay_supervisor, 0) Pay_supervisor,sdf_required,time_card_no,Fund_Optout  
----  INTO   #EmployeeTemp  
----  FROM   Employee Em  
----         INNER JOIN Race Ra ON Em.Race_ID = Ra.ID  
----  WHERE  (Em.Payrate IS NOT NULL)  And PayrollType=@payrolltype  
----     AND (Em.Joining_Date <= @enddtsub)  
----     AND (Em.Termination_Date IS NULL  
----           OR (Em.termination_date >= @startdtsub))  
----     AND (Em.Company_id = @company_id)  
----     AND (Em.StatusID = 1  
----           OR (Em.StatusID = 2  
----               AND @enddtsub <= Em.termination_date)  
----           OR (Em.StatusID = 2  
----               AND Em.termination_date >= @startdtsub  
----               AND Em.termination_date <= @enddtsub));
----
----WITH EPHOLD AS 
----(
----	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate) AS 'RowNo', 
----	ID, Emp_ID, PayRate
----	FROM EmployeePayHistory  Where FromDate >@enddtsub
----)
----Select	Emp_ID,
----		PayRateCust=CASE
----		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
----		ELSE 0
----		END
----Into #EmpPayTempOLD From EPHOLD Where RowNo = 1 And PayRate is not null
----
----UPDATE E
----SET    PayRateCust = ET.PayRateCust
----FROM   #EmployeeTemp E
----INNER JOIN #EmpPayTempOLD ET ON E.Emp_Code = ET.Emp_ID;
----  
----
----WITH EPH AS 
----(
----	SELECT ROW_NUMBER() OVER (PARTITION BY Emp_ID ORDER BY CreatedDate+FromDate Desc) AS 'RowNo', 
----	ID, Emp_ID, PayRate
----	FROM EmployeePayHistory  Where FromDate <=@enddtsub
----)
----Select	Emp_ID,
----		PayRateCust=CASE
----		WHEN Len(CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), payrate))) > 0 THEN CONVERT(DECIMAL(9, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), Payrate)))
----		ELSE 0
----		END
----Into #EmpPayTemp From EPH Where RowNo = 1 And PayRate is not null
----
----
----UPDATE E
----SET    PayRateCust = ET.PayRateCust
----FROM   #EmployeeTemp E
----INNER JOIN #EmpPayTemp ET ON E.Emp_Code = ET.Emp_ID
----
----  SELECT @select = 'Delete From #EmployeeTemp ' + @where  
----  
----  EXEC (@select)  
----  
----  --SELECT   @select = 'Delete From #EmployeeTemp Where Emp_Code IN (SELECT  pd.Emp_ID                  
----  --FROM    prepare_payroll_hdr ph INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID WHERE   pd.[Status] != ''R'' AND MONTH(ph.start_period) = '+ Convert(Varchar,@startmonth) + ' AND YEAR(ph.start_period) = ' + Convert(Varchar,@startyear) + ')
----  
----  --EXEC (@select)                                 
----  --Exclusive for Full MONTH START                                                        
----  --  Delete From #EmployeeTemp Where Emp_Code IN                                       
----  --    (                                      
----  --    SELECT  pd.Emp_ID  FROM    prepare_payroll_hdr ph INNER JOIN prepare_payroll_detail pd ON ph.Trx_ID = pd.Trx_ID                                       
----  --  WHERE   pd.[Status] != 'R'                                       
----  --      --AND MONTH(ph.start_period) = Convert(Varchar,@startmonth)                               
----  --      AND (ph.start_period >= @startdtsub And ph.end_period <= @enddtsub)                                  
----  --      AND YEAR(ph.start_period) = Convert(Varchar,@startyear))                                      
----  --Exclusive for Full MONTH END                                
----  DELETE FROM #EmployeeTemp  
----  WHERE  Pay_supervisor NOT IN (SELECT ID  
----                                FROM   #EmployeeAssignedToPayrollGroup)  
----     AND (Pay_supervisor > 0)  
----  
----  --Delete From #EmployeeTemp                                                                      
----  --Where Emp_Code Not In                                        
----  --(                                                                      
----  -- Select Emp_Code From                                                                    
----  -- (                                                                    
----  --  Select EM.Emp_Code,WL.WorkFlowID From EmployeeWorkFlowLevel WL                                                                    
----  --  Inner Join Employee EM On WL.ID = EM.Pay_supervisor                                                                 
----  --  Where WL.FlowType=1 And (EM.Pay_supervisor is not null or EM.Pay_supervisor > 0 )                                                                 
----  -- ) Re Inner Join #WLTemp WL On Re.WorkFlowID=WL.WorkFlowID                                                                    
----  --) And (Pay_supervisor is not null or Pay_supervisor > 0)                                                                      
----  --Start Here on 7th Jan 2010...1757                                    
----  --Calculate Total No of Public Holidays in Payroll Period                                                                                   
----  DECLARE @PUBLICHOLIDAYSMONTH FLOAT  
----  DECLARE @PUBLICHOLIDAYSBYMONTH FLOAT  
----  
----  SELECT @PUBLICHOLIDAYSMONTH = COUNT(Holiday_Date)  
----  FROM   Public_Holidays PH  
----  WHERE  (PH.Holiday_Date >= @startdtproll  
----          AND PH.Holiday_Date <= @enddtproll)  
----     AND (Datepart(weekday, Holiday_Date) != 1  
----          AND Datepart(weekday, Holiday_Date) != 7)  
----	 And (CompanyID=@company_id Or CompanyID=-1)
----  
----  SELECT @PUBLICHOLIDAYSBYMONTH = COUNT(Holiday_Date)  
----  FROM   Public_Holidays PH  
----  WHERE  (PH.Holiday_Date >= @startdtsub  
----          AND PH.Holiday_Date <= @enddtsub)  
----     AND (Datepart(weekday, Holiday_Date) != 1  
----          AND Datepart(weekday, Holiday_Date) != 7)  
----	 And (CompanyID=@company_id Or CompanyID=-1)
----  
----  --CONSIDER 0 to PH in PAYROLL @PUBLICHOLIDAYSMONTH and @PUBLICHOLIDAYSBYMONTH                    
----  SET @PUBLICHOLIDAYSMONTH = 0  
----  SET @PUBLICHOLIDAYSBYMONTH = 0  
----  
----  --Calculate Total No of Working Days in Payroll Period                                                                                   
----  SELECT @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSMONTH,@TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSMONTH  
----  FROM   (SELECT TotalDaysCount_5 = CASE  
----                                      WHEN (R.DaysPattern_5 = 5  
----                                            AND (R.[WeekDay] = 1  
----                                                  OR R.[WeekDay] = 7)) THEN 0  
----                                      ELSE R.CntDay  
----                                    END,TotalDaysCount_5p = CASE  
----                                                              WHEN (R.DaysPattern_5p = 5.5  
----                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)  
----                                                              WHEN (R.DaysPattern_5p = 5.5  
----                                                                    AND (R.[WeekDay] = 1)) THEN 0  
----                                                              ELSE R.CntDay  
----                                                            END,TotalDaysCount_6 = CASE  
----                                                                                     WHEN (R.DaysPattern_6 = 6  
----                                                         AND (R.[WeekDay] = 1)) THEN 0  
----                                                                                     ELSE R.CntDay  
----                                                                                   END,TotalDaysCount_7 = CASE  
----                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay  
----                                                                                                          END  
----          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7  
----                  FROM   DateInYear Dt  
----                  WHERE  (Dt.DateInYear >= @startdtproll  
----                      AND Dt.DateInYear <= @enddtproll)  
----                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res  
----  
----  --Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens                                                             
----  SELECT @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_6 = SUM(Res.TotalDaysCount_6) - @PUBLICHOLIDAYSBYMONTH,@TotalDaysCount_7 = SUM(Res.TotalDaysCount_7) - @PUBLICHOLIDAYSBYMONTH  
----  FROM   (SELECT TotalDaysCount_5 = CASE  
----                                      WHEN (R.DaysPattern_5 = 5  
----                                            AND (R.[WeekDay] = 1  
----                                                  OR R.[WeekDay] = 7)) THEN 0  
----                                      ELSE R.CntDay  
----                                    END,TotalDaysCount_5p = CASE  
----                                                              WHEN (R.DaysPattern_5p = 5.5  
----                                                                    AND (R.[WeekDay] = 7)) THEN (R.CntDay / 2)  
----                                                              WHEN (R.DaysPattern_5p = 5.5  
----                                                                    AND (R.[WeekDay] = 1)) THEN 0  
----                                                              ELSE R.CntDay  
----                                                            END,TotalDaysCount_6 = CASE  
----                                                                                     WHEN (R.DaysPattern_6 = 6  
----                                                                                           AND (R.[WeekDay] = 1)) THEN 0  
----                                                                                     ELSE R.CntDay  
----                                                                                   END,TotalDaysCount_7 = CASE  
----                                                                                                            WHEN (R.DaysPattern_7 = 7) THEN R.CntDay  
----                                                                                                          END  
----          FROM   (SELECT CONVERT(FLOAT, COUNT(Datename(dw, DateInYear))) CntDay,Datename(dw, DateInYear) [Day],Datepart(weekday, DateInYear) [WeekDay],5 DaysPattern_5,5.5 DaysPattern_5p,6 DaysPattern_6,7 DaysPattern_7  
----                  FROM   DateInYear Dt  
----                  WHERE  (Dt.DateInYear >= @startdtsub  
----                      AND Dt.DateInYear <= @enddtsub)  
----                  GROUP  BY Datename(dw, DateInYear),Datepart(weekday, DateInYear)) R) Res  
----  
----  --Calculate Total No of Working Days in Payroll Period                                                              
----  --       SELECT   @TotalDaysCountPayroll_5 = SUM(Res.TotalDaysCount_5),                                                
----  --                @TotalDaysCountPayroll_5p = SUM(Res.TotalDaysCount_5p),                                                
----  --      @TotalDaysCountPayroll_6 = SUM(Res.TotalDaysCount_6),                                                
----  --                @TotalDaysCountPayroll_7 = SUM(Res.TotalDaysCount_7)                                                
----  --       FROM     (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND                                                
----  --                                                      (R.[WeekDay] = 1 OR                                                
----  --                                                       R.[WeekDay] = 7                                                
----  --                 )                                                
----  --                                            ) THEN 0                                                
----  --                                                ELSE R.CntDay                                                
----  --                                           END ,                                                
----  --                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND                                                
----  --                                                       (R.[WeekDay] = 7)                                                
----  --                                  ) THEN (R.CntDay / 2)                                                
----  --                                           WHEN (R.DaysPattern_5p = 5.5 AND                                                
----  --                                                       (R.[WeekDay] = 1)                                                
----  --               ) THEN 0                                 
----  --                          ELSE R.CntDay                                                
----  --                                            END ,                                                
----  --                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND                                                
----  --                                                      (R.[WeekDay] = 1)                                                
----  --                                                     ) THEN 0                                                
----  --            ELSE R.CntDay                                                
----  --                                           END ,                                                
----  --                        TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay                                                
----  --                                           END                                                
----  --                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],                                                
----  --                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,                                                
----  --          6 DaysPattern_6, 7 DaysPattern_7                                                
----  --                         FROM   DateInYear Dt                                                
----  --                         WHERE  (Dt.DateInYear >= @startdtproll AND                                                
----  --                                 Dt.DateInYear <= @enddtproll                                                
----  --                                )                                                
----  --                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)                                                
----  --                        ) R                                                
----  --                ) Res                 
----  --                                                                                                    
----  --                                                                                                                                
----  ----Calculate Total No of Working Days in Payroll Sub Period. i.e when partly pay happens           
----  --       SELECT   @TotalDaysCount_5 = SUM(Res.TotalDaysCount_5), @TotalDaysCount_5p = SUM(Res.TotalDaysCount_5p),                                                
----  --                @TotalDaysCount_6 = SUM(Res.TotalDaysCount_6), @TotalDaysCount_7 = SUM(Res.TotalDaysCount_7)                                                
----  --       FROM (SELECT TotalDaysCount_5 = CASE WHEN (R.DaysPattern_5 = 5 AND                                                
----  --                                                      (R.[WeekDay] = 1 OR                                                
----  --                                                       R.[WeekDay] = 7                                                
----  --               )                                                
----  --                                                     ) THEN 0                                                
----  --                                                ELSE R.CntDay                                                
----  --                                           END ,                                    
----  --                        TotalDaysCount_5p = CASE WHEN (R.DaysPattern_5p = 5.5 AND                                                
----  --                                                       (R.[WeekDay] = 7)                                                
----  --                                       ) THEN (R.CntDay / 2)                                                
----  --                                                 WHEN (R.DaysPattern_5p = 5.5 AND                                                
----  --                                                       (R.[WeekDay] = 1)                                                
----  --                                                      ) THEN 0                        
----  --                                                 ELSE R.CntDay                                                
----  --       END ,                                                
----  --                        TotalDaysCount_6 = CASE WHEN (R.DaysPattern_6 = 6 AND                                                
----  --                                                      (R.[WeekDay] = 1)                                                
----  --                                                     ) THEN 0                                                
----  --                                                ELSE R.CntDay                                                
----  --                                           END ,                                                
----  --       TotalDaysCount_7 = CASE WHEN (R.DaysPattern_7 = 7) THEN R.CntDay                                                
----  --                                           END                                               
----  --                 FROM   (SELECT CONVERT(FLOAT, COUNT(DATENAME(dw, DateInYear))) CntDay, DATENAME(dw, DateInYear) [Day],                                                
----  --                                DATEPART(weekday, DateInYear) [WeekDay], 5 DaysPattern_5, 5.5 DaysPattern_5p,                                                
----  --                                6 DaysPattern_6, 7 DaysPattern_7                                                
----  --                   FROM   DateInYear Dt                                                
----  --            WHERE  (Dt.DateInYear >= @startdtsub AND                                     
----  --                                 Dt.DateInYear <= @enddtsub                                                
----  --                                )                                                
----  --                         GROUP BY DATENAME(dw, DateInYear), DATEPART(weekday, DateInYear)                                                
----  --                        ) R                                                
----  --                ) Res                                              
----  --End Here on 7th Jan 2010...1757                                                                          
----  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is a PR and works during PR Period.                                                                                                                                           
----    
----  SELECT E.Emp_Code,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NULL AND E.PR_Date >= @startdtsub AND E.PR_Date <= @enddtsub AND E.Joining_Date >= @startdtsub AND E.Joining_Date <= @enddtsub AND E.Joining_Date >= E.PR_Date AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR  
----                     (E.PR_Date IS NOT  
----                     NULL AND  
----                     E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date > @startdtsub AND E.PR_Date >= E.Joining_Date AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date < @startdtsub AND E.PR_Date < @startdtsub AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (E.PR_Date IS NOT NULL AND E.Termination_Date IS NOT NULL AND E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub AND E.Joining_Date <= @startdtsub AND E.PR_Date >= @startdtsub AND Dt.DateInYear >= E.PR_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) ))) ActPRSatDaySpan,  
----                (SELECT COUNT(Datepart(weekday, DateInYear))  
----                 FROM   DateInYear Dt  
----                 WHERE  (E.PR_Date IS NOT NULL  
----                     AND E.Termination_Date IS NULL  
----                     AND E.PR_Date >= @startdtsub  
----                     AND E.PR_Date <= @enddtsub  
----                     AND E.Joining_Date < @startdtsub  
----                     AND Dt.DateInYear >= E.PR_Date  
----                     AND Dt.DateInYear <= @enddtsub  
----                     AND (Datepart(weekday, DateInYear) = 1))  
----                     OR (E.PR_Date IS NOT NULL  
----                         AND E.Termination_Date IS NULL  
----                         AND E.PR_Date >= @startdtsub  
----                         AND E.PR_Date <= @enddtsub  
----                         AND E.Joining_Date >= @startdtsub  
----                         AND E.Joining_Date <= @enddtsub  
----                         AND E.PR_Date >= E.Joining_Date  
----                         AND Dt.DateInYear >= E.PR_Date  
----                         AND Dt.DateInYear <= @enddtsub  
----                         AND (Datepart(weekday, DateInYear) = 1))  
----                     OR (E.PR_Date IS NOT NULL  
----                         AND E.Termination_Date IS NULL  
----                         AND E.PR_Date >= @startdtsub  
----                         AND E.PR_Date <= @enddtsub  
----                         AND E.Joining_Date >= @startdtsub  
----                         AND E.Joining_Date <= @enddtsub  
----                         AND E.Joining_Date >= E.PR_Date  
----                         AND Dt.DateInYear >= E.Joining_Date  
----                         AND Dt.DateInYear <= @enddtsub  
----                         AND (Datepart(weekday, DateInYear) = 1))  
----                     OR (E.PR_Date IS NOT NULL  
----                         AND E.Termination_Date IS NOT NULL  
----                         AND E.Termination_Date >= @startdtsub  
----                         AND E.Termination_Date <= @enddtsub  
----                         AND E.Joining_Date > @startdtsub  
----                         AND E.PR_Date >= E.Joining_Date  
----                         AND Dt.DateInYear >= E.PR_Date  
----                         AND Dt.DateInYear <= E.Termination_Date  
----                         AND (Datepart(weekday, DateInYear) = 1))  
----                     OR (E.PR_Date IS NOT NULL  
----                         AND E.Termination_Date IS NOT NULL  
----                         AND E.Termination_Date >= @startdtsub  
----                         AND E.Termination_Date <= @enddtsub  
----                         AND E.Joining_Date < @startdtsub  
----                         AND E.PR_Date < @startdtsub  
----                         AND Dt.DateInYear >= @startdtsub  
----                         AND Dt.DateInYear <= E.Termination_Date  
----                         AND (Datepart(weekday, DateInYear) = 1))  
----                     OR (E.PR_Date IS NOT NULL  
----                         AND E.Termination_Date IS NOT NULL  
----                         AND E.Termination_Date >= @startdtsub  
----                         AND E.Termination_Date <= @enddtsub  
----                         AND E.Joining_Date <= @startdtsub  
----                         AND E.PR_Date >= @startdtsub  
----                         AND Dt.DateInYear >= E.PR_Date  
----                         AND Dt.DateInYear <= E.Termination_Date  
----                         AND (Datepart(weekday, DateInYear) = 1))) ActPRSunDaySpan  
----  INTO   #PRSatSunDaysTemp  
----  FROM   #EmployeeTemp E  
----  
----  --Calculate the No of Actual Working Days with Sat and Sunday when a employee is not PR and works during PR Period.                                                                                                                        
----  SELECT Emp_Code,(SELECT COUNT(Datepart(weekday, DateInYear))  
----                   FROM   DateInYear Dt  
----                   WHERE  (((E.Termination_Date >= @startdtsub  
----                             AND E.Termination_Date <= @enddtsub)  
----                            AND E.Joining_Date >= @startdtsub)  
----                       AND Dt.DateInYear >= E.Joining_Date  
----                       AND Dt.DateInYear <= E.Termination_Date  
----                       AND (Datepart(weekday, DateInYear) = 1))  
----                       OR (((E.Termination_Date >= @startdtsub  
----                             AND E.Termination_Date <= @enddtsub)  
----                            AND E.Joining_Date < @startdtsub)  
----                           AND Dt.DateInYear >= @startdtsub  
----                           AND Dt.DateInYear <= E.Termination_Date  
----                           AND (Datepart(weekday, DateInYear) = 1))  
----                       OR ((E.Termination_Date IS NULL  
----                            AND (E.Joining_Date > @startdtsub  
----                                 AND E.Joining_Date <= @enddtsub))  
----                           AND Dt.DateInYear >= E.Joining_Date  
----                           AND Dt.DateInYear <= @enddtsub  
----                           AND (Datepart(weekday, DateInYear) = 1))  
----                       OR ((E.Termination_Date IS NULL  
----                            AND (E.Joining_Date < @startdtsub))  
----                           AND Dt.DateInYear >= @startdtsub  
----                           AND Dt.DateInYear <= @enddtsub  
----                           AND (Datepart(weekday, DateInYear) = 1))  
----                       OR ((E.Termination_Date > @enddtsub  
----                            AND E.Joining_Date < @startdtsub)  
----                           AND Dt.DateInYear >= @startdtsub  
----                           AND Dt.DateInYear <= @enddtsub  
----                           AND (Datepart(weekday, DateInYear) = 1))) ActSunDaySpan,(CONVERT(FLOAT, (SELECT COUNT(Datepart(weekday, DateInYear)) FROM DateInYear Dt WHERE (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date >= @startdtsub ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR (((E.Termination_Date >= @startdtsub AND E.Termination_Date <= @enddtsub ) AND E.Joining_Date < @startdtsub ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= E.Termination_Date AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date > @startdtsub AND E.Joining_Date <= @enddtsub ) ) AND Dt.DateInYear >= E.Joining_Date AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) OR ((E.Termination_Date IS NULL AND (E.Joining_Date < @startdtsub) ) AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday,  
----                                                                                    DateInYear) = 7) ) OR ((E.Termination_Date > @enddtsub AND E.Joining_Date < @startdtsub )  
----                                                                                    AND Dt.DateInYear >= @startdtsub AND Dt.DateInYear <= @enddtsub AND (Datepart(weekday, DateInYear) = 7) ) ))) ActSatDaySpan  
----  INTO   #SatSunDaysTemp  
----  FROM   #EmployeeTemp E  
----  
----  -- Calculate Unpaid FullDay for the Employees who took leaves during the PR Period                                                                                                                
----  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) UnpaidFullDayPR  
----  INTO   #UnpaidFullDayPR  
----  FROM   Emp_Leaves el  
----         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
----         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code  
----  WHERE  (Eld.Leave_Date >= @startdtsub  
----          AND Eld.Leave_Date <= @enddtsub)  
----     AND (Eld.unpaid_leave = 1  
----          AND eld.halfday_leave = 0)  
----     AND El.Status = 'Approved'  
----     AND ((E.PR_Date IS NOT NULL  
----           AND E.Termination_Date IS NULL  
----           AND E.PR_Date >= @startdtsub  
----           AND E.PR_Date <= @enddtsub  
----           AND E.Joining_Date < @startdtsub  
----           AND Eld.Leave_Date >= E.PR_Date  
----           AND Eld.Leave_Date <= @enddtsub)  
----           OR (E.PR_Date IS NOT NULL  
----               AND E.Termination_Date IS NULL  
----               AND E.PR_Date >= @startdtsub  
----               AND E.PR_Date <= @enddtsub  
----               AND E.Joining_Date >= @startdtsub  
----               AND E.Joining_Date <= @enddtsub  
----               AND E.PR_Date >= E.Joining_Date  
----               AND Eld.Leave_Date >= E.PR_Date  
----               AND Eld.Leave_Date <= @enddtsub)  
----           OR (E.PR_Date IS NOT NULL  
----               AND E.Termination_Date IS NOT NULL  
----               AND E.Termination_Date >= @startdtsub  
----               AND E.Termination_Date <= @enddtsub  
----               AND E.Joining_Date > @startdtsub  
----               AND E.PR_Date >= E.Joining_Date  
----               AND Eld.Leave_Date >= E.PR_Date  
----               AND Eld.Leave_Date <= E.Termination_Date)  
----           OR (E.PR_Date IS NOT NULL  
----               AND E.Termination_Date IS NOT NULL  
----               AND E.Termination_Date >= @startdtsub  
----               AND E.Termination_Date <= @enddtsub  
----               AND E.Joining_Date < @startdtsub  
----               AND E.PR_Date < @startdtsub  
----               AND Eld.Leave_Date >= @startdtsub  
----               AND Eld.Leave_Date <= E.Termination_Date))  
----  GROUP  BY El.Emp_Id  
----  
----  -- Calculate Unpaid Half Day for the Employees who took leaves during the PR Period                                                            
----  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 UnpaidHalfDayPR  
----  INTO   #UnpaidHalfDayPR  
----  FROM   Emp_Leaves el  
----         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
----         INNER JOIN Employee E ON El.Emp_Id = E.Emp_Code  
----  WHERE  (Eld.Leave_Date >= @startdtsub  
----          AND Eld.Leave_Date <= @enddtsub)  
----     AND (Eld.unpaid_leave = 1  
----          AND eld.halfday_leave = 1)  
----     AND El.Status = 'Approved'  
----     AND ((E.PR_Date IS NOT NULL  
----           AND E.Termination_Date IS NULL  
----  AND E.PR_Date >= @startdtsub  
----           AND E.PR_Date <= @enddtsub  
----           AND E.Joining_Date < @startdtsub  
----           AND Eld.Leave_Date >= E.PR_Date  
----           AND Eld.Leave_Date <= @enddtsub)  
----           OR (E.PR_Date IS NOT NULL  
----               AND E.Termination_Date IS NULL  
----               AND E.PR_Date >= @startdtsub  
----               AND E.PR_Date <= @enddtsub  
----               AND E.Joining_Date >= @startdtsub  
----               AND E.Joining_Date <= @enddtsub  
----               AND E.PR_Date >= E.Joining_Date  
----               AND Eld.Leave_Date >= E.PR_Date  
----               AND Eld.Leave_Date <= @enddtsub)  
----           OR (E.PR_Date IS NOT NULL  
----               AND E.Termination_Date IS NOT NULL  
----               AND E.Termination_Date >= @startdtsub  
----               AND E.Termination_Date <= @enddtsub  
----               AND E.Joining_Date > @startdtsub  
----               AND E.PR_Date >= E.Joining_Date  
----               AND Eld.Leave_Date >= E.PR_Date  
----               AND Eld.Leave_Date <= E.Termination_Date)  
----           OR (E.PR_Date IS NOT NULL  
----               AND E.Termination_Date IS NOT NULL  
----               AND E.Termination_Date >= @startdtsub  
----               AND E.Termination_Date <= @enddtsub  
----               AND E.Joining_Date < @startdtsub  
----               AND E.PR_Date < @startdtsub  
----               AND Eld.Leave_Date >= @startdtsub  
----               AND Eld.Leave_Date <= E.Termination_Date))  
----  GROUP  BY El.Emp_Id  
----  
----  -- Calculate Paid Half Day for the Employees who took leaves during working days                                                                                                                                                
----  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) / 2 PaidHalfDay  
----  INTO   #PaidHalfDay  
----  FROM   Emp_Leaves el  
----         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
----  WHERE  (Eld.Leave_Date >= @startdtsub  
----          AND Eld.Leave_Date <= @enddtsub)  
----     AND (Eld.unpaid_leave = 0  
----          AND eld.halfday_leave = 1)  
----     AND El.Status = 'Approved'  
----  GROUP  BY El.Emp_Id  
----  
----  -- Calculate Paid Full Day for the Employees who took leaves during working days                                                                                                                                                
----  SELECT El.Emp_Id,COUNT(Eld.unpaid_leave) PaidFullDay  
----  INTO   #PaidFullDay  
----  FROM   Emp_Leaves el  
----         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
----  WHERE  (Eld.Leave_Date >= @startdtsub  
----          AND Eld.Leave_Date <= @enddtsub)  
----     AND (Eld.unpaid_leave = 0  
----          AND eld.halfday_leave = 0)  
----     AND El.Status = 'Approved'  
----  GROUP  BY El.Emp_Id  
----  
----  -- Calculate UnPaid Half Day for the Employees who took leaves during working days                                                                                                                                                
----  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) / 2 UnpaidHalfDay  
----  INTO   #UnpaidHalfDay  
----  FROM   Emp_Leaves el  
----         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
----  WHERE  (Eld.Leave_Date >= @startdtsub  
----          AND Eld.Leave_Date <= @enddtsub)  
----     AND (Eld.unpaid_leave = 1  
----          AND eld.halfday_leave = 1)  
----     AND El.Status = 'Approved'  
----  GROUP  BY El.Emp_Id  
----  
----  -- Calculate UnPaid Full Day for the Employees who took leaves during working days                                                                                                                                                
----  SELECT El.Emp_Id,SUM(Eld.unpaid_leave) UnpaidFullDay  
----  INTO   #UnpaidFullDay  
----  FROM   Emp_Leaves el  
----         INNER JOIN emp_Leaves_Detail Eld ON el.trx_id = eld.trx_id  
----  WHERE  (Eld.Leave_Date >= @startdtsub  
----          AND Eld.Leave_Date <= @enddtsub)  
----     AND (Eld.unpaid_leave = 1  
----          AND eld.halfday_leave = 0)  
----     AND El.Status = 'Approved'  
----  GROUP  BY El.Emp_Id  
----  
----  --Calc Deduction Amounts For Employees                                                                                      
----  SELECT Emp_Code,SUM(trx_amount) DedAmt  
----  INTO   #Deduction  
----  FROM   Emp_Deductions ED  
----         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
----  WHERE  (--MONTH(trx_period) = @startmonth AND                                                    
----         (trx_period >= @startdtsub  
----          AND trx_period <= @enddtsub)  
----         AND YEAR(trx_period) = @startyear)  
----		And ((ED.FundType is NULL OR ED.FundType = 0) Or (ED.FundType >=5 And ED.FundType <=8)) --Added on Dec 6 for Auto And Manual Funds- Start  
----  GROUP  BY Emp_Code  
----  
----  --Calc Deduction Amounts Applicable CPF on Deduction For Employees                                                            
----  SELECT ED.Emp_Code,SUM(ED.trx_amount) DedCPFAmt  
----  INTO   #DeductionCPF  
----  FROM   Emp_Deductions ED  
----         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
----  WHERE  (--MONTH(ED.trx_period) = @startmonth AND                                                
----         (trx_period >= @startdtsub  
----          AND trx_period <= @enddtsub)  
----         AND YEAR(ED.trx_period) = @startyear)  
----         AND DT.CPF = 'Yes'  
----  GROUP  BY Emp_Code  
----  
----  --Calc Add for Wages  when CPF Yes                                                                                         
----  SELECT Emp_Code,SUM(trx_amount) Add4AW  
----  INTO   #Add4AW  
----  FROM   emp_additions EA  
----         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
----  WHERE  --Status='L' And                                                  
----  (--MONTH(trx_period) = @startmonth AND                                                  
----  (trx_period >= @startdtsub  
----   AND trx_period <= @enddtsub)  
----  AND YEAR(trx_period) = @startyear)  
----  AND AT.CPF = 'Yes'  
----  AND AT.Type_Of_Wage = 'A'  
----  AND (EA.ClaimStatus = 'Approved'  
----        OR EA.ClaimStatus IS NULL)  
----  GROUP  BY Emp_Code  
----  
----  --Calc Add for Wages  when CPF NO                                                                                         
----  SELECT Emp_Code,SUM(trx_amount) Add4AWNOCPF  
----  INTO   #Add4AWNOCPF  
----  FROM   emp_additions EA  
----         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
----  WHERE  --Status='L' And                                                  
----  (--MONTH(trx_period) = @startmonth AND                                                  
----  (trx_period >= @startdtsub  
----   AND trx_period <= @enddtsub)  
----  AND YEAR(trx_period) = @startyear)  
----  AND AT.CPF = 'No'  
----  AND AT.Type_Of_Wage = 'A'  
----  AND (EA.ClaimStatus = 'Approved'  
----        OR EA.ClaimStatus IS NULL)  
----  GROUP  BY Emp_Code  
----  
----  --Calc Add For Ordinary Wages                                                                                                                                                
----  SELECT Emp_Code,SUM(trx_amount) Add4OW  
----  INTO   #Add4OW  
----  FROM   emp_additions EA  
----         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
----  WHERE  --Status='L' And                                                                                                                            
----  (--MONTH(trx_period) = @startmonth AND                        
----  (trx_period >= @startdtsub  
----   AND trx_period <= @enddtsub)  
----  AND YEAR(trx_period) = @startyear)  
----  AND AT.CPF = 'Yes'  
----  AND (AT.Type_Of_Wage = 'O'  
----        OR AT.Type_Of_Wage IS NULL)  
----  AND (EA.ClaimStatus = 'Approved'  
----        OR EA.ClaimStatus IS NULL)  
----  GROUP  BY Emp_Code  
----  
----  --Calc Add For Normal Wages                                                                              
----  SELECT Emp_Code,SUM(trx_amount) Add4NW  
----  INTO   #Add4NW  
----  FROM   emp_additions EA  
----         INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID  
----  WHERE  --Status='L' And                                                                                                                      
----  (--MONTH(trx_period) = @startmonth AND                                                    
----  (trx_period >= @startdtsub  
----   AND trx_period <= @enddtsub)  
----  AND YEAR(trx_period) = @startyear)  
----  AND AT.CPF = 'No'  
----  AND (AT.Type_Of_Wage = 'O'  
----        OR AT.Type_Of_Wage IS NULL)  
----  AND (EA.ClaimStatus = 'Approved'  
----        OR EA.ClaimStatus IS NULL)  
----  GROUP  BY Emp_Code  
----  
----  --Calc Employee Overtime                                                                                                     
----  SELECT Emp_Code,dbo.Converttohours(SUM(dbo.Converttominutes(overtime1))) overtime1,dbo.Converttohours(SUM(dbo.Converttominutes(overtime2))) overtime2,SUM(Days_Work) Days_Work,dbo.Converttohours(SUM(dbo.Converttominutes(NH_Work))) NH_Work  
----  INTO   #EOT  
----  FROM   emp_overtime  
----  WHERE  ((--Trx_Month = @monthidintbl AND                                                
----          (payrollstdate >= @startdtsub  
----           AND payrollstdate <= @enddtsub)  
----          AND Trx_Year = @startyear)  
----           OR Trx_Month IS NULL)  
----  GROUP  BY Emp_Code  
----  
----  --Select @TotalDaysCount_5,@TotalDaysCount_5p,@TotalDaysCount_6,@TotalDaysCount_7                                                                                                        
----  SELECT *,([Basic] - TotalUnPaid) ActualBasic,CPFOrdinary = CASE  
----                                                               WHEN (CPF = 'Y'  
----                                                                     AND Emp_Type = 'SPR'  
----                                                                      OR Emp_Type = 'SDPR'  
----                                                                      OR Emp_Type = 'SC')  
----                                                                    AND [BasicPR] <= 0 THEN (([Basic] - TotalUnPaid) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)  
----                                                               ELSE (([BasicPR] - UnpaidDeductPR) + DaysWorkedRate + OT1 + OT2 + Add4OW) - (DedCPFAmt)  
----                                                             END,GrossWithOutAddition = CASE  
----                                                                                          WHEN (CPF = 'Y'  
----                                                                                                AND Emp_Type = 'SPR'  
----                                                                                                 OR Emp_Type = 'SDPR'  
----                                                                                                 OR Emp_Type = 'SC')  
----                                                                                               AND [BasicPR] <= 0  
----                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)  
----                                                                                          WHEN (CPF = 'Y'  
----                                                                                                AND Emp_Type = 'SPR'  
----                                                                                                 OR Emp_Type = 'SDPR'  
----                                                                                                 OR Emp_Type = 'SC')  
----                                                                                               AND [BasicPR] <= 0  
----                                                                                               AND @roundnetpay = -1 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)  
----                                                                                          WHEN ([BasicPR] > 0  
----                                                                                                AND @roundnetpay = -1) THEN Isnull(CAST((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)  
----                                                                                          WHEN ([BasicPR] > 0  
----                                                                                                AND @roundnetpay >= 0) THEN Isnull(CAST(Round((([BasicPR] - UnpaidDeductPR) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)  
----                                                                                          WHEN (Emp_Type = 'WP'  
----                                                                                                 OR Emp_Type = 'DP'  
----                                                                                                 OR Emp_Type = 'EP'  
----                                                                                                 OR Emp_Type = 'SP')  
----                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate), @roundnetpay) AS DECIMAL(9, 2)), 0)  
----                                                                                          WHEN (Emp_Type = 'WP'  
----                                                                                                 OR Emp_Type = 'DP'  
----                                                                                                 OR Emp_Type = 'EP'  
----                                                                                                 OR Emp_Type = 'SP')  
----                                                                                               AND @roundnetpay >= 0 THEN Isnull(CAST((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate) AS DECIMAL(9, 2)), 0)  
----                                                                                        END  
----  INTO   #PriorGenPayroll  
----  FROM   (SELECT *,[BasicPR] = CASE  
----                                 WHEN (PR_Date >= @startdtsub)  
----                                      AND (Emp_Type = 'SPR'  
----                                            OR Emp_Type = 'SDPR'  
----                                            OR Emp_Type = 'SC') THEN Round(CONVERT(DECIMAL(8, 2), (ActPRWrkgDaysSpan * BasicDayRateWORound)), 2)  
----                                 ELSE -1  
----                               --Else Round(convert(decimal(8,2),(ActWrkgDaysSpan*BasicDayRateWORound)),2)                                                                                                                   
----                               END,[Basic] = CASE  
----                                               WHEN PayType = 'D'  
----                                                    AND CONVERT(DECIMAL(8, 2), PayRateCust) <= 0 THEN 0  
----                                               WHEN ActPRWrkgDaysSpan > 0 THEN Round(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)  
----                                               ELSE Round(CONVERT(DECIMAL(8, 2), (ActWrkgDaysSpan * BasicDayRateWORound)), 2)  
----                                             END  
----          FROM   (SELECT E.Emp_Code,E.FullName,E.Emp_Type,E.DeptName,E.GroupName,E.EmployeeGiro,E.EmployerGiro,E.GiroBank,E.PRAge,E.WorkingDaysInWeek,E.OT,E.CPF,E.CPFType,E.PayType,E.Daily_rate_mode,E.Daily_Rate,E.Pay_Mode,E.Hourly_rate,E.Join_Date Join_Date,E.Term_Date Term_Date,E.Pr_date Pr_date,E.RollDays,E.WrkgDaysInRoll,E.BasicPayInRoll,E.SubPayDays,E.WrkgDaysInSubPay,E.BasicDayRate,E.BasicDayRateWORound,(E.BasicDayRate * E.ActWrkgDaysSpan) BasicNorSubPay,E.UnpaidFullDay,E.UnpaidHalfDay,E.PaidFullDay,E.PaidHalfDay,E.UnPaidDeduct,E.UnpaidFullDayPR,E.UnpaidHalfDayPR,E.UnPaidDeductPR,(E.UnPaidDeduct + E.UnPaidDeductPR) TotalUnPaid,E.Days_Work,E.NH_Work,E.OT1Rate,E.NHHrs,E.OT1Hrs,E.OT1,E.OT2Rate,E.OT2Hrs,E.OT2,E.Add4NW,E.Add4OW,E.NH,E.Add4AW,E.Add4AWNOCPF,E.AdditionalWages,E.DedAmt,E.DedCPFAmt,E.ActSatDaySpan,E.ActSunDaySpan,E.ActWrkgDaysSpan,E.ActPRSatDaySpan,E.ActPRSunDaySpan,ActPRWrkgDaysSpan = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                               WHEN (E.PR_Date IS NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                            OR E.PR_Date > @enddtsub) THEN 0  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                              AND (E.PR_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date >= @enddtsub) THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                              ActPRSatDaySpan + ActPRSunDaySpan)  
----                                                                                                                                                                                                                                WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
----                           AND E.Term_Date < @enddtsub) THEN (Datediff(dw, E.PR_Date, E.Term_Date) + 1)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                             - (  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                             ActPRSatDaySpan + ActPRSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date IS NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                 AND E.PR_Date <= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date <= @enddtsub) THEN E.ActWrkgDaysSpan  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                        AND E.PR_Date < @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date < @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, E.Term_Date) + 1)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                              - (  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                ActPRSatDaySpan + ActPRSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.PR_Date < @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                    AND E.Join_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date <= @enddtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date <= @enddtsub) THEN E.ActWrkgDaysSpan  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                              AND E.Term_Date IS NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                AND E.PR_Date <= @enddtsub)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date <= @startdtsub) THEN  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     ActPRSatDaySpan + ActPRSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date IS NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                  AND E.PR_Date
---- <= @enddtsub)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date <= @enddtsub)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                          AND E.Join_Date < E.PR_Date THEN (Datediff(dw, E.PR_Date, @enddtsub) + 1) - (  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                            ActPRSatDaySpan + ActPRSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     WHEN (E.PR_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Term_Date IS NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND (E.PR_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                   AND E.PR_Date <= @enddtsub)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           AND E.Join_Date <= @enddtsub)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                          AND E.Join_Date >= E.PR_Date THEN (Datediff(dw, E.Join_Date, @enddtsub) + 1) - (  
----                                                                                                                                                                                                                                                               
----                                                                 ActPRSatDaySpan + ActPRSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     ELSE E.ActWrkgDaysSpan  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                   END,E.DaysWorkedRate,E.CalculateCPF,E.PayRateCust  
----                  FROM   (SELECT T.Emp_Code,T.FullName,T.Emp_Type,T.DeptName,T.GroupName,T.EmployeeGiro,T.EmployerGiro,T.GiroBank,T.PRAge,T.WorkingDaysInWeek,T.OT,T.CPF,T.CPFType,T.PayType,T.Daily_rate_mode,T.Daily_Rate,T.Pay_Mode,T.Hourly_rate,T.Join_Date Join_Date,T.Term_Date Term_Date,T.Pr_date Pr_date,T.RollDays,T.WrkgDaysInRoll,T.BasicPayInRoll,T.SubPayDays,T.WrkgDaysInSubPay,T.BasicDayRate,T.BasicDayRate BasicDayRateWORound,T.UnpaidFullDay,T.UnpaidHalfDay,T.PaidFullDay,T.PaidHalfDay,T.UnpaidFullDayPR,T.UnpaidHalfDayPR,T.Days_Work,T.NH_Work,T.OT1Rate,Isnull(T.NHHrs, 0) NHHrs,Isnull(T.OT1Hrs, 0) OT1Hrs,OT1 = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                WHEN @roundaddition = -1 THEN T.OT1  
----                                                                                                                                                                    ELSE Round(T.OT1, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                              END,NH = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                         WHEN @roundaddition = -1 THEN T.NH  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                         ELSE Round(T.NH, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                       END,T.OT2Rate,Isnull(T.OT2Hrs, 0) OT2Hrs,OT2 = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                        WHEN @roundaddition = -1 THEN T.OT2  
----                                                                                                                                                                                                                                                 ELSE Round(T.OT2, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                      END,Add4NW = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                     WHEN @roundaddition = -1 THEN T.Add4NW  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                     ELSE Round(T.Add4NW, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                   END,Add4OW = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                  WHEN @roundaddition = -1 THEN T.Add4OW  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                             ELSE Round(T.Add4OW, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                END,Add4AW = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                               WHEN @roundaddition = -1 THEN T.Add4AW  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                               ELSE Round(T.Add4AW, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                             END,Add4AWNOCPF = CASE  
----                                                                                                                                                                                                                                                               
----                                                                             WHEN @roundaddition = -1 THEN T.Add4AWNOCPF  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                 ELSE Round(T.Add4AWNOCPF, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                               END,AdditionalWages = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                       WHEN @roundaddition = -1 THEN T.AdditionalWages  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                       ELSE Round(T.AdditionalWages, @roundaddition)  
----                                                                                                                                                                                                                                                               
----                          END,DedAmt = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----     WHEN @rounddeduction = -1 THEN T.DedAmt  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----     ELSE Round(T.DedAmt, @rounddeduction)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----   END,DedCPFAmt = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                     WHEN @rounddeduction = -1 THEN T.DedCPFAmt  
----                                                                                                                                                                                                                                                               
----                                                                       ELSE Round(T.DedCPFAmt, @rounddeduction)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                   END,T.ActSatDaySpan,T.ActSunDaySpan,ActWrkgDaysSpan = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                           WHEN (T.Join_Date IS NULL) THEN T.WrkgDaysInSubPay  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                           WHEN (T.Join_Date <= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Term_Date IS NULL) THEN (T.WrkgDaysInSubPay)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                              WHEN (T.Join_Date > @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Term_Date IS NULL) THEN ((@RollDays - DAY(T.Join_Date) - Datediff(dw, @enddtsub, @enddtproll)) + 1) - (ActSatDaySpan + ActSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                           WHEN (T.Join_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Join_Date <= @enddtsub  
----                                                                                                                                                                                                                                                               
----                                                                             AND T.Term_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Term_Date > @enddtsub) THEN (Datediff(dw, T.Join_Date, @enddtsub) + 1) - (ActSatDaySpan + ActSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                           WHEN (T.Join_Date <= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Term_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Term_Date <= @enddtsub) THEN (Datediff(dw, @startdtsub, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                           WHEN (T.Join_Date >= @startdtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Join_Date <= @enddtsub  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Term_Date IS NOT NULL  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                 AND T.Term_Date <= @enddtsub) THEN (Datediff(dw, T.Join_Date, T.Term_Date) + 1) - (ActSatDaySpan + ActSunDaySpan)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                        ELSE T.WrkgDaysInSubPay  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                         END,T.ActPRSatDaySpan,T.ActPRSunDaySpan,UnPaidDeduct = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                  WHEN @roundunpaid = -1 THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate * (T.UnpaidFullDay + T.UnpaidHalfDay))  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                  ELSE Round(CONVERT(DECIMAL(8, 2), (Round(T.BasicDayRate, @roundunpaid) * (T.UnpaidFullDay +  
----                                                                                                                                                                                                                                                               
----                   T.UnpaidHalfDay))),  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                       @roundunpaid)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                END,UnPaidDeductPR = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                       WHEN @roundunpaid = -1 THEN CONVERT(DECIMAL(8, 2), T.BasicDayRate *  
----                                                           (T.UnpaidFullDayPR +  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                   T.UnpaidHalfDayPR))  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                       ELSE Round(CONVERT(DECIMAL(8, 2), (Round(T.BasicDayRate, @roundunpaid) *  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                  (T.UnpaidFullDayPR  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                  +  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                           T.UnpaidHalfDayPR))),  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                            @roundunpaid)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                     END,DaysWorkedRate = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            WHEN T.PayType = 'D'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                   AND T.Daily_rate_mode = 'A'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round((  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            T.BasicDayRate * T.Days_Work),  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                              @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                  WHEN T.PayType = 'D'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND T.Daily_rate_mode = 'A'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND @roundaddition = -1 THEN (  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            T.BasicDayRate * T.Days_Work)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                 WHEN T.PayType = 'D'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND T.Daily_rate_mode = 'M'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round(  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            T.Daily_Rate * T.Days_Work,  
----                                                                                                                                                                                                                                                               
----                                                                      @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            WHEN T.PayType = 'D'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND T.Daily_rate_mode = 'M'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND @roundaddition = -1 THEN (T.Daily_Rate * T.Days_Work)  
----                                                                                                                                                                                                                  WHEN T.PayType = 'H'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND @roundaddition >= 0 THEN Round((  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            (T.Hourly_Rate / 60) *  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            dbo.Converttominutes(  
----                                                                      Isnull(T.NH_Work, 0))),  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                              @roundaddition)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            --ROUND((T.Hourly_Rate * T.NH_Work), @roundaddition)              
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            WHEN T.PayType = 'H'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                 AND @roundaddition = -1 THEN (  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            (T.Hourly_Rate / 60) * dbo.Converttominutes(  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                   Isnull(T.NH_Work, 0))  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                              )  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                            --(T.Hourly_Rate * T.NH_Work)              
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                               ELSE 0  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                          END,T.CalculateCPF,T.PayRateCust  
----                          FROM   (SELECT Em.Emp_Code,(Em.emp_name + ' ' + Em.emp_lname) FullName,Em.Emp_Type,DEPT.DeptName,EG.EmpGroupName GroupName,--Em.Sex, EG.EmpGroupName GroupName, Ic_PP_Number NRICPREPWP,                                             
----                                                    
----                                         Em.giro_acct_number EmployeeGiro,GIRO.bank_accountno EmployerGiro,giro_bank GiroBank,PRAge = CASE  
----                                                                                                                                        WHEN (Em.Emp_Type = 'SC') THEN 3  
----                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
----                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
----                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) > 24) THEN 3  
----                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
----                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
----                                                                                                                                             AND (Datediff(m, Em.pr_date, @startdtsub) <= 12) THEN 1  
----                                                                                                                                        WHEN (Em.Emp_Type = 'SPR'  
----                                                                                                                                               OR Em.Emp_Type = 'SDPR')  
----  AND (Datediff(m, Em.pr_date, @startdtsub) > 12  
----                                                                                                                                                  AND Datediff(m, Em.pr_date, @startdtsub) <= 24) THEN 2  
----                                                                                                                                        ELSE 0  
----                                                                                                                                      END,Em.wdays_per_week WorkingDaysInWeek,Em.Ot_Entitlement OT,Em.Cpf_entitlement CPF,Em.EmpCPFtype CPFType,Em.Pay_Frequency PayType,Em.Payment_Mode Pay_Mode,Em.Joining_Date Join_Date,Em.Termination_date Term_Date,Em.Pr_date,Em.Hourly_rate,@RollDays RollDays,WrkgDaysInRoll = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCountPayRoll_5  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCountPayRoll_5p  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCountPayRoll_6  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                           WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCountPayRoll_7  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                         END,Em.PayRateCust AS BasicPayInRoll,@NoWrkgDaysSubPay SubPayDays,WrkgDaysInSubPay = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 5) THEN @TotalDaysCount_5  
----																																																												WHEN (Em.wdays_per_week = 5.5) THEN @TotalDaysCount_5p  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 6) THEN @TotalDaysCount_6  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                WHEN (Em.wdays_per_week = 7) THEN @TotalDaysCount_7  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                              END,BasicDayRate 
----= CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----    WHEN (Em.wdays_per_week >= 5  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND EM.daily_rate_mode = 'M'  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND EM.daily_rate > 0) THEN Em.daily_rate  
----                                                                            WHEN (Em.wdays_per_week = 5  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----    WHEN (Em.wdays_per_week = 5  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5), @roundunpaid)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----    WHEN (Em.wdays_per_week = 5.5  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_5p)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----    WHEN (Em.wdays_per_week = 5.5  
----                                                           AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_5p), @roundunpaid)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----    WHEN (Em.wdays_per_week = 6  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_6)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----    WHEN (Em.wdays_per_week = 6  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_6), @roundunpaid)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----    WHEN (Em.wdays_per_week = 7  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND @roundunpaid = -1) THEN (Em.PayRateCust / @TotalDaysCountPayRoll_7)  
----                                                                                                 WHEN (Em.wdays_per_week = 7  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          AND @roundunpaid >= 0) THEN Round((Em.PayRateCust / @TotalDaysCountPayRoll_7), @roundunpaid)  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----  --When (Em.wdays_per_week >= 5  And daily_rate_mode='M') Then daily_rate                                                                 
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----  END,(Isnull(UFD.UnpaidFullDay, 0) - Isnull(UFPR.UnpaidFullDayPR, 0)) UnpaidFullDay,(Isnull(UHD.UnpaidHalfDay, 0) - Isnull(UHPR.UnpaidHalfDayPR, 0)) UnpaidHalfDay,Isnull(PFD.PaidFullDay, 0) PaidFullDay,Isnull(PHD.PaidHalfDay, 0) PaidHalfDay,Isnull(UFPR.UnpaidFullDayPR, 0) UnpaidFullDayPR,Isnull(UHPR.UnpaidHalfDayPR, 0) UnpaidHalfDayPR,(Em.hourly_rate * Em.Ot1Rate) OT1Rate,EOT.Nh_Work NHHrs,EOT.overtime1 OT1Hrs,  
----                                                 CONVERT(DECIMAL(8, 2), (((Em.hourly_rate * Em.Ot1Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime1, 0)))) OT1,(Em.hourly_rate * Em.Ot2Rate) OT2Rate,EOT.overtime2 OT2Hrs,CONVERT(DECIMAL(8, 2), (((Em.hourly_rate * Em.Ot2Rate)/60) * dbo.Converttominutes(Isnull(EOT.overtime2, 0)))) OT2,CONVERT(DECIMAL(8, 2), (((Em.hourly_rate)/60) * dbo.Converttominutes(Isnull(EOT.NH_Work, 0)))) NH,  
----                                                         Days_Work = CASE  
----                                                                       WHEN Em.Pay_Frequency = 'D' THEN Isnull(EOT.Days_Work, 0)  
----                                                                       ELSE 0  
----                                                                     END,NH_Work = CASE  
----                                                                                     WHEN Em.Pay_Frequency = 'H' THEN Isnull(EOT.NH_Work, 0)  
----                                                                                     ELSE 0  
----                                                                                   END,ActSatDaySpan = CASE  
----                                                                                                         WHEN (Em.wdays_per_week = 5.5) THEN SSD.ActSatDaySpan / 2  
----                                                                                                         WHEN (Em.wdays_per_week = 6) THEN 0  
----                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0  
----                      ELSE SSD.ActSatDaySpan  
----                                                                                                       END,ActSunDaySpan = CASE  
----                                                                                                                             WHEN (Em.wdays_per_week = 7) THEN 0  
----                                                                                                                             ELSE SSD.ActSunDaySpan  
----                                                                                                                           END,ActPRSatDaySpan = CASE  
----                                                                                                                                                   WHEN (Em.wdays_per_week = 5.5) THEN SSDPR.ActPRSatDaySpan / 2  
----                                                                                                                                                   WHEN (Em.wdays_per_week = 6) THEN 0  
----                                                                                                                                                   WHEN (Em.wdays_per_week = 7) THEN 0  
----                                                                                                                                                   ELSE SSDPR.ActPRSatDaySpan  
----                                                                                                                                                 END,ActPRSunDaySpan = CASE  
----                                                                                                                                                                         WHEN (Em.wdays_per_week = 7) THEN 0  
----                                                                                                                                                                         ELSE SSDPR.ActPRSunDaySpan  
----                                                                                                                                                                       END,Isnull(Add4NW.Add4NW, 0) Add4NW,Isnull(Add4OW.Add4OW, 0) Add4OW,Isnull(Add4AW.Add4AW, 0) Add4AW,Isnull(Add4AWNOCPF.Add4AWNOCPF, 0) Add4AWNOCPF,(Isnull(Add4NW.Add4NW, 0) + Isnull(Add4OW.Add4OW, 0) + Isnull(Add4AW.Add4AW, 0)) AdditionalWages,Isnull(Ded.DedAmt, 0) DedAmt,Isnull(DCPF.DedCPFAmt, 0) DedCPFAmt,CalculateCPF,Daily_rate_mode,Daily_Rate = CASE  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          WHEN @roundunpaid = -1 THEN Daily_Rate  
----                                                                                                                                                                                                                                                               
----                                                                                                                                                                                                                                                               
----          ELSE Round(Daily_Rate, @roundunpaid)  
----                                                                                                                              END,Em.PayRateCust  
----                                  FROM   #EmployeeTemp Em  
----                                         LEFT OUTER JOIN Department DEPT ON Em.Dept_Id = DEPT.Id  
----                                         LEFT OUTER JOIN Emp_Group EG ON Em.emp_group_id = EG.Id  
----                                         LEFT OUTER JOIN GiroBanks GIRO ON Em.Payment_Mode = GIRO.ID  
----                                         LEFT OUTER JOIN Race RA ON Em.Race_Id = RA.ID  
----                                         LEFT OUTER JOIN #UnpaidFullDay UFD ON Em.Emp_Code = UFD.Emp_Id  
----                                         LEFT OUTER JOIN #UnpaidHalfDay UHD ON Em.Emp_Code = UHD.Emp_Id  
----                                         LEFT OUTER JOIN #PaidFullDay PFD ON Em.Emp_Code = PFD.Emp_Id  
----                                         LEFT OUTER JOIN #PaidHalfDay PHD ON Em.Emp_Code = PHD.Emp_Id  
----                                         LEFT OUTER JOIN #UnpaidFullDayPR UFPR ON Em.Emp_Code = UFPR.Emp_Id  
----                                         LEFT OUTER JOIN #UnpaidHalfDayPR UHPR ON Em.Emp_Code = UHPR.Emp_Id  
----                                         LEFT OUTER JOIN #EOT EOT ON Em.Emp_Code = EOT.Emp_Code  
----                                         LEFT OUTER JOIN #SatSunDaysTemp SSD ON Em.Emp_Code = SSD.Emp_Code  
----                                         LEFT OUTER JOIN #PRSatSunDaysTemp SSDPR ON Em.Emp_Code = SSDPR.Emp_Code  
----                                         LEFT OUTER JOIN #Add4NW Add4NW ON Em.Emp_Code = Add4NW.Emp_Code  
----                                         LEFT OUTER JOIN #Add4OW Add4OW ON Em.Emp_Code = Add4OW.Emp_Code  
----                                         LEFT OUTER JOIN #Add4AW Add4AW ON Em.Emp_Code = Add4AW.Emp_Code  
----                                         LEFT OUTER JOIN #Add4AWNOCPF Add4AWNOCPF ON Em.Emp_Code = Add4AWNOCPF.Emp_Code  
----                                         LEFT OUTER JOIN #Deduction Ded ON Em.Emp_Code = Ded.Emp_Code  
----                                         LEFT OUTER JOIN #DeductionCPF DCPF ON Em.Emp_Code = DCPF.Emp_Code) T) E) F) G  
----  ORDER  BY G.FullName  
----  
----  --Added on Dec 6 for Auto And Manual Funds- Start  
----  SELECT Emp_Code,FundType = Case   
----        When ED.FundType=1 Then 'CDAC'  
----        When ED.FundType=2 Then 'ECF'  
----        When ED.FundType=3 Then 'MBMF'  
----        When ED.FundType=4 Then 'SINDA'  
----        END  
----  INTO   #FundPerc  
----  FROM   Emp_Deductions ED  
----         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
----  WHERE  (--MONTH(trx_period) = @startmonth AND                                                      
----         (trx_period >= @startdtsub  
----          AND trx_period <= @enddtsub)  
----         AND YEAR(trx_period) = @startyear)  
----   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))  
----  GROUP  BY Emp_Code, ED.FundType  
----  
----  
---- UPDATE P  
---- SET    P.DedAmt = isnull(P.DedAmt,0)+ isnull(EM.DedAmt,0)  
---- FROM   #PriorGenPayroll P  
----   INNER JOIN ( Select EM.Emp_Code,--F.FundType,  
----  Sum(dbo.Getempfundcontribution((Isnull((P.GrossWithOutAddition + P.Add4AW + P.Add4AWNOCPF + P.Add4OW), 0)), Isnull(F.FundType, ''))) DedAmt  
---- From #FundPerc F  
----INNER JOIN #EmployeeTemp EM ON F.Emp_Code = EM.Emp_Code  
----INNER JOIN #PriorGenPayroll P ON F.Emp_Code = P.Emp_Code  
------Where  @INTendatesubmonth >=1 And EM.CalcFundFH = 'Y'  Group By EM.Emp_Code  
------Removed And EM.CalcFundFH = 'Y' 
----Where  @INTendatesubmonth >=1  Group By EM.Emp_Code  
----) EM ON P.Emp_Code = EM.Emp_Code  
----  
------Added on Dec 6 for Auto And Manual Funds- End  
----
----  --CALCULATE AW FOR CPF                                                    
----  DECLARE @EMPLID INT  
----  DECLARE @BASICEMP FLOAT  
----  DECLARE db_cursor_old CURSOR FOR  
----      SELECT Emp_Code,[BASIC]  
----      FROM   #PriorGenPayroll  
----  
----  OPEN db_cursor_old  
----  
----  FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP  
----  
----  WHILE @@FETCH_STATUS = 0  
----      BEGIN  
----          INSERT @CPFAWCALC  
----                 (Emp_Code,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWCPF)  
----          SELECT *  
----          FROM   dbo.Fn_calculatecpfaw (@company_id, @month, @year, @EMPLID, @BASICEMP)  
----  
----          FETCH NEXT FROM db_cursor_old INTO @EMPLID, @BASICEMP  
----      END  
----  
----  CLOSE db_cursor_old  
----  
----  DEALLOCATE db_cursor_old  
----  
----  --Calculate Last Year Ordinary Wage CPF, Ordinary CPF Ceiling                                                                                                                                                
----  --    SELECT  Emp_ID Emp_Code, SUM(CPFOrdinaryNet) OrdinaryWagesLY                                                            
----  --    INTO    #LYOWPaidWithCPFCeil                                                            
----  --    FROM    ( SELECT    * ,                                                            
----  --                        CPFOrdinaryNet = CASE WHEN OrdinaryWagesLY >= @cpfceiling                                    
----  --                                              THEN @cpfceiling                                                  
----  --                         ELSE OrdinaryWagesLY                                                            
----  --                                         END                                                            
----  --              FROM      ( SELECT    pd.emp_id ,                                           
----  --                                    MONTH(ph.start_period) Mth ,                                                            
----  --                                    ( pd.cpfnet - pd.cpfAdd_Additional ) OrdinaryWagesLY                                
----  --                          FROM      prepare_payroll_hdr ph                     
----  --                          INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                                            
----  --                          WHERE     pd.status = 'G' AND                                                 
----  --                             YEAR(ph.start_period) = @lastyear AND                                                            
----  --                                   pd.CPFNet > 0                                                            
----  --                        ) R                                                            
----  --            ) R                                                            
----  --    GROUP BY R.Emp_ID                                                                                                         
----  --Calculate Current Year Ordinary Wage CPF, Ordinary CPF Ceiling and Addition Wages Ceiling                                                                                                                                                
----  --    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCY) OrdinaryWagesCY                                                            
----  --    INTO    #CYOWPaidWithCPFCeil                                                            
----  --    FROM    ( SELECT    R.Emp_Code, SUM(R.OrdinaryWagesCY) OrdinaryWagesCY                                                            
----  --              FROM      ( SELECT    * ,                                                            
----  --                                    CPFOrdinaryNet = CASE WHEN OrdinaryWagesCY >= @cpfceiling                                                            
----  --                                                          THEN @cpfceiling                                                            
----  --                  ELSE OrdinaryWagesCY                                                            
----  --                                                   END                                                            
----  --                          FROM      ( SELECT    pd.emp_id Emp_Code ,                                                            
----  --                                                MONTH(ph.start_period) Mth ,                                            
----  --                               ( pd.cpfnet -                                                            
----  --                                                  pd.cpfAdd_Additional ) OrdinaryWagesCY                                                            
----  --  FROM      prepare_payroll_hdr ph                                             
----  --                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                                            
----  --                                      WHERE     pd.status = 'G' AND                                                           
----  --                                                MONTH(ph.start_period) <= @startmonth AND                                                            
----  --                                                YEAR(ph.start_period) = @startyear AND                                                            
----  --                                                pd.CPFNet > 0                                                            
----  --             ) D                                                            
----  --                        ) AS R                                                            
----  --         GROUP BY  R.Emp_Code                                                            
----  --            ) D                                                            
----  --    GROUP BY Emp_Code                                                                                                 
----  --    SELECT  D.Emp_Code, SUM(D.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal                                                            
----  --    INTO    #CYOWPaidWithCPFCeilRecal                                                            
----  --    FROM    ( SELECT    R.Emp_Code,                                                            
----  --                        SUM(R.OrdinaryWagesCYRecal) OrdinaryWagesCYRecal                                                            
----  --              FROM      ( SELECT    * ,                                                            
----  --                 CPFOrdinaryNetRecal = CASE                                                            
----  --                                                              WHEN OrdinaryWagesCYRecal >= @cpfceiling                                                            
----  --   THEN @cpfceiling                                                            
----  --                                             ELSE OrdinaryWagesCYRecal                           
----  --                                                          END                                                            
----  --                          FROM      ( SELECT    pd.emp_id Emp_Code ,                                                            
----  --                                                MONTH(ph.start_period) Mth ,                                                            
----  --                                                ( pd.cpfnet -                                                            
----  --              pd.cpfAdd_Additional ) OrdinaryWagesCYRecal                                
----  --        FROM  prepare_payroll_hdr ph                                
----  --                                      INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id                                
----  --                                      WHERE     pd.status = 'G' AND                                
----  --        MONTH(ph.start_period) < @startmonth AND                                
----  --                YEAR(ph.start_period) = @startyear AND                                
----  --                       pd.CPFNet > 0                                
----  --                                    ) D                                
----  --                        ) AS R                                
----  --              GROUP BY  R.Emp_Code                                
----  --            ) D                                                            
----  --    GROUP BY Emp_Code                                                                                                     
----  --Calculate Current Year Addition Wages Paid Less than current month.                                                                                                                                                
----  --    SELECT  R.Emp_Code, SUM(R.AWPaidCY) AWPaidCY                                                            
----  --    INTO    #AWPAIDCurYear                                                            
----  --    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],                                 
----  --                        SUM(trx_amount) AWPaidCY                                                            
----  --              FROM      emp_additions EA                                                            
----  --              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID                                                            
----  --              WHERE     Status = 'L' AND                                                            
----  --                        ( MONTH(trx_period) <= @startmonth AND             
----  --      YEAR(trx_period) = @startyear                                                            
----  --                        ) AND                                  
----  --                        AT.CPF = 'Yes' AND                                                            
----  --                        AT.Type_Of_Wage = 'A' AND                                                            
----  --                        ( EA.ClaimStatus = 'Approved' OR                                           
----  --                 EA.ClaimStatus IS NULL                                                            
----  --                        )                                                            
----  --              GROUP BY  Emp_Code, MONTH(trx_period)                                                            
----  --            ) AS R                                                            
----  --    GROUP BY R.Emp_Code                                                            
----  --    ORDER BY R.Emp_Code                                           
----  --Calculate Current Year Addition Wages Paid of current month.                                                                                                      
----  --    SELECT  R.Emp_Code, SUM(R.AWPaidCYMonth) AWPaidCYMonth                                                            
----  --    INTO    #AWPAIDCurYearMonth                                                            
----  --    FROM    ( SELECT    Emp_Code, MONTH(trx_period) [Mth],                                                            
----  --                        SUM(trx_amount) AWPaidCYMonth                                                            
----  --              FROM      emp_additions EA                                                            
----  --              INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID                                                            
----  --              WHERE     --Status='L' And                                                              
----  --                        ( MONTH(trx_period) = @startmonth AND                                     
----  --                          YEAR(trx_period) = @startyear                                                            
----  --                        ) AND                                      
----  --                        AT.CPF = 'Yes' AND                                                            
----  --                        AT.Type_Of_Wage = 'A' AND                                                            
----  --    ( EA.ClaimStatus = 'Approved' OR                                                            
----  --                          EA.ClaimStatus IS NULL                                                            
----  --                        )                                                            
----  --              GROUP BY  Emp_Code, MONTH(trx_period)                                                            
----  --            ) AS R                                          
----  --    GROUP BY R.Emp_Code                                                            
----  --    ORDER BY R.Emp_Code                                                                                                                                   
----  SELECT *  
----  INTO   #FinalPre  
----  FROM   (SELECT *,EmployeeCPF = CASE  
----                                   WHEN (Em.CPFGross > 0  
----                                         AND Em.CPFGross <= 1500) THEN 0  
----                                   WHEN (Em.CPFGross <= 0) THEN 0  
----                                   ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployeePerc), 0)) / 100  
----                                 END,EmployerCPF = CASE  
----                                                     WHEN Em.CPFGross <= 1500  
----                                                          AND Em.CPFGross > 0 THEN 0  
----                                                     WHEN Em.CPFGross <= 0 THEN 0  
----                                                     ELSE (Isnull(((Isnull(Em.CPFGross, 0)) * CPFEmployerPerc), 0)) / 100  
----                                                   END,REPLACE((SELECT Top 1 employee_cpf  
----                                                   FROM   CPFAmount_detail  
----                                                                WHERE  hdr_id = (SELECT row_id  
----                                                                                 FROM   CPFAmount_hdr  
----                                                                                 WHERE  pr_years = Em.PRAge  
----                                                                                    AND emp_group = Em.EmpCPFType  
----                                                                                    AND Em.CPFGross BETWEEN sal_from AND sal_to)  
----                                                                   AND age_group = Em.Age_Group And CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployeeCPFRow,REPLACE((SELECT Top 1 employer_cpf  
----                                                                                                                                               FROM   CPFAmount_detail  
----                                                                                                                                               WHERE  hdr_id = (SELECT row_id  
----                                                                                                                                                                FROM   CPFAmount_hdr  
----                                                                                                                                                                WHERE  pr_years = Em.PRAge  
----                                                                                                                                                                   AND emp_group = Em.EmpCPFType  
----                                                                                                                                                                   AND Em.CPFGross BETWEEN sal_from AND sal_to)  
----                                                                                                                                                  AND age_group = Em.Age_Group  And CPFCalculate = @CPFCalculate), '@SAL', Em.CPFGross) EmployerCPFRow  
----          FROM   (SELECT *,CPFAdditionNet = CASE  
----                                              WHEN CPFAdditionNetRev < 0 THEN 0  
----                                              ELSE CPFAdditionNetRev  
----                                            END,CPFAdditionNetRev AWSUBJCPF,CPFGross = CASE  
----                                                                                         WHEN (CalculateCPF = 'Y'  
----                                                                                               AND CPFAdditionNetRev >= 0) THEN ((CPFOrdinaryCeil + CPFAdditionNetRev))  
----                                                                                         WHEN (CalculateCPF = 'Y'  
----                                                                                               AND CPFAdditionNetRev < 0) THEN (CPFOrdinaryCeil)  
----                                                                                         ELSE 0  
----                                                                                       END,CPFEmployerPerc = CASE  
----                                                                                                               WHEN (CalculateCPF = 'Y') THEN dbo.Getemployercpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)  
----                                                                                                               ELSE 0  
----                                                                                                             END,CPFEmployeePerc = CASE  
----                                                                                                                                     WHEN (CalculateCPF = 'Y') THEN dbo.Getemployeecpfpct(EmpCPFType, Age, PRAge, @CPFCalculate)  
----                                                            ELSE 0  
----                                                                                                                                   END  
----                  FROM   (SELECT J5.*,CPFOrdinaryCeil = CASE  
----                                                          WHEN (J5.CalculateCPF = 'Y')  
----                                                               AND (CPFOrdinary) >= @cpfceiling THEN @cpfceiling  
----                                                          WHEN (J5.CalculateCPF = 'Y')  
----                                                               AND (CPFOrdinary) < @cpfceiling THEN Isnull((CPFOrdinary), 0)  
----                                                          ELSE 0  
----                                                        END,  
----                                 --dbo.fn_GENPayrollAWCalc(@startmonth, @startyear, Em.Emp_Code, J5.Basic) AS CPFAdditionNetRev ,                                                        
----                                 Isnull(J7.AWCPF, 0) CPFAdditionNetRev,Em.EmpCPFtype,Em.Age_Group,Em.Age,Em.FundType,Ot1SysRate,OT2SysRate,J7.CMOW,J7.LYOW,J7.CYOW,J7.CPFAWCIL,J7.EST_AWCIL,J7.ACTCIL,J7.AWCM,J7.AWB4CM,J7.AWCM_AWB4CM,EM.sdf_required,EM.Time_Card_No,EM.Fund_Optout  
----                          FROM   #EmployeeTemp Em --LEFT OUTER JOIN #CYOWPaidWithCPFCeilRecal J6 ON Em.Emp_Code = J6.Emp_Code                                                            
----                                 --LEFT OUTER JOIN #CYOWPaidWithCPFCeil J1 ON Em.Emp_Code = J1.Emp_Code                                                            
----                                 --LEFT OUTER JOIN #AWPAIDCurYear J2 ON Em.Emp_Code = J2.Emp_Code                                                            
----                                 --LEFT OUTER JOIN #LYOWPaidWithCPFCeil J3 ON Em.Emp_Code = J3.Emp_Code                                         
----                                 --LEFT OUTER JOIN #AWPAIDCurYearMonth J4 ON Em.Emp_Code = J4.Emp_Code                                                   
----                                 LEFT OUTER JOIN #PriorGenPayroll J5 ON Em.Emp_Code = J5.Emp_Code  
----                                 LEFT OUTER JOIN @CPFAWCALC J7 ON Em.Emp_Code = J7.Emp_Code) Em) Em) Em  
----  ORDER  BY Em.FullName  
----  
----  --Calculate Employer and Employee CPF Contribution                                                                                                                                           
----  DECLARE db_cursor CURSOR FOR  
----      SELECT Emp_Code,EmployerCPFRow,EmployeeCPFRow  
----      FROM   #FinalPre  
----      WHERE  EmployeeCPFRow IS NOT NULL  
----          OR EmployerCPFRow IS NOT NULL  
----  
----  OPEN db_cursor  
----  
----  FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt  
----  
----  WHILE @@FETCH_STATUS = 0  
----      BEGIN  
----          SET @compute = N'set @cpfamtemployer= ' + @EmployerCPFAmt  
----  
----          EXEC Sp_executesql @compute,@param1,@cpfamtemployer OUTPUT  
----  
----          SET @compute = N'set @cpfamtemployee= ' + @EmployeeCPFAmt  
----  
----          EXEC Sp_executesql @compute,@param2,@cpfamtemployee OUTPUT  
----  
----          --Exclusive for Full MONTH START                      
----          --       UPDATE   #FinalPre                                                
----          --       SET      EmployerCPF = @cpfamtemployer, EmployeeCPF = @cpfamtemployee                                                
----          --       WHERE    Emp_Code = @EmpID                                                                                                                          
----          UPDATE #FinalPre  
----          SET    EmployeeCPF = @cpfamtemployee  
----          WHERE  Emp_Code = @EmpID  
----  
----          IF (@endatesubmonth != '15')  
----              BEGIN  
----                  UPDATE #FinalPre  
----                  SET    EmployerCPF = @cpfamtemployer  
----                  WHERE  Emp_Code = @EmpID  
----              END --Exclusive for Full MONTH END                                
----          FETCH NEXT FROM db_cursor INTO @EmpID, @EmployerCPFAmt, @EmployeeCPFAmt  
----      END  
----  
----  CLOSE db_cursor  
----  
----  DEALLOCATE db_cursor  
----  
----  SELECT *  
----  INTO   #Final  
----  FROM   (SELECT Emp_Code,FullName,DeptName,GroupName,[Basic],[BasicPR],TotalAdditions,TotalAdditionsWONH=CASE  
----                                                                                                            WHEN (Isnull(TotalAdditions, 0) - Isnull(NH, 0)) <= 0 THEN (Isnull(NH, 0) - Isnull(TotalAdditions, 0))  
----                                                                                                            ELSE (Isnull(TotalAdditions, 0) - Isnull(NH, 0))  
----                                                                                                          END,TotalDeductions,OT1Rate,OT2Rate,NHHrs,OT1Hrs,OT2Hrs,NH,OT1,OT2,Days_Work,CAST(Round(([Basic] + OT1 + OT2 + DaysWorkedRate + Add4NW + Add4OW + Add4AW + Add4AWNOCPF) - TotalDeductions, @roundnetpay) AS DECIMAL(9, 2)) NetPay,OT,CPFOrdinaryCeil,CPFAdditionNet,CPFGross,EmployeeCPFAmt,EmployerCPFAmt,(EmployeeCPFAmt + EmployerCPFAmt) CPFAmount,CPF,EmpCPFtype,PRAge,@cpfceiling CPFCeiling,FundType,FundAmount,(UnpaidFullDay + UnpaidHalfDay + UnpaidFullDayPR + UnpaidHalfDayPR) UnPaidLeaves,TotalUnPaid,PayType,Daily_rate_mode,Daily_Rate,ActualBasic,Pay_Mode,EmployeeGiro,EmployerGiro,GiroBank,Emp_Type,WorkingDaysInWeek,CPFType,Hourly_rate,Join_Date,Term_Date,Pr_date,RollDays,WrkgDaysInRoll,BasicPayInRoll,SubPayDays,WrkgDaysInSubPay,BasicDayRate,BasicDayRateWORound,BasicNorSubPay,UnpaidFullDay,UnpaidHalfDay,PaidFullDay,PaidHalfDay,UnPaidDeduct,UnpaidFullDayPR,UnpaidHalfDayPR,UnPaidDeductPR,  
----                 Add4NW,  
----                        Add4OW,Add4AW,Add4AWNOCPF,AdditionalWages,DedAmt,DedCPFAmt,ActSatDaySpan,ActSunDaySpan,ActWrkgDaysSpan,ActPRSatDaySpan,ActPRSunDaySpan,ActPRWrkgDaysSpan,DaysWorkedRate,CPFOrdinary,Age_Group,Age,OT1SysRate,OT2SysRate,CalculateCPF,CPFEmployeePerc,CPFEmployerPerc,EmployeeCPFRow,EmployerCPFRow,CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + TotalAdditions), @roundnetpay) AS DECIMAL(9, 2)) GrossWithAddition,Isnull(GrossWithOutAddition, 0) GrossWithOutAddition,Isnull(FundGrossAmount, 0) FundGrossAmount,SDLFundGrossAmount,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF,(  
----                        'EmployeePayReport.aspx?qsEmpID=' + CONVERT(VARCHAR, Emp_Code) + '&qsMonth=' + CONVERT(VARCHAR, @monthidintbl) + '&qsYear=' + CONVERT(VARCHAR, @year) + '&st=' + @stdatemonth + '&en=' + @endatemonth + '&stmonth=' + @stdatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&endmonth=' + @endatesubmonth + '/' + CAST(@month AS VARCHAR) + '/' + CAST(@year AS VARCHAR) + '&monthintbl=' + CAST(@monthidintbl AS VARCHAR)) AS MediumUrl,Time_Card_No,Fund_OptOut,SDF_Required  
----          FROM   (SELECT *,CAST((Add4NW + Add4OW + Add4AW + Add4AWNOCPF + DaysWorkedRate) AS DECIMAL(9, 2)) TotalAdditions,CAST((UnPaidDeduct + UnpaidDeductPR + DedAmt + EmployeeCPFAmt + FundAmount) AS DECIMAL(9, 2)) TotalDeductions  
----                  FROM   (SELECT *,Floor(EmployeeCPF) EmployeeCPFAmt,Round(((Abs(Floor(EmployeeCPF) - EmployeeCPF)) + EmployerCPF), 0) EmployerCPFAmt,FundAmount = CASE  
----                                                                                                                                                                     WHEN @INTendatesubmonth >= 1 THEN dbo.Getempfundcontribution((Isnull((GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW), 0)), Isnull(FundType, ''))  
----                                                                                                                                                                     ELSE 0  
----                                                                                                                                                                   END,FundGrossAmount = CASE  
----                                                     WHEN Fund_Optout = 0  
----                                                                                                                                                                                                AND @INTendatesubmonth >= 1 THEN (GrossWithOutAddition + Add4AW + Add4AWNOCPF + Add4OW)-DedCPFAmt  
----                                                                                                                                                                                           ELSE 0  
----                                                                                                                                                                                         END,SDLFundGrossAmount = CASE  
----                                                                                                                                                                                                                    WHEN SDF_Required = 2  
------                                                                                                                                                                                                                         AND (PR_Date <= @startdtsub)  
------                                                                                                                                                                                                                         AND (Emp_Type = 'SPR'  
------                                                                                                                                                                                                                               OR Emp_Type = 'SDPR'  
------                                                                                                                                                                                                                               OR Emp_Type = 'SC')  
----                                                                                                                                                                                                                         --AND @INTendatesubmonth >= 16 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate)-DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)  
----                                                                                                                                                                                                                         AND @INTendatesubmonth >= 1 THEN Isnull(CAST(Round((([Basic] - TotalUnPaid) + OT1 + OT2 + DaysWorkedRate + Add4AW + Add4AWNOCPF + Add4OW)-DedCPFAmt, @roundnetpay) AS DECIMAL(9, 2)), 0)  
----                                                                                                                                                                                                                    ELSE 0  
----                                                                                                                                                                                                                  END  
----                          FROM   #FinalPre) Res) Res) Res  
----  
----  SELECT *  
----  FROM   #Final F  
----  ORDER  BY FullName  
----  
----  DROP TABLE #Final  
----  
----  DROP TABLE #FinalPre  
----  
----  DROP TABLE #EmployeeTemp  
----  
----  DROP TABLE #PRSatSunDaysTemp  
----  
----  DROP TABLE #SatSunDaysTemp  
----  
----  DROP TABLE #UnpaidFullDayPR  
----  
----  DROP TABLE #UnpaidHalfDayPR  
----  
----  DROP TABLE #PaidHalfDay  
----  
----  DROP TABLE #PaidFullDay  
----  
----  DROP TABLE #UnpaidHalfDay  
----  
----  DROP TABLE #UnpaidFullDay  
----  
----  DROP TABLE #Add4AW  
----  
----  DROP TABLE #Add4OW  
----  
----  DROP TABLE #Add4NW  
----  
----  DROP TABLE #EOT  
----  
----  DROP TABLE #PriorGenPayroll  
----  
----  --DROP TABLE #AWPAIDCurYear                                       
----  --DROP TABLE #CYOWPaidWithCPFCeil                               
----  --DROP TABLE #CYOWPaidWithCPFCeilRecal                                                                              
----  --DROP TABLE #AWPAIDCurYearMonth                                       
----  --DROP TABLE #LYOWPaidWithCPFCeil                                                                      
----  DROP TABLE #Deduction  
----  
----  DROP TABLE #DeductionCPF  
----  
----  DROP TABLE #EmployeeWorkFlow  
----  
----  DROP TABLE #EmployeeWorkFlowLevel  
----  
----  DROP TABLE #EmployeeAssignedToPayrollGroup
----
----  DROP TABLE #EmpPayTemp
----
----  DROP TABLE #EmpPayTempOLD
----
----  DROP TABLE #FundPerc
----
----GO
--------Merging 9.0
--------------sp_getleavesumdetcomp  2010, '0,2,1', '0,8,12,14,13,16,15,10,19,11,9,18', 2, 1,12
------------CREATE PROC [dbo].[Sp_getleavesumdetcomp] @year       INT,    
------------                                     @CompID      VARCHAR(8000),    
------------                                     @LeaveID    VARCHAR(8000),    
------------                                     @ReportType INT = 0,    
------------                                     @frommonth  INT = -1,    
------------                                     @endmonth   INT = -1    
------------AS    
------------Declare @EmpID INT  
------------  BEGIN    
------------      IF ( @ReportType = 1 )    
------------        BEGIN    
------------            SET @endmonth = -1    
------------    
------------            IF ( @frommonth = 0 )    
------------              BEGIN    
------------                  SET @frommonth = 12    
------------              END    
------------        END    
------------    
------------      DECLARE @select AS VARCHAR(8000)    
------------      DECLARE @where VARCHAR(8000)    
------------      DECLARE @where1 VARCHAR(8000)    
------------      DECLARE @leaves AS INT    
------------      DECLARE @appliedon DATETIME    
------------      DECLARE @LEAVEAVAIL TABLE (    
------------        ID                    INT,    
------------        EMP_ID                INT,    
------------        LEAVE_YEAR            FLOAT,    
------------        [TYPE]                VARCHAR(50),    
------------        CompanyLeaveAllowed   FLOAT,    
------------        LeavesAllowed         FLOAT,    
------------        LY_Leaves_Bal         FLOAT,    
------------        LeavesEarned          FLOAT,    
------------        PaidLeaves            FLOAT,    
------------        UnpaidLeaves          FLOAT,    
------------        PendingLeaves         FLOAT,    
------------        LeavesAvailable       FLOAT,    
------------        TotalLeavesTaken      FLOAT,    
------------        ActualLeavesAvailable FLOAT,    
------------        leavesfromly          FLOAT,    
------------        SHOWLEAVEMODEL        INT )    
------------    
------------      SELECT EMP_CODE,Company_ID    
------------      INTO   ##EmployeeTemp    
------------      FROM   Employee    
------------    
------------      IF Len(@CompID) > 0    
------------        BEGIN    
------------            SELECT @where = 'Where Company_ID Not In (' + @CompID + ')'    
------------        END    
------------    
------------      IF Len(@LeaveID) > 0    
------------        BEGIN    
------------            SELECT @where1 = 'Where ID Not In (' + @LeaveID + ')'    
------------        END    
------------    
------------      SELECT @select = 'Delete From ##EmployeeTemp ' + @where    
------------    
------------      EXEC (@select)    
------------      SELECT TOP 1 @appliedon = DateInYear    
------------      FROM   dbo.DateInYear AS diy    
------------      WHERE  YEAR(DateInYear) = @year    
------------             AND MONTH(DateInYear) = @frommonth    
------------      ORDER  BY DateInYear DESC    
------------    
------------      --SET @today = CONVERT(VARCHAR(10), @appliedon, 103)                      
------------      IF ( @ReportType = 1 )    
------------        BEGIN    
------------            DECLARE db_cursor CURSOR FOR    
------------              SELECT Emp_Code    
------------              FROM   ##EmployeeTemp    
------------    
------------            OPEN db_cursor    
------------    
------------            FETCH NEXT FROM db_cursor INTO @EmpID    
------------    
------------            WHILE @@FETCH_STATUS = 0    
------------              BEGIN    
------------                  INSERT @LEAVEAVAIL    
------------                         (id,    
------------                          emp_id,    
------------                          leave_year,    
------------                          [TYPE],    
------------                          companyleaveallowed,    
------------                          LY_Leaves_Bal,    
------------                          leavesallowed,    
------------                          leavesearned,    
------------                          paidleaves,    
------------                          unpaidleaves,    
------------                          pendingleaves,    
------------                          leavesavailable,    
------------                          actualleavesavailable,    
------------                          totalleavestaken,    
------------                          SHOWLEAVEMODEL)    
------------                  EXEC Sp_getemployeeleavepolicy    
------------                    @EmpID,    
------------                    @year,    
------------                    @appliedon,    
------------                    0    
------------    
------------                  FETCH NEXT FROM db_cursor INTO @EmpID    
------------              END    
------------    
------------            CLOSE db_cursor    
------------    
------------            DEALLOCATE db_cursor    
------------    
------------            SELECT *    
------------            INTO   ##Temp    
------------            FROM   @LEAVEAVAIL    
------------    
------------            SELECT @select = 'Delete From ##Temp ' + @where1    
------------    
------------            EXEC (@select)    
------------    
------------            SELECT C.Company_Name, Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') [Full_Name],    
------------                   T.TYPE                                                 [Leave_Type],    
------------                   T.CompanyLeaveAllowed                                  CAL,    
------------                   Isnull(T.LeavesAllowed, 0)                             CYL,    
------------                   T.LY_Leaves_Bal           LYCF,    
------------                   T.LeavesEarned                                         CYLE,    
------------                   T.PaidLeaves                                           [Paid_Leaves],    
------------                   T.UnpaidLeaves                                         [Unpaid_Leaves],    
------------                   T.PendingLeaves                                        [Pending_Leaves],    
------------                   T.TotalLeavesTaken                                     [Leaves_Taken],    
------------                   T.ActualLeavesAvailable                                [Balance_Leaves]    
------------            FROM   ##Temp T    
------------                   Left OUTER JOIN Employee E    
------------                     ON T.Emp_ID = E.Emp_CODE  
------------     Inner Join Company C  
------------      On E.Company_ID = C.Company_ID    
------------            ORDER  BY C.Company_name,e.emp_name,    
------------                      T.TYPE    
------------    
------------            DROP TABLE ##EmployeeTemp    
------------    
------------            DROP TABLE ##Temp    
------------        END    
------------      ELSE    
------------        BEGIN    
------------            SELECT lt.id,    
------------                   Isnull(e.emp_name, '') + ' ' + Isnull(e.emp_lname, '') emp_name,    
------------                   lt.TYPE,    
------------                   el.start_date,    
------------                   el.end_date,    
------------                   res.paidleaves,    
------------                   res.unpaidleaves,    
------------                   el.approver,    
------------                   el.remarks,    
------------                   e.emp_code,  
------------     E.Company_ID  
------------            INTO   ##TempNew    
------------            FROM   (SELECT Res.emp_id,    
------------                           Res.trx_id,    
------------                           Res.leave_type        id,    
------------                           Res.Mth,    
------------                           SUM(Res.PaidLeaves)   PaidLeaves,    
------------                           SUM(Res.UnPaidLeaves) UnPaidLeaves    
------------                    FROM   (SELECT emp_id,    
------------                                   trx_id,    
------------                                   leave_type,    
------------                                   Mth,    
------------                                   PaidLeaves,    
------------                                   0 UnPaidLeaves    
------------                            FROM   (SELECT El.Emp_ID,    
------------                                           El.trx_id,    
------------                                           el.leave_type,    
------------                                           MONTH(Eld.leave_date)                                                        Mth,    
------------                                           CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) PaidLeaves    
------------                                    FROM   Emp_Leaves el    
------------                                           INNER JOIN emp_Leaves_Detail Eld    
------------                                             ON el.trx_id = eld.trx_id    
------------                                    WHERE  --El.Emp_ID = @empid AND                      
------------                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
------------                                      AND MONTH(Eld.Leave_Date) <= @endmonth )    
------------                                    AND YEAR(eld.leave_date) = @year    
------------                                    AND ( Eld.unpaid_leave = 0    
------------                                          AND eld.halfday_leave = 1 )    
------------                                    AND El.Status = 'Approved'    
------------                                    GROUP  BY El.Emp_Id,    
------------                                              El.trx_id,    
------------                                              el.leave_type,    
------------                                              MONTH(Eld.leave_date)    
------------                                    UNION ALL    
------------                                    SELECT El.Emp_Id,    
------------                                           El.trx_id,    
------------                                           el.leave_type,    
------------                                           MONTH(Eld.leave_date)   Mth,    
------------     COUNT(Eld.unpaid_leave) PaidLeaves    
------------                                    FROM   Emp_Leaves el    
------------                                           INNER JOIN emp_Leaves_Detail Eld    
------------                                             ON el.trx_id = eld.trx_id    
------------                                    WHERE  --El.Emp_ID = @empid AND                      
------------                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
------------      AND MONTH(Eld.Leave_Date) <= @endmonth )    
------------                                    AND YEAR(eld.leave_date) = @year    
------------                                    AND ( Eld.unpaid_leave = 0    
------------                                          AND eld.halfday_leave = 0 )    
------------                                    AND El.Status = 'Approved'    
------------                                    GROUP  BY El.Emp_Id,    
------------                                              El.trx_id,    
------------                                              el.leave_type,    
------------                                              MONTH(Eld.leave_date)) R    
------------                            UNION    
------------                            SELECT emp_id,    
------------                                   trx_id,    
------------                                   leave_type,    
------------                                   Mth,    
------------                                   0 PaidLeaves,    
------------                                   UnPaidLeaves    
------------                            FROM   (SELECT El.Emp_ID,    
------------                                           El.trx_id,    
------------                                           el.leave_type,    
------------                                           MONTH(Eld.leave_date)                                                        Mth,    
------------                                           CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(Eld.halfday_leave)) / 2) UnPaidLeaves    
------------                                    FROM   Emp_Leaves el    
------------                                           INNER JOIN emp_Leaves_Detail Eld    
------------                                             ON el.trx_id = eld.trx_id    
------------                                    WHERE  --El.Emp_ID = @empid AND                      
------------                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
------------                                      AND MONTH(Eld.Leave_Date) <= @endmonth )    
------------                                    AND YEAR(eld.leave_date) = @year    
------------                                    AND ( Eld.unpaid_leave = 1    
------------                                          AND eld.halfday_leave = 1 )    
------------                                    AND El.Status = 'Approved'    
------------                                    GROUP  BY El.Emp_Id,    
------------                                              El.trx_id,    
------------                                              el.leave_type,    
------------                                              MONTH(Eld.leave_date)    
------------                                    UNION ALL    
------------                                    SELECT El.Emp_Id,    
------------                                           El.trx_id,    
------------                                           el.leave_type,    
------------                                           MONTH(Eld.leave_date)   Mth,    
------------                                           COUNT(Eld.unpaid_leave) UnPaidLeaves    
------------                                    FROM   Emp_Leaves el    
------------                                           INNER JOIN emp_Leaves_Detail Eld    
------------                                             ON el.trx_id = eld.trx_id    
------------                                    WHERE  --El.Emp_ID = @empid AND                      
------------                                    ( MONTH(Eld.Leave_Date) >= @frommonth    
------------                                      AND MONTH(Eld.Leave_Date) <= @endmonth )    
------------                                    AND YEAR(eld.leave_date) = @year    
------------                                    AND ( Eld.unpaid_leave = 1    
------------                                          AND eld.halfday_leave = 0 )    
------------                                    AND El.Status = 'Approved'    
------------                                    GROUP  BY El.Emp_Id,    
------------                                              El.trx_id,    
------------                                              el.leave_type,    
------------                                              MONTH(Eld.leave_date)) Res) Res    
------------                    GROUP  BY Res.emp_id,    
------------                              Res.trx_id,    
------------                              Res.leave_type,    
------------                              Res.Mth) Res    
------------                   INNER JOIN Emp_Leaves El    
------------                     ON Res.trx_ID = El.trx_ID    
------------                   INNER JOIN leave_types lt    
------------                     ON Res.id = lt.id    
------------                   INNER JOIN Employee E    
------------                     ON Res.Emp_ID = E.Emp_CODE    
------------    
------------            SELECT @select = 'Delete From ##TempNew ' + @where    
------------  
------------            EXEC (@select)    
------------    
------------            SELECT @select = 'Delete From ##TempNew ' + @where1    
------------    
------------            EXEC (@select)    
------------    
------------            SELECT  C.Company_Name,  
------------     T.Emp_name       [Full_Name],    
------------                   [Type]         [Leave_Type],    
------------                   [start_date]   [From_Date],    
------------                   [end_date]     [Till_Date],    
------------                   [paidleaves]   [Paid_Leaves],    
------------                   [unpaidleaves] [Unpaid_Leaves],    
------------                   [Approver],    
------------                   T.[Remarks]    
------------            FROM   ##TempNew   T  
------------   Inner Join Company C On T.Company_ID = C.Company_ID  
------------            ORDER  BY C.Company_Name,T.Emp_Name,    
------------                      [start_date]    
------------    
------------            DROP TABLE ##EmployeeTemp    
------------    
------------            DROP TABLE ##TempNew    
------------        END    
------------  END  
------------
------------GO
-----------Merging 9.0
----------CREATE PROCEDURE [dbo].[Sp_emp_update] (@emp_code                             INT,  
----------                                       @emp_name                             [VARCHAR](50),  
----------                                       @emp_alias                            [VARCHAR](50),  
----------                                       @nationality                          [INT],  
----------                                       @emp_type                             [VARCHAR](50),  
----------                                       @emp_lname                            [VARCHAR](50),  
----------                                       @empcpftype                           [INT],  
----------                                       @Insurance_number                     [VARCHAR](50),  
----------                                       @Insurance_expiry                     VARCHAR(20),  
----------                                       @CSOC_number                          [VARCHAR](50),  
----------                                       @CSOC_expiry                          VARCHAR(20),  
----------                                       @passport                             [VARCHAR](50),  
----------                                       @passport_expiry                      VARCHAR(20),  
----------                                       @ic_pp_number                         [VARCHAR](50),  
----------                                       @wp_exp_date                          VARCHAR(20),  
----------                                       @pr_date                              VARCHAR(20),  
----------                                       @address                              [VARCHAR](50),  
----------                                       @country                              [INT],  
----------                                       @postal_code                          [VARCHAR](50),  
----------                                       @phone                                [VARCHAR](50),  
----------                                       @hand_phone                           [VARCHAR](50),  
----------                                       @email                                [VARCHAR](50),  
----------                                       @sex                                  [VARCHAR](50),  
----------                                       @religion                             [INT],  
----------                                       @race                                 [INT],  
----------                                       @marital_status                       [VARCHAR](50),  
----------                                       @place_of_birth                       [VARCHAR](50),  
----------                                       @date_of_birth                        VARCHAR(20),  
----------                                       @income_taxid                         [VARCHAR](50),  
----------                                       @employee_cpf_acct                    [VARCHAR](50),  
----------                                       @employer_cpf_acct                    [VARCHAR](50),  
----------                                       @giro_bank                            [VARCHAR](50),  
----------                                       @giro_code                            [VARCHAR](50),  
----------                                       @giro_branch                          [VARCHAR](50),  
----------                                       @giro_acct_number                     [VARCHAR](50),  
----------                                       @cpf_entitlement                      [CHAR](10),  
----------                                       @cpf_employer                         [MONEY],  
----------                                       @department                           [INT],  
----------                                       @cpf_employee                         [MONEY],  
----------                                       @designation                          [INT],  
----------                                       @trade                                [INT],  
----------                                       @emp_supervisor                       [INT],  
----------                                       @emp_clsupervisor                     [INT],  
----------                                       @education                            [VARCHAR](50),  
----------               @joining_date                         VARCHAR(20),  
----------                                       @probation_period                     [INT],  
----------                                       @confirmation_date                    VARCHAR(20),  
----------                                       @empgroup                             [INT],  
----------                                       @ot_entitlement                       [CHAR](10),  
----------                                       @termination_date                     VARCHAR(20),  
----------                                       @termination_reason                   [VARCHAR](50),  
----------                                       @pay_frequency                        [VARCHAR](50),  
----------                                       @payrate                              [VARCHAR](100),  
----------                                       @hourlyRate                           FLOAT,  
----------                                       @hourlyRateMode                       VARCHAR(3),  
----------                                       @dailyRateMode                        VARCHAR(3),  
----------                                       @dailyRate                            FLOAT,  
----------                                       @wday_per_week                        FLOAT,  
----------                                       @payment_mode                         [VARCHAR](50),  
----------                                       @email_payslip                        [VARCHAR](50),  
----------                                       @fw_code                              [VARCHAR](50),  
----------                                       @fw_levy                              [MONEY],  
----------                                       @sdf_required                         [CHAR](10),  
----------                                       @wh_tax_pct                           [FLOAT],  
----------                                       @wh_tax_amt                           [MONEY],  
----------                                       @cdac_fund                            [MONEY],  
----------                                       @mbmf_fund                            [MONEY],  
----------                                       @sinda_fund                           [MONEY],  
----------                                       @ecf_fund                             [MONEY],  
----------                                       @cchest_fund                          [MONEY],  
----------                                       @remarks                              VARCHAR(MAX),  
----------                                       @images                               [VARCHAR](250),  
----------                                       @leaveCarryForward                    FLOAT,  
----------                                       @giro_acc_name                        VARCHAR(100),  
----------                                       @groupid                              VARCHAR(128),  
----------                                       @localaddress2                        VARCHAR(50),  
----------                                       @block_no                             VARCHAR(50),  
----------                                       @street_name                          VARCHAR(100),  
----------                                       @unit_no                              VARCHAR(50),  
----------                                       @level_no                             VARCHAR(50),  
----------                                       @foreignaddress1                      VARCHAR(50),  
----------                                       @foreignaddress2                      VARCHAR(50),  
----------                                       @time_card_no                         VARCHAR(50),  
----------                                       @foreignpostalcode                    VARCHAR(50),  
----------                                       @pp_issue_date                        VARCHAR(20),  
----------                                       @leaves_remaining                     FLOAT,  
----------                                       @worker_levy                          VARCHAR(50),  
----------                                       @wp_application_date                  VARCHAR(20),  
----------                                       @emp_ref_type                         INT,  
----------                                       @fund_optout                          INT,  
----------                                       @emp_category                         INT,  
----------                                       @v1rate                               FLOAT,  
----------                                       @v2rate                               FLOAT,  
----------                                       @v3rate                               FLOAT,  
----------                                       @v4rate                               FLOAT,  
----------                                       @batch_no                             INT,  
----------                                       @wp_issue_date                        VARCHAR(20),  
----------                                       @photo_no                             INT,  
----------                                       @wp_number                            VARCHAR(50),  
----------                                       @shipyard_quota                       VARCHAR(50),  
----------                                       @tax_borne_employer                   VARCHAR(50),  
----------                                       @tax_borne_employer_options           VARCHAR(50),  
----------                                       @tax_borne_employer_amount            VARCHAR(50),  
----------                                       @pension_out_singapore                VARCHAR(50),  
----------                                       @pension_out_singapore_amount         VARCHAR(50),  
----------                                       @excess_voluntary_cpf_employer        VARCHAR(50),  
----------                                       @excess_voluntary_cpf_employer_amount VARCHAR(50),  
----------                                       @stock_options                        VARCHAR(50),  
----------                                       @stock_options_amount                 VARCHAR(50),  
----------                                       @benefits_in_kind                     VARCHAR(50),  
----------                                       @benefits_in_kind_amount              VARCHAR(50),  
----------                                       @retirement_benefits                  VARCHAR(50),  
----------                                       @retirement_benefits_fundName         VARCHAR(200),  
----------                                       @retirement_benefits_amount           VARCHAR(50),  
----------                                       @s45_tax_on_directorFee               VARCHAR(50),  
----------                                       @cessation_provision                  VARCHAR(50),  
----------                                       @addr_type                            VARCHAR(50),  
----------                                       @dateofcessationconv                  VARCHAR(50),  
----------                                       @dateofcommencementconv               VARCHAR(50),  
----------                                       @ir8a_year                            VARCHAR(10),  
----------                                       @ot1rate                              FLOAT,  
----------                                       @ot2rate                              FLOAT,  
----------                                       @EmeConPer                            VARCHAR(50),  
----------                                       @EmeConPerRel                         VARCHAR(50),  
----------                                       @EmeConPerPh1                         VARCHAR(50),  
----------                                       @EmeConPerPh2                         VARCHAR(50),  
----------                                       @EmeConPerAdd                         VARCHAR(100),  
----------                                       @EmeConPerRem                         VARCHAR(200),  
----------                                       @bloodgroup                           VARCHAR(50),  
----------                                       @agent_id                             INT,  
----------                                       @mye_cert_id                          INT,  
----------                                       @wp_arrival_date                      VARCHAR(20),  
----------                                       @pay_supervisor                       [INT],  
----------                                       @payrolltype                          [INT],  
----------                                       @compcpffh                            [INT],  
----------                                       @tssupervisor                         [INT],
----------                                       @compfundfh                            [INT],
----------									   @halfsalary [INT])  
----------AS  
----------    BEGIN  
----------        DECLARE @iCountJoinUpdate INT  
----------  
----------        SET @iCountJoinUpdate = 0  
----------  
----------        DECLARE @isEmployeeAliasExist INT  
----------        DECLARE @compid INT  
----------        DECLARE @statusid INT  
----------  
----------        IF Len(Rtrim(@termination_date)) <= 0  
----------            BEGIN  
----------                SELECT @statusid = StatusId  
----------                FROM   UserStatus
----------                WHERE  Upper(Status) = Upper('Active')
----------            END
----------        ELSE
----------            BEGIN
----------                SELECT @statusid = StatusId
----------                FROM   UserStatus
----------                WHERE  Upper(Status) = Upper('Inactive')
----------            END  
----------  
----------        SELECT @compid = company_id  
----------        FROM   employee  
----------        WHERE  emp_code = @emp_code  
----------  
----------        SELECT @isEmployeeAliasExist = COUNT(*)  
----------        FROM   Employee  
----------        WHERE  Company_Id = @compid  
----------           AND Upper(emp_alias) = Upper(Ltrim(Rtrim(@emp_alias)))  
----------           AND emp_code != @emp_code  
----------           AND Len(Ltrim(Rtrim(emp_alias))) > 0  
----------  
----------        IF (@isEmployeeAliasExist = 0)  
----------            BEGIN  
----------                IF @wp_exp_date = '01/01/1900'  
----------                    OR @wp_exp_date = ''  
----------                    SELECT @wp_exp_date = NULL  
----------  
----------                IF @Insurance_expiry = '01/01/1900'  
----------                    OR @Insurance_expiry = ''  
----------                    SELECT @Insurance_expiry = NULL  
----------  
----------                IF @CSOC_expiry = '01/01/1900'  
----------                    OR @CSOC_expiry = ''  
----------                    SELECT @CSOC_expiry = NULL  
----------  
----------                IF @passport_expiry = '01/01/1900'  
----------                    OR @passport_expiry = ''  
----------                    SELECT @passport_expiry = NULL  
----------  
----------                IF @pr_date = '01/01/1900'  
----------                    OR @pr_date = ''  
----------                    SELECT @pr_date = NULL  
----------  
----------                IF @date_of_birth = '01/01/1900'  
----------                    OR @date_of_birth = ''  
----------                    SELECT @date_of_birth = NULL  
----------  
----------                IF @joining_date = '01/01/1900'  
----------                    OR @joining_date = ''  
----------                    SELECT @joining_date = NULL  
----------  
----------                IF @confirmation_date = '01/01/1900'  
----------                    OR @confirmation_date = ''  
----------                    SELECT @confirmation_date = NULL  
----------  
----------                IF @termination_date = '01/01/1900'  
----------                    OR @termination_date = ''  
----------                    SELECT @termination_date = NULL  
----------  
----------                IF @pp_issue_date = '01/01/1900'  
----------                    OR @pp_issue_date = ''  
----------                    SELECT @pp_issue_date = NULL  
----------  
----------                IF @wp_application_date = '01/01/1900'  
----------                    OR @wp_application_date = ''  
----------                    SELECT @wp_application_date = NULL  
----------  
----------                IF @wp_issue_date = '01/01/1900'  
----------                    OR @wp_issue_date = ''  
----------                    SELECT @wp_issue_date = NULL  
----------  
----------                IF @wp_arrival_date = '01/01/1900'  
----------                    OR @wp_arrival_date = ''  
----------                    SELECT @wp_arrival_date = NULL  
----------  
----------                -- TIMECARD NO VALIDATION START                                                                
----------                IF @time_card_no <> ''  
----------                    BEGIN  
----------                        DECLARE @timeCardCount INT  
----------  
----------                        SET @timeCardCount = 0  
----------  
----------                        SELECT @timeCardCount = COUNT(time_card_no)  
----------                        FROM   employee  
----------                        WHERE  company_id = @compid  
----------                           AND emp_code <> @emp_code  
----------                           AND time_card_no = @time_card_no  
----------  
----------                        IF @timeCardCount > 0  
----------                            BEGIN  
----------                                RETURN 'TIMECARD ALREADY IN USE'  
----------                            END  
----------                    END  
----------  
----------                -- TIMECARD VALIDATION END                                    
------------santy               
----------                SELECT @iCountJoinUpdate = Isnull(COUNT(Emp_Code), 0)  
----------                FROM   Employee  
----------                WHERE  Emp_Code = @emp_code  
----------                   AND CONVERT(DATETIME, Joining_Date, 103) = CONVERT(DATETIME, @joining_date, 103)  
----------  
----------                UPDATE employee  
----------                SET    [payrate] = Encryptbyasymkey(Asymkey_id('AsymKey'), @payrate),  
----------                       [statusid] = @statusid,  
----------                       [emp_name] = @emp_name,  
----------                       [emp_alias] = @emp_alias,  
----------                       [nationality_id] = @nationality,  
----------                       [emp_type] = @emp_type,  
----------                       [ic_pp_number] = @ic_pp_number,  
----------                       [wp_exp_date] = CONVERT(DATETIME, @wp_exp_date, 103),  
----------                       -- [wp_exp_date]=@wp_exp_date ,                                                                                                
----------                       [pr_date] = CONVERT(DATETIME, @pr_date, 103),  
----------                       --[pr_date]= @pr_date,                                                                                                   
----------                       [address] = @address,  
----------                       [country_id] = @country,  
----------                       [postal_code] = @postal_code,  
----------                       [phone] = @phone,  
----------                       [hand_phone] = @hand_phone,  
----------                       [email] = @email,  
----------                       emp_lname = @emp_lname,  
----------                       empcpftype = @empcpftype,  
----------                       Insurance_number = @Insurance_number,  
----------                       Insurance_expiry = CONVERT(DATETIME, @Insurance_expiry, 103),  
----------                       --Insurance_expiry=@Insurance_expiry,                                                                                               
----------                       CSOC_number = @CSOC_number,  
----------                       --CSOC_expiry=@CSOC_expiry,                                      
----------                       CSOC_expiry = CONVERT(DATETIME, @CSOC_expiry, 103),  
----------                       passport = @passport,  
----------                       passport_expiry = CONVERT(DATETIME, @passport_expiry, 103),  
----------                       --passport_expiry=@passport_expiry,                                                                                                 
----------                       [sex] = @sex,  
----------                       [religion_id] = @religion,  
----------                       [race_id] = @race,  
----------                       [marital_status] = @marital_status,  
----------                       [place_of_birth] = @place_of_birth,  
----------                       [date_of_birth] = CONVERT(DATETIME, @date_of_birth, 103),  
----------                       --[date_of_birth]=@date_of_birth,                                                                                                
----------                       [income_taxid] = @income_taxid,  
----------                       --@cpf_acct_number  [varchar](50),                                                                                                   
----------                       [employee_cpf_acct] = @employee_cpf_acct,  
----------                       [employer_cpf_acct] = @employer_cpf_acct,  
----------                       [giro_bank] = @giro_bank,  
----------                       [giro_code] = @giro_code,  
----------                       --[cpf_acct_number],                                                                                                   
----------                       [giro_branch] = @giro_branch,  
----------                       [giro_acct_number] = @giro_acct_number,  
----------                       [cpf_entitlement] = @cpf_entitlement,  
----------                       [cpf_employer] = @cpf_employer,  
----------                       [dept_id] = @department,  
----------                       [cpf_employee] = @cpf_employee,  
----------                       [desig_id] = @designation,  
----------                       [trade_id] = @trade,  
----------                       [emp_supervisor] = @emp_supervisor,  
----------                       [education] = @education,  
----------                       [joining_date] = CONVERT(DATETIME, @joining_date, 103),  
----------                       --[joining_date]=@joining_date,                                                                                                   
----------                       --[title],                                                                                                  
----------                       [probation_period] = @probation_period,  
----------                       [confirmation_date] = CONVERT(DATETIME, @confirmation_date, 103),  
----------                       --[confirmation_date]=@confirmation_date,                                                                                                  
----------                       [emp_group_id] = @empgroup,  
----------                       [ot_entitlement] = @ot_entitlement,  
----------                       [termination_date] = CONVERT(DATETIME, @termination_date, 103),  
----------                       --[termination_date]=@termination_date,                                                                                   
----------                       [termination_reason] = @termination_reason,  
----------                       [pay_frequency] = Rtrim(@pay_frequency),  
----------                       [payment_mode] = @payment_mode,  
----------                       [email_payslip] = @email_payslip,  
----------                       [fw_code] = @fw_code,  
----------                       [fw_levy] = @fw_levy,  
----------                       [sdf_required] = @sdf_required,  
----------                       [cdac_fund] = @cdac_fund,  
----------                       [mbmf_fund] = @mbmf_fund,  
----------                       [sinda_fund] = @sinda_fund,  
----------                       [ecf_fund] = @ecf_fund,  
----------                       [cchest_fund] = @cchest_fund,  
----------                       [remarks] = @remarks,  
----------                       [images] = @images,  
----------                       [leave_carry_forward] = @leaveCarryForward,  
----------                       [giro_acc_name] = @giro_acc_name,  
----------                       [groupid] = @groupid,  
----------                       [localaddress2] = @localaddress2,  
----------                       [foreignaddress1] = @foreignaddress1,  
----------                       [foreignaddress2] = @foreignaddress2,  
----------                       [time_card_no] = @time_card_no,  
----------                       [foreignpostalcode] = @foreignpostalcode,  
----------                       [wh_tax_pct] = @wh_tax_pct,  
----------                       [wh_tax_amt] = @wh_tax_amt,  
----------                       --[pp_issue_date]= @pp_issue_date,                                                                                  
----------                       [pp_issue_date] = CONVERT(DATETIME, @pp_issue_date, 103),  
----------                       [leaves_remaining] = @leaves_remaining,  
----------                       [worker_levy] = @worker_levy,  
----------                       [wp_application_date] = CONVERT(DATETIME, @wp_application_date, 103),  
----------                       [hourly_rate_mode] = @hourlyRateMode,  
----------                       [hourly_rate] = @hourlyRate,  
----------                       [daily_rate_mode] = @dailyRateMode,  
----------                       [daily_rate] = @dailyRate,  
----------                       [wdays_per_week] = @wday_per_week,  
----------                       [emp_ref_no] = @emp_ref_type,  
----------                       [fund_optout] = @fund_optout,  
----------                       [emp_category] = @emp_category,  
----------                       [emp_clsupervisor] = @emp_clsupervisor,  
----------                       [v1rate] = @v1rate,  
----------                       [v2rate] = @v2rate,  
----------                       [v3rate] = @v3rate,  
----------                       [v4rate] = @v4rate,  
----------                       [batch_no] = @batch_no,  
----------                       [wp_issue_date] = CONVERT(DATETIME, @wp_issue_date, 103),  
----------                       [wp_arrival_date] = CONVERT(DATETIME, @wp_arrival_date, 103),  
----------                       [photo_no] = @photo_no,  
----------                       [wp_number] = @wp_number,  
----------                       [shipyard_quota] = @shipyard_quota,  
----------                       [block_no] = @block_no,  
----------                       [street_name] = @street_name,  
----------                       [level_no] = @level_no,  
----------                       [unit_no] = @unit_no,  
----------        [ot1rate] = @ot1rate,  
----------                       [ot2rate] = @ot2rate,  
----------                       [eme_cont_per] = @EmeConPer,  
----------                       [eme_cont_per_rel] = @EmeConPerRel,  
----------                       [eme_cont_per_ph1] = @EmeConPerPh1,  
----------                       [eme_cont_per_ph2] = @EmeConPerPh2,  
----------                       [eme_cont_per_add] = @EmeConPerAdd,  
----------                       [eme_cont_per_rem] = @EmeConPerRem,  
----------                       [bloodgroup] = @bloodgroup,  
----------                       [agent_id] = @agent_id,  
----------                       [mye_cert_id] = @mye_cert_id,  
----------                       [pay_supervisor] = @pay_supervisor,  
----------                       [payrolltype] = @payrolltype,  
----------                       [ComputeCPFFH] = @compcpffh,  
----------					   [timesupervisor] = @tssupervisor, 
----------					   [ComputeFundFH] = @compfundfh,
----------					   [Halfsalary] = @halfsalary
----------                WHERE  [emp_code] = @emp_code  
----------  
----------                DECLARE @leavemodel INT  
----------  
----------                SELECT @leavemodel = c.leave_model  
----------                FROM   dbo.company AS c  
----------                       INNER JOIN Employee e ON c.Company_ID = e.Company_ID  
----------                WHERE  e.emp_code = @emp_code  
----------  
----------                IF (@iCountJoinUpdate <= 0  
----------                    AND (@leavemodel = 4  
----------                          OR @leavemodel = 6  
----------                          OR @leavemodel = 8  
----------                          OR @leavemodel = 3))  
----------                    BEGIN  
----------                        EXEC Sp_yosleavesallowed @emp_code,0,1  
----------                    END  
----------  
----------                --            IF ( @payrate != '-999999999' )            
----------                --              BEGIN            
----------                --                  UPDATE employee            
----------                --                  SET    [payrate] = Encryptbyasymkey(Asymkey_id('AsymKey'), @payrate)            
----------                --                  WHERE  [emp_code] = @emp_code            
----------                --              END            
----------                DECLARE @row_id BIGINT  
----------  
----------                SET @row_id = 0  
----------  
----------                SELECT @row_id = Isnull(row_id, 0)  
----------                FROM   leaves_annual  
----------                WHERE  emp_id = @emp_code  
----------                   AND leave_year = Datepart(yyyy, Getdate())  
----------  
----------                IF @row_id < 0  
----------                    -- BEGIN                                                          
----------                    --  update leaves_annual set leave_remaining = @leaves_remaining where row_id = @row_id                                                          
----------                    -- END                                                            
----------                    --ELSE                                                          
----------                    BEGIN  
----------                        INSERT INTO leaves_annual  
----------                                    (emp_id,leave_year,leave_remaining)  
----------                        VALUES      (@emp_code,Datepart(yyyy, Getdate()),@leaves_remaining)  
----------                    END  
----------  
----------                DECLARE @rowid BIGINT  
----------  
----------                SET @rowid = 0  
----------  
----------                SELECT @rowid = Isnull(row_id, 0)  
----------                FROM   employee_ir8a  
----------                WHERE  emp_id = @emp_code  
----------                   AND ir8a_year = @ir8a_year  
----------  
----------                IF @rowid > 0  
----------                    BEGIN  
----------                        UPDATE employee_ir8a  
----------                        SET    tax_borne_employer = @tax_borne_employer,  
----------                               tax_borne_employer_options = @tax_borne_employer_options,  
----------                               tax_borne_employer_amount = CASE  
----------                                                             WHEN Len(@tax_borne_employer_amount) > 0 THEN CAST(@tax_borne_employer_amount AS FLOAT)  
----------                                                             ELSE 0  
----------                                                           END,  
----------                               pension_out_singapore = @pension_out_singapore,  
----------                               pension_out_singapore_amount = CASE  
----------                                                                WHEN Len(@pension_out_singapore_amount) > 0 THEN CAST(@pension_out_singapore_amount AS FLOAT)  
----------                                                                ELSE 0  
----------                                                              END,  
----------                               excess_voluntary_cpf_employer = @excess_voluntary_cpf_employer,  
----------                               excess_voluntary_cpf_employer_amount = CASE  
----------                                                                        WHEN Len(@excess_voluntary_cpf_employer_amount) > 0 THEN CAST(@excess_voluntary_cpf_employer_amount AS FLOAT)  
----------                                                                        ELSE 0  
----------                                                                      END,  
----------                               stock_options = @stock_options,  
----------                               stock_options_amount = CASE  
----------                                                        WHEN Len(@stock_options_amount) > 0 THEN CAST(@stock_options_amount AS FLOAT)  
----------                                                        ELSE 0  
----------                                                      END,  
----------                               benefits_in_kind = @benefits_in_kind,  
----------                               benefits_in_kind_amount = CASE  
----------                                                           WHEN Len(@benefits_in_kind_amount) > 0 THEN CAST(@benefits_in_kind_amount AS FLOAT)  
----------                                                           ELSE 0  
----------                                                         END,  
----------                               retirement_benefits = @retirement_benefits,  
----------                               retirement_benefits_fundName = @retirement_benefits_fundName,  
----------                               retirement_benefits_amount = CASE  
----------                                                              WHEN Len(@retirement_benefits_amount) > 0 THEN CAST(@retirement_benefits_amount AS FLOAT)  
----------                                                              ELSE 0  
----------                                                            END,  
----------                               s45_tax_on_directorFee = @s45_tax_on_directorFee,  
----------                               cessation_provision = @cessation_provision,  
----------                               addr_type = @addr_type,  
----------                               dateofcessation = CASE  
----------                                                   WHEN Len(@dateofcessationconv) > 0 THEN CONVERT(DATETIME, @dateofcessationconv, 103)  
----------                                                   ELSE NULL  
----------                                                 END,  
----------                               dateofcommencement = CASE  
----------                                                      WHEN Len(@dateofcommencementconv) > 0 THEN CONVERT(DATETIME, @dateofcommencementconv, 103)  
----------                                                      ELSE NULL  
----------                                                    END  
----------                        WHERE  Emp_id = @emp_code  
----------                           AND ir8a_year = @ir8a_year  
----------                    END  
----------                ELSE  
----------                    BEGIN  
----------                        INSERT INTO employee_ir8a  
----------                                    (emp_id,ir8a_year,tax_borne_employer,tax_borne_employer_options,tax_borne_employer_amount,pension_out_singapore,pension_out_singapore_amount,excess_voluntary_cpf_employer,excess_voluntary_cpf_employer_amount,stock_options,stock_options_amount,benefits_in_kind,benefits_in_kind_amount,retirement_benefits,retirement_benefits_fundName,retirement_benefits_amount,s45_tax_on_directorFee,cessation_provision,addr_type,dateofcessation,dateofcommencement)  
----------                        VALUES      (@emp_code,@ir8a_year,@tax_borne_employer,@tax_borne_employer_options,CASE  
----------                                                                                                            WHEN Len(@tax_borne_employer_amount) > 0 THEN CAST(@tax_borne_employer_amount AS FLOAT)  
---------- ELSE 0  
----------                                                                                                          END,@pension_out_singapore,CASE  
----------                                                                                                                                       WHEN Len(@pension_out_singapore_amount) > 0 THEN CAST(@pension_out_singapore_amount AS FLOAT)  
----------                                                                                                                                       ELSE 0  
----------                                                                                                                                     END,@excess_voluntary_cpf_employer,CASE  
----------                                                                                                                                                                          WHEN Len(@excess_voluntary_cpf_employer_amount) > 0 THEN CAST(@excess_voluntary_cpf_employer_amount AS FLOAT)  
----------                                                                                                                                                                          ELSE 0  
----------                                                                                                                                                                        END,@stock_options,CASE  
----------                                                                                                                                                                                             WHEN Len(@stock_options_amount) > 0 THEN CAST(@stock_options_amount AS FLOAT)  
----------                                                                                                                                                                                             ELSE 0  
----------                                                                                                                                                                                           END,@benefits_in_kind,CASE  
----------                                                                                                                                                                                                                   WHEN Len(@benefits_in_kind_amount) > 0 THEN 
----------CAST(@benefits_in_kind_amount AS FLOAT)  
----------                                                                                                                                                                                                                   ELSE 0  
----------                                                                                                                                                                                                                 END,@retirement_benefits,@retirement_benefits_fundName,CASE  
----------                                                                                                                                                                                                                                                               
----------           WHEN Len(@retirement_benefits_amount) > 0 THEN CAST(@retirement_benefits_amount AS FLOAT)  
----------                                                                                                                                                                                                                                                               
----------           ELSE 0  
----------                                                                                                                                                                                                                                                               
----------         END,@s45_tax_on_directorFee,@cessation_provision,@addr_type,CASE  
----------                                                                                                   WHEN Len(@dateofcessationconv) > 0 THEN CONVERT(DATETIME, @dateofcessationconv, 103)  
----------                                                                                                                                                                                                                                                               
----------                                                                       ELSE NULL  
----------                                                                                                                                                                                                                                                               
----------                                                                     END,CASE  
----------                                                                                                                                                                                                                                                               
----------                                                                           WHEN Len(@dateofcommencementconv) > 0 THEN CONVERT(DATETIME, @dateofcommencementconv, 103)  
----------                                                                                                                                                                                                                                                               
----------                                                                           ELSE NULL  
----------                                                                                                                                                                                                                                                               
----------                                                                         END)  
----------                    END  
----------            END  
----------    END   
----------GO
----------Merging 9.0
--[sp_online_giro]  2,43,2010,40,'987654321'
----------CREATE PROCEDURE [dbo].[Sp_online_giro] --1,12,2008,9,'12345678901'      
----------@company_id INT,  
----------@month      INT,  
----------@year       INT,  
----------@bank       INT,  
----------@bankaccno  VARCHAR(150),  
----------@emp_list   VARCHAR(3000) = NULL,
----------@valuedate INT  
----------AS  
----------  SET NOCOUNT ON  
----------    
------------  DECLARE @startdtsub DATETIME  
------------  DECLARE @enddtsub DATETIME  
------------    
------------  SELECT @startdtsub = CONVERT(DATETIME, PaySubStartDate, 103),@enddtsub = CONVERT(DATETIME, PaySubEndDate, 103)  
------------  FROM   PayrollMonthlyDetail  
------------  WHERE  ROWID = @month  
------------    
------------  IF @emp_list IS NULL  
------------      OR @emp_list = ''  
------------      BEGIN  
------------          SELECT d.emp_id,Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') emp_name,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.basic_pay))) payrate,d.total_additions total_additions,d.total_deductions total_deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.netpay))) netpay,e.giro_bank giro_bank,e.giro_acct_number giro_acct_number,(SELECT giro_branch  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                            FROM   employee  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                            WHERE  emp_code = d.emp_id) branch_number,(SELECT value_date  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                       FROM   girobanks  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                       WHERE  [id] = d.pay_mode) value_date,(SELECT bank_accountno  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             FROM   girobanks  
------------        WHERE  [id] = d.pay_mode) bank_accountno,(SELECT [desc]  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                 
------------                                        FROM   bank  
------------                                                                                                                                                                                                                                                            
----------     
------------                                                                                                                                                                                                                                                             
----------    
------------                                        WHERE  bank_code = (SELECT ed.giro_bank  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                                            FROM   employee ed  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                                            WHERE  ed.emp_code = e.emp_code)) bank_name,(SELECT giro_acc_name  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                         FROM   employee  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                         WHERE  emp_code = d.emp_id) account_name,(SELECT giro_acc_name  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                               FROM   girobanks  
------------                                                                            
------------                                                                                                                                                                                                                                                            
----------     
------------                                                                                                                                                   WHERE  [id] = d.pay_mode) payeebankname  
------------          FROM   prepare_payroll_hdr h,prepare_payroll_detail d,employee e  
------------          WHERE  h.trx_id = d.trx_id  
------------             AND d.emp_id = e.emp_code  
------------             --AND MONTH(start_period) = @month    
------------             AND (h.start_period >= @startdtsub  
------------                  AND h.end_period <= @enddtsub)  
------------             AND YEAR(start_period) = @year  
------------             AND d.status = 'G'  
------------             AND e.payment_mode = (SELECT [id]  
------------                                   FROM   girobanks  
------------                                   WHERE  bank_id = (SELECT id  
------------                                                     FROM   bank  
------------                                                     WHERE  id = @bank)  
------------                                      AND bank_accountno = @bankaccno  
------------                                      AND company_id = @company_id)  
------------             AND e.company_id = @company_id  
------------      END  
------------  ELSE  
------------      BEGIN  
------------          DECLARE @pointer INT  
------------          DECLARE @coma_loc INT  
------------          DECLARE @emp_id INT  
------------    
------------          SET @pointer = 1  
------------          SET @coma_loc = Charindex(',', @emp_list, @pointer)  
------------    
------------          CREATE TABLE #temp  
------------              (  
------------                   emp_id INT  
------------              )  
------------    
------------          WHILE @coma_loc > 0  
------------              BEGIN  
------------                  SET @emp_id = Substring(@emp_list, @pointer, (@coma_loc - @pointer))  
------------                  SET @pointer = @coma_loc + 1  
------------    
------------                  INSERT INTO #temp  
------------                  VALUES      (@emp_id)  
------------    
------------                  SET @coma_loc = Charindex(',', @emp_list, @pointer)  
------------              END  
------------    
------------          SELECT d.emp_id,Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') emp_name,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.basic_pay))) payrate,d.total_additions total_additions,d.total_deductions total_deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.netpay))) netpay,e.giro_bank giro_bank,e.giro_acct_number giro_acct_number,(SELECT giro_branch  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                            FROM   employee  
------------       WHERE  emp_code = d.emp_id) branch_number,(SELECT value_date  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                       FROM   girobanks  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                  WHERE  [id] = d.pay_mode) value_date,(SELECT bank_accountno  
------------                                                                                                                                                                                                                                                            
----------     
------------                                                                                                                                                                                                                                                             FROM   girobanks  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             WHERE  [id] = d.pay_mode) bank_accountno,(SELECT giro_acc_name  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                        FROM   employee  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                        WHERE  emp_code = d.emp_id) account_name,(SELECT giro_acc_name  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                  FROM   girobanks  
------------                                                                                                                                                                                                                                                             
----------    
------------                                                                                                                                                                                                                                                             
----------    
------------                                                           WHERE  [id] = d.pay_mode) payeebankname  
------------          FROM   prepare_payroll_hdr h,prepare_payroll_detail d,employee e  
------------          WHERE  h.trx_id = d.trx_id  
------------             AND d.emp_id = e.emp_code  
------------             --AND MONTH(start_period) = @month    
------------             AND (h.start_period >= @startdtsub  
------------          AND h.end_period <= @enddtsub)  
------------             AND YEAR(start_period) = @year  
------------             AND d.status = 'G'  
------------             AND e.payment_mode = (SELECT [id]  
------------                                   FROM   girobanks  
------------                                   WHERE  bank_id = (SELECT id  
------------                                                     FROM   bank  
------------                                                     WHERE  id = @bank)  
------------                                      AND bank_accountno = @bankaccno  
------------                                      AND company_id = @company_id)  
------------             AND e.company_id = @company_id  
------------             AND d.emp_id IN (SELECT emp_id  
------------                              FROM   #temp)  
------------  
------------      END  
------------  
----------  
---------- Exec [sp_get_giro_emp]  @company_id, @year, @month, @bank, @bankaccno,@valuedate, @emp_list  
----------GO
-------merging 9.0
--sp_get_giro_emp 2,2010, 43, 40, '987654321'
--------CREATE PROCEDURE [dbo].[Sp_get_giro_emp] @company_id INT,
--------                                        @year       INT,
--------                                        @month      INT,
--------                                        @bank       INT,
--------                                        @bankaccno  VARCHAR(150),
--------                                        @valuedate  INT,
--------                                        @emp_list   VARCHAR(3000)=NULL
--------AS
--------  SET NOCOUNT ON
--------
--------  DECLARE @startdtsub DATETIME
--------  DECLARE @enddtsub DATETIME
--------
--------  SELECT @startdtsub = CONVERT(DATETIME, PaySubStartDate, 103),@enddtsub = CONVERT(DATETIME, PaySubEndDate, 103)
--------  FROM   PayrollMonthlyDetail
--------  WHERE  ROWID = @month
--------
--------    BEGIN
--------        SELECT d.emp_id,Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') emp_name,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.basic_pay))) payrate,d.total_additions total_additions,d.total_deductions total_deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), d.netpay))) netpay,d.pay_mode,e.giro_bank,e.giro_acc_name,e.giro_acct_number,e.giro_branch,e.dept_id
--------        INTO   #EmpTem
--------        FROM   prepare_payroll_hdr h,prepare_payroll_detail d,employee e
--------        WHERE  h.trx_id = d.trx_id
--------           AND d.emp_id = e.emp_code
--------           AND (h.start_period = @startdtsub
--------                AND h.end_period = @enddtsub)
--------           AND YEAR(start_period) = @year
--------           AND d.status = 'G'
--------           AND e.company_id = @company_id
--------    END
--------
--------  IF (Len(@emp_list) > 0)
--------      BEGIN
--------          DECLARE @sql AS VARCHAR(4000)
--------
--------          SET @sql = 'Delete From #EmpTem Where Emp_ID Not in(' + Substring(@emp_list, 1, Len(@emp_list) - 1) + ')'
--------
--------          EXEC (@sql)
--------      END
--------  SELECT R.Emp_ID emp_id,E.Emp_Name,E.Payrate,E.Total_Additions,E.Total_Deductions,(E.Netpay * R.Percentage) / 100 NetPay,E.Giro_Bank,
--------	R.Giro_Acct_Number,E.giro_branch Branch_Number,value_date,Bank_AccountNo,Bank_Name,Account_Name,PayeeBankName,Percentage,Bank_ID,E.Netpay GrossPay,D.DeptName
--------  FROM   (SELECT R.Emp_ID,B1.Bank_Code Giro_Bank,giro_acct_number Giro_Acct_Number,Bank_Branch Branch_Number,@valuedate value_date,Bank_AccountNo,Bank_Name,R.Giro_Acc_Name Account_Name,B2.[Desc] PayeeBankName,R.Perc Percentage,G.Bank_ID
--------          FROM   (SELECT E.Emp_ID,E.Pay_Mode,B.[Desc] Bank_Name,giro_acc_name,Giro_Acct_Number,100 - Isnull(R.Perc, 0) Perc
--------                  FROM   #EmpTem E
--------                         LEFT OUTER JOIN (SELECT Emp_ID,SUM(Percentage) Perc
--------                                          FROM   EmployeeBankInfo
--------                                          GROUP  BY Emp_ID) R ON E.Emp_ID = R.Emp_ID
--------                         LEFT OUTER JOIN Bank B ON E.Giro_Bank = B.Bank_Code) R
--------                 INNER JOIN Girobanks G ON R.Pay_Mode = G.ID
--------                 LEFT OUTER JOIN Bank B1 ON R.Pay_Mode = G.Bank_ID
--------                 LEFT OUTER JOIN Bank B2 ON G.bank_id = B2.ID
--------) R
--------         INNER JOIN #EmpTem E ON R.Emp_ID = E.Emp_ID
--------         LEFT OUTER JOIN Department D ON E.dept_id = D.id
--------  WHERE  Bank_ID = @bank
--------     AND Bank_AccountNo = @bankaccno
--------Union
--------  SELECT R.Emp_ID emp_id,E.Emp_Name,E.Payrate,E.Total_Additions,E.Total_Deductions,(E.Netpay * R.Percentage) / 100 NetPay,
--------	R.Giro_Bank,R.Giro_Acct_Number,Branch_Number,value_date,Bank_AccountNo,Bank_Name,Account_Name,PayeeBankName,Percentage,Bank_ID,E.Netpay GrossPay,D.DeptName
--------  FROM   (--SELECT R.Emp_ID,B1.Bank_Code Giro_Bank,giro_acct_number Giro_Acct_Number,Bank_Branch Branch_Number,@valuedate value_date,Bank_AccountNo,Bank_Name,R.Giro_Acc_Name Account_Name,B2.[Desc] PayeeBankName,R.Perc Percentage,G.Bank_ID
----------          FROM   (SELECT E.Emp_ID,E.Pay_Mode,B.[Desc] Bank_Name,giro_acc_name,Giro_Acct_Number,100 - Isnull(R.Perc, 0) Perc
----------                  FROM   #EmpTem E
----------                         LEFT OUTER JOIN (SELECT Emp_ID,SUM(Percentage) Perc
----------                                          FROM   EmployeeBankInfo
----------                                          GROUP  BY Emp_ID) R ON E.Emp_ID = R.Emp_ID
----------                         LEFT OUTER JOIN Bank B ON E.Giro_Bank = B.Bank_Code) R
----------                 INNER JOIN Girobanks G ON R.Pay_Mode = G.ID
----------                 INNER JOIN Bank B1 ON R.Pay_Mode = B1.ID
----------                 INNER JOIN Bank B2 ON G.bank_id = B2.ID
----------          UNION
--------          SELECT Emp_ID,B1.Bank_Code Giro_Bank,F.Giro_Acct_Number,F.Giro_Branch Branch_Number,@valuedate value_date,G1.Bank_AccountNo,B1.[Desc] Bank_Name,F.Giro_Acc_Name Account_Name,B2.[Desc] PayeeBankName,Percentage,G1.Bank_ID
--------          FROM   EmployeeBankInfo F
--------                 INNER JOIN Bank B1 ON F.Giro_Bank_ID = B1.ID
--------                 INNER JOIN GiroBanks G1 ON F.Payment_From = G1.ID
--------                 INNER JOIN Bank B2 ON G1.bank_id = B2.ID) R
--------         INNER JOIN #EmpTem E ON R.Emp_ID = E.Emp_ID
--------         LEFT OUTER JOIN Department D ON E.dept_id = D.id
--------  WHERE  Bank_ID = @bank
--------     AND Bank_AccountNo = @bankaccno
--------
--------  DROP TABLE #EmpTem 
--------
--------GO
--------Merging 9.0
--Sp_cpf_select 11,2010,2,'199305457N-PTE-01'  
--------CREATE PROCEDURE [dbo].[Sp_cpf_select] --1,2009,17                                        
--------@month     INT,
--------@year      INT,
--------@companyid INT,
--------@csnno     VARCHAR(36)
--------AS
--------    BEGIN
--------        SELECT Emp_Code,Emp_Name,Employee_Cpf_Acct,SUM(Gross) Gross,SUM(CpfAmount) CpfAmount,SUM(EmpCPF) EmpCPF,SUM(EmployerCPF) EmployerCPF,Fund_Type,SUM(Fund_Amount) Fund_Amount,SUM(SDL) SDL
--------        Into #Temp1 FROM   (SELECT b.emp_code,Isnull(b.emp_name, '') + ' ' + Isnull(b.emp_lname, '') 'emp_name',b.employee_cpf_acct,TOTAL_GROSS 'Gross',CONVERT(NUMERIC(18, 2), cpfamount) cpfamount,CONVERT(NUMERIC(18, 2), empcpf) empcpf,CONVERT(NUMERIC(18, 2), employercpf) employercpf,fund_type,CONVERT(NUMERIC(18, 2), fund_amount) fund_amount,sdl
--------                FROM   prepare_payroll_detail a,employee b,prepare_payroll_hdr c
--------                WHERE  a.emp_id = b.emp_code
--------                   AND a.status = 'G'
--------                   AND MONTH(c.start_period) = @month
--------                   AND YEAR(c.start_period) = @year
--------                   AND a.trx_id = c.trx_id
--------                   AND a.status = 'G'
--------                   AND a.emp_id IN (SELECT emp_code
--------                                    FROM   employee
--------                                    WHERE  company_id = @companyid
--------                                       AND employer_cpf_acct = @csnno)) R
--------        GROUP  BY Emp_Code,Emp_Name,Employee_Cpf_Acct,Fund_Type
--------        ORDER  BY EMP_NAME,Fund_type DESC
--------
----------			Select D.Emp_Code,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')) 'emp_name',D.FundType,Em.Employee_Cpf_Acct,Sum(Trx_Amount) Trx_Amount
----------			Into #Temp2 From (
----------				Select ED.Emp_Code,ED.Trx_Amount,
----------				FundType = Case
----------						When (ED.FundType=1 OR ED.FundType=5) Then 'CDAC'  
----------						When (ED.FundType=2 OR ED.FundType=6) Then 'ECF'  
----------						When (ED.FundType=3 OR ED.FundType=7) Then 'MBMF'  
----------						When (ED.FundType=4 OR ED.FundType=8) Then 'SINDA'  
----------						END
----------				From Emp_Deductions ED Where
----------				ED.status = 'L'
----------				AND MONTH(ED.trx_period) = @month
----------				AND YEAR(ED.trx_period) = @year
----------			) D Inner Join Employee Em On D.Emp_Code = Em.Emp_Code Group By D.Emp_Code,D.FundType,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')),Em.Employee_Cpf_Acct
--------
--------
--------Select Emp_Name,Employee_Cpf_Acct,Gross,CpfAmount,EmpCPF,EmployerCPF,Fund_Type,Fund_Amount,SDL From #Temp1
--------
--------Drop Table #Temp1
--------END 
--------GO
--------Merging 9.0
--------CREATE PROC [dbo].[Sp_approvemypayroll] @company_id INT,  
--------                                     @month      INT,  
--------                                     @year       INT,  
--------                                     @UserID     INT,  
--------                                     @Status     VARCHAR(1)  
--------AS  
--------  DECLARE @ID AS INT  
--------  DECLARE @WorkFlowID AS INT  
--------  DECLARE @RowID AS INT  
--------  DECLARE @DATEINYEAR TABLE (  
--------      ROWID           INT,  
--------      Emp_Code        INT,  
--------      [Year]          INT,  
--------      [Month]         INT,  
--------      [MonthName]     VARCHAR(100),  
--------      PayStartDate    DATETIME,  
--------      PayEndDate      DATETIME,  
--------      PaySubStartDate DATETIME,  
--------      PaySubEndDate   DATETIME,  
--------      PayStartDay     INT,  
--------      PayEndDay       INT,  
--------      PaySubStartDay  INT,  
--------      PaySubEndDay    INT,  
--------      ISEOM           VARCHAR(3))  
--------    
--------   
--------  INSERT @DATEINYEAR  
--------         (ROWID,Emp_Code,[Year],[Month],[MonthName],PayStartDate,PayEndDate,PaySubStartDate,PaySubEndDate,PayStartDay,PayEndDay,PaySubStartDay,PaySubEndDay,ISEOM)  
--------  EXEC Sp_getpayrollmonth @month,0,0  
--------    
--------  --SELECT trx_id,emp_id,(SELECT Isnull(emp_name, '') + ' ' + Isnull(emp_lname, '') 'emp_name'    
--------  --FROM   employee    
--------  --WHERE  emp_code = de.emp_id) emp_name,(SELECT DeptName    
--------  --FROM   Department    
--------  --WHERE  company_id = @company_id    
--------  --AND id = (SELECT dept_id    
--------  --FROM   employee    
--------  --WHERE  emp_code = de.emp_id)) DeptName,    
--------  --CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,AdditionsWONH = CASE    
--------  --WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0    
--------  --ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))    
--------  --END,(CONVERT(NUMERIC(18, 2), total_additions)) Additions,CONVERT(NUMERIC(18, 2), total_deductions) Deductions,CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay,OT1Rate,OT2Rate,OT1_wh,OT2_wh,CONVERT(NUMERIC(18, 2), Ot1_e) Ot1_e,CONVERT(NUMERIC(18, 2), OT2_e) OT2_e,wdays,OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount,  
--------  --Isnull((SELECT Pay_supervisor FROM   employee WHERE  emp_code = de.emp_id), 0) Pay_supervisor,    
--------  --(SELECT Isnull(email, '') FROM   employee WHERE  emp_code = de.emp_id) email,    
--------  --CONVERT(NUMERIC(18, 2), NH_e) NH_e     
--------  --INTO   #EmployeeTemp    
--------  --FROM   prepare_payroll_detail de    
--------  --WHERE  emp_id IN (SELECT emp_code    
--------  --                FROM   employee    
--------  --                WHERE  company_id = @company_id)    
--------  -- AND [status] = @Status    
--------  -- AND trx_id IN (SELECT trx_id    
--------  --                FROM   prepare_payroll_hdr    
--------  --                WHERE  (start_period >= (SELECT PaySubStartDate    
--------  --                                         FROM   @DATEINYEAR)    
--------  --                        AND end_period <= (SELECT PaySubEndDate    
--------  --                                           FROM   @DATEINYEAR))    
--------  --                   AND YEAR(start_period) = @year)    
--------  --ORDER  BY emp_name    
--------    
--------SELECT pd.trx_id,pd.emp_id,REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '') emp_name,de.deptname,em.Pay_supervisor,em.password,em.email,em.email_payslip,  
--------CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,  
--------AdditionsWONH = CASE  
-------- WHEN (CONVERT(NUMERIC(18, 2), total_additions) - Isnull(NH_e, 0)) < 0 THEN 0  
-------- ELSE CONVERT(NUMERIC(18, 2), Isnull(total_additions, 0)-Isnull(NH_e, 0))  
-------- END,  
--------CONVERT(NUMERIC(18, 2), NH_e) NH_e,  
--------CONVERT(NUMERIC(18, 2), pd.Ot1_e) Ot1_e,  
--------CONVERT(NUMERIC(18, 2), pd.OT2_e) OT2_e,  
--------(CONVERT(NUMERIC(18, 2), total_additions)) Additions,  
--------CONVERT(NUMERIC(18, 2), total_deductions) Deductions,  
--------CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay, Time_Card_No  
----------,pd.OT1Rate,pd.OT2Rate,pd.OT1_wh,pd.OT2_wh,    
----------wdays,pd.OT_entitlement,cpfAdd_Ordinary,cpfAdd_Additional,empcpf,employercpf,cpfAmount,    
----------pd.empCpfType,pr_years,fund_type,fund_amount,status,unpaid_leaves,unpaid_leaves_amount    
--------  INTO   #EmployeeTemp  
--------  FROM   prepare_payroll_hdr ph  
--------         INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id  
--------         INNER JOIN Employee em ON pd.emp_id = em.emp_code  
--------         LEFT OUTER JOIN Department de ON em.dept_id = de.id  
--------  WHERE  pd.status = @Status  
--------     AND (CONVERT(DATETIME, ph.start_period, 103) >= (SELECT PaySubStartDate  
--------                                                      FROM   @DATEINYEAR)  
--------          AND CONVERT(DATETIME, ph.end_period, 103) <= (SELECT PaySubEndDate  
--------                                                        FROM   @DATEINYEAR))  
--------     AND em.company_id = @company_id  And em.emp_code = @UserID
--------  ORDER  BY REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '')  
--------    
--------    
--------  SELECT *  
--------  FROM   #EmployeeTemp  
--------    
--------  DROP TABLE #EmployeeTemp  
--------GO
--------CREATE PROCEDURE [dbo].[sp_comp_add]              
--------       (              
--------        @Company_name [varchar](50) ,              
--------        @Company_Code [varchar](50) ,              
--------        @phone [int] ,              
--------        @email [varchar](50) ,              
--------        @website [varchar](50) ,              
--------        @city [varchar](50) ,              
--------        @Fax [varchar](50) ,              
--------        @country [int] ,              
--------        @auth_person [varchar](50) ,              
--------        @designation [varchar](50) ,              
--------        @company_roc [varchar](100) ,              
--------        @company_type [varchar](3) ,              
--------        @Address [varchar](350) ,              
--------        @Auth_email [varchar](50) ,              
--------        @monthly_cpf_ceil [int] ,              
--------        @annual_cpf_ceil [int] ,              
--------        @payslip_format [varchar](50) ,              
--------        @Payroll_Approval INT ,              
--------        @no_work_days FLOAT ,              
--------        @day_hours FLOAT ,              
--------        @day_min FLOAT ,              
--------        @email_sender [varchar](50) ,              
--------        @email_SMTP_server [varchar](50) ,              
--------        @email_username [varchar](50) ,              
--------        @email_password [varchar](50) ,              
--------        @email_sender_domain [varchar](50) ,              
--------        @email_sender_name VARCHAR(MAX) ,              
--------        @email_reply_address VARCHAR(MAX) ,              
--------        @email_reply_name   VARCHAR(MAX) ,              
--------        @email_leavedel  VARCHAR(MAX) ,              
--------        @email_SMTP_port [varchar](50) ,              
--------        @timesheet_approve [int] ,              
--------        @SessionID [varchar](50) ,              
--------        @state VARCHAR(100) ,              
--------        @password VARCHAR(128) ,              
--------        @address2 VARCHAR(250) ,              
--------        @postal_code VARCHAR(50) ,              
--------        @email_leavealert VARCHAR(50) ,              
--------        @email_payalert VARCHAR(50) ,              
--------        @epayslip VARCHAR(50) ,              
--------        @leave_model INT ,              
--------        @email_claim_sender_name VARCHAR(MAX) ,              
--------        @email_claim_reply_name VARCHAR(MAX) ,              
--------        @email_claimalert VARCHAR(50) ,              
--------        @sslrequired VARCHAR(10) ,              
--------        @pwdrequired VARCHAR(10) ,              
--------        @ccmail VARCHAR(50) ,              
--------        @ccclaimalert VARCHAR(50) ,              
--------        @ccleavealert VARCHAR(50) ,              
--------        @leaveroundoff VARCHAR(50) ,              
--------        @additionsroundoff VARCHAR(50) ,              
--------        @deductionsroundoff VARCHAR(50) ,              
--------        @netpayroundoff VARCHAR(50),            
--------		  @payrolltype INT,    
--------		  @tsremarks       [INT],    
--------		  @projectassign INT,  
--------		  @SalaryGLCode VARCHAR(20),  
--------		  @EmployeeCPFGLCode VARCHAR(20),  
--------		  @EmployerCPFGLCode VARCHAR(20),  
--------		  @FundAmtGLCode VARCHAR(20),  
--------		  @SDLAmtGLCode VARCHAR(20),  
--------		  @AccountGLCode   VARCHAR(20),
--------		  @UnpaidLeaGLCode varchar(20)
--------       )              
--------AS               
--------       DECLARE @Iden AS INT                                                              
--------       BEGIN TRANSACTION                                                                
--------       INSERT   INTO [Company] ([Company_Code], [Company_name], [phone], [email], [website], [city], [Fax], [country],              
--------                                [auth_person], [designation], [company_roc], [company_type], [Address], [Auth_email],              
--------                                [monthly_cpf_ceil], [annual_cpf_ceil], [payslip_format], Payroll_Approval, no_work_days,              
--------                                day_hours, day_minute, email_sender, email_SMTP_server, email_username, email_password,              
--------                                email_sender_domain, email_sender_name, email_reply_address, email_reply_name,              
--------                                email_SMTP_port, timesheet_approve, [state], address2, postal_code, email_leavealert,              
--------                                email_payalert, epayslip, leave_model, email_claim_sender_name, email_claim_reply_name,              
--------                                email_claimalert, sslrequired, pwdrequired, ccmail, ccalert_claims, ccalert_leaves, basicrnd,              
--------                                additionsrnd, deductionsrnd, netpayrnd, payrolltype, email_leave_delete, isTSRemarks, projectassign,SalaryGLCode,EmployeeCPFGLCode,EmployerCPFGLCode,FundAmtGLCode,SDLAmtGLCode,AccountGLCode, UnpaidLeaGLCode)  
--------       VALUES   (@Company_Code, @Company_name, @phone, @email, @website, @city, @Fax, @country, @auth_person,  
--------                 @designation, @company_roc, @company_type, @Address, @Auth_email, @monthly_cpf_ceil, @annual_cpf_ceil,              
--------                 @payslip_format, @Payroll_Approval, @no_work_days, @day_hours, @day_min, @email_sender,              
--------                 @email_SMTP_server, @email_username, @email_password, @email_sender_domain, @email_sender_name,              
--------                 @email_reply_address, @email_reply_name, @email_SMTP_port, @timesheet_approve, @state, @address2,                       @postal_code, @email_leavealert, @email_payalert, @epayslip, @leave_model, @email_claim_sender_name,              
--------                 @email_claim_reply_name, @email_claimalert, @sslrequired, @pwdrequired, @ccmail, @ccclaimalert, @ccleavealert,              
--------                 @leaveroundoff, @additionsroundoff, @deductionsroundoff, @netpayroundoff, @payrolltype, @email_leavedel, @tsremarks, @projectassign,  
--------     @SalaryGLCode, @EmployeeCPFGLCode, @EmployerCPFGLCode, @FundAmtGLCode, @SDLAmtGLCode,@AccountGLCode, @UnpaidLeaGLCode  
--------    )                                                              
--------                                                              
--------       DECLARE @groupID INT                                                            
--------       DECLARE @companyid INT                                             
--------       DECLARE @Usergrp_Emp INT                                                            
--------       DECLARE @Usergrp_HR INT                                                            
--------       DECLARE @Usergrp_Admin INT                                                
--------       DECLARE @workingdays_week FLOAT                                               
--------       SET @workingdays_week = 5.5                                                         
--------                                                            
--------       SELECT   @companyid = ISNULL(MAX(company_id), 0)              
--------       FROM     company                                                            
--------                                                               
--------       INSERT   INTO emp_group (EmpGroupName, Company_Id)              
--------       VALUES   ('Staff', @companyid)                                                            
--------                                                               
--------       INSERT   INTO usergroups (GroupName, company_id)              
--------       VALUES   ('Employee', @companyid)                                                            
--------       INSERT   INTO usergroups (GroupName, company_id)              
--------       VALUES   ('HR', @companyid)                                                            
--------       INSERT   INTO usergroups (GroupName, company_id)              
--------       VALUES   ('Super Admin', @companyid)                                                            
--------                                                               
--------       SELECT   @groupID = ISNULL(MAX(id), 0)              
--------       FROM     emp_group              
--------       WHERE    company_id = @companyid                                                           
--------       SELECT   @Usergrp_Emp = ISNULL(MAX(groupid), 0)              
--------       FROM     usergroups              
--------       WHERE    GroupName = 'Employee' AND              
--------                company_id = @companyid                                                            
--------       SELECT   @Usergrp_HR = ISNULL(MAX(groupid), 0)              
--------       FROM     usergroups              
--------       WHERE    GroupName = 'HR' AND              
--------                company_id = @companyid                                                            
--------       SELECT   @Usergrp_Admin = ISNULL(MAX(groupid), 0)              
--------       FROM     usergroups              
--------       WHERE    GroupName = 'Super Admin' AND              
--------                company_id = @companyid                                                
--------                                              
--------       SELECT   @workingdays_week = ISNULL(no_work_days, 5.5)              
--------       FROM     Company              
--------       WHERE    Company_id = @companyid                                                           
--------                                                      
--------       INSERT   INTO Employee (ot_entitlement, ic_pp_number, Company_Id, UserName, Password, emp_group_id, GroupId,              
--------                               StatusId, wdays_per_week)              
--------       VALUES   ('N', 's000000', @companyid, RTRIM(@Company_Code) + 'Admin', @password, @groupID, @Usergrp_Admin, 1,              
--------                 @workingdays_week)                                                            
--------                                             
--------       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)              
--------       VALUES   ('V1', 'No', @companyid, 'O', 'Variable', 'V1', 1)                                
--------       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)              
--------       VALUES   ('V2', 'No', @companyid, 'O', 'Variable', 'V2', 1)                                
--------       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)              
--------       VALUES   ('V3', 'No', @companyid, 'O', 'Variable', 'V3', 1)                                
--------       INSERT   INTO additions_types ([desc], cpf, company_id, type_of_wage, optionselection, Code, FormulaType)             
--------       VALUES   ('V4', 'No', @companyid, 'O', 'Variable', 'V4', 1)                                
--------                                               
--------                    
--------       INSERT   INTO Grouprights (groupid, rightid)              
--------                SELECT  @Usergrp_Emp groupid, rightid              
--------                FROM    GroupRightsAllocated              
--------                WHERE   groupid = 1 --Employee                    
--------                    
--------       INSERT   INTO Grouprights (groupid, rightid)              
--------                SELECT  @Usergrp_HR, rightid              
--------                FROM    GroupRightsAllocated              
--------                WHERE   groupid = 2  --HR                    
--------                    
--------       INSERT   INTO grouprights (groupid, rightid)              
--------                SELECT  @Usergrp_Admin groupid, rightid              
--------                FROM    GroupRightsAllocated              
--------                WHERE   groupid = 3 --Super Admin                    
--------                                                
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 1, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 2, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 3, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 4, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 5, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 6, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 7, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 8, 0)                                                  
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 9, 0)                            
--------       INSERT   INTO [prorated_leaves] (comp_id, group_id, year_of_service, leaves_allowed)              
--------       VALUES   (@companyid, @groupID, 10, 0)                                                           
--------                                
--------                                
--------                                                  
--------       UPDATE   girobanks              
--------       SET      company_id = @companyid, temp = ''              
--------       WHERE    temp = @SessionID                  
--------       IF @@ERROR <> 0               
--------          BEGIN                                       
--------                ROLLBACK TRANSACTION                                                  
--------                RETURN -1                                                  
--------          END                                                  
--------                                                
--------       COMMIT TRANSACTION 
--------GO
--------Merging 9.0
----------create PROCEDURE [dbo].[Sp_comp_update] (@Company_Id              [INT],          
----------                                        @Company_name            [VARCHAR](50),          
----------                                        @Company_Code            [VARCHAR](50),          
----------                                        @phone                   [INT],          
----------                                        @email                   [VARCHAR](50),          
----------                                        @website                 [VARCHAR](50),          
----------                                        @city                    [VARCHAR](50),          
----------                                        @Fax                     [VARCHAR](50),          
----------                                        @country                 [INT],          
----------                                        @auth_person             [VARCHAR](50),          
----------                                        @designation             [VARCHAR](50),          
----------                                        @company_roc             [VARCHAR](100),          
----------                                        @company_type            [VARCHAR](3),          
----------                                        @Address                 [VARCHAR](350),          
----------                                        @Auth_email              [VARCHAR](50),          
----------                                        @monthly_cpf_ceil        [INT],          
----------                                        @annual_cpf_ceil         [INT],          
----------                                        @payslip_format          [VARCHAR](50),          
----------                                        @Payroll_Approval        INT,          
----------                                        @no_work_days            FLOAT,          
----------                                        @day_hours               FLOAT,          
----------                                        @day_min                 FLOAT,          
----------                                        @email_sender            [VARCHAR](50),          
----------                                        @email_SMTP_server       [VARCHAR](50),          
----------                                        @email_username          [VARCHAR](50),          
----------                                        @email_password          [VARCHAR](50),          
----------                                        @email_sender_domain     [VARCHAR](50),          
----------                                        @email_sender_name       VARCHAR(MAX),          
----------                                        @email_reply_address     VARCHAR(MAX),          
----------                                        @email_reply_name        VARCHAR(MAX),          
----------                                        @email_leavedel    VARCHAR(MAX),          
----------                                        @email_SMTP_port         [VARCHAR](50),          
----------                                        @timesheet_approve       [INT],          
----------                                        @state                   VARCHAR(100),          
----------                                        @address2                VARCHAR(250),          
----------                                        @postal_code             VARCHAR(50),          
----------                                        @email_leavealert        VARCHAR(50),          
----------                                        @email_payalert          VARCHAR(50),          
----------                                        @epayslip                VARCHAR(50),          
----------                                        @leave_model             INT,          
----------                                        @email_claim_sender_name VARCHAR(MAX),          
----------                                        @email_claim_reply_name  VARCHAR(MAX),          
----------                                        @email_claimalert        VARCHAR(50),          
----------                                        @sslrequired             VARCHAR(10),          
----------                                        @pwdrequired             VARCHAR(10),          
----------                                        @ccmail                  VARCHAR(50),          
----------                  @ccclaimalert            VARCHAR(50),          
----------         @ccleavealert            VARCHAR(50),          
----------                                        @leaveroundoff           VARCHAR(50),          
----------                                        @additionsroundoff       VARCHAR(50),          
----------                                        @deductionsroundoff      VARCHAR(50),          
----------                                        @netpayroundoff          VARCHAR(50),          
----------                                        @payrolltype             INT,    
----------                                        @tsremarks       [INT],    
----------          @projectassign INT,  
----------  @SalaryGLCode VARCHAR(20),  
----------  @EmployeeCPFGLCode VARCHAR(20),
----------  @EmployerCPFGLCode VARCHAR(20),
----------  @FundAmtGLCode VARCHAR(20),
----------  @SDLAmtGLCode VARCHAR(20),
----------  @AccountGLCode   VARCHAR(20),
----------  @UnpaidLeaGLCode varchar(20)
----------)          
----------AS          
----------Declare @leavemodelcount int          
----------          
----------Select @leavemodelcount=Count(Company_Id) From Company Where Company_ID = @Company_Id And leave_model = @leave_model           
----------Set @leavemodelcount = isnull(@leavemodelcount,0)          
----------          
----------  BEGIN          
----------      UPDATE company          
----------      SET    [Company_Code] = @Company_Code,          
----------             [Company_name] = @Company_name,          
----------             [phone] = @phone,          
----------             [email] = @email,          
----------             [website] = @website,          
----------             [city] = @city,          
----------             [Fax] = @Fax,          
----------             [country] = @country,          
----------             [auth_person] = @auth_person,          
----------             [designation] = @designation,          
----------             [company_roc] = @company_roc,          
----------             [company_type] = @company_type,          
----------             [Address] = @Address,          
----------             [Auth_email] = @Auth_email,          
----------             [monthly_cpf_ceil] = @monthly_cpf_ceil,          
----------             [annual_cpf_ceil] = @annual_cpf_ceil,          
----------             [payslip_format] = @payslip_format,          
----------             Payroll_Approval = @Payroll_Approval,          
----------             no_work_days = @no_work_days,          
----------             day_hours = @day_hours,          
----------             day_minute = @day_min,          
----------             email_sender = @email_sender,          
----------             email_SMTP_server = @email_SMTP_server,          
----------             email_username = @email_username,          
----------             email_sender_domain = @email_sender_domain,          
----------             email_sender_name = @email_sender_name,          
----------             email_reply_address = @email_reply_address,          
----------             email_reply_name = @email_reply_name,          
----------             email_leave_delete = @email_leavedel,          
----------             email_SMTP_port = @email_SMTP_port,          
----------             timesheet_approve = @timesheet_approve,          
----------             [state] = @state,          
----------             address2 = @address2,          
----------             postal_code = @postal_code,          
----------             email_leavealert = @email_leavealert,          
----------             email_payalert = @email_payalert,          
----------             epayslip = @epayslip,          
----------             leave_model = @leave_model,          
----------             email_claim_sender_name = @email_claim_sender_name,          
----------             email_claim_reply_name = @email_claim_reply_name,          
----------             email_claimalert = @email_claimalert,          
----------             sslrequired = @sslrequired,          
----------             pwdrequired = @pwdrequired,          
----------             ccmail = @ccmail,          
----------             ccalert_claims = @ccclaimalert,          
----------             ccalert_leaves = @ccleavealert,          
----------             basicrnd = @leaveroundoff,          
----------             additionsrnd = @additionsroundoff,          
----------             deductionsrnd = @deductionsroundoff,          
----------             netpayrnd = @netpayroundoff,          
----------             payrolltype = @payrolltype,    
----------    isTSRemarks = @tsremarks,    
----------    projectassign = @projectassign ,   
----------    SalaryGLCode = @SalaryGLCode,  
----------    EmployeeCPFGLCode=@EmployeeCPFGLCode,  
----------    EmployerCPFGLCode=@EmployerCPFGLCode,  
----------    FundAmtGLCode=@FundAmtGLCode,  
----------    SDLAmtGLCode=@SDLAmtGLCode,  
----------    AccountGLCode=@AccountGLCode,
----------	UnpaidLeaGLCode=@UnpaidLeaGLCode
----------      WHERE  [Company_Id] = @Company_Id          
----------          
----------  IF (@leavemodelcount <= 0 And (@leave_model = 3 OR @leave_model=4  OR @leave_model=6  OR @leave_model=8 ))    
----------  BEGIN          
----------   Exec sp_YOSEmployeeAutoRec @Company_Id, 0          
----------  END          
----------          
----------          
----------      IF @email_password <> ''          
----------        BEGIN          
----------            UPDATE company          
----------            SET    email_password = @email_password          
----------            WHERE  [Company_Id] = @Company_Id          
----------        END
----------  END
----------GO
--------Merging 9.0
--------CREATE PROC [dbo].[Sp_new_payslip_emp] --4,2009,1044                                                                
--------@month   INT,  
--------@year    INT,  
--------@empcode INT  
--------AS  
--------  DECLARE @startdtsub DATETIME  
--------  DECLARE @enddtsub DATETIME  
--------  DECLARE @monthname VARCHAR(20)  
--------  DECLARE @monthint AS INT  
--------  
--------  SELECT @monthint = [Month],@startdtsub = PaySubStartDate,@enddtsub = PaySubEndDate,@monthname = [MonthName]  
--------  FROM   PayrollMonthlyDetail  
--------  WHERE  ROWID = @month  
--------  
--------  DECLARE @compid INT  
--------  
--------  SELECT @compid = company_id  
--------  FROM   employee  
--------  WHERE  emp_code = @empcode  
--------  
--------  CREATE TABLE #EmpList  
--------      (  
--------           ID     INT IDENTITY,  
--------           empID  INT NULL,  
--------           trx_id INT NULL  
--------      )  
--------  
--------  INSERT INTO #EmpList  
--------  SELECT emp_id,trx_id  
--------  FROM   prepare_payroll_detail  
--------  WHERE  trx_id IN (SELECT trx_id  
--------                    FROM   prepare_payroll_hdr  
--------                    WHERE  --MONTH(start_period) = @month AND                  
--------                   --AND MONTH(ph.start_period) = Convert(Varchar,@startmonth)                             
--------                   (start_period >= @startdtsub  
--------                    AND end_period <= @enddtsub)  
--------                   AND YEAR(start_period) = @year)  
--------     AND status = 'G'  
--------  
--------  CREATE TABLE #Main  
--------      (  
--------           ID         INT NULL,  
--------           emp_id     INT NULL,  
--------           trx_id     INT NULL,  
--------           add_type   VARCHAR(500) NULL,  
--------           add_Amount FLOAT NULL,  
--------           add_CPF    VARCHAR(10) NULL,  
--------           ded_type   VARCHAR(500) NULL,  
--------           ded_Amount FLOAT NULL  
--------      )  
--------  
--------  --Ded_type varchar(500) NULL,Ded_Amount FLOAT NULL)                                                                
--------  WHILE EXISTS (SELECT TOP 1 ID  
--------                FROM   #EmpList)  
--------      BEGIN  
--------          DECLARE @rowID INT  
--------          DECLARE @empID INT  
--------          DECLARE @trxID INT  
--------          DECLARE @addCount INT  
--------          DECLARE @dedCount INT  
--------  
--------          SET @addCount = 2  
--------          SET @dedCount = 2  
--------  
--------          SELECT TOP 1 @rowID = ID,@empID = empID,@trxID = trx_id  
--------          FROM   #EmpList  
--------  
--------          SELECT @addCount = COUNT(*)  
--------          FROM   emp_additions  
--------          WHERE  --MONTH(trx_period) = @month AND                 
--------          (trx_period >= @startdtsub  
--------           AND trx_period <= @enddtsub)  
--------          AND YEAR(trx_period) = @year  
--------          AND emp_code = @empID  
--------  
--------          SELECT @dedCount = COUNT(*)  
--------          FROM   emp_deductions  
--------          WHERE  --MONTH(trx_period) = @month AND                  
--------          (trx_period >= @startdtsub  
--------           AND trx_period <= @enddtsub)  
--------          AND YEAR(trx_period) = @year  
--------          AND emp_code = @empID  
--------  
--------          IF @addCount > @dedCount  
--------              BEGIN  
--------                  DECLARE @countID INT  
--------  
--------                  SET @countID = 1  
--------  
--------                  WHILE @countID <= @addCount  
--------                      BEGIN  
--------                          INSERT INTO #Main  
--------                                      (ID,emp_id,trx_id)  
--------                          SELECT @countID,@empID,@trxID  
--------  
--------                          SET @countID = @countID + 1  
--------                      END  
--------  
--------                  CREATE TABLE #tempAddtions  
--------                      (  
--------                           ID         INT IDENTITY,  
--------                           add_type   VARCHAR(500) NULL,  
--------                           add_amount FLOAT NULL,  
--------                           add_cpf    VARCHAR(10) NULL,  
--------                           emp_code   INT NULL  
--------                      )  
--------  
--------                  INSERT INTO #tempAddtions  
--------                  SELECT (SELECT [desc]  
--------                          FROM   additions_types  
--------                          WHERE  id = ed.trx_type) 'add_type',trx_amount,(SELECT cpf  
--------                                                                          FROM   additions_types  
--------                                                                          WHERE  id = ed.trx_type) 'add_cpf',emp_code  
--------                  FROM   emp_additions ed  
--------                WHERE  ed.emp_code = @empID  
--------                     AND  
--------                     --MONTH(trx_period) = @month AND                  
--------                     (trx_period >= @startdtsub  
--------                      AND trx_period <= @enddtsub)  
--------                     AND YEAR(trx_period) = @year  
--------                     AND (ed.claimstatus = 'Approved'  
--------                           OR ed.claimstatus IS NULL)  
--------  
--------                  UPDATE #Main  
--------                  SET    add_type = t1.add_type,  
--------                         add_Amount = t1.add_amount,  
--------                         add_CPF = t1.add_cpf  
--------                  FROM   #Main Ma,  
--------                         #tempAddtions t1  
--------                  WHERE  Ma.ID = t1.ID  
--------                     AND Ma.emp_id = t1.emp_code  
--------  
--------                  DROP TABLE #tempAddtions  
--------  
--------                  CREATE TABLE #tempDeduction  
--------                      (  
--------                           ID         INT IDENTITY,  
--------                           ded_type   VARCHAR(500) NULL,  
--------                           ded_amount FLOAT NULL,  
--------                           emp_code   INT NULL  
--------                      )  
--------  
--------                  INSERT INTO #tempDeduction  
--------                  SELECT (SELECT [desc]  
--------                          FROM   deductions_types  
--------                          WHERE  id = ed.trx_type) 'ded_type',trx_amount,emp_code  
--------                  FROM   emp_deductions ed  
--------                  WHERE  ed.emp_code = @empID  
--------                     AND  
--------                     --MONTH(trx_period) = @month AND                  
--------                     (trx_period >= @startdtsub  
--------                      AND trx_period <= @enddtsub)  
--------                     AND YEAR(trx_period) = @year  
--------  
--------                  UPDATE #Main  
--------                  SET    ded_type = t1.ded_type,  
--------                         ded_Amount = t1.ded_amount  
--------                  FROM   #Main Ma,  
--------                         #tempDeduction t1  
--------                  WHERE  Ma.ID = t1.ID  
--------                     AND Ma.emp_id = t1.emp_code  
--------  
--------                  DROP TABLE #tempDeduction  
--------              END  
--------  
--------          IF @addCount < @dedCount  
--------              BEGIN  
--------                  DECLARE @countID1 INT  
--------  
--------                  SET @countID1 = 1  
--------  
--------                  WHILE @countID1 <= @dedCount  
--------                      BEGIN  
--------                          INSERT INTO #Main  
--------                                      (ID,emp_id,trx_id)  
--------                          SELECT @countID1,@empID,@trxID  
--------  
--------                          SET @countID1 = @countID1 + 1  
--------                      END  
--------  
--------                  CREATE TABLE #tempAddtions1  
--------                      (  
--------                           ID         INT IDENTITY,  
--------                           add_type   VARCHAR(500) NULL,  
--------                           add_amount FLOAT NULL,  
--------                           add_cpf    VARCHAR(10) NULL,  
--------                           emp_code   INT NULL  
--------                      )  
--------  
--------                  INSERT INTO #tempAddtions1  
--------                  SELECT (SELECT [desc]  
--------                          FROM   additions_types  
--------                          WHERE  id = ed.trx_type) 'add_type',trx_amount,(SELECT cpf  
--------                                                                          FROM   additions_types  
--------                                                                          WHERE  id = ed.trx_type) 'add_cpf',emp_code  
--------                  FROM   emp_additions ed  
--------                  WHERE  ed.emp_code = @empID  
--------                     AND  
--------                     --MONTH(trx_period) = @month AND                  
--------                     (trx_period >= @startdtsub  
--------                      AND trx_period <= @enddtsub)  
--------                     AND YEAR(trx_period) = @year  
--------                     AND (ed.claimstatus = 'Approved'  
--------                           OR ed.claimstatus IS NULL)  
--------  
--------                  UPDATE #Main  
--------                  SET    add_type = t1.add_type,  
--------                         add_Amount = t1.add_amount,  
--------                         add_CPF = t1.add_cpf  
--------                  FROM   #Main Ma,  
--------                 #tempAddtions1 t1  
--------                  WHERE  Ma.ID = t1.ID  
--------                     AND Ma.emp_id = t1.emp_code  
--------  
--------                  DROP TABLE #tempAddtions1  
--------  
--------                  CREATE TABLE #tempDeduction1  
--------                      (  
--------                           ID         INT IDENTITY,  
--------                           ded_type   VARCHAR(500) NULL,  
--------                           ded_amount FLOAT NULL,  
--------                           emp_code   INT NULL  
--------                      )  
--------  
--------                  INSERT INTO #tempDeduction1  
--------                  SELECT (SELECT [desc]  
--------                          FROM   deductions_types  
--------                          WHERE  id = ed.trx_type) 'ded_type',trx_amount,emp_code  
--------                  FROM   emp_deductions ed  
--------                  WHERE  ed.emp_code = @empID  
--------                     AND  
--------                     --MONTH(trx_period) = @month AND                  
--------                     (trx_period >= @startdtsub  
--------                      AND trx_period <= @enddtsub)  
--------                     AND YEAR(trx_period) = @year  
--------  
--------                  UPDATE #Main  
--------                  SET    ded_type = t1.ded_type,  
--------                         ded_Amount = t1.ded_amount  
--------                  FROM   #Main Ma,  
--------                         #tempDeduction1 t1  
--------                  WHERE  Ma.ID = t1.ID  
--------                     AND Ma.emp_id = t1.emp_code  
--------  
--------                  DROP TABLE #tempDeduction1  
--------              END  
--------  
--------          IF (@addCount = @dedCount)  
--------             AND (@addCount <> 0  
--------                  AND @dedCount <> 0)  
--------              BEGIN  
--------                  DECLARE @countID2 INT  
--------  
--------                  SET @countID2 = 1  
--------  
--------                  WHILE @countID2 <= @addCount  
--------                      BEGIN  
--------                          INSERT INTO #Main  
--------                                      (ID,emp_id,trx_id)  
--------                          SELECT @countID2,@empID,@trxID  
--------  
--------                          SET @countID2 = @countID2 + 1  
--------                      END  
--------  
--------                  CREATE TABLE #tempAddtions2  
--------                      (  
--------                           ID         INT IDENTITY,  
--------                           add_type   VARCHAR(500) NULL,  
--------                           add_amount FLOAT NULL,  
--------                           add_cpf    VARCHAR(10) NULL,  
--------                           emp_code   INT NULL  
--------                      )  
--------  
--------                  INSERT INTO #tempAddtions2  
--------                  SELECT (SELECT [desc]  
--------                          FROM   additions_types  
--------                          WHERE  id = ed.trx_type) 'add_type',trx_amount,(SELECT cpf  
--------                                                                          FROM   additions_types  
--------                                                                          WHERE  id = ed.trx_type) 'add_cpf',emp_code  
--------                  FROM   emp_additions ed  
--------                  WHERE  ed.emp_code = @empID  
--------                     AND  
--------                     --MONTH(trx_period) = @month AND                  
--------                     (trx_period >= @startdtsub  
--------                      AND trx_period <= @enddtsub)  
--------                     AND YEAR(trx_period) = @year  
--------                     AND (ed.claimstatus = 'Approved'  
--------                           OR ed.claimstatus IS NULL)  
--------  
--------                  UPDATE #Main  
--------                  SET    add_type = t1.add_type,  
--------                         add_Amount = t1.add_amount,  
--------                         add_CPF = t1.add_cpf  
--------                  FROM   #Main Ma,  
--------                         #tempAddtions2 t1  
--------                  WHERE  Ma.ID = t1.ID  
--------                     AND Ma.emp_id = t1.emp_code  
--------  
--------                  DROP TABLE #tempAddtions2  
--------  
--------                  CREATE TABLE #tempDeduction2  
--------                      (  
--------                           ID         INT IDENTITY,  
--------                           ded_type   VARCHAR(500) NULL,  
--------                           ded_amount FLOAT NULL,  
--------                           emp_code   INT NULL  
--------                      )  
--------  
--------                  INSERT INTO #tempDeduction2  
--------                  SELECT (SELECT [desc]  
--------                          FROM   deductions_types  
--------                          WHERE  id = ed.trx_type) 'ded_type',trx_amount,emp_code  
--------                  FROM   emp_deductions ed  
--------                  WHERE  ed.emp_code = @empID  
--------                     AND  
--------                     --MONTH(trx_period) = @month AND                  
--------                     (trx_period >= @startdtsub  
--------                      AND trx_period <= @enddtsub)  
--------                     AND YEAR(trx_period) = @year  
--------  
--------                  UPDATE #Main  
--------                  SET    ded_type = t1.ded_type,  
--------                         ded_Amount = t1.ded_amount  
--------                  FROM   #Main Ma,  
--------                         #tempDeduction2 t1  
--------                  WHERE  Ma.ID = t1.ID  
--------                     AND Ma.emp_id = t1.emp_code  
--------  
--------                  DROP TABLE #tempDeduction2  
--------              END  
--------  
--------          IF @addCount = 0  
--------             AND @dedCount = 0  
--------              BEGIN  
--------                  INSERT INTO #Main  
--------                              (ID,emp_id,trx_id)  
--------                  SELECT 1,@empID,@trxID  
--------              END  
--------  
--------          DELETE FROM #EmpList  
--------          WHERE  ID = @rowID  
--------      END -- Main While Loop Ends                                                                 
--------  
--------  ALTER TABLE #Main ADD compname VARCHAR(100) NULL, compaddress1 VARCHAR(200) NULL, compaddress2 VARCHAR(200) NULL, postalcode VARCHAR(20) NULL, phone VARCHAR(20) NULL, fax VARCHAR(20) NULL, state VARCHAR(100) NULL, country VARCHAR(100) NULL, MONTH VARCHAR(10) NULL, YEAR VARCHAR(10) NULL, emp_name VARCHAR(100) NULL, fund_type VARCHAR(10) NULL, fund_amount FLOAT NULL, total_deductions FLOAT NULL, total_additions FLOAT NULL, netpay VARBINARY(128) NULL, ot1_e FLOAT NULL, ot2_e FLOAT NULL, ic_pp_number VARCHAR(50) NULL, ot FLOAT NULL, employeecpf FLOAT NULL, employercpf FLOAT, basic_pay VARBINARY(128) NULL, Gross FLOAT NULL, cpfNet FLOAT NULL, unpaid_leaves FLOAT NULL, unpaid_leaves_amount FLOAT NULL, company_roc VARCHAR(100) NULL, emp_addr1 VARCHAR(500) NULL
--------, emp_addr2 VARCHAR(500) NULL, emp_postal_code VARCHAR(100) NULL, emp_country VARCHAR(200) NULL, timecardno VARCHAR(50) NULL, block_no VARCHAR(50) NULL, street_name VARCHAR(100) NULL, unit_no VARCHAR(50) NULL, Level_no VARCHAR(50)  
--------  NULL, emp_type VARCHAR(50), cpf_entitlement VARCHAR(10), ot1_rate FLOAT NULL, ot2_rate FLOAT NULL, ot1hrs FLOAT NULL, ot2hrs FLOAT NULL, NHRate FLOAT NULL, NH_Wh FLOAT NULL, NH_E FLOAT NULL, Dept_ID Int  
--------  
--------  UPDATE #Main  
--------  SET    compname = (SELECT company_name  
--------                     FROM   company  
--------                     WHERE  company_id = @compid),  
--------         compaddress1 = (SELECT address  
--------                         FROM   company  
--------                         WHERE  company_id = @compid),  
--------         compaddress2 = (SELECT address2  
--------                         FROM   company  
--------                         WHERE  company_id = @compid),  
--------         postalcode = (SELECT postal_code  
--------                       FROM   company  
--------                       WHERE  company_id = @compid),  
--------         phone = (SELECT phone  
--------                  FROM   company  
--------                  WHERE  company_id = @compid),  
--------         fax = (SELECT fax  
--------                FROM   company  
--------                WHERE  company_id = @compid),  
--------         state = (SELECT state  
--------                  FROM   company  
--------                  WHERE  company_id = @compid),  
--------         company_roc = (SELECT company_roc  
--------                        FROM   company  
--------                        WHERE  company_id = @compid),  
--------         MONTH = @monthint,  
--------         YEAR = @year,  
--------         emp_name = emp.emp_name + ' ' + emp.emp_lname,  
--------         fund_type = pd.fund_type,  
--------         fund_amount = pd.fund_amount,  
--------         total_deductions = pd.total_deductions,  
--------         total_additions = pd.total_additions,  
--------         netpay = pd.netpay,  
--------         ot1_e = pd.ot1_e,  
--------         ot2_e = pd.ot2_e,  
--------         ot1_rate = pd.ot1rate,  
--------         ot2_rate = pd.ot2rate,  
--------         ic_pp_number = emp.ic_pp_number,  
--------         ot = pd.ot1_e + pd.ot2_e,  
--------         employeecpf = pd.empcpf,  
--------         employercpf = pd.employercpf,  
--------         basic_pay = pd.basic_pay,  
--------         Gross = pd.total_gross,  
--------         cpfNet = pd.cpfNet,  
--------         unpaid_leaves = pd.unpaid_leaves,  
--------         unpaid_leaves_amount = pd.unpaid_leaves_amount,  
--------         emp_addr1 = emp.address,  
--------         emp_addr2 = emp.localaddress2,  
--------         emp_postal_code = emp.postal_code,  
--------         block_no = emp.block_no,  
--------         street_name = emp.street_name,  
--------         unit_no = emp.unit_no,  
--------         Level_no = emp.Level_no,  
--------         emp_country = (SELECT Country  
--------                        FROM   Country  
--------                        WHERE  id = emp.country_id),  
--------         timecardno = emp.time_card_no,  
--------         emp_type = emp.emp_type,  
--------         cpf_entitlement = emp.cpf_entitlement,  
--------         ot1hrs = pd.ot1_wh,  
--------         ot2hrs = pd.ot2_wh,  
--------         NHRate = pd.NHRate,  
--------         NH_Wh = pd.NH_Wh,  
--------         NH_E = pd.NH_E,  
--------   Dept_ID = emp.Dept_ID  
--------  FROM   #Main Ma,  
--------         employee emp,  
--------         prepare_payroll_detail pd  
--------  WHERE  Ma.emp_id = emp.emp_code  
--------     AND Ma.emp_id = pd.emp_id  
--------     AND pd.status = 'G'  
--------     AND Ma.trx_id = pd.trx_id  
--------  
--------  SELECT MONTH,YEAR,emp_id 'EMP_CODE',EMP_NAME,FUND_TYPE,FUND_AMOUNT,TOTAL_DEDUCTIONS,TOTAL_ADDITIONS,CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))) AS netpay,ot1_e,ot2_e,ic_pp_number,ot,ot1_rate,ot2_rate,CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,Gross,(SELECT CONVERT(VARCHAR(15), trx_date, 103)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                    FROM   prepare_payroll_hdr  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                    WHERE  trx_id IN (SELECT trx_id  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                      FROM   prepare_payroll_detail  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                      WHERE  emp_id = Ma.emp_id  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                         AND status = 'G')  
--------                                      AND  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                       --MONTH(start_period) = @month AND                  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                       (start_period >= @startdtsub  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                        AND end_period <= @enddtsub)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                       AND YEAR(start_period) = @year) 'paydate',add_Amount 'ADDAMT',add_type 'ADDITIONS',ded_type 'DEDUCTAMT',ded_Amount 'DEDUCTIONS',(SELECT 
--------SUM(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), Decryptbyasymkey(Asymkey_id('AsymKey'), netpay))))  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                        FROM   
--------prepare_payroll_detail x,prepare_payroll_hdr y  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                        WHERE  
--------x.trx_id = y.trx_id  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                           AND 
--------x.emp_id = Ma.emp_id  
--------                AND YEAR(y.start_period) = @year  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                           AND 
--------MONTH(y.start_period) <= @monthint  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                           AND 
--------status = 'G') 'ytdgross',(SELECT SUM(employerCPF)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                          FROM   prepare_payroll_detail m,prepare_payroll_hdr n  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                          WHERE  m.trx_id = n.trx_id  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                             AND m.emp_id = Ma.emp_id  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                             AND YEAR(n.start_period) = @year  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                             AND  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                       --(n.start_period >= @startdtsub And n.start_period <= @enddtsub) And        
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                             MONTH(n.start_period) <= @monthint  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                             AND status = 'G') 'ytdcpf',employeecpf,employercpf,COMPNAME,compaddress1,compaddress2,postalcode,phone,fax,state,country,company_roc,add_CPF 'ADDITION_CPF',cpfNet,unpaid_leaves,unpaid_leaves_amount,emp_addr1,emp_addr2,emp_postal_code,emp_country,timecardno,block_no,street_name,unit_no,Level_no,emp_type,cpf_entitlement,ot1hrs,ot2hrs,Upper(@monthname) [MONTHNAME],NHRate,NH_Wh,NH_E,(dbo.Converttominutes(NH_Wh)) NHMin,(NHRate / 60) NHRateMin,(  
--------         dbo.Converttominutes(ot1hrs)) OT1Min,(OT1_Rate / 60) OT1_RateMin,(dbo.Converttominutes(OT2Hrs)) OT2Min,(OT2_Rate / 60) OT2_RateMin,NHText=CASE  
--------                WHEN NH_Wh != 0 THEN '(' + CAST(NH_Wh AS VARCHAR) + ' is Normal Hours Worked and ' + CAST(NHRate AS VARCHAR) + ' is Normal Hourly Rate)'  
--------                ELSE NULL  
--------                END,OT1Text=CASE  
--------                              WHEN ot1hrs != 0 THEN '(' + CAST(ot1hrs AS VARCHAR) + ' is OT1 Hours Worked and ' + CAST(ot1_rate AS VARCHAR) + ' is OT1 Hourly Rate)'  
--------                              ELSE NULL  
--------                            END,OT2Text=CASE  
--------                                          WHEN ot2hrs != 0 THEN '(' + CAST(ot2hrs AS VARCHAR) + ' is OT2 Hours Worked and ' + CAST(ot2_rate AS VARCHAR) + ' is OT2 Hourly Rate)'  
--------                                          ELSE NULL  
--------                                        END,(SELECT Remarks  
--------                                             FROM   empPayslipRemarks  
--------                                             WHERE  emp_code = @empcode  
--------                                                AND Rowid = @month) Remarks, ([FileName]) 'FileName'
--------  FROM   #Main Ma  
--------  Left Outer Join Department D On Ma.Dept_ID = D.ID  
--------  WHERE  Ma.emp_id = @empcode   
--------
--------GO
--------Merging 9.0
--sp_new_payslip_all2 46,2010,3,117
--------CREATE PROC [dbo].[sp_new_payslip_all2]  
-------- @month INT ,            
-------- @year INT ,            
-------- @compid INT,
-------- @empcode INT            
--------AS             
-------- DECLARE @startdtsub DATETIME                                                                                                                          
-------- DECLARE @enddtsub DATETIME                                                                                                                          
-------- DECLARE @monthname varchar(20)            
-------- DECLARE @monthint AS INT      
--------      
-------- Select @monthint=[Month],@startdtsub=PaySubStartDate,@enddtsub=PaySubEndDate,@monthname=[MonthName] From  PayrollMonthlyDetail Where ROWID=@month              
--------          
--------       CREATE TABLE #EmpList            
--------              (            
--------               ID INT IDENTITY ,            
--------               empID INT NULL ,            
--------               trx_id INT NULL            
--------              )                                                    
--------       INSERT   INTO #EmpList            
--------                SELECT  emp_id, trx_id            
--------                FROM    prepare_payroll_detail            
--------                WHERE   trx_id IN (SELECT   trx_id            
--------                                   FROM     prepare_payroll_hdr            
--------                                   WHERE    --MONTH(start_period) = @month AND            
--------           (start_period >= @startdtsub And end_period <= @enddtsub) And          
--------                                            YEAR(start_period) = @year) AND            
--------                        status = 'G' AND            
--------                        emp_id IN (SELECT   emp_code            
--------                                   FROM     employee            
--------                                   WHERE    company_id = @compid)                                                    
--------
--------		IF (@empcode != 0)
--------		BEGIN
--------			Delete From #EmpList Where empID != @empcode
--------		END  
--------                                                    
--------       CREATE TABLE #Main            
--------              (            
--------               ID INT NULL ,            
--------               emp_id INT NULL ,            
--------               trx_id INT NULL ,            
--------               add_type VARCHAR(500) NULL ,            
--------               add_Amount FLOAT NULL ,            
--------               add_CPF VARCHAR(10) NULL ,            
--------               ded_type VARCHAR(500) NULL ,            
--------               ded_Amount FLOAT NULL            
--------              )                                                    
----------Ded_type varchar(500) NULL,Ded_Amount FLOAT NULL)                                                    
--------                                                    
--------       WHILE EXISTS ( SELECT TOP 1            
--------                                ID            
--------                      FROM      #EmpList )             
--------             BEGIN                                                    
--------                   DECLARE @rowID INT                                                    
--------                   DECLARE @empID INT                                                    
--------                   DECLARE @trxID INT                                                     
--------                   DECLARE @addCount INT                                                    
--------                   DECLARE @dedCount INT                                                    
--------                   SET @addCount = 2                                                    
--------                   SET @dedCount = 2                                                      
--------                   SELECT TOP 1            
--------                            @rowID = ID, @empID = empID, @trxID = trx_id            
--------                   FROM     #EmpList                                                     
--------                   SELECT   @addCount = COUNT(*)            
--------                   FROM     emp_additions            
--------                   WHERE    --MONTH(trx_period) = @month AND            
--------       (trx_period >= @startdtsub And trx_period <= @enddtsub) And            
--------                            YEAR(trx_period) = @year AND            
--------                            emp_code = @empID   
--------                   SELECT   @dedCount = COUNT(*)            
--------                   FROM     emp_deductions            
--------                   WHERE    --MONTH(trx_period) = @month AND          
--------       (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
--------                            YEAR(trx_period) = @year AND            
--------                            emp_code = @empID                                                    
--------        IF @addCount > @dedCount             
--------                      BEGIN                                                    
--------                            DECLARE @countID INT                                                    
--------                            SET @countID = 1                                                    
--------                            WHILE @countID <= @addCount             
--------                                  BEGIN                                                    
--------                                        INSERT  INTO #Main (ID, emp_id, trx_id)            
--------                                                SELECT  @countID, @empID, @trxID                                                      
--------                                        SET @countID = @countID + 1                                                        
--------                                  END                                
--------                            CREATE TABLE #tempAddtions            
--------                                   (            
--------                                    ID INT IDENTITY ,            
--------                                    add_type VARCHAR(500) NULL ,            
--------                                    add_amount FLOAT NULL ,            
--------                                    add_cpf VARCHAR(10) NULL ,            
--------                                    emp_code INT NULL            
--------                                   )                                                      
--------                            INSERT  INTO #tempAddtions            
--------                                    SELECT  (SELECT [desc] FROM additions_types WHERE id = ed.trx_type            
--------                                            ) 'add_type', trx_amount,            
--------                                            (SELECT cpf FROM additions_types WHERE id = ed.trx_type            
--------                                            ) 'add_cpf', emp_code            
--------                                    FROM    emp_additions ed            
--------                                    WHERE   ed.emp_code = @empID AND            
--------                                            --MONTH(trx_period) = @month AND            
--------           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
--------                                            YEAR(trx_period) = @year AND            
--------                                            (ed.claimstatus = 'Approved' OR            
--------                                             ed.claimstatus IS NULL            
--------                                            )                                                    
--------                            UPDATE  #Main            
--------                            SET     add_type = t1.add_type, add_Amount = t1.add_amount, add_CPF = t1.add_cpf            
--------                            FROM    #Main Ma ,            
--------                                    #tempAddtions t1            
--------                            WHERE   Ma.ID = t1.ID AND            
--------                                    Ma.emp_id = t1.emp_code                                                    
--------                            DROP TABLE #tempAddtions                   
--------                            CREATE TABLE #tempDeduction            
--------                                   (            
--------                                    ID INT IDENTITY ,            
--------                                    ded_type VARCHAR(500) NULL ,            
--------                                    ded_amount FLOAT NULL ,            
--------                                    emp_code INT NULL            
--------                                   )                   
--------                            INSERT  INTO #tempDeduction            
--------                                    SELECT  (SELECT [desc] FROM deductions_types WHERE id = ed.trx_type            
--------                                     ) 'ded_type', trx_amount, emp_code            
--------                                    FROM    emp_deductions ed            
--------                         WHERE   ed.emp_code = @empID AND            
--------                                            --MONTH(trx_period) = @month AND            
--------           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
--------                                            YEAR(trx_period) = @year                                                    
--------              UPDATE  #Main            
--------                            SET     ded_type = t1.ded_type, ded_Amount = t1.ded_amount            
--------                            FROM    #Main Ma ,            
--------                                    #tempDeduction t1            
--------                            WHERE   Ma.ID = t1.ID AND            
--------                                    Ma.emp_id = t1.emp_code                                                    
--------                            DROP TABLE #tempDeduction                                                    
--------                      END                                                    
--------                   IF @addCount < @dedCount             
--------                      BEGIN                                                    
--------                            DECLARE @countID1 INT                                                    
--------                            SET @countID1 = 1                                              
--------                            WHILE @countID1 <= @dedCount             
--------                                  BEGIN                                                    
--------                                        INSERT  INTO #Main (ID, emp_id, trx_id)            
--------                                                SELECT  @countID1, @empID, @trxID                                                  
--------                                        SET @countID1 = @countID1 + 1                                                       
--------                                  END                                                    
--------                            CREATE TABLE #tempAddtions1            
--------                                   (            
--------                                    ID INT IDENTITY ,            
--------                                    add_type VARCHAR(500) NULL ,            
--------                                    add_amount FLOAT NULL ,            
--------                                    add_cpf VARCHAR(10) NULL ,            
--------                                    emp_code INT NULL            
--------                                   )                                                      
--------                            INSERT  INTO #tempAddtions1            
--------                                    SELECT  (SELECT [desc] FROM additions_types WHERE id = ed.trx_type            
--------                                            ) 'add_type', trx_amount,            
--------                                            (SELECT cpf FROM additions_types WHERE id = ed.trx_type            
--------                                            ) 'add_cpf', emp_code            
--------                                    FROM    emp_additions ed            
--------                                    WHERE   ed.emp_code = @empID AND            
--------                                            --MONTH(trx_period) = @month AND            
--------           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
--------                                            YEAR(trx_period) = @year AND            
--------                                            (ed.claimstatus = 'Approved' OR            
--------                                             ed.claimstatus IS NULL            
--------                                            )                                                    
--------                            UPDATE  #Main            
--------       SET     add_type = t1.add_type, add_Amount = t1.add_amount, add_CPF = t1.add_cpf            
--------                            FROM    #Main Ma ,            
--------                                    #tempAddtions1 t1            
--------                            WHERE   Ma.ID = t1.ID AND            
--------                       Ma.emp_id = t1.emp_code                                                    
--------                            DROP TABLE #tempAddtions1                                                    
--------                            CREATE TABLE #tempDeduction1            
--------                                   (            
--------                                    ID INT IDENTITY ,            
--------                                    ded_type VARCHAR(500) NULL ,            
--------                                    ded_amount FLOAT NULL ,            
--------                                    emp_code INT NULL            
--------                                   )                                                      
--------                            INSERT  INTO #tempDeduction1            
--------                                    SELECT  (SELECT [desc] FROM deductions_types WHERE id = ed.trx_type            
--------                                            ) 'ded_type', trx_amount, emp_code            
--------                                    FROM    emp_deductions ed            
--------                                WHERE   ed.emp_code = @empID AND            
--------                                            --MONTH(trx_period) = @month AND            
--------           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
--------                                            YEAR(trx_period) = @year                                                    
--------                            UPDATE  #Main            
--------                            SET     ded_type = t1.ded_type, ded_Amount = t1.ded_amount            
--------                            FROM    #Main Ma ,            
--------                                    #tempDeduction1 t1            
--------                            WHERE   Ma.ID = t1.ID AND            
--------                                    Ma.emp_id = t1.emp_code                                                    
--------                            DROP TABLE #tempDeduction1                                                    
--------                      END                                                    
--------                   IF (@addCount = @dedCount) AND            
--------                      (@addCount <> 0 AND            
--------                       @dedCount <> 0            
--------                      )             
--------                      BEGIN                                                    
--------                            DECLARE @countID2 INT                                                    
--------      SET @countID2 = 1                                                    
--------                            WHILE @countID2 <= @addCount             
--------                                  BEGIN                                                    
--------                                        INSERT  INTO #Main (ID, emp_id, trx_id)            
--------                                                SELECT  @countID2, @empID, @trxID                                                     
--------                                        SET @countID2 = @countID2 + 1                                                       
--------                                  END                     
--------                            CREATE TABLE #tempAddtions2            
--------                                   (            
--------                                    ID INT IDENTITY ,            
--------                                    add_type VARCHAR(500) NULL ,            
--------                                    add_amount FLOAT NULL ,            
--------                                    add_cpf VARCHAR(10) NULL ,            
--------                                    emp_code INT NULL            
--------                                   )                     
--------                            INSERT  INTO #tempAddtions2            
--------                                    SELECT  (SELECT [desc] FROM additions_types WHERE id = ed.trx_type            
--------                                            ) 'add_type', trx_amount,            
--------                                            (SELECT cpf FROM additions_types WHERE id = ed.trx_type            
--------                                            ) 'add_cpf', emp_code            
--------                                    FROM    emp_additions ed            
--------                            WHERE   ed.emp_code = @empID AND            
--------                                            --MONTH(trx_period) = @month AND            
--------           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
--------                                            YEAR(trx_period) = @year AND            
--------(ed.claimstatus = 'Approved' OR            
--------                                             ed.claimstatus IS NULL            
--------                                            )                                                    
--------                            UPDATE  #Main            
--------                            SET     add_type = t1.add_type, add_Amount = t1.add_amount, add_CPF = t1.add_cpf            
--------                            FROM    #Main Ma ,            
--------                                    #tempAddtions2 t1            
--------                            WHERE   Ma.ID = t1.ID AND            
--------                           Ma.emp_id = t1.emp_code                                                    
--------                            DROP TABLE #tempAddtions2                                                    
--------                            CREATE TABLE #tempDeduction2            
--------                                   (            
--------                                    ID INT IDENTITY ,            
--------     ded_type VARCHAR(500) NULL ,            
--------                                    ded_amount FLOAT NULL ,            
--------                                    emp_code INT NULL            
--------                                   )                                                      
--------                            INSERT  INTO #tempDeduction2            
--------                                    SELECT  (SELECT [desc] FROM deductions_types WHERE id = ed.trx_type            
--------                                            ) 'ded_type', trx_amount, emp_code            
--------                                    FROM    emp_deductions ed            
--------                                    WHERE   ed.emp_code = @empID AND            
--------                                            --MONTH(trx_period) = @month AND            
--------           (trx_period >= @startdtsub And trx_period <= @enddtsub) And          
--------                                            YEAR(trx_period) = @year                                           
--------                            UPDATE  #Main            
--------                            SET     ded_type = t1.ded_type, ded_Amount = t1.ded_amount            
--------                            FROM    #Main Ma ,            
--------                                    #tempDeduction2 t1            
--------                            WHERE   Ma.ID = t1.ID AND            
--------                                    Ma.emp_id = t1.emp_code                                       
--------                            DROP TABLE #tempDeduction2                                                    
--------                      END                                                    
--------                   IF @addCount = 0 AND            
--------       @dedCount = 0             
--------                      BEGIN                                                    
--------                            INSERT  INTO #Main (ID, emp_id, trx_id)            
--------                                    SELECT  1, @empID, @trxID                                                        
--------                      END                                                    
--------                   DELETE   FROM #EmpList            
--------                   WHERE    ID = @rowID                                                     
--------             END -- Main While Loop Ends                                                     
--------                                                    
--------     ALTER TABLE #Main ADD compname VARCHAR(100) NULL,compaddress1 VARCHAR(200) NULL,compaddress2 VARCHAR(200) NULL,                                                   
--------       postalcode VARCHAR(20) NULL,phone VARCHAR(20) NULL,fax VARCHAR(20) NULL,state VARCHAR(100) NULL,country VARCHAR(100) NULL,                                                    
--------       MONTH VARCHAR(10) NULL,YEAR VARCHAR(10) NULL,emp_name VARCHAR(100) NULL, fund_type VARCHAR(10) NULL,fund_amount FLOAT NULL,                                                  
--------       total_deductions FLOAT NULL,total_additions FLOAT NULL,netpay VARBINARY(128) NULL,ot1_e FLOAT NULL,ot2_e FLOAT NULL,ic_pp_number VARCHAR(50) NULL,                                                    
--------       ot FLOAT NULL,employeecpf FLOAT NULL,employercpf FLOAT,basic_pay VARBINARY(128) NULL,Gross FLOAT NULL,cpfNet FLOAT NULL,                
--------       unpaid_leaves FLOAT NULL, unpaid_leaves_amount FLOAT NULL, company_roc VARCHAR(100) NULL,                                       
--------       emp_addr1 VARCHAR(500) NULL, emp_addr2 VARCHAR(500) NULL, emp_postal_code VARCHAR(100) NULL,block_no VARCHAR(50) NULL,street_name VARCHAR(100) NULL,unit_no VARCHAR(50) NULL,Level_no  VARCHAR(50) NULL                                                
--------  
--------   
--------       , emp_country VARCHAR(200) NULL,timecardno VARCHAR(50) NULL,emp_type VARCHAR(50),cpf_entitlement VARCHAR(10),                
--------       ot1_rate FLOAT NULL,ot2_rate FLOAT NULL,ot1hrs FLOAT NULL,ot2hrs FLOAT NULL ,NHRate  FLOAT NULL,NH_Wh  FLOAT NULL,NH_E  FLOAT NULL, Dept_ID Int, DHRate  FLOAT NULL,DH_E  FLOAT NULL, WDays  FLOAT NULL  
--------                                                    
--------                                                    
--------                                                    
--------                                                    
--------       UPDATE   #Main            
--------       SET      compname = (SELECT company_name FROM company WHERE company_id= @compid            
--------                           ), compaddress1 = (SELECT address FROM company WHERE company_id= @compid            
--------                                      ), compaddress2 = (SELECT address2 FROM company WHERE company_id= @compid            
--------                                                               ),            
--------                postalcode = (SELECT postal_code FROM company WHERE company_id= @compid            
--------                             ), phone = (SELECT phone FROM company WHERE company_id= @compid            
--------                                        ), fax = (SELECT fax FROM company WHERE company_id= @compid            
--------                                                 ), state = (SELECT state FROM company WHERE company_id= @compid            
--------                                                            ),            
--------                company_roc = (SELECT company_roc FROM company WHERE company_id= @compid            
--------                              ), MONTH = @monthint, YEAR = @year, emp_name = emp.emp_name + ' ' + emp.emp_lname,            
--------                fund_type = pd.fund_type, fund_amount = pd.fund_amount, total_deductions = pd.total_deductions,            
--------                total_additions = pd.total_additions, netpay = pd.netpay, ot1_e = pd.ot1_e, ot2_e = pd.ot2_e,            
--------                ot1_rate = pd.ot1rate, ot2_rate = pd.ot2rate, ic_pp_number = emp.ic_pp_number, ot = pd.ot1_e + pd.ot2_e,            
--------                employeecpf = pd.empcpf, employercpf = pd.employercpf, basic_pay = pd.basic_pay, Gross = pd.total_gross,            
--------                cpfNet = pd.cpfNet, unpaid_leaves = pd.unpaid_leaves, unpaid_leaves_amount = pd.unpaid_leaves_amount,            
--------                emp_addr1 = emp.address, emp_addr2 = emp.localaddress2, block_no = emp.block_no,            
--------              street_name = emp.street_name, unit_no = emp.unit_no, Level_no = emp.Level_no,            
--------                emp_postal_code = emp.postal_code, emp_country = (SELECT Country FROM Country WHERE id = emp.country_id            
--------                                         ), timecardno = emp.time_card_no,            
--------                emp_type = emp.emp_type, cpf_entitlement = emp.cpf_entitlement, ot1hrs = pd.ot1_wh, ot2hrs = pd.ot2_wh, NHRate = pd.NHRate, NH_Wh = pd.NH_Wh, NH_E = pd.NH_E,Dept_ID = emp.Dept_ID, DHRate=pd.DHRate, DH_e = pd.DH_e, Wdays=pd.Wdays  
--------       FROM     #Main Ma ,            
--------                employee emp ,            
--------                prepare_payroll_detail pd            
--------       WHERE    Ma.emp_id = emp.emp_code AND            
--------                Ma.emp_id = pd.emp_id AND            
--------                pd.status = 'G' AND            
--------                Ma.trx_id = pd.trx_id                                                    
--------                                                    
--------       SELECT   MONTH, YEAR, emp_id 'EMP_CODE', EMP_NAME, FUND_TYPE, FUND_AMOUNT, TOTAL_DEDUCTIONS, TOTAL_ADDITIONS,            
--------                CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay))) AS netpay,            
--------                ot1_e, ot2_e, ic_pp_number, ot, ot1_rate, ot2_rate,            
--------                CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), basic_pay))) AS basic_pay,            
--------                Gross, (SELECT  CONVERT(VARCHAR(15), trx_date, 103)            
--------                        FROM    prepare_payroll_hdr            
--------                        WHERE   trx_id IN (SELECT   trx_id            
--------                                           FROM     prepare_payroll_detail            
--------                                           WHERE    emp_id = Ma.emp_id AND            
--------                                                    status = 'G') AND            
--------                                --MONTH(start_period) = @month AND            
--------        (start_period >= @startdtsub And end_period <= @enddtsub) And                                    YEAR(start_period) = @year            
--------                       ) 'paydate', add_Amount 'ADDAMT', add_type 'ADDITIONS', ded_type 'DEDUCTAMT',            
--------                ded_Amount 'DEDUCTIONS',            
--------                (SELECT SUM(CONVERT(NUMERIC(18, 2), CONVERT(VARCHAR(10), DecryptByAsymKey(AsymKey_ID('AsymKey'), netpay))))            
--------                 FROM   prepare_payroll_detail x ,            
--------                        prepare_payroll_hdr y            
--------                 WHERE  x.trx_id = y.trx_id AND            
--------                        x.emp_id = Ma.emp_id AND            
--------                        YEAR(y.start_period) = @year AND            
--------                        MONTH(y.start_period) <= @monthint AND            
--------                        status = 'G'            
--------                ) 'ytdgross', (SELECT   SUM(employerCPF)            
--------                               FROM     prepare_payroll_detail m ,            
--------                                        prepare_payroll_hdr n            
--------                               WHERE    m.trx_id = n.trx_id AND            
--------                                        m.emp_id = Ma.emp_id AND            
--------          --(n.start_period >= @startdtsub And n.end_period <= @enddtsub) And          
--------                                        YEAR(n.start_period) = @year AND            
--------                                        MONTH(n.start_period) <= @monthint AND            
--------                                        status = 'G'            
--------                              ) 'ytdcpf', employeecpf, employercpf, COMPNAME, compaddress1, compaddress2, postalcode,            
--------                phone, fax, state, country, company_roc, add_CPF 'ADDITION_CPF', cpfNet, unpaid_leaves,            
--------                unpaid_leaves_amount, emp_addr1, emp_addr2, emp_postal_code, emp_country, timecardno, block_no,            
--------                street_name, unit_no, Level_no, emp_type, cpf_entitlement, ot1hrs, ot2hrs, Upper(@monthname) [MonthName]        
--------    , NHRate, NH_Wh, NH_E        
--------    , (dbo.ConvertToMinutes(NH_Wh)) NHMin, (NHRate/60) NHRateMin        
--------    , (dbo.ConvertToMinutes(ot1hrs)) OT1Min, (OT1_Rate/60) OT1_RateMin        
--------    , (dbo.ConvertToMinutes(OT2Hrs)) OT2Min, (OT2_Rate/60) OT2_RateMin ,      
-------- NHText=Case When  NH_Wh > 0 Then '(' + Cast(NH_Wh as varchar) + ' is Normal Hours Worked and ' + Cast(NHRate as varchar) + ' is Normal Hourly Rate)'  Else null End,          
-------- OT1Text=Case When ot1hrs > 0 Then '(' +Cast(ot1hrs as varchar) + ' is OT1 Hours Worked and ' + Cast(ot1_rate as varchar) + ' is OT1 Hourly Rate)' Else null End,          
-------- OT2Text=Case When ot2hrs > 0 Then '(' +Cast(ot2hrs as varchar) + ' is OT2 Hours Worked and ' + Cast(ot2_rate as varchar) + ' is OT2 Hourly Rate)' Else null End,      
-------- (select Remarks from empPayslipRemarks where emp_code = Ma.emp_id and Rowid=@month) Remarks,[FileName] 'FileName' ,DHRate ,DH_E,WDays  
-------- FROM     #Main Ma       
--------  Left Outer Join Department D On Ma.Dept_ID = D.ID      
--------    
--------    
--------  
--------GO
-------Merging 9.0
--------CREATE PROC [dbo].[Sp_payroll_add] (@emp_id               BIGINT,    
--------                                   @basic_pay            NUMERIC(18, 2),    
--------                                   @NHRate               NUMERIC(18, 2),    
--------                                   @OT1Rate              NUMERIC(18, 2),    
--------                                   @OT2Rate              NUMERIC(18, 2),    
--------                                   @NH_wh                NUMERIC(18, 2),    
--------                                   @OT1_wh               NUMERIC(18, 2),    
--------                                   @OT2_wh               NUMERIC(18, 2),    
--------                                   @NH_e                 NUMERIC(18, 2),    
--------                                   @OT1_e                NUMERIC(18, 2),    
--------                                   @OT2_e                NUMERIC(18, 2),    
--------                                   @Wdays                FLOAT,    
--------                                   @NetPay               VARCHAR(20),    
--------                                   @total_additions      NUMERIC(18, 2),    
--------                                   @total_deductions     NUMERIC(18, 2),    
--------                                   @ot_entitlement       VARCHAR(10),    
--------                                   @cpfadd_ord           NUMERIC(18, 2),    
--------                                   @cpfadd_additional    NUMERIC(18, 2),    
--------                                   @cpf_net              NUMERIC(18, 2),    
--------                                   @empCPF               NUMERIC(18, 2),    
--------                                   @employerCPF          NUMERIC(18, 2),    
--------                                   @cpfAmount            NUMERIC(18, 2),    
--------                                   @cpfEntitlement       VARCHAR(10),    
--------                                   @empCpfType           INT,    
--------                                   @pr_years             FLOAT,    
--------                                   @cpf_ceiling          FLOAT,    
--------                                   @fund_type            VARCHAR(20),    
--------                                   @fund_amount          FLOAT,    
--------                                   @status               VARCHAR(5),    
--------                                   @month                INT,    
--------                                   @year                 INT,    
--------                                   @unpaid_leaves        FLOAT,    
--------                                   @unpaid_leaves_amount FLOAT,    
--------                                   @total_gross          FLOAT,    
--------                                   @pay_mode             VARCHAR(50),    
--------                                   @employee_giroacc     VARCHAR(50),    
--------                                   @employer_giroacc     VARCHAR(50),    
--------                                   @giro_bank            VARCHAR(50),    
--------                                   @submitted_by         INT,    
--------                                   @fundgrossamount      FLOAT,    
--------                                   @sdlfundgrossamount   FLOAT,    
--------                                   @CMOW                 FLOAT,    
--------                                   @LYOW                 FLOAT,    
--------                                   @CYOW                 FLOAT,    
--------                                   @CPFAWCIL             FLOAT,    
--------                                   @EST_AWCIL            FLOAT,    
--------                                   @ACTCIL               FLOAT,    
--------                                   @AWCM                 FLOAT,    
--------                                   @AWB4CM               FLOAT,    
--------                                   @AWCM_AWB4CM          FLOAT,    
--------                                   @AWCPF                FLOAT,    
--------                                   @sdfrequired			 int,
--------								   @dailyrate			 FLOAT,
--------								   @daysworkedrate		 FLOAT
--------)    
--------AS    
--------  DECLARE @trx_id INT    
--------  DECLARE @sdlamt AS FLOAT    
--------  DECLARE @stdt AS DATETIME    
--------  DECLARE @endt AS DATETIME    
--------  DECLARE @startsubday int  
--------  Set @sdlamt = 0  
--------  --       DECLARE @DATEINYEAR TABLE                        
--------  --           (                        
--------  --    ROWID   Int,              
--------  --    Emp_Code  Int ,              
--------  --    [Year]   Int ,              
--------  --    [Month]   Int ,              
--------  --    [MonthName]  varchar(100) ,              
--------  --    PayStartDate datetime,              
--------  --    PayEndDate  datetime,              
--------  --    PaySubStartDate datetime,              
--------  --    PaySubEndDate datetime,              
--------  --    PayStartDay  Int ,              
--------  --    PayEndDay  Int ,              
--------  --    PaySubStartDay Int ,              
--------  --    PaySubEndDay Int ,              
--------  --    ISEOM   varchar(3)              
--------  --   )                
--------  --              
--------  --   Insert @DATEINYEAR               
--------  --  (              
--------  --    ROWID,              
--------  --    Emp_Code,              
--------  --    [Year],              
--------  --    [Month],              
--------  --    [MonthName],              
--------  --    PayStartDate,              
--------  --    PayEndDate,              
--------  --    PaySubStartDate,              
--------  --    PaySubEndDate,              
--------  --    PayStartDay,              
--------  --    PayEndDay,              
--------  --    PaySubStartDay,              
--------  --    PaySubEndDay,              
--------  --    ISEOM              
--------  --  )         
--------  --Exec sp_GetPayrollMonth @month,0,0                      
--------  --Select @stdt=PaySubStartDate,@endt=PaySubEndDate From @DATEINYEAR              
--------  SELECT @stdt = PaySubStartDate,@endt = PaySubEndDate, @startsubday  = PaySubStartDay  
--------  FROM   PayrollMonthlyDetail    
--------  WHERE  ROWID = @month    
--------    
--------  
--------    
-------- IF (@sdfrequired = 2)    
-------- BEGIN    
--------  IF (@sdlfundgrossamount > 0)    
--------      BEGIN    
--------          SELECT @sdlamt = dbo.Fn_getsdlamount(@sdlfundgrossamount)    
--------      END    
--------  ELSE    
--------      BEGIN    
--------          SELECT @sdlamt = dbo.Fn_getsdlamount(@fundgrossamount)    
--------      END    
-------- END    
--------  
--------  if (@sdlamt > 0 And @startsubday > 1)  
-------- BEGIN  
--------  Declare @dedsdlamt as float  
--------  Select @dedsdlamt=isnull(sum(SDL),0) From prepare_payroll_detail pd Inner Join prepare_payroll_hdr ph on pd.trx_id = ph.trx_id Where ([Status]='P' Or [Status]='G' Or [Status]='A') And Emp_ID=@emp_id And ph.end_period=(SELECT PaySubEndDate FROM   Payrol
--------lMonthlyDetail  WHERE  ROWID = (@month-1))  
--------  Set @sdlamt = @sdlamt - @dedsdlamt  
-------- END  
--------    
--------  INSERT INTO prepare_payroll_hdr    
--------              (trx_date,start_period,end_period,created_on,created_by)    
--------  VALUES      (Getdate(),    
--------               --CAST(@year AS VARCHAR) + '/' + CAST(@month AS VARCHAR) + '/01',              
--------               --DATEADD(m,DATEDIFF(m, 0, DATEADD(m, 1, (CAST(@year AS VARCHAR) + '/' + CAST(@month AS VARCHAR) + '/01'))),-1),              
--------               @stdt,@endt,Getdate(),@emp_id)    
--------    
--------  SELECT @trx_id = @@IDENTITY    
--------    
--------  INSERT INTO prepare_payroll_detail    
--------              ([trx_id],[emp_id],[basic_pay],[NHRate],[OT1Rate],[OT2Rate],[NH_wh],[OT1_wh],[OT2_wh],[NH_e],[OT1_e],[OT2_e],[Wdays],[NetPay],[total_additions],[total_deductions],[OT_entitlement],[cpfAdd_Ordinary],[cpfAdd_Additional],[cpfNet],[empCPF],[employerCPF],[cpfAmount],[cpfEntitlement],[empCpfType],[pr_years],[cpf_ceiling],[fund_type],[fund_amount],[status],[unpaid_leaves],[unpaid_leaves_amount],[total_gross],[pay_mode],[employee_giro_acc],[employer_giro_acc],[bank_code],[submitted_by],sdl,DHRate,DH_e)    
--------  VALUES      (@trx_id,@emp_id,Encryptbyasymkey(Asymkey_id('AsymKey'), CAST(@basic_pay AS VARCHAR(50))),@NHRate,@OT1Rate,@OT2Rate,@NH_wh,@OT1_wh,@OT2_wh,@NH_e,@OT1_e,@OT2_e,@Wdays,Encryptbyasymkey(Asymkey_id('AsymKey'), CAST(@netpay AS VARCHAR(50))),@total_additions,@total_deductions,@ot_entitlement,@cpfadd_ord,@cpfadd_additional,@cpf_net,(Round(@empCPF, 0)),@employerCPF,(Round(@cpfAmount, 0)),@cpfEntitlement,@empCpfType,@pr_years,@cpf_ceiling,@fund_type,@fund_amount,@status,@unpaid_leaves,@unpaid_leaves_amount,@total_gross,@pay_mode,@employee_giroacc,@employer_giroacc,@giro_bank,@submitted_by,@sdlamt,@dailyrate,@daysworkedrate)    
--------    
--------  INSERT INTO AWAudit    
--------              (trx_id,emp_id,CMOW,LYOW,CYOW,CPFAWCIL,EST_AWCIL,ACTCIL,AWCM,AWB4CM,AWCM_AWB4CM,AWSUBJCPF)    
--------  VALUES      (@trx_id,@emp_id,@CMOW,@LYOW,@CYOW,@CPFAWCIL,@EST_AWCIL,@ACTCIL,@AWCM,@AWB4CM,@AWCM_AWB4CM,@AWCPF)    
--------   
--------  UPDATE emp_additions    
--------  SET    status = 'L'    
--------  WHERE  (emp_code = @emp_id    
--------      AND (MONTH(trx_period) = @month    
--------           AND YEAR(trx_period) = @year))    
--------      OR (emp_code = @emp_id    
--------          AND    
--------          --MONTH(trx_period) = @month AND                
--------          (trx_period >= @stdt    
--------           AND trx_period <= @endt)    
--------         --ANd additionsforyear = @year                
--------         )    
--------    
--------  UPDATE emp_deductions    
--------  SET    status = 'L'    
--------  WHERE  emp_code = @emp_id    
--------     AND    
--------     --MONTH(trx_period) = @month AND                
--------     (trx_period >= @stdt    
--------      AND trx_period <= @endt)    
--------     AND YEAR(trx_period) = @year    
--------    
--------  UPDATE emp_leaves    
--------  SET    payrollStatus = 'L'    
--------  WHERE  ((MONTH(start_date) = @month    
--------           AND YEAR(start_date) = @year)    
--------           OR (--MONTH(end_date) = @month AND                
--------              (end_date >= @stdt    
--------               AND end_date <= @endt)    
--------              AND YEAR(end_date) = @year))    
--------     AND Emp_id = @emp_id    
--------GO
--------Merging 9.0
--sp_cpf_detail 11, 2010, 2, '199305457N-PTE-01'  
--------CREATE PROC [dbo].[sp_cpf_detail]    
--------       @month INT ,    
--------       @year INT ,    
--------       @companyid INT ,    
--------       @csnno VARCHAR(50)    
--------AS     
--------       BEGIN              
--------             SELECT isnull(emp_name,'')+' '+isnull(emp_lname,'') emp_name, employee_cpf_acct, b.cpfAmount, cdac_fund, sinda_fund, mbmf_fund, ecf_fund, b.fund_type,    
--------                    b.fund_amount, YEAR(a.joining_date) yjoining_date, MONTH(a.joining_date) mjoining_date,    
--------                    YEAR(a.termination_date) ytermination_date, MONTH(a.termination_date) mtermination_date    
--------             INTO   #temp    
--------             FROM   employee a ,    
--------                    prepare_payroll_detail b ,    
--------                    prepare_payroll_hdr c    
--------             WHERE  a.emp_code = b.emp_id AND    
--------                    b.trx_id = c.trx_id AND    
--------                    MONTH(c.start_period) = @month AND    
--------                    YEAR(c.start_period) = @year AND    
--------                    b.status = 'G' AND    
--------                    b.emp_id IN (SELECT emp_code    
--------                                 FROM   employee    
--------                                 WHERE  company_id = @companyid AND    
--------                                        cpf_entitlement = 'Y' AND    
--------                                        employer_cpf_acct = @csnno)         
--------								And b.cpfAmount > 0       
--------        
--------             UPDATE #temp    
--------             SET    cdac_fund = fund_amount    
--------             WHERE  fund_type = 'CDAC'        
--------             UPDATE #temp    
--------             SET    sinda_fund = fund_amount    
--------             WHERE  fund_type = 'SINDA'        
--------             UPDATE #temp    
--------             SET    mbmf_fund = fund_amount    
--------             WHERE  fund_type = 'MBMF'        
--------             UPDATE #temp    
--------             SET    ecf_fund = fund_amount    
--------             WHERE  fund_type = 'ECF'        
--------
----------			Select D.Emp_Code,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')) 'emp_name',D.FundType,Em.Employee_Cpf_Acct,Sum(Trx_Amount) Trx_Amount
----------			Into #Temp2 From (
----------				Select ED.Emp_Code,ED.Trx_Amount,
----------				FundType = Case
----------						When (ED.FundType=1 OR ED.FundType=5) Then 'CDAC'  
----------						When (ED.FundType=2 OR ED.FundType=6) Then 'ECF'  
----------						When (ED.FundType=3 OR ED.FundType=7) Then 'MBMF'  
----------						When (ED.FundType=4 OR ED.FundType=8) Then 'SINDA'  
----------						END
----------				From Emp_Deductions ED Where
----------				ED.status = 'L'
----------				AND MONTH(ED.trx_period) = @month
----------				AND YEAR(ED.trx_period) = @year
----------			) D Inner Join Employee Em On D.Emp_Code = Em.Emp_Code 
----------		Group By D.Emp_Code,D.FundType,(Isnull(Em.emp_name, '') + ' ' + Isnull(Em.emp_lname, '')),Em.Employee_Cpf_Acct
--------
--------		Select Emp_Name,Employee_Cpf_Acct,CPFAmount,CDAC_Fund,SINDA_Fund,MBMF_Fund,ECF_Fund,Fund_Type,Fund_Amount,yJoining_Date,mJoining_Date,yTermination_Date,mTermination_Date From #temp
--------       END      
--------GO
--------Merging 20
--[sp_bulkaddtranspose] 2,44     
----------		CREATE PROCEDURE [dbo].[sp_bulkaddtranspose]  
----------					 (                        
----------					   @compid   INT,            
----------					   @monthid  INT ,  
----------					   @year  INT     
----------					 )                        
----------					 AS    
----------					   DECLARE @month  INT  
----------					   SELECT  @month = A.Month FROM PayrollMonthlyDetail A WHERE A.ROWID=@monthid  
----------					  
----------					     
----------					   SELECT * Into #Employee   
----------						FROM Employee   
----------						WHERE Company_ID=@compid   
----------						AND  termination_date IS NULL OR ((datepart(year,termination_date))>=@year AND (datepart(month,termination_date))>=@month)  
----------						OR ((datepart(year,termination_date))>@year) OR ((datepart(year,termination_date))=@year AND (datepart(month,termination_date))=@month)  
----------					  
----------					  
----------					              
----------					   --Select * From Emp_Additions Where Emp_Code=89            
----------					   --Update Emp_Additions Set isBulkAdd = 1 Where Emp_Code=89            
----------					   --DECLARE @compid AS INT            
----------					   --DECLARE @monthid AS INT            
----------					               
----------					   --SET @compid = 2            
----------					   --SET @monthid = 41            
----------					               
----------					   --            
----------					   --Select * From             
----------					   --(            
----------					   -- Select Emp_Code, ID, 0 AS Amount From Employee E            
----------					   -- Cross Join (Select * From Additions_Types Where Company_ID=2) D            
----------					   -- Where E.Company_ID=2            
----------					   --) F            
----------					   --            
----------					   DECLARE @addid AS INT            
----------					   DECLARE @addtext AS VARCHAR(1000)            
----------					   DECLARE @sql AS VARCHAR(3000)            
----------					               
----------					   SET @addtext=''            
----------					               
----------					   DECLARE cur CURSOR FOR            
----------						SELECT TOP 20 ID            
----------						FROM   Additions_Types            
----------						WHERE  upper(tax_payable)='NO'        
----------						ORDER  BY [desc]            
----------					               
----------					   OPEN cur            
----------					               
----------					   FETCH NEXT FROM cur INTO @addid      
----------					               
----------					   WHILE @@FETCH_STATUS <> -1            
----------						BEGIN            
----------						 SET @addtext = @addtext + '[' + CAST(@addid AS VARCHAR(100)) + '],'            
----------					               
----------						 FETCH NEXT FROM cur INTO @addid            
----------						END            
----------					               
----------					   CLOSE cur            
----------					               
----------					   DEALLOCATE cur            
----------					               
----------					   SET @sql = 'SELECT Emp_Code,FullName,Time_Card_No, ' + Substring(@addtext, 0, Len(@addtext)) + ' FROM             
----------						  (            
----------						Select * From             
----------						 ( Select R.*,trx_amount  Amount From             
----------					   (            
----------						Select Emp_Code, (isnull(Emp_Name,'''') + '' ''+ isnull(Emp_LName,''''))  FullName ,Time_Card_No, ID From #Employee             
----------						Cross Join (Select * From Additions_Types Where upper(tax_payable)=''NO'' And (isShared=''Yes'' Or Company_ID=' + CAST(@compid AS VARCHAR) + ')) D             
----------					   ) R Left Outer Join (select trx_type,Emp_Code,Sum(Trx_Amount) Trx_Amount From emp_additions ea         
----------					   Inner Join Additions_Types at On ea.trx_type = at.id Where upper(tax_payable)=''NO'' And BulkAddinMonth = ' + CAST(@monthid AS VARCHAR) + ' Group By Trx_Type,Emp_Code)            
----------						E On R.Emp_Code = E.Emp_Code And R.ID = E.Trx_Type)F) p PIVOT(Sum (Amount) FOR ID IN(' + Substring(@addtext, 0, Len(@addtext)) + ')) AS pvt Order By FullName'                         
----------					   EXECUTE(@sql)            
----------					   Drop Table #Employee 
----------			GO
---------- Merging 9.0
				--exec sp_bulkdedtranspose 17,37,2010
----------			CREATE PROCEDURE [dbo].[sp_bulkdedtranspose]    
----------			(                      
----------				@compid		INT,          
----------				@monthid	INT ,			    
----------				@year		INT  
----------			)                      
----------			AS                       
----------       
----------			DECLARE @month		INT
----------			SELECT  @month = A.Month FROM PayrollMonthlyDetail A WHERE A.ROWID=@monthid
----------
---------- 
----------			SELECT * Into #Employee 
----------				FROM Employee 
----------				WHERE Company_ID=@compid 
----------				AND  termination_date IS NULL OR ((datepart(year,termination_date))>=@year AND (datepart(month,termination_date))>=@month)
----------				OR ((datepart(year,termination_date))>@year)	OR ((datepart(year,termination_date))=@year AND (datepart(month,termination_date))=@month)
----------     
----------          
----------						--Select * From Emp_Additions Where Emp_Code=89          
----------						--Update Emp_Additions Set isBulkAdd = 1 Where Emp_Code=89          
----------						--DECLARE @compid AS INT          
----------						--DECLARE @monthid AS INT          
----------						          
----------						--SET @compid = 2          
----------						--SET @monthid = 41          
----------						          
----------						--          
----------						--Select * From           
----------						--(          
----------						-- Select Emp_Code, ID, 0 AS Amount From Employee E          
----------						-- Cross Join (Select * From Additions_Types Where Company_ID=2) D          
----------						-- Where E.Company_ID=2          
----------						--) F          
----------						--          
----------						DECLARE @addid AS INT          
----------						DECLARE @addtext AS VARCHAR(1000)          
----------						DECLARE @sql AS VARCHAR(3000)          
----------						          
----------						SET @addtext=''          
----------						          
----------						DECLARE cur CURSOR FOR          
----------							SELECT TOP 20 ID          
----------							FROM   Deductions_Types          
----------							WHERE  ((Company_ID = @compid)OR (upper(isShared)='YES' AND Company_ID!=-1 ))
----------							ORDER  BY [desc]          
----------						          
----------						OPEN cur          
----------						          
----------						FETCH NEXT FROM cur INTO @addid          
----------						          
----------						WHILE @@FETCH_STATUS <> -1          
----------							BEGIN          
----------								SET @addtext = @addtext + '[' + CAST(@addid AS VARCHAR) + '],'          
----------						          
----------								FETCH NEXT FROM cur INTO @addid          
----------							END          
----------						          
----------						CLOSE cur          
----------						          
----------						DEALLOCATE cur          
----------						          
----------						SET @sql = 'SELECT  Emp_Code,FullName,Time_Card_No, ' + Substring(@addtext, 0, Len(@addtext)) + ' FROM           
----------						   (          
----------							Select * From           
----------							 ( Select R.*,trx_amount  Amount From           
----------						(          
----------						 Select Emp_Code, (isnull(Emp_Name,'''') + '' ''+ isnull(Emp_LName,''''))  FullName ,Time_Card_No, ID From #Employee           
----------						 Cross Join (Select * From Deductions_Types Where (upper(isShared)=''YES'' Or Company_ID=' + CAST(@compid AS VARCHAR) + ')) D           
----------						) R Left Outer Join (select trx_type,Emp_Code,Sum(Trx_Amount) Trx_Amount From emp_deductions ea       
----------						Inner Join Deductions_Types at On ea.trx_type = at.id Where BulkDedInMonth = ' + CAST(@monthid AS VARCHAR) + ' Group By Trx_Type,Emp_Code)          
----------						 E On R.Emp_Code = E.Emp_Code And R.ID = E.Trx_Type          
----------						)F) p PIVOT(Sum (Amount) FOR ID IN(' + Substring(@addtext, 0, Len(@addtext)) + ')) AS pvt Order By FullName'          
----------						    
----------						EXECUTE(@sql)          						    
----------						Drop Table #Employee 
----------						
----------				GO
----------Merging 9.0
						--sp_allowed_leaves 2, 4, 2010  
----------						CREATE PROCEDURE [dbo].[sp_allowed_leaves] --1,71,2008        
----------							   @compid INT ,    
----------							   @groupid INT ,    
----------							   @leave_year INT    
----------						AS     
----------						DECLARE @leavemodel int  
----------						  
----------						Select @leavemodel = Leave_Model From Company Where Company_ID = @compid  
----------						  
----------						  
----------							   BEGIN        
----------									 SELECT *  Into #LeaveTemp  
----------									 FROM   (--SELECT b.id 'typeid', a.id, b.[type], a.group_id, leaves_allowed, b.code    
----------						--                     FROM   leaves_allowed a 
----------						--                            ,leave_types b    
----------						--                     WHERE  b.id*=a.leave_type AND    
----------						--                            (b.companyid = -1 OR    
----------						--                             b.companyid = @compid    
----------						--                            ) AND    
----------						--                            a.group_id = @groupid AND    
----------						--                            a.leave_year = @leave_year    
----------													Select la.leave_type typeid,la.id,lt.[type], la.group_id,la.leaves_allowed,lt.code  From leaves_allowed la
----------													Inner Join Leave_Types lt on la.leave_type = lt.id Where la.group_id = @groupid And la.leave_year=@leave_year and (lt.companyid = -1 OR lt.companyid = @compid)
----------													Union
----------													Select lt.id typeid, null id,lt.[type],null group_id, null leaves_allowed,lt.code From leave_types lt
----------													Where lt.id not in
----------													(
----------														Select la.leave_type From leaves_allowed la
----------														Inner Join Leave_Types lt on la.leave_type = lt.id Where la.group_id = @groupid And la.leave_year=@leave_year and (lt.companyid = -1 OR lt.companyid = @compid)
----------													)
----------											) AS result    
----------									 WHERE  (result.code != '0005' OR    
----------											 result.code IS NULL    
----------											)  
----------							   END      
----------						  
----------						IF (@leavemodel  = 3 Or @leavemodel  = 4 Or @leavemodel  = 6 Or @leavemodel  = 8)  
----------						BEGIN  
----------						 Delete From #LeaveTemp Where code = '0001'  
----------						END  
----------						  
----------						Select * From #LeaveTemp Order By [Type]  
----------						  
----------						Drop Table #LeaveTemp   
----------
----------						GO
----------Merging 9.0
----------CREATE PROC [dbo].[Sp_getemployeeleavepolicybymonthly] @empid              INT,
----------                                                      @year               VARCHAR(4),
----------                                                      @leavetype          INT,
----------                                                      @compolicyleave     FLOAT,
----------                                                      @currentleaveearned FLOAT
----------AS
----------  DECLARE @RndMonth INT
----------  DECLARE @MonthInNumber INT
----------  DECLARE @startdtsub DATETIME
----------  DECLARE @enddtsub DATETIME
----------  DECLARE @RowID FLOAT
----------  DECLARE @YearID INT
----------  DECLARE @MONTHID INT
----------  DECLARE @PaidLeave FLOAT
----------  DECLARE @UnPaidLeave FLOAT
----------  DECLARE @LeaveAvailable FLOAT
----------  DECLARE @DateofJoiningMth INT
----------  DECLARE @DateofTerminate INT
----------  DECLARE @CompanyLeaveAllowedDec FLOAT
----------  DECLARE @CurrentLeaveEarnedDec FLOAT
----------  DECLARE @LeaveAvailableTot FLOAT
----------  DECLARE @LEAVEMODEL INT
----------  DECLARE @LOCK INT
----------  DECLARE @LASTPALE DECIMAL(8, 2)
----------  DECLARE @LASTCLE FLOAT
----------  DECLARE @TOTCURLE DECIMAL(8, 2)
----------  DECLARE @LYL FLOAT
----------  DECLARE @CMLE DECIMAL(8, 2)
----------
----------  SET @TOTCURLE = 0
----------  SET @LASTPALE = 0
----------  SET @LASTCLE = 0
----------  SET @LOCK = 0
----------  SET @LeaveAvailableTot = @currentleaveearned
----------
----------  SELECT @LEAVEMODEL = leave_model
----------  FROM   company
----------  WHERE  company_id = (SELECT company_id
----------                       FROM   employee
----------                       WHERE  emp_code = @empid)
----------
----------  SELECT @DateofJoiningMth = MONTH(joining_date),@YearID = YEAR(joining_date),@DateofTerminate = MONTH(termination_date)
----------  FROM   employee
----------  WHERE  emp_code = @empid
----------
----------  IF (@DateofTerminate IS NULL)
----------      BEGIN
----------          SET @DateofTerminate = 13
----------      END
----------
----------  CREATE TABLE #emltemp
----------      (
----------           emp_id         INT,
----------           leave_type     INT,
----------           LY_Leaves_Bal  FLOAT,
----------           leaves_allowed FLOAT,
----------           leave_year     INT
----------      )
----------
----------  INSERT INTO #emltemp
----------  SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
----------  FROM   employeeleavesallowed
----------  WHERE  LEave_Type != 8
----------
----------  IF (@leavemodel = 1
----------       OR @leavemodel = 2
----------       OR @leavemodel = 5
----------       OR @leavemodel = 7)
----------      BEGIN
----------          INSERT INTO #emltemp
----------          SELECT emp_id,leave_type,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leaves_allowed),leave_year
----------          FROM   employeeleavesallowed
----------          WHERE  LEave_Type = 8
----------      END
----------
----------  IF (@leavemodel = 4
----------       OR @leavemodel = 6
----------       OR @leavemodel = 8
----------       OR @leavemodel = 3)
----------      BEGIN
----------          INSERT INTO #emltemp
----------          SELECT emp_id,8,CONVERT(DECIMAL(8, 1), Isnull(LY_Leaves_Bal, 0)),CONVERT(DECIMAL(8, 1), leavesallowed),@year
----------          FROM   YOSLeavesAllowed
----------          WHERE  Emp_ID = @empid
----------             AND LeavesAllowed > 0
----------      END
----------
----------  IF (@LEAVEMODEL = 1
----------       OR @LEAVEMODEL = 2
----------       OR @LEAVEMODEL = 5
----------       OR @LEAVEMODEL = 7)
----------      BEGIN
----------          SET @startdtsub = CONVERT(DATETIME, '01/01/' + @year, 103)
----------          SET @enddtsub = CONVERT(DATETIME, '31/12/' + @year, 103)
----------      END
----------  ELSE
----------      BEGIN
----------          SET @startdtsub = CONVERT(DATETIME, '01/'+ CAST(@DateofJoiningMth AS VARCHAR) + '/' + @year, 103)
----------
----------          IF (@DateofJoiningMth = 1)
----------              BEGIN
----------                  SET @enddtsub = CONVERT(DATETIME, '31/12/' + @year, 103)
----------              END
----------          ELSE
----------              BEGIN
----------                  SELECT @RndMonth = DAY(MAX(DateInYear))
----------                  FROM   DateInYear
----------                  WHERE  YEAR(DateInYear) = (CAST(@year AS INT) + 1)
----------                     AND MONTH(DateInYear) = (@DateofJoiningMth - 1)
----------
----------                  SET @enddtsub = CONVERT(DATETIME, CAST(@RndMonth AS VARCHAR) + '/'+ CAST((@DateofJoiningMth-1) AS VARCHAR) + '/' + CAST((CAST(@year AS INT)+1) AS VARCHAR), 103)
----------              END
----------      END
----------
----------  SELECT CAST(0 AS FLOAT) rowid,d.mth,@compolicyleave companyleaveallowed,CONVERT(DECIMAL(8, 2), @currentleaveearned) currentleaveearned,paidleaves = CASE
----------                                                                                                                                                        WHEN e.paidleaves IS NULL THEN CONVERT(FLOAT, 0)
----------                                                                                                                                                        ELSE CONVERT(FLOAT, e.paidleaves)
----------                                                                                                                                                      END,unpaidleaves = CASE
----------                                                                                                                                                                           WHEN f.unpaidleaves IS NULL THEN CONVERT(FLOAT, 0)
----------                                                                                                                                                                           ELSE CONVERT(FLOAT, f.unpaidleaves)
----------                                                                                                                                                                         END,CONVERT(DECIMAL(8, 2), 0) leaveavailable
----------  INTO   #templeavestart
----------  FROM   (SELECT DISTINCT (MONTH(dateinyear)) mth,l.id,l.TYPE
----------          FROM   dateinyear
----------                 CROSS JOIN leave_types l
----------          WHERE  l.companyid = -1) d
----------         LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(paidleaves) paidleaves
----------                          FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,CONVERT(DECIMAL(8, 1), CONVERT(DECIMAL(8, 2), COUNT(eld.halfday_leave)) / 2) paidleaves
----------                                  FROM   emp_leaves el
----------                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------                                  WHERE  el.emp_id = @empid
----------                                     AND (eld.leave_date >= @startdtsub
----------                                          AND eld.leave_date <= @enddtsub)
----------                                     AND (eld.unpaid_leave = 0
----------                                          AND eld.halfday_leave = 1)
----------                                     AND el.status = 'Approved'
----------                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
----------                                  UNION ALL
----------                                  SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,COUNT(eld.unpaid_leave) paidleaves
----------                                  FROM   emp_leaves el
----------                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------                                  WHERE  el.emp_id = @empid
----------                                     AND (eld.leave_date >= @startdtsub
----------                                          AND eld.leave_date <= @enddtsub)
----------                                     AND (eld.unpaid_leave = 0
----------                                          AND eld.halfday_leave = 0)
----------                                     AND el.status = 'Approved'
----------                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
----------                          GROUP  BY d.emp_id,d.leave_type,d.mth) e ON d.mth = e.mth
----------                                                                      AND e.leave_type = d.id
----------         LEFT OUTER JOIN (SELECT emp_id,leave_type,mth,SUM(unpaidleaves) unpaidleaves
----------                          FROM   (SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,SUM(eld.unpaid_leave) / 2 unpaidleaves
----------                                  FROM   emp_leaves el
----------                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------                                  WHERE  el.emp_id = @empid
----------                                     AND (eld.leave_date >= @startdtsub
----------                                          AND eld.leave_date <= @enddtsub)
----------                                     AND (eld.unpaid_leave = 1
----------                                          AND eld.halfday_leave = 1)
----------                                     AND el.status = 'Approved'
----------                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)
----------                                  UNION ALL
----------                                  SELECT el.emp_id,el.leave_type,MONTH(eld.leave_date) mth,SUM(eld.unpaid_leave) unpaidleaves
----------                                  FROM   emp_leaves el
----------                                         INNER JOIN emp_leaves_detail eld ON el.trx_id = eld.trx_id
----------                                  WHERE  el.emp_id = @empid
----------                                     AND (eld.leave_date >= @startdtsub
----------                                          AND eld.leave_date <= @enddtsub)
----------                                     AND (eld.unpaid_leave = 1
----------                                          AND eld.halfday_leave = 0)
----------                                     AND el.status = 'Approved'
----------                                  GROUP  BY el.emp_id,el.leave_type,MONTH(eld.leave_date)) d
----------                          GROUP  BY d.emp_id,d.leave_type,d.mth) f ON d.mth = f.mth
----------                                                                      AND f.leave_type = d.id
----------  WHERE  d.id = @leavetype
----------  ORDER  BY d.id,d.mth
----------
----------  DECLARE @lylsum AS FLOAT
----------
----------  SELECT @lylsum = Isnull(LY_Leaves_Bal, 0)
----------  FROM   #emltemp
----------  WHERE  emp_id = @empid
----------     AND Leave_Type = @leavetype
----------     AND leave_year = @year
----------
----------  SELECT rowid,mth,companyleaveallowed,
----------         --         lyl = CASE           
----------         --                 WHEN @currentleaveearned >= @compolicyleave          
----------         --                 THEN @currentleaveearned - @compolicyleave          
----------         --                 ELSE 0          
----------         --               END,          
----------         @lylsum AS lyl,cyl = CASE
----------                                WHEN @currentleaveearned >= @compolicyleave THEN @currentleaveearned --@currentleaveearned - ( @currentleaveearned - @compolicyleave )    
----------                                ELSE @currentleaveearned
----------                              END,currentleaveearned,paidleaves,unpaidleaves,leaveavailable,Datename(MONTH, '1900/' + CAST(mth AS VARCHAR(2)) + '/01') mthname,CONVERT(DECIMAL(8, 2), 0) cmle
----------  INTO   #templeavebalancepre
----------  FROM   #templeavestart
----------
----------
----------  IF (@YearID != YEAR(@year))
----------      BEGIN
----------          SET @MonthInNumber = 12
----------      END
----------  ELSE
----------      BEGIN
----------		  IF (@LEAVEMODEL = 3 OR @LEAVEMODEL = 8 OR @LEAVEMODEL = 4 OR @LEAVEMODEL = 6) 
----------			BEGIN
----------				SET @MonthInNumber = 12 --- (@DateofJoiningMth - 1) On August 13th this code is commented for the issue with respect to click on detail for the employees joining current year in the mid.. like Feb or July.
----------			END
----------			ELSE
----------			BEGIN
----------				SET @MonthInNumber = 12 - (@DateofJoiningMth - 1) --On August 13th this code is commented for the issue with respect to click on detail for the employees joining current year in the mid.. like Feb or July.
----------			END
----------      END
----------
----------  IF (@LEAVEMODEL = 2
----------       OR @LEAVEMODEL = 5
----------       OR @LEAVEMODEL = 7)
----------      OR (@LEAVEMODEL = 4
----------           OR @LEAVEMODEL = 6
----------           OR @LEAVEMODEL = 8)
----------      BEGIN
----------          IF (@LEAVEMODEL != 1
----------              AND @LEAVEMODEL != 2
----------              AND @LEAVEMODEL != 5
----------              AND @LEAVEMODEL != 7)
----------              BEGIN
----------
----------                  UPDATE #TempLeaveBalancePre
----------                  SET    Mth = (Mth - @DateofJoiningMth) + 1,
----------                         RowID = 1
----------                  WHERE  Mth >= @DateofJoiningMth
----------
----------                  IF (@DateofJoiningMth != 1)
----------                      BEGIN
----------                          UPDATE #TempLeaveBalancePre
----------                          SET    Mth = Mth + (SELECT MAX(Mth)
----------                                              FROM   #TempLeaveBalancePre
----------                                              WHERE  RowID = 1)
----------                          WHERE  RowID = 0
----------                      END
----------              END
----------
----------          IF (@YearID != YEAR(@year))
----------              BEGIN
----------                  UPDATE #templeavebalancepre
----------                  SET    rowid = 0
----------                  WHERE  mth = 1
----------
----------                  UPDATE #templeavebalancepre
----------                  SET    rowid = Round((cyl / @MonthInNumber), 2)
----------                  WHERE  mth != 1
----------                     AND mth != 12
----------              END
----------          ELSE
----------              BEGIN
----------					IF (@LEAVEMODEL = 3 OR @LEAVEMODEL = 8 OR @LEAVEMODEL = 4 OR @LEAVEMODEL = 6) 
----------					BEGIN
----------						  UPDATE #templeavebalancepre
----------						  SET    rowid = 0
----------						  WHERE  mth = 1
----------
----------						  UPDATE #templeavebalancepre
----------						  SET    rowid = Round((cyl / @MonthInNumber), 2)
----------						  WHERE  mth != 1
----------							 AND mth != 12
----------					END
----------					ELSE
----------					BEGIN
----------						  UPDATE #templeavebalancepre  
----------						  SET    rowid = 0  
----------						  WHERE  mth <= @DateofJoiningMth  
----------			  
----------						  UPDATE #templeavebalancepre  
----------						  SET    rowid = Round(( cyl / @MonthInNumber ), 2)  
----------						  WHERE  mth > @DateofJoiningMth  
----------								 AND mth != 12  
----------					END
----------              END
----------
----------          UPDATE #templeavebalancepre
----------          SET    rowid = cyl - (SELECT Round(SUM(rowid), 2)
----------                                FROM   #templeavebalancepre
----------                                WHERE  mth < 12)
----------          WHERE  mth = 12
----------      END
----------  ELSE
----------      BEGIN
----------          IF (@compolicyleave < @currentleaveearned)
----------              BEGIN
----------                  --              UPDATE #templeavebalancepre    
----------                  --              SET    rowid = companyleaveallowed    
----------                  UPDATE #templeavebalancepre
----------                  SET    rowid = @currentleaveearned
----------              END
----------          ELSE
----------              BEGIN
----------                  UPDATE #templeavebalancepre
----------                  SET    rowid = @currentleaveearned
----------              END
----------      END
----------
----------  UPDATE #templeavebalancepre
----------  SET    currentleaveearned = lyl + rowid
----------
----------  DECLARE changecursor CURSOR FOR
----------      SELECT rowid,mth,companyleaveallowed,currentleaveearned,paidleaves,unpaidleaves,leaveavailable
----------      FROM   #templeavebalancepre
----------      FOR UPDATE OF leaveavailable
----------
----------  OPEN changecursor
----------
----------  FETCH NEXT FROM changecursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
----------
----------  WHILE @@FETCH_STATUS = 0
----------      BEGIN
----------          SET @LeaveAvailableTot = @CurrentLeaveEarnedDec - @PaidLeave
----------
----------          UPDATE #templeavebalancepre
----------          SET    leaveavailable = @LeaveAvailableTot
----------          WHERE  CURRENT OF changecursor
----------
----------          IF (@LEAVEMODEL = 1
----------               OR @LEAVEMODEL = 3)
----------              BEGIN
----------                  IF ((@MONTHID > @DateofTerminate
----------                       AND @YearID = @year)
----------                       OR (@MONTHID < @DateofJoiningMth
----------                           AND @YearID = @year))
----------                      BEGIN
----------                          UPDATE #templeavebalancepre
----------                          SET    companyleaveallowed = 0,
----------                                 cmle = 0,
----------                                 lyl = 0,
----------                                 currentleaveearned = 0,
----------                                 paidleaves = 0,
----------                                 unpaidleaves = 0,
----------                                 leaveavailable = 0
----------                          WHERE  CURRENT OF changecursor
----------                      END
----------              END
----------
----------          FETCH NEXT FROM changecursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
----------      END
----------
----------  CLOSE changecursor
----------
----------  DEALLOCATE changecursor
----------
----------  SELECT cyl,mth,rowid,mth monthid,Round(companyleaveallowed, 2) companyleaveallowed,
----------         --         lyl = CASE    
----------         --                 WHEN @currentleaveearned >= @compolicyleave THEN Round(@currentleaveearned - @compolicyleave, 2)    
----------         --                 ELSE 0    
----------         --               END,    
----------         @lylsum AS lyl,rowid cmle,currentleaveearned,Round(paidleaves, 2) paidleaves,Round(unpaidleaves, 2) unpaidleaves,Round(leaveavailable, 2) leaveavailable,mthname
----------  INTO   #templeavebalance
----------  FROM   #templeavebalancepre
----------  ORDER  BY mth
----------
----------  DECLARE changecursor CURSOR FOR
----------      SELECT lyl,cmle,rowid,mth,companyleaveallowed,currentleaveearned,paidleaves,unpaidleaves,leaveavailable
----------      FROM   #templeavebalance
----------      FOR UPDATE OF currentleaveearned
----------
----------  OPEN changecursor
----------
----------  FETCH NEXT FROM changecursor INTO @LYL, @CMLE, @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
----------
----------  WHILE @@FETCH_STATUS = 0
----------      BEGIN
----------          IF @LOCK > 0
----------              BEGIN
----------                  UPDATE #templeavebalance
----------                  SET    currentleaveearned = @TOTCURLE
----------                  WHERE  mth = @MONTHID
----------              --WHERE CURRENT OF changecursor          
----------              END
----------
----------          SET @LOCK = @LOCK + 1
----------          SET @LASTCLE = @CurrentLeaveEarnedDec
----------
----------          IF @LEAVEMODEL = 1
----------              OR @LEAVEMODEL = 3
----------              BEGIN
----------                  SET @LASTPALE = @LASTPALE + @PaidLeave
----------              END
----------          ELSE
----------              BEGIN
----------                  SET @LASTPALE = @PaidLeave
----------              END
----------
----------          FETCH NEXT FROM changecursor INTO @LYL, @CMLE, @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
----------
----------          IF @LEAVEMODEL = 1
----------              OR @LEAVEMODEL = 3
----------              BEGIN
----------                  SET @TOTCURLE = (@LYL + @CMLE) - @LASTPALE
----------              END
----------
----------          IF (@LEAVEMODEL = 2
----------               OR @LEAVEMODEL = 5
----------               OR @LEAVEMODEL = 7)
----------              OR (@LEAVEMODEL = 4
----------                   OR @LEAVEMODEL = 6
----------                   OR @LEAVEMODEL = 8)
----------              BEGIN
----------                  IF (@LOCK = 1)
----------                      BEGIN
----------                          SET @TOTCURLE = (@LYL + @CMLE + @TOTCURLE) - @LASTPALE
----------                      --Select @LYL, @CMLE,@LASTPALE          
----------                      END
----------                  ELSE
----------                      BEGIN
----------                          SET @TOTCURLE = (@CMLE + @TOTCURLE) - @LASTPALE
----------                      --Select @LYL, @CMLE,@LASTPALE          
----------                      END
----------              END
----------      --  if @TOTCURLE < 0               
----------      --  BEGIN            
----------      --   Set @TOTCURLE = 0              
----------      --  END          
----------      END
----------
----------  CLOSE changecursor
----------
----------  DEALLOCATE changecursor
----------
----------  --PRORATED          
----------  IF (@LEAVEMODEL = 1
----------       OR @LEAVEMODEL = 7
----------       OR @LEAVEMODEL = 2
----------       OR @LEAVEMODEL = 5)
----------      OR (@LEAVEMODEL = 3
----------           OR @LEAVEMODEL = 4
----------           OR @LEAVEMODEL = 6
----------           OR @LEAVEMODEL = 8)
----------      BEGIN
----------          DECLARE changesubcursor CURSOR FOR
----------              SELECT rowid,mth,companyleaveallowed,currentleaveearned,paidleaves,unpaidleaves,leaveavailable
----------              FROM   #templeavebalance
----------              FOR UPDATE OF leaveavailable
----------
----------          OPEN changesubcursor
----------
----------          FETCH NEXT FROM changesubcursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
----------
----------          WHILE @@FETCH_STATUS = 0
----------              BEGIN
----------                  SET @LeaveAvailableTot = @CurrentLeaveEarnedDec - @PaidLeave
----------
----------                  UPDATE #templeavebalance
----------                  SET    leaveavailable = @LeaveAvailableTot
----------                  WHERE  CURRENT OF changesubcursor
----------
----------                  IF (@LEAVEMODEL = 1
----------                       OR @LEAVEMODEL = 3)
----------                      BEGIN
----------                          --Select @MONTHID, @DateofTerminate, @YearID, @year, @DateofJoiningMth          
----------                          IF ((@MONTHID > @DateofTerminate
----------                               AND @YearID = @year)
----------                               OR (@MONTHID < @DateofJoiningMth
----------                                   AND @YearID = @year))
----------                              BEGIN
----------                                  UPDATE #templeavebalance
----------                                  SET    companyleaveallowed = 0,
----------                                         cmle = 0,
----------                                         lyl = 0,
----------                                         currentleaveearned = 0,
----------                                         paidleaves = 0,
----------                                         unpaidleaves = 0,
----------                                         leaveavailable = 0
----------                                  WHERE  CURRENT OF changesubcursor
----------                              END
----------                      END
----------
----------                  FETCH NEXT FROM changesubcursor INTO @RowID, @MONTHID, @CompanyLeaveAllowedDec, @CurrentLeaveEarnedDec, @PaidLeave, @UnPaidLeave, @LeaveAvailable
----------              END
----------
----------          CLOSE changesubcursor
----------
----------          DEALLOCATE changesubcursor
----------      END
----------
----------  IF (@LEAVEMODEL = 2
----------       OR @LEAVEMODEL = 4)
----------      BEGIN
----------          UPDATE #templeavebalance
----------          SET    leaveavailable = Floor(leaveavailable)
----------          WHERE  Mth != 12
----------      END
----------
----------  IF (@LEAVEMODEL = 5
----------       OR @LEAVEMODEL = 6)
----------      BEGIN
----------          UPDATE #templeavebalance
----------          SET    leaveavailable = Ceiling(leaveavailable)
----------          WHERE  Mth != 12
----------      END
----------
----------  SELECT rowid,cyl,mth,monthid,companyleaveallowed,mthname,lyl,cmle,currentleaveearned,paidleaves,unpaidleaves,leaveavailable= CASE
----------                                                                                                                                 WHEN leaveavailable < 0 THEN 0
----------                                                                                                                                 ELSE CAST(Round(leaveavailable, 1) AS DECIMAL(9, 1))
----------                                                                                                                               END
----------  FROM   #templeavebalance
----------
----------  DROP TABLE #templeavestart
----------
----------  DROP TABLE #templeavebalancepre
----------
----------  DROP TABLE #templeavebalance
----------
----------  DROP TABLE #emltemp 
----------
----------GO
----------Merging 9.0
----------Exec [Sp_getpivotclaimsadditions] '0,237', '0,67','01/10/2010', '31/10/2010' , , 'DED'  
--------CREATE PROCEDURE [dbo].[Sp_getpivotclaimsadditions] @empcode   VARCHAR(8000),    
--------                                                   @trxtype   VARCHAR(8000),    
--------                                                   @startdate VARCHAR(10),    
--------                                                   @enddate   VARCHAR(10),    
--------                                                   @claimtype INT,    
--------                                                   @addtype   VARCHAR(100),  
--------               @stattype   VARCHAR(1)='L'  
--------AS    
-------- DECLARE @select VARCHAR(8000)    
-------- DECLARE @addid AS varchar(100)
-------- DECLARE @addtext AS VARCHAR(1000)          
--------    DECLARE @where VARCHAR(8000)    
--------          
-------- SET @addtext=''          
--------    
-------- SELECT ID, [Desc] Descript Into #TempAdd From Additions_Types      
-------- SELECT ID, Replace([Desc],' ','') Descript Into #TempDed From Deductions_Types    
--------
-------- SELECT @where = 'Where ID Not In (' + @trxtype + ')'    
-------- SELECT @select = 'Delete From #TempAdd ' + @where    
-------- EXEC (@select)    
--------    
-------- SELECT @where = 'Where ID Not In (' + @trxtype + ')'    
-------- SELECT @select = 'Delete From #TempDed ' + @where    
-------- EXEC (@select)    
--------    
--------    
-------- DECLARE cur CURSOR FOR SELECT Descript From #TempAdd          
--------    
-------- OPEN cur          
--------            
-------- FETCH NEXT FROM cur INTO @addid          
--------           
-------- WHILE @@FETCH_STATUS <> -1          
--------  BEGIN          
--------   SET @addtext = @addtext + '[' + CAST(@addid AS VARCHAR) + '],'          
--------   FETCH NEXT FROM cur INTO @addid          
--------  END          
--------           
-------- CLOSE cur          
-------- DEALLOCATE cur          
--------    
-------- IF (@addtype = 'DED')    
-------- BEGIn    
--------  DECLARE cur CURSOR FOR SELECT Descript From #TempDed          
--------    
--------  OPEN cur          
--------         
--------  SEt @addtext=''        
--------  FETCH NEXT FROM cur INTO @addid          
--------            
--------  WHILE @@FETCH_STATUS <> -1          
--------   BEGIN          
--------    SET @addtext = @addtext + '[' + Replace(CAST(@addid AS VARCHAR(100)),' ','') + '],'          
--------    FETCH NEXT FROM cur INTO @addid          
--------   END          
--------        
--------  CLOSE cur          
--------  DEALLOCATE cur        
-------- END    
--------    
--------    BEGIN    
--------        IF (@addtype = 'Claim')    
--------            BEGIN    
--------                IF (@claimtype = 1 Or @claimtype = 3)    
--------                    BEGIN    
--------                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name Full_Name,datename(month,trx_period)AS Month,DESCRIPTION,SUM(TRX_AMOUNT)AS Amount INTO   TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection = (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' GROUP BY id, description,emp_name,datename(month,trx_period),emp_lname   ORDER BY EMP_NAME; Select * From(Select (Full_Name) Full_Name,[Month],[DESCRIPTION],Amount From TempTable) PivotTB PIVOT(Sum(Amount) For [DESCRIPTION] In ('+ Substring(@addtext,0,len(@addtext)) +')) As PivotTable'    
--------                    END    
--------                ELSE    
--------                    BEGIN    
--------                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name Full_Name,datename(month,trx_period)AS Month,DESCRIPTION,TRX_AMOUNT AS Amount INTO  TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection =  (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' ORDER BY EMP_NAME;Select (Full_Name) Full_Name,[Month],[DESCRIPTION],Amount From TempTable'    
--------                    END    
--------            END    
--------    
--------        IF (@addtype = 'ADD')    
--------            BEGIN   
--------                IF (@claimtype = 1 Or @claimtype = 3)    
--------                    BEGIN    
--------                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name Full_Name,datename(month,trx_period)AS Month,DESCRIPTION,SUM(TRX_AMOUNT)AS Amount INTO   TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection != (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' GROUP BY id, description,emp_name,datename(month,trx_period),emp_lname   ORDER BY EMP_NAME; Select * From(Select (Full_Name) Full_Name,[Month],[DESCRIPTION],Amount From TempTable) PivotTB PIVOT(Sum(Amount) For [DESCRIPTION] In ('+ Substring(@addtext,0,len(@addtext)) +')) As PivotTable'    
--------                    END    
--------                ELSE    
--------                    BEGIN    
--------                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name Full_Name,datename(month,trx_period)AS Month,DESCRIPTION,TRX_AMOUNT AS Amount INTO  TempTable from Emp_additions  E INNER JOIN ViewAdditionTypesDesc V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') and optionselection != (''Claim'')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' ORDER BY EMP_NAME;Select (Full_Name) Full_Name,[Month],[DESCRIPTION],Amount From TempTable'    
--------                    END    
--------            END    
--------        IF (@addtype = 'DED')    
--------            BEGIN    
--------                IF (@claimtype = 1 Or @claimtype = 3)    
--------                    BEGIN   
--------                        SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name Full_Name,datename(month,trx_period)AS Month,DESCRIPTION,SUM(TRX_AMOUNT)AS Amount INTO   TempTable from Emp_Deductions  E INNER JOIN ViewDeductions V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ') And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' GROUP BY id, description,emp_name,datename(month,trx_period),emp_lname   ORDER BY EMP_NAME; Select * From(Select (Full_Name) Full_Name,[Month],[DESCRIPTION],Amount From TempTable) PivotTB PIVOT(Sum(Amount) For [DESCRIPTION] In ('+ Substring(@addtext,0,len(@addtext)) +')) As PivotTable'    
--------                    END    
--------                ELSE    
--------                    BEGIN    
--------						SET @select = ' SELECT IDENTITY(INT, 1, 1) as ROWID, Emp_Name Full_Name,datename(month,trx_period)AS Month,DESCRIPTION,TRX_AMOUNT AS Amount INTO  TempTable from Emp_Deductions  E INNER JOIN ViewDeductions V ON E.TRX_TYPE=V.ID  inner join employee on e.emp_code=employee.emp_code where e.emp_code in (' + @empcode + ') AND trx_type in (' + @trxtype + ')  And Convert(Datetime,trx_period,103) between Convert(Datetime,''' + @startdate + ''',103) And Convert(Datetime,''' + @enddate + ''',103) And E.Status=''' +  @stattype + ''' ORDER BY EMP_NAME;Select (Full_Name) Full_Name,[Month],[DESCRIPTION],Amount From TempTable'    
--------                    END    
--------            END    
--------        EXEC (@select)    
--------    
--------	  Drop Table #TempAdd    
--------	  Drop Table #TempDed    
--------	  DROP TABLE TempTable    
--------    END              
--------GO
-------Merging 9.0
--sp_getLeftLeaves '53', 2,'01/09/2010' ,'01/09/2010', 8, 2010, '2010-12-31',0    ,'AM'  
----------CREATE PROC [dbo].[Sp_getleftleaves] @userName    VARCHAR(50),    
----------                                    @compid      INT,    
----------                                    @stDate      VARCHAR(10),    
----------                                    @enDate      VARCHAR(10),    
----------                                    @leave_type  INT,    
----------                                    @applyyear   INT,    
----------                                    @applydateon DATETIME,    
----------                                    @ishalfday   FLOAT = 0,    
----------                                    @timesession VARCHAR(2)    
----------AS    
----------  DECLARE @leavemodel INT    
----------  DECLARE @isValidWorkerProjectAssign	INT    
----------  DECLARE @isValidNextYear  INT    
----------  DECLARE @isValidFromToYOS INT    
----------  DECLARE @isValidApply INT    
----------  DECLARE @wdays_per_week FLOAT    
----------  DECLARE @Remainder FLOAT    
----------  DECLARE @RemainderFloat FLOAT    
----------  DECLARE @CountPHRec INT    
----------  DECLARE @CountPayrollRec INT    
----------  DECLARE @CountJoinRec INT    
----------  DECLARE @CountApplyLeave INT    
----------  DECLARE @LeaveAppliedForDays FLOAT    
----------  DECLARE @RemainingLeaves FLOAT    
----------  DECLARE @Year INT    
----------  DECLARE @FromDate DATETIME    
----------  DECLARE @Todate DATETIME    
----------  DECLARE @Emp_Code INT    
----------  DECLARE @dtAllowed FLOAT    
----------  DECLARE @currentyear INT    
----------  DECLARE @dtTaken FLOAT    
----------    
----------  SELECT @leavemodel = leave_model    
----------  FROM   dbo.company AS c    
----------  WHERE  company_id = @compid    
----------    
----------  CREATE TABLE #yostemp    
----------      (    
----------           yos     INT,    
----------           STARTDT DATETIME,    
----------           ENDDT   DATETIME    
----------      )    
----------    
----------  DECLARE @LEAVEAVAIL TABLE(    
----------      id                    INT,    
----------      emp_id                INT,    
----------      leave_year            INT,    
----------      [TYPE]                VARCHAR(50),    
----------      companyleaveallowed   FLOAT,    
----------      leavesallowed         FLOAT,    
----------      LY_Leaves_Bal         FLOAT,    
----------      leavesearned          FLOAT,    
----------      paidleaves            FLOAT,    
----------      unpaidleaves          FLOAT,    
----------      pendingleaves         FLOAT,    
----------      leavesavailable       FLOAT,    
----------      totalleavestaken      FLOAT,    
----------      actualleavesavailable FLOAT,    
----------      leavesfromly          FLOAT,    
----------      SHOWLEAVEMODEL        INT )    
----------    
----------  SELECT @Emp_Code = emp_code,@wdays_per_week = wdays_per_week    
----------  FROM   employee    
----------  WHERE  Emp_Code = @userName    
----------    
----------  SET @FromDate = CONVERT(DATETIME, @stDate, 103)    
----------  SET @Todate = CONVERT(DATETIME, @enDate, 103)    
----------  SET @Year = YEAR(@FromDate)    
----------  SET @currentyear = @applyyear    
----------  SET @FromDate = CONVERT(DATETIME, @stDate, 103)    
----------  SET @Todate = CONVERT(DATETIME, @enDate, 103)    
----------  SET @Year = YEAR(@FromDate)    
----------  SET @isValidFromToYOS = 1    
----------  SET @isValidNextYear = 1    
----------  SET @isValidWorkerProjectAssign = 0
----------    
----------  IF (@leavemodel = 1    
----------       OR @leavemodel = 2    
----------       OR @leavemodel = 5    
----------       OR @leavemodel = 7)    
----------      BEGIN    
----------          IF (YEAR(@FromDate) = YEAR(@Todate))    
----------              BEGIN    
----------                  IF (YEAR(@FromDate) > @applyyear)    
----------                      BEGIN    
----------                          SET @isValidNextYear = 0    
----------                      END    
----------              END    
----------      END    
----------    
----------  IF (@leavemodel = 3    
----------       OR @leavemodel = 4    
----------       OR @leavemodel = 6    
----------       OR @leavemodel = 8)    
----------     AND @leave_type = 8    
----------      BEGIN    
----------          INSERT INTO #yostemp    
----------          EXEC Sp_getyos @Emp_Code,@applydateon    
----------    
----------          SELECT @isValidFromToYOS = Isnull(COUNT(*), 0)    
----------          FROM   #yostemp    
----------          WHERE  (@FromDate BETWEEN CONVERT(DATETIME, STARTDT, 103) AND CONVERT(DATETIME, ENDDT, 103))    
----------             AND (@Todate BETWEEN CONVERT(DATETIME, STARTDT, 103) AND CONVERT(DATETIME, ENDDT, 103))    
----------      END    
----------    
----------  SELECT @isValidApply = CASE    
----------                           WHEN CONVERT(DATETIME, @FromDate, 103) < CONVERT(DATETIME, ValidApply, 103)    
----------                                 OR CONVERT(DATETIME, @Todate, 103) < CONVERT(DATETIME, ValidApply, 103) THEN 1    
----------                           ELSE 0    
----------                         END    
----------  FROM   (SELECT ValidApply = CASE    
----------                                WHEN (c.leave_model = 1    
----------                                       OR c.leave_model = 2    
----------                                       OR c.leave_model = 5    
----------    OR c.leave_model = 7) THEN ('01/01/' + CAST((YEAR(Getdate()) - 1) AS VARCHAR))    
----------                                ELSE CONVERT(VARCHAR, Dateadd(mm, -12, CONVERT(VARCHAR, '01/'+CAST(MONTH(a.joining_Date) AS VARCHAR)+'/'+CAST(YEAR(Getdate()) AS VARCHAR), 103)), 103)    
----------                              END    
----------          FROM   Employee a    
----------                 LEFT OUTER JOIN Company c ON a.company_id = c.company_id    
----------          WHERE  a.emp_code = @Emp_Code) D    
----------    
----------  SELECT @CountPHRec = COUNT(ID)    
----------  FROM   public_holidays    
----------  WHERE  (CONVERT(DATETIME, Holiday_Date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103)) And (CompanyID=@compid Or CompanyID=-1)
----------    
----------  SELECT @CountPayrollRec = Isnull(COUNT(trx_id), 0)    
----------  FROM   prepare_payroll_hdr    
----------  WHERE  created_by = @Emp_Code    
----------     AND ((MONTH(start_period) = MONTH(@FromDate)    
----------           AND YEAR(start_period) = YEAR(@FromDate))    
----------           OR (MONTH(start_period) = MONTH(@Todate)    
----------               AND YEAR(start_period) = YEAR(@Todate)))    
----------     AND trx_id IN (SELECT trx_id    
----------                    FROM   prepare_payroll_detail    
----------                    WHERE  emp_id = @Emp_Code    
----------                       AND (status = 'P'    
----------                             OR status = 'G'    
----------                             OR status = 'A')    
----------                       AND trx_id IN (SELECT trx_id    
----------                                      FROM   prepare_payroll_hdr    
----------                                      WHERE  created_by = @Emp_Code    
----------                                         AND ((MONTH(start_period) = MONTH(@FromDate)    
----------                                               AND YEAR(start_period) = YEAR(@FromDate))    
----------                                               OR (MONTH(start_period) = MONTH(@Todate)    
----------                                                   AND YEAR(start_period) = YEAR(@Todate)))))    
----------    
----------  SELECT @CountJoinRec = Isnull(COUNT(emp_code), 0)    
----------  FROM   employee    
----------  WHERE  emp_code = @Emp_Code    
----------     AND (CONVERT(DATETIME, confirmation_date, 103) <= CONVERT(DATETIME, @FromDate, 103)    
----------          AND CONVERT(DATETIME, confirmation_date, 103) <= CONVERT(DATETIME, @Todate, 103))    
----------
----------    
----------  SELECT @isValidWorkerProjectAssign = Isnull(COUNT(Emp_ID), 0)    
----------  FROM   MultiProjectAssigned
----------  WHERE  Emp_ID = @Emp_Code    
----------     AND (CONVERT(DATETIME, EntryDate, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    
----------
----------  --SET MANUALLY CONFIRMATION rt now in future we will create this modules      
----------  SET @CountJoinRec = 1000    
----------    
----------  IF (@ishalfday = 0.5)    
----------      BEGIN    
----------          IF @wdays_per_week = 5.5    
----------             AND @ishalfday = 0.5    
----------             AND Datename(dw, @FromDate) = 'Saturday'    
----------              BEGIN    
----------                  SELECT @CountApplyLeave = Isnull(COUNT(el.trx_id), 0)    
----------                  FROM   dbo.emp_leaves_detail eld    
----------                         INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id    
----------                  WHERE  (CONVERT(DATETIME, leave_date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    
----------                     AND emp_id = @Emp_Code    
----------                     AND el.status != 'Rejected'    
----------              END    
----------          ELSE    
----------              BEGIN    
----------                  SELECT @CountApplyLeave = Isnull(COUNT(el.trx_id), 0)    
----------                  FROM   dbo.emp_leaves_detail eld    
----------                         INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id    
----------                  WHERE  (CONVERT(DATETIME, leave_date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    
----------                     AND emp_id = @Emp_Code    
----------                     AND el.status != 'Rejected'    
----------                     AND (eld.halfday_leave = 0    
----------                           OR (eld.halfday_leave = 1    
----------                               AND (eld.session = @timesession    
----------                                     OR eld.session = '--')))    
----------              END    
----------      END    
----------  ELSE    
----------      BEGIN    
----------          SELECT @CountApplyLeave = Isnull(COUNT(el.trx_id), 0)    
----------       FROM   dbo.emp_leaves_detail eld    
----------                 INNER JOIN dbo.emp_leaves AS el ON eld.trx_id = el.trx_id    
----------          WHERE  (CONVERT(DATETIME, leave_date, 103) BETWEEN CONVERT(DATETIME, @FromDate, 103) AND CONVERT(DATETIME, @Todate, 103))    
----------             AND emp_id = @Emp_Code    
----------             AND status != 'Rejected'    
---------- END    
----------    
----------  IF (@isValidWorkerProjectAssign > 0)
----------      BEGIN    
----------          ---103 MEANS Applly leave in different Payroll year                     
----------          SELECT 'No' uppaid,'-106' totalleaves,0 CustomField1,0 BalanceLeave    
----------      END    
----------  ELSE    
----------      BEGIN    
----------	  IF (@isValidNextYear <= 0)    
----------		  BEGIN    
----------			  ---103 MEANS Applly leave in different Payroll year                     
----------			  SELECT 'No' uppaid,'-105' totalleaves,0 CustomField1,0 BalanceLeave    
----------		  END    
----------	  ELSE    
----------		  BEGIN    
----------			  IF (@isValidFromToYOS <= 0)    
----------				  BEGIN    
----------					  ---103 MEANS Applly leave in different Payroll year                     
----------					  SELECT 'No' uppaid,'-103' totalleaves,0 CustomField1,0 BalanceLeave    
----------				  END    
----------			  ELSE    
----------				  BEGIN    
----------					  IF @isValidApply = 1    
----------						  BEGIN    
----------							  ---104 MEANS no valid year and date                    
----------							  SELECT 'No' uppaid,'-104' totalleaves,0 CustomField1,0 BalanceLeave    
----------						  END    
----------					  ELSE    
----------						  BEGIN    
----------							  IF @CountPayrollRec > 1000000000    
----------								  BEGIN    
----------									  ---101 MEANS Payroll Already Locked for the Date Range.                              
----------									  SELECT 'No' uppaid,'-102' totalleaves,0 CustomField1,0 BalanceLeave    
----------								  END    
----------							  ELSE    
----------								  BEGIN    
----------									  IF @CountApplyLeave > 0    
----------										  BEGIN    
----------											  ---101 MEANS Leave Already Applied for the Date Range.                              
----------											  SELECT 'No' uppaid,'-101' totalleaves,0 CustomField1,0 BalanceLeave    
----------										  END    
----------									  ELSE    
----------										  BEGIN    
----------											  IF (@CountJoinRec <= 0)    
----------												  BEGIN    
----------													  ---100 MEANS Leave Applying before Joining Date                              
----------													  SELECT 'No' uppaid,'-100' totalleaves,0 CustomField1,0 BalanceLeave    
----------												  END    
----------											  ELSE    
----------												  BEGIN    
----------													  IF (@ishalfday = 0.5    
----------														  AND @wdays_per_week = 5.5)    
----------														  BEGIN    
----------															  IF Datename(dw, @FromDate) = 'Saturday'    
----------																  BEGIN    
----------																	  SET @LeaveAppliedForDays = dbo.Fn_nowds(@Emp_Code, @FromDate, @Todate)    
----------																  END    
----------															  ELSE    
----------																  BEGIN    
----------																	  SET @LeaveAppliedForDays = dbo.Fn_nowds(@Emp_Code, @FromDate, @Todate) - @ishalfday    
----------																  END    
----------														  END    
----------													  ELSE    
----------														  BEGIN    
----------															  SET @LeaveAppliedForDays = dbo.Fn_nowds(@Emp_Code, @FromDate, @Todate) - @ishalfday    
----------							  END    
----------	    
----------													  IF (@LeaveAppliedForDays < 0)    
----------														  BEGIN    
----------															  SET @LeaveAppliedForDays = 0    
----------														  END    
----------	    
----------													  IF ((@currentyear - @Year) = 1)    
----------		   BEGIN    
----------															  SET @Year = @applyyear    
----------															  SET @FromDate = Dateadd(yy, 1, @FromDate)    
----------															  SET @Todate = Dateadd(yy, 1, @Todate)    
----------															  SET @stDate = CONVERT(VARCHAR, @FromDate, 103)    
----------															  SET @enDate = CONVERT(VARCHAR, @Todate, 103)    
----------														  END    
----------	    
----------													  INSERT @LEAVEAVAIL    
----------															 (id,emp_id,leave_year,[TYPE],companyleaveallowed,LY_Leaves_Bal,leavesallowed,leavesearned,paidleaves,unpaidleaves,pendingleaves,leavesavailable,actualleavesavailable,totalleavestaken,SHOWLEAVEMODEL)
----------	  
----------	    
----------													  EXEC Sp_getemployeeleavepolicy @Emp_Code,@applyyear,@applydateon,@leave_type    
----------	    
----------													  --   SELECT @RemainingLeaves=Case When isnull((LeavesAvailable-PendingLeaves),0) <= 0 Then 0 Else (LeavesAvailable-PendingLeaves) End                                   
----------													  --   FROM @LEAVEAVAIL                              
----------													  SELECT @RemainingLeaves = CASE    
----------																				  WHEN Isnull((actualleavesavailable), 0) <= 0 THEN 0    
----------																				  ELSE (actualleavesavailable)    
----------																				END    
----------													  FROM   @LEAVEAVAIL    
----------	    
----------													  ---ISSUE IN REMAINING LEAVES                                
----------													  --Select * From @LEAVEAVAIL                              
----------													  IF (Isnull(@RemainingLeaves, 0) - Isnull(@LeaveAppliedForDays, 0)) >= 0    
----------														  BEGIN    
----------															  SELECT 'yes',@LeaveAppliedForDays totalleaves,@CountPHRec CustomField1,BalanceLeave = CASE    
----------																																					  WHEN (@RemainingLeaves - @LeaveAppliedForDays) < 0 THEN 0    
----------																																					  ELSE (@RemainingLeaves - @LeaveAppliedForDays)    
----------																																					END    
----------														  END    
----------													  ELSE    
----------														  BEGIN    
----------															  IF (@RemainingLeaves - Floor(@RemainingLeaves) >= 0.5)    
----------																  BEGIN    
----------																	  --Select @RemainingLeaves-Floor(@RemainingLeaves)                              
----------																	  SET @Remainder = @LeaveAppliedForDays - (Floor(@RemainingLeaves) + 0.5)    
----------																  END    
----------															  ELSE    
----------																  BEGIN    
----------																	  SET @Remainder = @LeaveAppliedForDays - Floor(@RemainingLeaves)    
----------																  END    
----------	    
----------					IF (@Remainder > 0 And @CountPayrollRec > 0)    
----------				   Begin     
----------					  ---101 MEANS Payroll Already Locked for the Date Range.                              
----------					  SELECT 'No' uppaid,'-102' totalleaves,0 CustomField1,0 BalanceLeave    
----------				   End    
----------				   Else    
----------				   Begin    
----------					SELECT @Remainder uppaid,@LeaveAppliedForDays totalleaves,@CountPHRec CustomField1,BalanceLeave = CASE    
----------											  WHEN (@RemainingLeaves - @LeaveAppliedForDays) < 0 THEN 0    
----------											  ELSE (@RemainingLeaves - @LeaveAppliedForDays)    
----------											END    
----------				   END    
----------														  END    
----------												  END    
----------										  END    
----------								  END    
----------						  END    
----------				  END    
----------		  END     
----------	END
----------GO
----------Merging 9.0
------------sp_Workers_Summary  '01/09/2010', 2
----------CREATE PROC [dbo].[sp_Workers_Summary]  
----------(
----------	@DateEntry VARCHAR(50),
----------	@compid int
----------)
----------AS   
----------BEGIN
----------	Declare @totlocassigned   as int
----------	Declare @totforassigned   as int
----------	Declare @totlocunassigned as int
----------	Declare @totforunassigned as int
----------
----------	Declare @sumlocleave	as int
----------	Declare @sumforleave	as int
----------
----------	Select * Into #LeaveType From Leave_Types lt
----------	Where id IN
----------	(
----------		Select Distinct lt.id ID From Emp_Leaves_detail ed 
----------		Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id 
----------		Inner JOin Employee em on el.emp_id=em.emp_code 
----------		Inner JOin leave_types lt on el.leave_type=lt.id 
----------		Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
----------		And Company_ID = @compid 
----------	)
----------
----------	Select el.Emp_ID Into #LeaveTaken From Emp_Leaves_detail ed
----------	Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id
----------	Inner JOin Employee em on el.emp_id=em.emp_code
----------	Inner JOin leave_types lt on el.leave_type=lt.id
----------	Inner JOin EmployeeAssignedToWorkersList ew on el.emp_id=ew.emp_id
----------	Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
----------	And el.status ='Approved'
----------	And Company_ID = @compid 
----------
----------
----------	Select * From (Select Emp_Code, Time_Card_No, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) FullName From Employee Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)) as D Left Outer Join #LeaveTaken lt  On D.Emp_code = lt.Emp_ID Order By FullName
----------
----------	Select SP.ID,SP.Sub_Project_Name From SubProject SP Inner Join Project PR On SP.Parent_Project_ID = PR.ID Left Outer Join Location LO On PR.Location_ID = LO.ID Where (LO.Company_ID = @compid OR LO.isShared='YES') And Active = 1
----------	Select @totlocassigned=Count(Emp_ID) From MultiProjectAssigned MP Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)  And Company_ID=@compid And (Em.emp_type='SC' Or Em.emp_type='SPR')
----------	Select @totforassigned=Count(Emp_ID) From MultiProjectAssigned MP Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)  And Company_ID=@compid And (Em.emp_type!='SC' And Em.emp_type!='SPR')
----------	Select @totlocunassigned=Count(Emp_Code)  From Employee Em Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)  And (Em.emp_type='SC' Or Em.emp_type='SPR')
----------	Select @totforunassigned=Count(Emp_Code)  From Employee Em Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)  And (Em.emp_type!='SC' And Em.emp_type!='SPR')
----------	--Select @totlocassigned=Count(Emp_ID) From MultiProjectAssigned MP Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)  And Company_ID=@compid
----------	--Select @totlocunassigned=Count(Emp_Code)  From Employee Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID From EmployeeAssignedToWorkersList)
----------
----------	Select @sumlocleave=sum(isnull(Cnt1,0)),@sumforleave = sum(isnull(Cnt2,0)) From #LeaveType lt
----------	Left Outer Join (
----------					Select lt.id ID, Count(Emp_ID) Cnt1  From Emp_Leaves_detail ed
----------					Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id
----------					Inner JOin Employee em on el.emp_id=em.emp_code
----------					Inner JOin leave_types lt on el.leave_type=lt.id
----------					Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
----------					And Company_ID = @compid 
----------					And (em.emp_type='SC' Or em.emp_type='SPR') 
----------					And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
----------					And el.status ='Approved'
----------					Group By lt.id
----------					) R1 On lt.id = R1.ID
----------	Left Outer Join (
----------					Select lt.id ID, Count(Emp_ID) Cnt2  From Emp_Leaves_detail ed 
----------					Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id 
----------					Inner JOin Employee em on el.emp_id=em.emp_code 
----------					Inner JOin leave_types lt on el.leave_type=lt.id 
----------					Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
----------					And Company_ID = @compid 
----------					And (Em.emp_type!='SC' And Em.emp_type!='SPR') 
----------					And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
----------					And el.status ='Approved'
----------					Group By lt.id
----------					) R2 On lt.id = R2.ID
----------
----------
----------	Select * Into #Temp From
----------	(
----------		Select 'Assigned' TType, @totlocassigned Locals, @totforassigned Foreigners, (@totlocassigned+@totforassigned) Total
----------		Union All
----------		Select 'UnAssigned' TType, @totlocunassigned Locals, @totforunassigned Foreigners, (@totlocunassigned+@totforunassigned) Total
----------		Union All
----------		Select 'Total' TType, (@totlocassigned+@totlocunassigned) Locals, (@totforassigned+@totforunassigned) Foreigners, (@totlocassigned+@totforassigned)+(@totlocunassigned+@totforunassigned) Total
----------		Union All
----------		Select * From
----------		(	
----------			Select lt.type [TType],isnull(Cnt1,0) [Local],isnull(Cnt2,0) [Foreign],(isnull(Cnt1,0)+isnull(Cnt2,0)) Total  From #LeaveType lt
----------			Left Outer Join (
----------							Select lt.id ID, Count(Emp_ID) Cnt1  From Emp_Leaves_detail ed
----------							Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id
----------							Inner JOin Employee em on el.emp_id=em.emp_code
----------							Inner JOin leave_types lt on el.leave_type=lt.id
----------							Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
----------							And Company_ID = @compid 
----------							And (em.emp_type='SC' Or em.emp_type='SPR') 
----------							And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
----------							And el.status ='Approved'
----------							Group By lt.id
----------							) R1 On lt.id = R1.ID
----------			Left Outer Join (
----------							Select lt.id ID, Count(Emp_ID) Cnt2  From Emp_Leaves_detail ed 
----------							Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id 
----------							Inner JOin Employee em on el.emp_id=em.emp_code 
----------							Inner JOin leave_types lt on el.leave_type=lt.id 
----------							Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)  
----------							And Company_ID = @compid 
----------							And (Em.emp_type!='SC' And Em.emp_type!='SPR') 
----------							And el.Emp_ID In (Select Emp_ID From EmployeeAssignedToWorkersList)
----------							And el.status ='Approved'
----------							Group By lt.id
----------							) R2 On lt.id = R2.ID
----------		) G1
----------		Union All
----------		Select 'Total' [TType], @sumlocleave [Local], @sumforleave [Foreign], (@sumlocleave+@sumforleave) Total
----------		Union All
----------		Select 'Available' [TType], (@totlocunassigned-@sumlocleave) [Local], (@totforunassigned-@sumforleave) [Foreign], ((@totlocunassigned+@totforunassigned)-(@sumlocleave+@sumforleave)) Total
----------	)  D
----------
----------	Delete From #Temp WHere (Total is null  Or Total = 0) And (TType != 'Assigned' And TType!='UnAssigned')
----------	Select * From #Temp
----------
----------	Drop Table #Temp
----------	Drop Table #LeaveType
----------	Drop Table #LeaveTaken
----------END   
----------
----------GO
----------Merging 9.0
------------sp_Workers_Summary_Print  '01/10/2010', 3  , -1  
----------CREATE PROC [dbo].[sp_Workers_Summary_Print]      
----------(    
----------  @DateEntry VARCHAR(50),  
----------  @compid int,  
----------  @projectid int    
----------)  
----------AS  
----------BEGIN  
----------   
----------  
---------- Select el.Emp_ID Into #LeaveTaken From Emp_Leaves_detail ed    
---------- Inner JOin Emp_Leaves el on ed.trx_id=el.trx_id    
---------- Inner JOin Employee em on el.emp_id=em.emp_code    
---------- Inner JOin leave_types lt on el.leave_type=lt.id    
---------- Inner JOin EmployeeAssignedToWorkersList ew on el.emp_id=ew.emp_id    
---------- Where Convert(datetime,Leave_Date,103)  = Convert(datetime,@DateEntry,103)      
---------- And el.status ='Approved'    
---------- And Company_ID = @compid     
----------    
---------- Select * Into #TempTable From    
---------- (    
----------  Select SP.Sub_Project_ID, SP.Sub_Project_Name,Em.Time_card_No,(isnull(Em.Emp_Name,'')+' ' +isnull(Em.Emp_LName,'')) FullName,(isnull(TS.Emp_Name,'')+' ' + isnull(TS.Emp_LName,'')) Supervisor,Tr.Trade,SP.ID,EM.ic_pp_number From MultiProjectAssigned MP Inner Join SubProject SP  
----------  On MP.SubProjectID = SP.ID Inner Join Employee Em On MP.Emp_ID = Em.Emp_Code Left Outer Join Employee TS On SP.TimeSupervisor= TS.Emp_Code Left Outer Join Trade Tr On Em.Trade_ID=Tr.ID  Where Em.Company_ID= @compid And Convert(Datetime,EntryDate,103) = 
----------  
----------  Convert(datetime,@DateEntry,103)        
---------- Union All  
----------  Select '-' Sub_Project_ID,'Unassigned Project' Sub_Project_Name,D.Time_Card_No,D.FullName,(isnull(TS.emp_name,'') + ' ' + isnull(TS.emp_lname,'')) Supervisor,Tr.Trade,10000 ID,D.ic_pp_number From (Select Emp_Code, Time_Card_No, ic_pp_number, (isnull(emp_name,'') + ' ' + isnull(emp_lname,'')) FullName From Employee Where Emp_Code Not In(Select Emp_ID From MultiProjectAssigned Where Convert(datetime,EntryDate,103)  = Convert(datetime,@DateEntry,103)) And Company_ID = @compid And Emp_Code In (Select Emp_ID
---------- From EmployeeAssignedToWorkersList))   
----------  as D Left Outer Join #LeaveTaken lt  On D.Emp_code = lt.Emp_ID     
----------  Left Outer Join Employee TS On D.Emp_Code= TS.Emp_Code    
----------  Left Outer Join Trade Tr On TS.Trade_ID=Tr.ID    
---------- ) D Order By Sub_Project_Name,FullName  
----------  
----------   
---------- IF (@projectid > 0)  
---------- BEGIN  
----------  DELETE FROM #TempTable WHERE ID != @projectid  
----------  
----------  Select '' Time_Card_No, '' FullName, '' PermitNumber, '' [IN Time], '' [Sign IN], '' [OUT Time], '' [Sign OUT], '' [Normal Hrs], '' [Overtime Hrs], (Select Sub_Project_Name From SubProject Where ID = @projectid) + ' - ' + Convert(varchar(50),Convert(Datetime,@DateEntry,101),107) Remarks  
----------  Union All  
----------  Select Time_Card_No, FullName, IC_PP_NUMBER PermitNumber,'' [IN Time],'' [Sign IN], '' [OUT Time], '' [Sign OUT], '' [Normal Hrs], '' [Overtime Hrs], '' Remarks  From #TempTable  
---------- END  
----------  
---------- IF (@projectid = 0)  
---------- BEGIN  
----------  Select Sub_Project_ID, Sub_Project_Name, Time_card_No, FullName, Trade From #TempTable T   
---------- END  
---------- IF (@projectid = -1)  
---------- BEGIN  
----------  DECLARE @ROWCOUNT INT  
----------  SET @ROWCOUNT = 0  
----------  DECLARE @ID INT, @TIME_CARD_NO VARCHAR(20)  
----------  DECLARE @IDOLD INT, @TIME_CARD_NOOLD VARCHAR(20)  
----------  
----------  DECLARE @TEMPTAB TABLE   
----------  (    
----------   ID INT,    
----------   TIME_CARD_NO VARCHAR(8000),  
----------   COUNTROW INT  
----------  )  
----------  
------------  Select T.ID, T.Time_card_No  From #TempTable T   
------------  Order By ID, Supervisor, Time_Card_No  
----------  
----------   
----------  Set @IDOLD    = 0  
----------  Set @TIME_CARD_NOOLD = ''  
----------   
----------  DECLARE curse CURSOR FOR  SELECT ID, Time_card_No  FROM   #TempTable   
----------    
----------  OPEN curse    
----------  FETCH NEXT FROM curse INTO @ID, @TIME_CARD_NO  
----------  WHILE @@FETCH_STATUS = 0    
----------  BEGIN    
----------   IF (@ID != @IDOLD And @TIME_CARD_NO != @TIME_CARD_NOOLD)  
----------   BEGIN  
----------    Set @ROWCOUNT = 1 
----------    Insert Into @TEMPTAB Select @ID, @TIME_CARD_NO, @ROWCOUNT+1  
----------   END  
----------   ELSE  
----------   BEGIN  
----------    Set @ROWCOUNT = @ROWCOUNT + 1  
----------    UPDATE @TEMPTAB SET Time_Card_No=Time_Card_No+','+@TIME_CARD_NO,COUNTROW=@ROWCOUNT WHERE ID = @IDOLD  
----------   END  
----------   Set @IDOLD    = @ID  
----------   Set @TIME_CARD_NOOLD = @TIME_CARD_NO  
----------   FETCH NEXT FROM curse INTO @ID, @TIME_CARD_NO  
----------  END    
----------  
----------  CLOSE curse    
----------  
----------  DEALLOCATE curse    
----------  
----------  SELECT isnull(SP.Sub_Project_Name,'Unassigned Project') Sub_Project_Name,T.Time_Card_No, isnull(EM.Time_Card_No,'') Supervisor,  
----------  COUNTROW FROM @TEMPTAB T  
----------  Left Outer Join SubProject SP On T.ID = SP.ID   
----------  Left Outer Join Employee EM On SP.timesupervisor = EM.Emp_Code  
----------  Order By Sub_Project_Name  
----------  
----------    
---------- END  
----------  
---------- Drop Table #TempTable  
---------- Drop Table #LeaveTaken    
----------END       
----------GO
----------Merging 9.0

----------Update  MultiProjectAssigned Set Emp_ID=53 Where ID = 4
----------Select * From MultiProjectAssigned
----------sp_ProcessTimesheetAdv '01/09/2010', '03/09/2010', 2, '53,68', '-1', 'No', 0, 99
--------CREATE PROCEDURE [dbo].[Sp_processtimesheetadv] 
--------											(@start_date VARCHAR(10),
--------                                             @end_date   VARCHAR(10),
--------                                             @compid     VARCHAR(10),
--------                                             @empid      VARCHAR(8000),
--------                                             @subprojid  VARCHAR(8000),
--------                                             @isEmpty    VARCHAR(3),
--------                                             @sessid     FLOAT,  
--------                                             @REPID      INT=0)
--------AS
--------    BEGIN
--------        DECLARE @colname VARCHAR(8000)
--------        DECLARE @select VARCHAR(8000)
--------        DECLARE @whereproj VARCHAR(8000)
--------        DECLARE @whereemp VARCHAR(8000)
--------        DECLARE @wheresessid VARCHAR(100)
--------        DECLARE @startdate AS DATETIME
--------        DECLARE @enddate AS DATETIME
--------        DECLARE @ConsEarlyInBy AS INT  
--------        DECLARE @softdelete AS INT  
--------        DECLARE @multiproj AS INT  
--------  
--------        SET @ConsEarlyInBy = 0  
--------        SET @startdate = CONVERT(DATETIME, @start_date, 103)  
--------        SET @enddate = CONVERT(DATETIME, @end_date, 103)  
--------			
--------        SELECT *  
--------        INTO   #ActLogsTemp  
--------        FROM   Actatek_Logs
--------
--------
--------		--Select DISTINCT SubProjectID Sub_Project_ID,Emp_ID,EntryDate Into ##EmployeeAssignedToProject From MultiProjectAssigned Where CONVERT(DATETIME, EntryDate, 103) BETWEEN CONVERT(DATETIME, @startdate, 103) And CONVERT(DATETIME, @end_date, 103)
--------		Select DISTINCT Sub_Project_ID,Emp_ID Into ##EmployeeAssignedToProject From EmployeeAssignedToProject 
--------		Select * Into #SubProject From SubProject Where ID In (Select Sub_Project_ID From ##EmployeeAssignedToProject)
--------
--------
--------        IF (@sessid > 0)  
--------            BEGIN  
--------                SET @softdelete=2  
--------            END  
--------        ELSE  
--------            BEGIN  
--------                SET @softdelete=0  
--------            END  
--------  
--------        SELECT ROWID = IDENTITY(INT, 1, 1),'NH' = CASE  
--------                                                    WHEN TodayPH = 1 THEN 0  
--------                                                    WHEN Wdays_Per_week != 7  
--------                                                         AND Roster_Day = 'Sun' THEN 0  
--------                                                    WHEN Wdays_Per_week <= 7  
--------                                                         AND TodayPH = 0  
--------                                                         AND (HrsinMins - CompanyWorkHours) >= 0 THEN CompanyWorkHours  
--------                                                    WHEN Wdays_Per_week <= 7  
--------                                                         AND TodayPH = 0  
--------                                                         AND (HrsinMins - CompanyWorkHours) < 0 THEN HrsinMins  
--------                                                    ELSE 0  
--------                                                  END,'OT1' = CASE  
--------                                                                WHEN TodayPH = 1 THEN 0  
--------                                                                WHEN Wdays_Per_week != 7  
--------                                                                     AND Roster_Day = 'Sun' THEN 0  
--------                                                                WHEN Wdays_Per_week <= 7  
--------                                                                     AND TodayPH = 0  
--------                                                                     AND (HrsinMins - CompanyWorkHours) > 0 THEN (HrsinMins - CompanyWorkHours)  
--------                                                                ELSE 0  
--------                                                              END,'OT2' = CASE  
--------                                                                            WHEN Wdays_Per_week != 7  
--------                                                                                 AND Roster_Day = 'Sun' THEN HrsinMins  
--------                                                                            WHEN Wdays_Per_week <= 7  
--------                                                                                 AND TodayPH = 1 THEN HrsinMins  
--------                                                ELSE 0  
--------                                                                          END,*,0 AS RecordFound  
--------        INTO   #RD  
--------        FROM   (SELECT CompanyWorkHours=CASE  
--------                                          WHEN RosterType = 'NORMAL' THEN dbo.Converttominutes(dbo.Converttohours(Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin)))  
--------                                          WHEN RosterType = 'FLEXIBLE' THEN (FlexibleWorkingHr - BreakTimeNHInMin)  
--------                                          ELSE 0  
--------                                        END,HoursWorked HrsinMins,*  
--------                FROM   (SELECT Wdays_per_Week,ID,Emp_ID Emp_Code,Emp_Name,Roster_ID,Roster_Name,Roster_Date TSDate,LEFT(Datename(dw, CONVERT(DATETIME, Roster_Date, 103)), 3) Roster_Day,TimeStart,TimeEnd,CoTimeStart,CoTimeEnd,FirstIn,LastOut,InShortTime,OutShortTime,HoursWorked = CASE  
--------                                                                                                                                                                                                                                                               
--------                           WHEN RosterType = 'NORMAL'  
--------                                                                                                                                                                                                                                                               
--------                                AND FirstIn IS NOT NULL  
--------                                                                                                                                                                                                                                                               
--------                                AND LastOut IS NOT NULL  
--------                                                                                                                                                                                                                                                               
--------                                AND @ConsEarlyInBy = 0  
--------                                                                                                                                                                                                                                                               
--------                                AND (FirstIn BETWEEN TimeStart AND TimeLateInBy)  
--------                                                                                                                                                                                                                                                               
--------                                AND (LastOut BETWEEN TimeEarlyOutBy AND CoTimeend) THEN (Datediff(mi, CoTimeStart, CoTimeEnd) - (BreakTimeNHInMin + BreakTimeOTInMin))  
--------                                                                                                                                                                                                                                                               
--------                           WHEN RosterType = 'NORMAL'  
--------                                                                                                                                                                                                                                                               
--------                                AND FirstIn IS NOT NULL  
--------                                                                                                                                                                                                                                                               
--------                                AND LastOut IS NOT NULL  
--------                                                                                                                                              AND @ConsEarlyInBy = 1  
--------                                                                                                                                                                                                                                                               
--------                                AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))  
--------                                                                                                                                                                                                                                                               
--------                           WHEN RosterType = 'NORMAL'  
--------                                                                                                                                                                                                                                                               
--------                                AND FirstIn IS NOT NULL  
--------                                                                                                                                                                                                                                                               
--------                                AND LastOut IS NOT NULL  
--------                                                                                                                                                                                                                                                               
--------                                AND @ConsEarlyInBy = 0  
--------                                                                                                                                                                                                                                                               
--------                                AND (FirstIn BETWEEN TimeStart AND TimeLateInBy) THEN (Datediff(mi, CoTimeStart, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))  
--------                                                                                                                                                                                                                                                               
--------                           WHEN RosterType='FLEXIBLE' Then (Datediff(mi, FirstIn, LastOut) - (BreakTimeNHInMin + BreakTimeOTInMin))  
--------                                                                                                                                                                                                                                                               
--------                           ELSE 0  
--------                                                                                                                                                                                                                                                               
--------                         END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Sub_Project_Name,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,TimeLateInBy,TimeEarlyOutBy,TimeBreakTimeNHAfter,TimeBreakTimeOTAfter,BreakTimeNHInMin,BreakTimeOTInMin,RosterType,FlexibleWorkinghr,PullWorkTimein,Remarks=CASE  
--------                                                                                                                                                                                                                                                               
--------                                                          WHEN InRemarks IS NULL  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                            AND OutRemarks IS NULL THEN ''  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                       WHEN InRemarks IS NOT NULL  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                            AND OutRemarks IS NULL THEN InRemarks  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                       WHEN InRemarks IS NULL  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                            AND OutRemarks IS NOT NULL THEN OutRemarks  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                       WHEN InRemarks IS NOT NULL  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                            AND OutRemarks IS NOT NULL THEN InRemarks  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                     END  
--------                        FROM   (SELECT BreakTimeNHInMin = CASE  
--------                                                            WHEN RosterType = 'FLEXIBLE' THEN BreakTimeNH  
--------                                                            WHEN RosterType = 'NORMAL'  
--------                                                                 AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeNHAfter, 103) + ' ' + BreakTimeNHhr), 103) THEN BreakTimeNH  
--------                                                            ELSE 0  
--------                                                          END,BreakTimeOTInMin = CASE  
--------                                                                                   WHEN RosterType = 'FLEXIBLE' THEN BreakTimeOT  
--------                                                                                   WHEN RosterType = 'NORMAL'  
--------                                                                                        AND LastOut > CONVERT(DATETIME, (CONVERT(VARCHAR, TimeBreakTimeOTAfter, 103) + ' ' + BreakTimeOThr), 103) THEN BreakTimeOT  
--------                                                                                   ELSE 0  
--------                                                                                 END,CONVERT(CHAR(5), CONVERT (DATETIME, FirstIn, 105), 108) InShortTime,CONVERT(CHAR(5), CONVERT (DATETIME, LastOut, 105), 108) OutShortTime,*  
--------                                FROM   (SELECT CoTimeEnd = CASE  
--------                                                             WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + OutTime), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(
-------- VARCHAR, TimeEnd, 103) + ' ' + OutTime), 103)  
--------                                                             ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + OutTime), 103)  
--------                                                           END,FirstIn=CASE  
--------                                                                         WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)  
--------                                                                                                          FROM   #ActLogsTemp AL  
--------                                                                                                          WHERE  AL.SoftDelete = @softdelete  
--------                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID  
--------                                                                                                             AND AL.UserID = R.Time_Card_No  
--------                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))  
--------                                                                                                             AND Upper(AL.EventID) = 'IN'  
--------                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)
--------                                                                         WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)  
--------                                                                                                            FROM   #ActLogsTemp AL  
--------                                                                                                            WHERE  AL.SoftDelete = @softdelete  
--------                                                                                                               AND AL.TerminalSN = R.Sub_Project_ID  
--------                                                                                                               AND AL.UserID = R.Time_Card_No  
--------                                                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))  
--------                                                                                                               AND Upper(AL.EventID) = 'IN'  
--------                                                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC)  
--------                                                                         ELSE NULL  
--------                                                                       END,LastOut= CASE WHEN RosterType = 'NORMAL' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)  
--------                                                                            FROM   #ActLogsTemp AL  
--------                                                                            WHERE  AL.SoftDelete = @softdelete  
--------                                                                               AND AL.TerminalSN = R.Sub_Project_ID  
--------                                                                               AND AL.UserID = R.Time_Card_No  
--------                                                                               AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))  
--------                                                                               AND Upper(AL.EventID) = 'OUT'  
--------                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC)  
--------                   WHEN RosterType = 'FLEXIBLE' THEN (SELECT TOP 1 CONVERT(DATETIME, AL.TimeEntry, 103)  
--------                                                                            FROM   #ActLogsTemp AL  
--------                                        WHERE  AL.SoftDelete = @softdelete  
--------                                                                               AND AL.TerminalSN = R.Sub_Project_ID  
--------                                                                               AND AL.UserID = R.Time_Card_No  
--------                                                                               AND (CONVERT(VARCHAR,CONVERT(DATETIME, AL.TimeEntry, 103),103) = CONVERT(VARCHAR,CONVERT(DATETIME, R.Roster_Date, 103),103))  
--------                                                                               AND Upper(AL.EventID) = 'OUT'  
--------                                                                            ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) Else Null END,(SELECT TOP 1 AL.Remarks  
--------                                                                                                                                          FROM   #ActLogsTemp AL  
--------                                                                                                                                          WHERE  AL.SoftDelete = @softdelete  
--------                                                                                                                                             AND AL.TerminalSN = R.Sub_Project_ID  
--------                                                                                                                                             AND AL.UserID = R.Time_Card_No  
--------                                                                                                                                             AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))  
--------                                                                                                                                             AND Upper(AL.EventID) = 'IN'  
--------                                                                                                                                          ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) ASC) InRemarks,(SELECT TOP 1 AL.Remarks  
--------                                                                                                                                                                                                         FROM   #ActLogsTemp AL  
--------                                                                                                                                                                                                         WHERE  AL.SoftDelete = @softdelete  
--------                                                                                                                                                                                                            AND AL.TerminalSN = R.Sub_Project_ID  
--------                                                                                                                                                                                                            AND AL.UserID = R.Time_Card_No  
--------                                                                                                                                                                                                            AND (CONVERT(DATETIME, AL.TimeEntry, 103) BETWEEN CONVERT(DATETIME, R.TimeStart, 103) AND CONVERT(DATETIME, R.TimeEnd, 103))  
--------                                                                                                                                                                                                            AND Upper(AL.EventID) = 'OUT'  
--------                                                                                                                                                                                                         ORDER  BY CONVERT(DATETIME, AL.TimeEntry, 103) DESC) OutRemarks,*  
--------                                        FROM   (SELECT ID,Emp_ID,Emp_Name,Roster_ID,Roster_Name,Roster_Date,TimeStart,TimeEnd = CASE  
--------                                                                                                                                  WHEN TimeEnd IS NULL THEN Dateadd(MINUTE, 1410, TimeStart)  
--------                                                                                                                                  ELSE TimeEnd  
--------                                                                                                                                END,TodayPH,TomorrowPH,Time_Card_No,Sub_Project_ID,SubProjectID,Intime,Outtime,EarlyInBy,LateInBy,EarlyOutBy,LateOutBy,ClockInBefore,ClockInAfter,ClockOutBefore,ClockOutAfter,BreakTimeNHHr,BreakTimeOThr,BreakTimeNH,BreakTimeOT,NightShift,Sub_Project_Name,CoTimeStart,Wdays_per_Week,TimeLateInBy,TimeEarlyOutBy = CASE  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                           WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + EarlyOutBy), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + EarlyOutBy), 103)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                           ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + EarlyOutBy), 103)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                         END,TimeBreakTimeNHAfter = CASE  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                      WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + BreakTimeNHHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeNHHr), 103)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                      ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + BreakTimeNHHr), 103)  
--------                                                                                                                                                                                                                                                               
--------     END,TimeBreakTimeOTAfter = CASE  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                 WHEN CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + BreakTimeOTHr), 103) < CONVERT(DATETIME, (CONVERT(VARCHAR, '01/01/2001', 103) + ' ' + InTime), 103) THEN CONVERT(DATETIME, (CONVERT(VARCHAR, TimeEnd, 103) + ' ' + BreakTimeOTHr), 103)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                                 ELSE CONVERT(DATETIME, (CONVERT(VARCHAR, TimeStart, 103) + ' ' + BreakTimeOTHr), 103)  
--------                                                                                                                                                                                                                                                               
--------                                                                                                                                                                                                                                               END,RosterType,FlexibleWorkinghr,PullWorkTimein  
--------                                                FROM   (SELECT EY.Wdays_per_Week,Isnull(EY.emp_name, '') + ' ' + Isnull(EY.emp_lname, '') Emp_Name,RD.Roster_ID,RO.Roster_Name,CONVERT(VARCHAR, RD.Roster_Date, 103) Roster_Date,TimeStart = CONVERT(DATETIME, 
--------CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyInBy),TimeLateInBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.LateInBy),TimeEarlyOutBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.EarlyOutBy),CoTimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + RD.InTime),Dateadd(MINUTE, -30, CONVERT(DATETIME, (SELECT TOP 1 CONVERT(VARCHAR, RDD.Roster_Date, 101) + ' ' + RDD.EarlyInBy FROM RosterDETail RDD WHERE CONVERT(DATETIME, RDD.Roster_Date, 103) > CONVERT(DATETIME, RD.Roster_Date, 103) ORDER BY RDD.Roster_Date ASC ), 101)) TimeEnd,RD.ID,TodayPH = dbo.Isholiday(@compid, RD.Roster_Date),TomorrowPH = dbo.Isholiday(@compid, RD.Roster_Date + 1),ER.Emp_ID,EY.Time_Card_No,  
--------                                                               EP.Sub_Project_ID SubProjectID,  
--------                                                                       SP.Sub_Project_ID Sub_Project_ID,  
--------                                                                       RD.Intime,RD.Outtime,RD.EarlyInBy,RD.LateInBy,RD.EarlyOutBy,RD.LateOutBy,RD.ClockInBefore,RD.ClockInAfter,RD.ClockOutBefore,RD.ClockOutAfter,RD.BreakTimeNHHr,RD.BreakTimeOThr,RD.BreakTimeNH,RD.BreakTimeOT,RD.NightShift,SP.Sub_Project_Name,RD.RosterType,RD.FlexibleWorkinghr,RD.PullWorkTimein  
--------                                                        FROM   RosterDetail RD  
--------                                                               INNER JOIN (SELECT DISTINCT Roster_ID,Emp_ID  
--------                                                                           FROM   EmployeeAssignedToRoster) ER ON RD.Roster_ID = ER.Roster_ID  
--------                                                               INNER JOIN Employee EY ON ER.Emp_ID = EY.Emp_Code  
--------                                                               INNER JOIN (
----------																			SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID  
----------                                                                           FROM   ApprovedTimesheet A  
----------                                                                                  INNER JOIN SubProject S ON A.Sub_Project_ID = S.Sub_Project_ID  
----------                                                                                  INNER JOIN Employee E ON A.Time_Card_No = E.time_card_no  
----------                                                                           WHERE  A.SoftDelete = 0  
----------                                                                           UNION  
----------                                                                           SELECT DISTINCT S.ID Sub_Project_ID,E.Emp_Code Emp_ID  
----------                                                                           FROM   Actatek_Logs A  
----------                                                                                  INNER JOIN SubProject S ON A.TerminalSn = S.Sub_Project_ID  
----------                                                                                  INNER JOIN Employee E ON A.UserID = E.time_card_no  
----------                                                                           WHERE  A.SoftDelete = 0  
----------                                                                           UNION  
--------                                                                           SELECT DISTINCT Sub_Project_ID,Emp_ID --,EntryDate 
--------                                                                           FROM   ##EmployeeAssignedToProject)
--------                                                                          EP ON EP.Emp_ID = EY.Emp_Code --And EP.EntryDate=RD.Roster_Date
--------                                                               INNER JOIN #SubProject SP ON EP.Sub_Project_ID = SP.ID  
--------                                                               INNER JOIN Roster RO ON RD.Roster_ID = RO.ID  
--------                                                        --Inner Join Actatek_Logs AL                                          
--------                                                        --On SP.Sub_Project_ID = AL.TerminalSN And  convert(varchar,RD.Roster_Date,103) = convert(Varchar,convert(datetime,AL.TimeEntry,103),103)                                          
--------                                                        WHERE  (RD.Roster_Date BETWEEN @startdate AND @enddate)  
--------                                                           AND EY.Company_ID = @compid) DE) R) E) E) E) E --Where (E.FirstIn is not null Or E.LastOut is not null)                                          
--------        ORDER  BY E.Emp_Code,E.TSDate,E.SubProjectID  
--------  
--------
--------
--------        IF Rtrim(@empid) != '-1'  
--------            BEGIN  
--------                SELECT @whereemp = 'Where Emp_Code Not In (' + @empid + ')'  
--------  
--------                SELECT @select = 'Delete From #RD ' + @whereemp  
--------  
--------                EXEC (@select)  
--------            END  
--------  
--------        IF Rtrim(@subprojid) != '-1'  
--------            BEGIN  
--------                SELECT @whereproj = 'Where SubProjectID Not In (' + @subprojid + ')'  
--------  
--------                SELECT @select = 'Delete From #RD ' + @whereproj  
--------  
--------                EXEC (@select)  
--------            END  
--------  
--------        IF Rtrim(@isEmpty) = 'Yes'  
--------            BEGIN  
--------                SELECT @select = 'Delete From #RD Where InShortTime is not null Or OutShortTime is not null'  
--------  
--------                EXEC (@select)  
--------    END  
--------  
--------        DECLARE @ROWID          INT,  
--------                @Time_Card_No   VARCHAR(10),  
--------                @Sub_Project_ID VARCHAR(20),  
--------                @Roster_ID      INT,  
--------                @TSDate         VARCHAR(10),  
--------                @LastOut        DATETIME,  
--------                @UDate          DATETIME  
--------        DECLARE TempCurs CURSOR FOR  
--------            SELECT ROWID,Time_Card_No,Sub_Project_ID,Roster_ID,TSDate  
--------            FROM   #RD  
--------  
--------
--------        OPEN TempCurs  
--------
--------        FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate  
--------  
--------        WHILE @@FETCH_STATUS = 0  
--------            BEGIN  
--------                SELECT @UDate = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)  
--------                                 FROM   Actatek_Logs  
--------                                 WHERE  Upper(TERMINALSN) = @Sub_Project_ID  
--------                                    AND EventID LIKE '%IN%'  
--------                                    AND CONVERT(CHAR(10), TimeEntry, 108) = @TSDATE  
--------                                    AND SoftDelete = @softdelete  
--------                                    AND UserID = @Time_Card_No  
--------                                    AND Roster_ID = @Roster_ID  
--------                                 ORDER  BY CONVERT(DATETIME, TimeEntry, 103) ASC)  
--------
--------                IF Len(Isnull(@UDate, 0)) > 1  
--------                    BEGIN  
--------                        UPDATE #RD  
--------                        SET    FirstIn = @UDate  
--------                        WHERE  ROWID = @ROWID  
--------                           AND FirstIn IS NOT NULL   And @UDate != '1900-01-01 00:00:00.000'
--------                    END  
--------  
--------                SELECT @LastOut = (SELECT TOP 1 CONVERT(DATETIME, TimeEntry, 103)  
--------                                   FROM   Actatek_Logs  
--------                                   WHERE  Upper(TERMINALSN) = @Sub_Project_ID  
--------                                      AND EventID LIKE '%OUT%'  
--------                                      AND SoftDelete = @softdelete  
--------                                      AND UserID = @Time_Card_No  
--------                                      AND Roster_ID = @Roster_ID  
--------                                   ORDER  BY CONVERT(DATETIME, TimeEntry, 103) DESC)  
--------  
--------                -- IF len(isnull(@LastOut,0)) > 1                                
--------                -- Begin                                
--------                --  Update #RD Set LastOut= @LastOut Where ROWID = @ROWID  And LastOut is not null                                 
--------                -- End                                
--------                UPDATE #RD  
--------                SET    InShortTime = LEFT(CONVERT(CHAR(10), FirstIn, 108), 5)  
--------                WHERE  ROWID = @ROWID  
--------                   AND FirstIn IS NOT NULL  
--------  
--------                UPDATE #RD  
--------                SET    OutShortTime = LEFT(CONVERT(CHAR(10), LastOut, 108), 5)  
--------                WHERE  ROWID = @ROWID  
--------                   AND LastOut IS NOT NULL  
--------  
--------                FETCH NEXT FROM TempCurs INTO @ROWID, @Time_Card_No, @Sub_Project_ID, @Roster_ID, @TSDate  
--------            END  
--------  
--------        CLOSE TempCurs  
--------  
--------        DEALLOCATE TempCurs  
--------  
--------        UPDATE #RD  
--------        SET    OT1 = NH,  
--------               NH = 0  
--------        WHERE  PullWorkTimein = 1  
--------  
--------        UPDATE #RD  
--------        SET    OT2 = NH,  
--------               NH = 0  
--------        WHERE  PullWorkTimein = 2  
--------  
--------        UPDATE #RD  
--------        SET    NH = OT1,  
--------               OT1 = 0  
--------        WHERE  PullWorkTimein = 3  
--------  
--------        UPDATE #RD  
--------        SET    OT2 = OT1,  
--------               OT1 = 0  
--------        WHERE  PullWorkTimein = 4  
--------  
--------        UPDATE #RD  
--------        SET    NH = OT2,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 5  
--------  
--------        UPDATE #RD  
--------        SET    OT1 = OT2,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 6  
--------  
--------        UPDATE #RD  
--------        SET    NH = NH + OT1,  
--------               OT1 = 0  
--------        WHERE  PullWorkTimein = 7  
--------  
--------        UPDATE #RD  
--------        SET    OT1 = NH + OT1,  
--------               NH = 0  
--------        WHERE  PullWorkTimein = 8  
--------  
--------        UPDATE #RD  
--------        SET    OT2 = NH + OT1,  
--------               NH = 0,  
--------               OT1 = 0  
--------        WHERE  PullWorkTimein = 9  
--------  
--------        UPDATE #RD  
--------        SET    OT1 = NH + OT2,  
--------               NH = 0,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 10  
--------  
--------        UPDATE #RD  
--------        SET    OT2 = NH + OT2,  
--------               NH = 0  
--------        WHERE  PullWorkTimein = 11  
--------  
--------        UPDATE #RD  
--------        SET    NH = NH + OT2,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 12  
--------  
--------        UPDATE #RD  
--------        SET    NH = OT1 + OT2,  
--------               OT1 = 0,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 13  
--------  
--------        UPDATE #RD  
--------        SET    OT1 = OT1 + OT2,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 14  
--------  
--------        UPDATE #RD  
--------        SET    OT2 = OT1 + OT2,  
--------               OT1 = 0  
--------        WHERE  PullWorkTimein = 15  
--------  
--------        UPDATE #RD  
--------        SET    NH = NH + OT1 + OT2,  
--------               OT1 = 0,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 16  
--------  
--------        UPDATE #RD  
--------        SET    OT1 = NH + OT1 + OT2,  
--------               NH = 0,  
--------               OT2 = 0  
--------        WHERE  PullWorkTimein = 17  
--------  
--------        UPDATE #RD  
--------        SET    OT2 = NH + OT1 + OT2,  
--------               NH = 0,  
--------               OT1 = 0  
--------        WHERE  PullWorkTimein = 18  
--------  
--------        UPDATE #RD  
--------        SET    HoursWorked = (NH + OT1 + OT2)  
--------        WHERE  PullWorkTimein > 0  
--------  
--------        IF (@sessid != -1)  
--------            BEGIN  
--------                SELECT RES.*,E.Email EmailSuper  
--------                FROM   (SELECT RecordLock = Isnull((SELECT TOP 1 ID  
--------                                                    FROM   ApprovedTimeSheet AT  
--------                                                    WHERE  AT.SoftDelete = @softdelete  
--------                                                       AND AT.Roster_ID = R.Roster_ID  
--------                                                       AND AT.Time_Card_No = R.Time_Card_No  
--------                                                       AND AT.Sub_Project_ID = R.Sub_Project_ID  
--------                                                       AND AT.TimeEntryStart = R.FirstIn  
--------                                                       AND AT.TimeEntryEnd = R.LastOut), 0),dbo.Converttohours(R.HoursWorked) HoursWorked,  
--------              dbo.Converttohours(R.NH) NH,dbo.Converttohours(R.OT1) OT1,dbo.Converttohours(R.OT2) OT2,  
--------              R.CompanyWorkHours,R.HrsinMins,R.Wdays_per_Week,R.ID,R.Emp_Code,R.Emp_Name,R.Roster_ID,  
--------              R.Roster_Name,R.TSDate,R.Roster_Day,R.TimeStart,R.TimeEnd,R.CoTimeStart,R.CoTimeEnd,  
--------              R.FirstIn,R.LastOut,R.InShortTime,R.OutShortTime,R.TodayPH,R.TomorrowPH,R.Time_Card_No,  
--------              R.Sub_Project_ID,R.SubProjectID,R.Sub_Project_Name,R.Intime,R.Outtime,R.EarlyInBy,  
--------              R.LateInBy,R.EarlyOutBy,R.LateOutBy,R.ClockInBefore,R.ClockInAfter,R.ClockOutBefore,  
--------              R.ClockOutAfter,R.BreakTimeNHHr,R.BreakTimeOThr,R.BreakTimeNH,R.BreakTimeOT,R.NightShift,  
--------              R.TimeLateInBy,R.TimeEarlyOutBy,R.TimeBreakTimeNHAfter,R.TimeBreakTimeOTAfter,  
--------              R.BreakTimeNHInMin,R.BreakTimeOTInMin,R.RosterType,R.FlexibleWorkinghr,  
--------              R.PullWorkTimein,R.HoursWorked HoursWorkedMin,R.NH NHMin,R.OT1 OT1Min,  
--------              R.OT2 OT2Min,R.Remarks,TSSup =  
--------                      CASE  
--------                     WHEN (E.TimeSupervisor IS NULL  
--------                         OR E.TimeSupervisor = 0) THEN  
--------                     S.TimeSupervisor  
--------                     ELSE E.TimeSupervisor  
--------                      END,E.Email MyEmail  
--------                        FROM   #RD R  
--------                               INNER JOIN Employee E ON R.Emp_Code = E.Emp_Code  
--------                               INNER JOIN SubProject S ON R.SubProjectID = S.ID) RES  
--------                       LEFT OUTER JOIN Employee E ON RES.TSSup = E.Emp_Code  
--------                ORDER  BY RES.Emp_Name  
--------            END  
--------  
--------        IF (@REPID = 99) --SUMMARY PROJECT Then Employe Wise            
--------            BEGIN  
--------                SELECT RD.Time_Card_No,E.Emp_name [Full_Name],Sub_Project_Name,dbo.Converttohours(RD.HoursWorked) [Hours_Worked],dbo.Converttohours(RD.NH) NH,dbo.Converttohours(RD.OT1) OT1,dbo.Converttohours(RD.OT2) OT2,(E.Hourly_Rate) [Hourly_Rate],((E.Hourly_Rate * E.OT1Rate)) [OT1_Rate],((E.Hourly_Rate * E.OT2Rate)) [OT2_Rate],((E.Hourly_Rate) * dbo.Converttohours(RD.NH)) [Tot_NH],(((E.Hourly_Rate * E.OT1Rate)) * dbo.Converttohours(RD.OT1)) [TotOT1],(((E.Hourly_Rate * E.OT2Rate)) * dbo.Converttohours(RD.OT2)) [TotOT2],RD.HoursWorked [HoursWorked In Min],RD.NH [NH in Min],RD.OT1 [OT1 in Min],RD.OT2 [OT2 in Min],(E.Hourly_Rate / 60) [Hourly Rate in Min],((E.Hourly_Rate * E.OT1Rate) / 60) [OT1Rate in Min],((E.Hourly_Rate * E.OT2Rate) / 60) [OT2Rate in Min],((E.Hourly_Rate / 60) * RD.NH) [TotNH in Min],(((E.Hourly_Rate * E.OT1Rate) / 60) * RD.OT1) [Tot OT1 in Min],(((E.Hourly_Rate * E.OT2Rate) / 60) * RD.OT2) [Tot OT2 in Min],Emp_Code  
--------                FROM   (SELECT RD.Time_Card_No,SUM(HoursWorked) HoursWorked,CAST(SUM(NH) AS VARCHAR) NH,SUM(OT1) OT1,SUM(OT2) OT2,RD.Sub_Project_Name  
--------                        FROM   #RD RD  
--------                        GROUP  BY RD.Sub_Project_Name,RD.Time_Card_No) RD  
--------                       INNER JOIN Employee E ON RD.Time_Card_No = E.Time_Card_No  
--------                ORDER  BY Emp_Name  
--------            END  
--------  
--------        IF (@REPID = 100)  
--------            BEGIN  
--------                SELECT Time_Card_No,Emp_Name Full_Name,Sub_Project_Name,TSDate [Date],InShortTime [In_Time],OutShortTime [Out_Time],dbo.Converttohours(HoursWorked) [Hours_Worked],dbo.Converttohours(NH) NH,dbo.Converttohours(OT1) OT1,dbo.Converttohours(OT2) OT2,Emp_Code,Remarks  
--------                FROM   #RD  
--------                ORDER  BY Emp_Name,TSDATE  
--------            END  
--------  
--------        DROP TABLE #RD  
--------		DROP TABLE ##EmployeeAssignedToProject
--------        DROP TABLE #ActLogsTemp  
--------    END  
--------
--------GO
--------Merging 9.0
--------CREATE PROC [dbo].[sp_Workers_Assigned]  
--------       (  
--------        @Company_ID INT ,  
--------        @TypeID INT ,  
--------        @Remarks VARCHAR(50) ,  
--------        @EmpID VARCHAR(8000) ,  
--------        @Action INT ,  
--------        @retval INT OUTPUT          
--------       )  
--------AS   
--------       DECLARE @select VARCHAR(8000)          
--------       DECLARE @where VARCHAR(8000)           
--------        
--------       SET @where = ''  
--------       SET @select = ''  
--------    
--------       BEGIN      
--------          
--------             IF LEN(@EmpID) > 0   
--------                BEGIN                                                                                        
--------                      IF (@Action = 0)   
--------                         BEGIN    
--------                               SELECT   @where = 'Where Emp_Code In (' + @EmpID + ')'                                                                                  
--------                         END    
--------                      IF (@Action = 1)   
--------                         BEGIN    
--------                               SELECT   @where = 'Where ID In (' + @EmpID + ')'    
--------                         END    
--------                END          
--------    
--------             IF (@Action = 0)   
--------                BEGIN    
--------                      SELECT    @select = 'Insert Into EmployeeAssignedToWorkersList (RefID, Emp_ID) Select ' +  
--------                                CAST(@TypeID AS VARCHAR(5)) + ',Emp_Code Emp_ID From Employee ' + @where     
--------                END    
--------    
--------             IF (@Action = 1 AND  
--------                 LEN(@EmpID) > 0  
--------                )   
--------                BEGIN    
--------                      SELECT    @select = 'Delete From EmployeeAssignedToWorkersList ' + @where   
--------                END    
--------    
--------             EXEC (@select)               
--------          
--------             RETURN          
--------       END   
--------GO
--------Merging 9.0
--------CREATE PROCEDURE Sp_getidamcdetails  @EmpId        AS VARCHAR(10),    
--------                                    @Start_Period AS VARCHAR(10),    
--------                                    @End_Period   AS VARCHAR(10),    
--------                                    @AMCSCSN      AS VARCHAR(25),    
--------                                    @Filter       AS VARCHAR(1)    
--------AS    
--------  DECLARE @AMCSLimit FLOAT    
--------  DECLARE @Form INT  
--------    
--------  SELECT @AMCSLimit = Isnull(AMCSLimit, 0)  , @Form=isnull(AMCSRound,0)  
--------  FROM   MedicalCSN    
--------  WHERE  CSN = @AMCSCSN    
--------    
--------  IF ( Len(@EmpId) > 0 )    
--------    BEGIN    
--------        SELECT ID    
--------        FROM   AMCDetails    
--------        WHERE  EmpId = @EmpId    
--------               AND Start_Period = @Start_Period    
--------               AND END_Period = @End_Period    
--------    END    
--------  ELSE    
--------    BEGIN    
--------        SELECT A.ID,    
--------               A.EMPID,    
--------               A.EMPNAME,    
--------               A.NRIC,    
--------               A.OPTIONSELECTED,    
--------               A.FORMULA,    
--------               A.BASICPAY,    
--------               A.NETPAY,    
--------               A.Total_Gross,    
--------               A.Start_Period,    
--------               A.End_Period,    
--------               CONVERT(NUMERIC(8, 3), dbo.ConvertToRound(A.AMCS_AMOUNT, @Form)) AMCS_AMOUNT,    
--------               E.IC_PP_Number,    
--------               CAST(0.00 AS FLOAT)                                Total_AMCS_AMOUNT    
--------        INTO   #AMCDetails    
--------        FROM   AMCDetails A    
--------               INNER JOIN Employee E    
--------                 ON A.EmpID = E.Emp_Code    
--------        WHERE  CONVERT(DATETIME, Start_Period, 103) = CONVERT(DATETIME, @Start_Period, 103)    
--------               AND CONVERT(DATETIME, END_Period, 103) = CONVERT(DATETIME, @End_Period, 103)    
--------				and termination_date IS NULL
--------    
--------        DECLARE @EmpCode CHAR(10)    
--------        DECLARE @Total FLOAT    
--------        DECLARE db_cursor CURSOR FOR    
--------          SELECT EmpID    
--------          FROM   #AMCDetails    
--------    
--------        OPEN db_cursor    
--------    
--------        FETCH NEXT FROM db_cursor INTO @EmpCode    
--------    
--------        WHILE @@FETCH_STATUS = 0    
--------          BEGIN    
--------              SELECT @Total = SUM(CONVERT(FLOAT, dbo.ConvertToRound(A.AMCS_AMOUNT, @Form)))    
--------              FROM   AMCDetails A    
--------              WHERE  YEAR(CONVERT(DATETIME, Start_Period, 103)) = YEAR(CONVERT(DATETIME, @Start_Period, 103))    
--------                     AND MONTH(CONVERT(DATETIME, Start_Period, 103)) <= MONTH(CONVERT(DATETIME, @Start_Period, 103))    
--------                     AND EmpID = @EmpCode    
--------    
--------              UPDATE #AMCDetails    
--------              SET    Total_AMCS_AMOUNT = Isnull(@Total, 0)    
--------              WHERE  EmpID = @EmpCode    
--------    
--------              FETCH NEXT FROM db_cursor INTO @EmpCode    
--------          END    
--------    
--------        CLOSE db_cursor    
--------    
--------        DEALLOCATE db_cursor    
--------    
----------        UPDATE #AMCDetails    
----------        SET    AMCS_AMOUNT = 0    
----------        WHERE  Total_AMCS_AMount > @AMCSLimit    
----------    
--------        IF ( @Filter = '1' )    
--------          BEGIN    
--------              SELECT *    
--------              FROM   #AMCDetails    
--------          END    
--------        IF ( @Filter = '2' )    
--------          BEGIN    
--------              SELECT *    
--------              FROM   #AMCDetails   A 
--------              WHERE  dbo.ConvertToRound(A.AMCS_AMOUNT, @Form) > 0    
--------          END    
--------    
--------        SELECT Isnull(SUM(CONVERT(FLOAT, dbo.ConvertToRound(A.AMCS_AMOUNT, @Form))), 0) SumTot    
--------        FROM   #AMCDetails A
--------        WHERE  CONVERT(DATETIME, Start_Period, 103) = CONVERT(DATETIME, @Start_Period, 103)    
--------               AND CONVERT(DATETIME, END_Period, 103) = CONVERT(DATETIME, @End_Period, 103)    
--------    
--------        DROP TABLE #AMCDetails    
--------    END     
--------GO
--------Merging 9.0
--EXEC [Sp_userrighttopayroll] 14, 1019, 'DEPART', '14'
--------CREATE PROC [dbo].[Sp_userrighttopayroll] 
--------			@company_id INT,
--------			@UserID  INT,
--------			@Type   Varchar(10),
--------			@TypeID  Varchar(10)
--------AS    
--------  
--------  DECLARE @WorkFlowID AS INT    
--------  DECLARE @RowID AS INT    
--------  DECLARE @ID AS INT    
--------  DECLARE @select VARCHAR(1000)    
--------  DECLARE @where VARCHAR(1000)    
--------  
-------- Select * INTO #EmployeeTemp From Employee
-------- IF (@Type = 'DEPART')
-------- BEGIN
--------  IF (@TypeID = '-1')
--------  BEGIN
--------	--SELECT  EMP_CODE,[NAME] = Case When termination_date is null Then (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,''))  Else (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,'')) + '[Terminated]' End INTO #EmployeeTemp FROM dbo.employee WHERE COMPANY_ID= @company_id ORDER BY EMP_NAME  
--------	SELECT @where = 'WHERE COMPANY_ID != '+ Convert(varchar(10),@company_id)
--------  END
--------  ELSE
--------  BEGIN  
--------   --SELECT  EMP_CODE,[NAME] = Case When Termination_Date is null Then (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,''))  Else (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,'')) + '[Terminated]' End INTO #EmployeeTemp FROM dbo.employee WHERE DEPT_ID = @TypeID AND COMPANY_ID= @company_id ORDER BY EMP_NAME  
--------   SELECT @where = 'WHERE DEPT_ID != ' + @TypeID + ' OR COMPANY_ID != '+ Convert(varchar(10),@company_id)    
--------  END  
-------- END  
-------- SELECT @select = 'Delete From #EmployeeTemp ' + @where  
-------- EXEC (@select)    
--------  CREATE TABLE #EmployeeWorkFlowLevel    
--------      (    
--------           ID             INT,    
--------           WORKFLOWID     INT,    
--------           ROWID          INT,    
--------           PAYROLLGROUPID INT    
--------      )    
--------    
--------  SELECT DISTINCT WL.ID,WL.WorkFlowID,WL.RowID    
--------  INTO   #EmployeeWorkFlow  
--------  FROM   #EmployeeTemp EM  
--------         INNER JOIN (SELECT WL.*    
--------                     FROM   EmployeeWorkFlowLevel WL    
--------                     WHERE  WL.FlowType = 1) WL ON EM.Pay_supervisor = WL.ID    
--------    
--------  DECLARE curse CURSOR FOR    
--------      SELECT *    
--------      FROM   #EmployeeWorkFlow    
--------    
--------  OPEN curse    
--------    
--------  FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID    
--------    
--------  WHILE @@FETCH_STATUS = 0    
--------      BEGIN    
--------          --PRINT @RowID                                                                        
--------          INSERT INTO #EmployeeWorkFlowLevel    
--------          SELECT @ID,@WorkFlowID,RowID,PayrollGroupID    
--------          FROM   EmployeeWorkFlowLevel    
--------          WHERE  WorkFLowID = @WorkFLowID    
--------             AND RowID <= @RowID    
--------    
--------          FETCH NEXT FROM curse INTO @ID, @WorkFlowID, @RowID    
--------      END    
--------    
--------  SELECT DISTINCT Te.ID,EG.Emp_ID    
--------  INTO   #EmployeeAssignedToPayrollGroup    
--------  FROM   #EmployeeWorkFlowLevel Te    
-------- INNER JOIN EmployeeAssignedToPayrollGroup EG ON Te.PayrollGroupID = EG.PayrollGroupID    
--------  WHERE  EG.Emp_ID = @UserID    
--------    
--------  CLOSE curse    
--------    
--------  DEALLOCATE curse    
--------  
--------  
--------  DELETE FROM #EmployeeTemp  
--------  WHERE  Pay_supervisor NOT IN (SELECT ID    
--------                                FROM   #EmployeeAssignedToPayrollGroup)    
--------     AND (Pay_supervisor > 0)   
--------  
--------  
-------- SELECT  EMP_CODE,[NAME] = Case When termination_date is null Then (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,''))  Else (isnull(EMP_NAME,'') +' ' + isnull(EMP_LNAME,'')) + '[Terminated]' End From #EmployeeTemp ORDER BY EMP_NAME  
--------
--------GO
--------Merging 9.0
--sp_GetEmployeePayDetails  18, 2010, 11, '' , '0.00', '0.00', '181.818181818182', '0.00', '0.00', '31.47', '41.96', '106', '2120', '','5', 'SINDA', '5', '1500', '1', '15', '20.98', '0.0', '0.0'
--------CREATE PROCEDURE [dbo].[Sp_getemployeepaydetails] @emp_code        VARCHAR(256),        
--------                                                 @Year            VARCHAR(256),        
--------                                                 @Month           VARCHAR(256),        
--------                                                 @Day_Work        VARCHAR(256),        
--------                                                 @OT1             VARCHAR(256),        
--------                                                 @OT2             VARCHAR(256),        
--------                                                 @BasicDayRate    VARCHAR(256),        
--------                                                 @OT1Hrs          VARCHAR(256),        
--------                                                 @OT2Hrs          VARCHAR(256),        
--------                                                 @OT1Rate         VARCHAR(256),        
--------                                                 @OT2Rate         VARCHAR(256),        
--------                                                 @empcpfamount    VARCHAR(10),        
--------                                                 @ordwages        VARCHAR(10),        
--------                                                 @addwages        VARCHAR(10),        
--------                                                 @cpfrate         VARCHAR(200),        
--------                                                 @fundname        VARCHAR(10),        
--------                                                 @fundamount      VARCHAR(10),        
--------                                                 @fundgrossamount VARCHAR(10),        
--------                                                 @stdatesubmonth  VARCHAR(2),        
--------                                                 @endatesubmonth  VARCHAR(2),        
--------                                                 @hourlyrate      VARCHAR(10),        
--------                                                 @nhhrs           VARCHAR(10),        
--------                                                 @daysworkedrate  VARCHAR(10)        
--------AS        
--------  DECLARE @startsubpay VARCHAR(10)        
--------  DECLARE @endsubpay VARCHAR(10)        
--------  DECLARE @startdtsub DATETIME        
--------  DECLARE @enddtsub DATETIME        
--------  Declare @CalcFundFH Varchar(1)    
--------        
--------    BEGIN    
--------        SET @startsubpay = @stdatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)        
--------        SET @endsubpay = @endatesubmonth + '/' + CAST(@Month AS VARCHAR) + '/' + CAST(@year AS VARCHAR)        
--------        SET @startdtsub = CONVERT(DATETIME, @startsubpay, 103)        
--------        SET @enddtsub = CONVERT(DATETIME, @endsubpay, 103)        
--------    
--------    
--------      
--------    
--------    
--------    
------------Added on Dec 6 for Auto And Manual Funds- Start    
--------Select @CalcFundFH=CASE    
--------WHEN @endatesubmonth = '15' AND ComputeFundFH = 1 THEN 'Y'    
--------WHEN @endatesubmonth = '15' AND ComputeFundFH = 0 THEN 'N'    
--------ELSE 'Y' End From Employee Where Emp_Code = @emp_code    
--------  
--------   
--------  Select *,Sum(dbo.Getempfundcontribution(@fundgrossamount, Isnull(FundType, ''))) DedAmt Into #Deduction From    
--------  (    
--------  SELECT ED.Emp_Code,FundType = Case     
--------        When ED.FundType=1 Then 'CDAC'    
--------        When ED.FundType=2 Then 'ECF'    
--------        When ED.FundType=3 Then 'MBMF'    
--------        When ED.FundType=4 Then 'SINDA'    
--------        END    
--------  FROM   Emp_Deductions ED    
--------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID    
--------  WHERE  ((trx_period >= @startdtsub    
--------          AND trx_period <= @enddtsub)    
--------         AND YEAR(trx_period) = YEAR(@startdtsub))    
--------   And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))    
--------  AND  CONVERT(INT, @endatesubmonth) >=1 And @CalcFundFH = 'Y' And ED.Emp_Code = @emp_code    
--------  GROUP  BY ED.Emp_Code,ED.Trx_ID, ED.FundType    
--------  ) D Group By Emp_Code, FundType    
--------  Union All
--------  SELECT Emp_Code,FundType = Case     
--------        When ED.FundType=5 Then 'CDAC'    
--------       When ED.FundType=6 Then 'ECF'    
--------        When ED.FundType=7 Then 'MBMF'    
--------        When ED.FundType=8 Then 'SINDA'    
--------        END,    
--------  SUM(trx_amount) DedAmt    
--------  FROM   Emp_Deductions ED    
--------         INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID    
--------  WHERE  ((trx_period >= @startdtsub    
--------          AND trx_period <= @enddtsub)    
--------         AND YEAR(trx_period) = YEAR(@startdtsub))    
--------   And ((ED.FundType >=5 And ED.FundType <=8))
--------  AND  CONVERT(INT, @endatesubmonth) >=1 And @CalcFundFH = 'Y' And ED.Emp_Code = @emp_code    
--------  GROUP  BY Emp_Code,ED.FundType    
--------        
--------    
--------        SELECT EA.AddType,CAST(EA.AddAmt AS DECIMAL(9, 2)) AddAmt,RowOrDer        
--------        FROM   (SELECT AddType=CASE        
--------                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN ('' + CAST(@nhhrs AS VARCHAR) + ' is Normal Hours Worked and ' + CAST(@hourlyrate AS VARCHAR) + ' is Normal Hourly Rate')        
--------                                 ELSE NULL        
--------                               END,        
--------                       --AddAmt=Case When Cast(@nhhrs as float) != 0 And Cast(@hourlyrate as float) > 0 Then Cast(@daysworkedrate as float) Else cast(0 as float) End,             
--------      NULL AddAmt,        
--------                       0 RowOrDer        
--------                UNION        
--------                SELECT AddType=CASE        
--------                                 WHEN CAST(@nhhrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@nhhrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@hourlyrate AS FLOAT) / 60) AS VARCHAR) + ') NH:'        
--------                                 ELSE NULL        
--------                               END,(dbo.Converttominutes(CAST(@nhhrs AS FLOAT))) * (CAST(@hourlyrate AS FLOAT) / 60) AddAmt,0.5 RowOrDer        
--------                UNION        
--------                SELECT '(' + CAST(@Day_Work AS VARCHAR) + ' Days) x (' + CAST(@BasicDayRate AS VARCHAR) + ' Day Rate) Days Worked:' AddType,CAST (@Day_Work AS FLOAT) * CAST (@BasicDayRate AS FLOAT) AddAmt,0 RowOrDer        
--------                UNION        
-------- SELECT AddType=CASE        
--------                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT1Hrs AS VARCHAR) + ' is OT1 Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate')        
--------                                 ELSE NULL        
--------                               END,        
--------                       --'' + CAST(@OT1Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT1Rate AS VARCHAR) + ' is OT1 Rate' AddType          
--------                       NULL AddAmt,        
--------        1 RowOrDer        
--------                UNION        
--------                SELECT AddType=CASE        
--------                                 WHEN CAST(@OT1Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT1Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT1Rate AS FLOAT) / 60) AS VARCHAR) + ') OT1:'        
--------                                 ELSE NULL        
--------                               END,CAST (@OT1 AS FLOAT) AddAmt,2 RowOrDer        
--------                UNION        
--------                SELECT AddType=CASE        
--------                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN ('' + CAST(@OT2Hrs AS VARCHAR) + ' is OT2 Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate')        
--------                                 ELSE NULL        
--------                               END,        
--------                       --'' + CAST(@OT2Hrs AS VARCHAR) + ' Hours Worked and ' + CAST(@OT2Rate AS VARCHAR) + ' is OT2 Rate' AddType          
--------                       NULL AddAmt,3 RowOrDer        
--------                UNION        
--------                SELECT AddType=CASE        
--------                                 WHEN CAST(@OT2Hrs AS FLOAT) != 0 THEN '(Total Minutes: ' + CAST(dbo.Converttominutes(CAST(@OT2Hrs AS FLOAT)) AS VARCHAR) + ') x (Minute Rate: ' + CAST((CAST(@OT2Rate AS FLOAT) / 60) AS VARCHAR) + ') OT2:'        
--------                                 ELSE NULL        
--------                               END,CAST (@OT2 AS FLOAT) AddAmt,3.5 RowOrDer      
--------                UNION        
--------                SELECT EA.AddType + ':',EA.AddAmt,4 RowOrDer        
--------                FROM   (SELECT EA.*,AT.[Desc] AddType        
--------                        FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
--------                 FROM   emp_additions EA        
--------                                WHERE  (--MONTH(trx_period) = @month AND                        
--------                                       (trx_period >= @startdtsub        
--------                                        AND trx_period <= @enddtsub)        
--------                                       AND YEAR(trx_period) = @Year        
--------                                       AND Emp_Code = @emp_code)        
--------           AND (EA.ClaimStatus = 'Approved'        
--------           OR EA.ClaimStatus IS NULL)        
--------                                GROUP  BY Emp_Code,Trx_Type) EA        
--------                               INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID) EA) EA        
--------        WHERE  AddType IS NOT NULL        
--------           AND (AddAmt != 0        
--------                 OR AddAmt IS NULL)        
--------        ORDER  BY RowOrder        
--------        
--------        IF (@empcpfamount != 0)        
--------            BEGIN        
--------                SELECT *        
--------                FROM   (SELECT 'EMPLOYEEE CPF CONTRIBUTIONS:' AddType,@empcpfamount AddAmt,0 RowORder        
--------                        UNION ALL
--------                        SELECT AddType = CASE        
--------                                           WHEN Len(@cpfrate) >= 3 THEN REPLACE('{(' + @ordwages + ' Ord Wages+ ' + @addwages + ' Add Wages) And CPF Rate is: ' + @cpfrate + '}', '+ 0 Add Wages', '')        
--------                                           ELSE REPLACE('{(' + @ordwages + ' Ord Wages + ' + @addwages + ' Add Wages) x' + @cpfrate + '% (CPF Rate)}', '+ 0 Add Wages', '')        
--------                                         END,NULL AddAmt,1 RowORder        
--------                        UNION ALL
--------                        SELECT '(' + @fundgrossamount + ' Calculate on Fund) ' + @fundname + ':',@fundamount,2 RowORder        
--------                        UNION All
--------                        SELECT '(' + @fundgrossamount + ' Calculate on Fund) ' + FundType + ':',DedAmt,2 RowORder From #Deduction     
--------                        UNION All        
--------                        SELECT ED.AddType + ':',ED.AddAmt,3 RowORder        
--------                        FROM   (SELECT ED.*,DT.[Desc] AddType        
--------                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
--------                                        FROM   emp_deductions ED        
--------                                        WHERE  ((trx_period >= @startdtsub        
--------                               AND trx_period <= @enddtsub)        
--------                                               AND YEAR(trx_period) = @Year        
--------                                               AND Emp_Code = @emp_code And (ED.FundType is NULL OR ED.FundType=0))
--------                                        GROUP  BY Emp_Code,Trx_Type) ED        
--------                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED        
--------                WHERE  (AddAmt != 0        
--------                     OR AddAmt IS NULL)    
--------                ORDER  BY ED.RowOrder        
--------            END        
--------        ELSE        
--------            BEGIN      
--------                SELECT *        
--------                FROM   (SELECT @fundname + ':' AddType,@fundamount AddAmt,2 RowORder        
--------                        UNION        
--------                        SELECT ED.AddType + ':' AddType,ED.AddAmt AddAmt,3 RowORder        
--------                        FROM   (SELECT ED.*,DT.[Desc] AddType        
--------                                FROM   (SELECT Emp_Code,Trx_Type,SUM(Trx_Amount) AddAmt        
--------                                        FROM   emp_deductions ED        
--------                                        WHERE  ((trx_period >= @startdtsub        
--------                                                AND trx_period <= @enddtsub)        
--------                                               AND YEAR(trx_period) = @Year        
--------                                               AND Emp_Code = @emp_code)        
--------                                        GROUP  BY Emp_Code,Trx_Type) ED        
--------                                       INNER JOIN deductions_types DT ON ED.Trx_Type = DT.ID) ED) ED        
--------                WHERE  ED.AddAmt != 0        
--------                ORDER  BY ED.RowOrder  
--------  END        
--------    END     
--------    
--------DROP TABLE #Deduction    
--------GO
--------Merging 9.0
--sp_processtimesheetflexadv '01/08/2009', '30/10/2010', 2, '-1', '-1', 'No', 0, 0  
--------CREATE PROCEDURE [dbo].[Sp_processtimesheetflexadv] (@start_date VARCHAR(10),  
--------                                                    @end_date   VARCHAR(10),  
--------                                                    @compid     VARCHAR(10),  
--------                                                    @empid      VARCHAR(8000),  
--------                                                    @subprojid  VARCHAR(8000),  
--------                                                    @isEmpty    VARCHAR(3),  
--------                                                    @sessid     FLOAT,  
--------                                                    @REPID      INT=0)  
--------AS  
--------    BEGIN  
--------        DECLARE @select  VARCHAR(8000)  
--------        DECLARE @whereproj VARCHAR(8000)  
--------        DECLARE @whereemp VARCHAR(8000)  
--------        DECLARE @startdate AS DATETIME  
--------        DECLARE @enddate AS DATETIME  
--------        DECLARE @softdelete AS INT  
--------  
--------        --  FirstIn        
--------        --  ,RosterType        
--------        --  ,FlexibleWorkinghr        
--------        --  ,RES.Time_Card_No        
--------        --  ,Roster_ID        
--------        --  ,Roster_Name        
--------        --  ,RES.Emp_Name    
--------        --  ,Sub_Project_ID        
--------        --  ,Sub_Project_Name        
--------        --  ,TSDate    
--------        --  ,TimeStart    
--------        --  ,LastOut    
--------        --  ,Roster_Day    
--------        --  ,InShortTime    
--------        --  ,OutShortTime    
--------        --  ,NH    
--------        --  ,OT1    
--------        --  ,OT2    
--------        --  ,HoursWorked    
--------        --  ,RecordLock    
--------        --  ,RES.Remarks    
--------        --  ,E.Email EmailSuper        
--------        --  ,MyEmail    
--------        SET @startdate = CONVERT(DATETIME, @start_date, 103)  
--------        SET @enddate = CONVERT(DATETIME, @end_date, 103)  
--------  
--------        SELECT A.ID,E.Emp_Code Emp_ID,A.UserID,A.TimeEntry,A.EventID,A.TerminalSN,  
--------  CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) DATE, A.Remarks, S.ID SubProjID  
--------        INTO   #ActLogsTemp  
--------        FROM   Actatek_Logs A  
--------               INNER JOIN Employee E ON A.UserID = E.Time_Card_No  
--------    LEFT OUTER JOIN SubPRoject S On A.TerminalSN = S.Sub_Project_ID   
--------        WHERE  CONVERT(DATETIME, CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103), 103) BETWEEN @startdate AND @enddate  
--------        ORDER  BY UserID,TerminalSN,CONVERT(DATETIME, A.TimeEntry, 103)  
--------  
--------        IF Rtrim(@empid) != '-1'  
--------            BEGIN  
--------                SELECT @whereemp = 'Where Emp_ID Not In (' + @empid + ')'  
--------  
--------                SELECT @select = 'Delete From #ActLogsTemp ' + @whereemp  
--------  
--------                EXEC (@select)  
--------            END  
--------  
--------        IF Rtrim(@subprojid) != '-1'  
--------            BEGIN  
--------                SELECT @whereproj = 'Where SubProjID Not In (''' + @subprojid + ''')'  
--------  
--------                SELECT @select = 'Delete From #ActLogsTemp ' + @whereproj  
--------  
--------                EXEC (@select)  
--------            END  
--------  
--------        SELECT *  
--------        INTO   #ActLogsTempDisInProj  
--------        FROM   (SELECT DISTINCT E.Emp_Code,A.UserID Time_Card_No,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,S.Sub_Project_ID,EA.Roster_ID,RD.FlexibleWorkinghr,RD.BreakTimeNH,RD.BreakTimeOT,A.TerminalSN Terminal,A.UserID [User_ID],RD.ID RostID  
--------                FROM   #ActLogsTemp A  
--------                       INNER JOIN Employee E ON A.UserID = E.Time_Card_No  
--------                       INNER JOIN EmployeeAssignedToRoster EA ON E.Emp_Code = EA.Emp_ID  
--------                       INNER JOIN Roster R ON EA.Roster_ID = R.ID  
--------                       INNER JOIN SubProject S ON A.TerminalSN = S.Sub_Project_ID  
--------                       INNER JOIN RosterDetail RD ON EA.Roster_ID = RD.Roster_ID  
--------        AND CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)) D  
--------        ORDER  BY D.Emp_Code,D.Terminal,D.TSDate  
--------  
--------        SELECT DISTINCT TOP 0 E.Emp_Code,A.UserID Time_Card_No,S.Sub_Project_ID,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,EA.Roster_ID  
--------        INTO   #ActLogsPreFinal  
--------        FROM   #ActLogsTemp A  
--------               INNER JOIN Employee E ON A.UserID = E.Time_Card_No  
--------               INNER JOIN EmployeeAssignedToRoster EA ON E.Emp_Code = EA.Emp_ID  
--------               INNER JOIN Roster R ON EA.Roster_ID = R.ID  
--------               INNER JOIN SubProject S ON A.TerminalSN = S.Sub_Project_ID  
--------               INNER JOIN RosterDetail RD ON EA.Roster_ID = RD.Roster_ID  
--------                                             AND CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)  
--------  
--------        --        SELECT A.ID,E.Emp_Code,A.UserID,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,A.TimeEntry,A.EventID,A.TerminalSN    
--------        --        INTO   #ActLogsTempIn    
--------        --        FROM   #ActLogsTemp A    
--------        --               INNER JOIN Employee E ON A.UserID = E.Time_Card_No    
--------        --        WHERE  CONVERT(DATETIME, TimeEntry, 103) BETWEEN @startdate AND @enddate    
--------        --           AND EventID LIKE '%IN%'    
--------        --    
--------        --        SELECT A.ID,E.Emp_Code,A.UserID,CONVERT(VARCHAR(10), CONVERT(DATETIME, A.TimeEntry, 103), 103) TSDate,A.TimeEntry,A.EventID,A.TerminalSN    
--------        --        INTO   #ActLogsTempOut    
--------        --        FROM   #ActLogsTemp A    
--------        --               INNER JOIN Employee E ON A.UserID = E.Time_Card_No    
--------        --        WHERE  CONVERT(DATETIME, TimeEntry, 103) BETWEEN @startdate AND @enddate    
--------        --           AND EventID LIKE '%OUT%'    
--------        SELECT *  
--------        INTO   #LoopActatek  
--------        FROM   #ActLogsTemp AT  
--------               LEFT OUTER JOIN #ActLogsTempDisInProj ATP ON AT.UserID = ATP.Time_Card_No  
--------                                                            AND AT.DATE = ATP.TSDate  
--------                                                            AND AT.TerminalSN = ATP.Sub_Project_ID  
--------  
--------        ALTER TABLE #ActLogsPreFinal ADD [In] DATETIME  
--------  
--------        ALTER TABLE #ActLogsPreFinal ADD [Out] DATETIME  
--------  
--------        IF (@sessid > 0)  
--------            BEGIN  
--------                SET @softdelete=2  
--------            END  
--------        ELSE  
--------            BEGIN  
--------                SET @softdelete=0  
--------            END  
--------  
--------        IF Rtrim(@isEmpty) = 'Yes'  
--------            BEGIN  
--------                SELECT @select = 'Delete From #RD Where InShortTime is not null Or OutShortTime is not null'  
--------  
--------                EXEC (@select)  
--------            END  
--------  
--------        --Select * From #ActLogsPreFinal    
--------        --Select * From #LoopActatek    
--------        DECLARE @Emp_ID AS VARCHAR(10)  
--------        DECLARE @User_ID AS VARCHAR(10)  
--------        DECLARE @EventID AS VARCHAR(20)  
--------        DECLARE @Terminal AS VARCHAR(20)  
--------        DECLARE @Date AS VARCHAR(10)  
--------        DECLARE @Emp_ID_Old AS VARCHAR(10)  
--------        DECLARE @User_ID_Old AS VARCHAR(10)  
--------        DECLARE @TimeEntry AS DATETIME  
--------        DECLARE @TimeEntry_Old AS DATETIME  
--------        DECLARE @EventID_Old AS VARCHAR(20)  
--------        DECLARE @Terminal_Old AS VARCHAR(20)  
--------        DECLARE @Date_Old AS VARCHAR(10)  
--------        DECLARE @Roster_ID AS INT  
--------        DECLARE @RostID AS INT  
--------        DECLARE @time AS VARCHAR(20)  
--------        DECLARE @TSDate AS VARCHAR(10)  
--------        DECLARE db_cursor CURSOR FOR  
--------            SELECT Emp_ID,UserID,TerminalSN,TSDate,EventID,CONVERT(DATETIME, TimeEntry, 103) TimeEntry,Roster_ID,RostID  
--------            FROM   #LoopActatek  
--------            WHERE  Roster_ID IS NOT NULL  
--------            ORDER  BY UserID,TerminalSN,TimeEntry  
--------  
--------        --READ_ONLY FORWARD_ONLY LOCAL     
--------        OPEN db_cursor  
--------        FETCH NEXT FROM db_cursor INTO @Emp_ID, @User_ID, @Terminal, @Date, @EventID, @TimeEntry, @Roster_ID, @RostID  
--------        WHILE (@@FETCH_STATUS = 0)  
--------            BEGIN  
--------                --SET @SETNO = Day(Convert(datetime,@Date_Old,103))+Month(Convert(datetime,@Date_Old,103))+@Roster_ID+@RostID    
--------                IF (@Emp_ID = @Emp_ID_Old)  
--------                   AND (@Terminal = @Terminal_Old)  
--------                   AND (@EventID_Old = 'IN'  
--------                        AND @EventID = 'OUT')  
--------           BEGIN  
--------                        INSERT INTO #ActLogsPreFinal  
--------                        SELECT @Emp_ID,@User_ID,@Terminal,@Date_Old,@Roster_ID,@TimeEntry_Old,@TimeEntry  
--------                    END  
--------                ELSE  
--------                    IF (@Emp_ID = @Emp_ID_Old)  
--------                       AND (@Terminal = @Terminal_Old)  
--------                       AND (@EventID_Old = 'IN'  
--------                            AND @EventID = 'IN')  
--------                        BEGIN  
--------                            INSERT INTO #ActLogsPreFinal  
--------                            SELECT @Emp_ID,@User_ID,@Terminal,@Date_Old,@Roster_ID,@TimeEntry_Old,NULL  
--------                        END  
--------                    ELSE  
--------                        IF (@Emp_ID = @Emp_ID_Old)  
--------                           AND (@Terminal = @Terminal_Old)  
--------                           AND (@EventID_Old = 'OUT'  
--------                                AND @EventID = 'OUT')  
--------                            BEGIN  
--------                                INSERT INTO #ActLogsPreFinal  
--------                                SELECT @Emp_ID,@User_ID,@Terminal,@Date,@Roster_ID,NULL,@TimeEntry  
--------                            END  
--------                        ELSE  
--------                            IF (@Emp_ID = @Emp_ID_Old)  
--------                               AND (@Terminal = @Terminal_Old)  
--------                               AND (@EventID_Old = 'IN'  
--------                                    AND @EventID != 'OUT')  
--------                                BEGIN  
--------                                    INSERT INTO #ActLogsPreFinal  
--------                                    SELECT @Emp_ID,@User_ID,@Terminal,@Date_Old,@Roster_ID,@TimeEntry_Old,NULL  
--------                                END  
--------  
--------                SET @Emp_ID_Old=@Emp_ID  
--------                SET @User_ID_Old=@User_ID  
--------                SET @Terminal_Old=@Terminal  
--------                SET @Date_Old=@Date  
--------                SET @EventID_Old=@EventID  
--------                SET @TimeEntry_Old=@TimeEntry  
--------  
--------                FETCH NEXT FROM db_cursor INTO @Emp_ID, @User_ID, @Terminal, @Date, @EventID, @TimeEntry, @Roster_ID, @RostID  
--------            END  
--------  
--------        CLOSE db_cursor  
--------  
--------        DEALLOCATE db_cursor  
--------  
--------        SELECT DISTINCT A.Emp_Code,A.Time_Card_No,A.Sub_project_ID,A.TSDate,A.[In] FirstIn,A.[Out] LastOut,Datediff(mi, [In], [Out]) TotMinuteWorked,dbo.Converttohours(Datediff(mi, [In], [Out])) TotHrsWorked,RD.*  
--------        INTO   #ActLogsNexFinal  
--------        FROM   #ActLogsPreFinal A  
--------               LEFT OUTER JOIN EmployeeAssignedToRoster EA ON A.Emp_Code = EA.Emp_ID  
--------               LEFT OUTER JOIN RosterDetail RD ON EA.Roster_ID = RD.Roster_ID  
--------                                                  AND A.TSDate = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)  
--------  
--------        SELECT 0 RecordLock, 0 HoursWorked,Cast(0.00 as float) NH, Cast(0.00 as float) OT1, Cast(0.00 as float) OT2,0 CompanyWorkHours,  
--------  0 HrsInMins,E.Wdays_Per_week, 0 ID, A.Emp_Code, isnull(E.Emp_Name,'') Emp_Name,A.Roster_ID,R.Roster_Name,A.TSDate,  
--------  LEFT(Datename(dw, CONVERT(DATETIME, A.TSDate, 103)), 3) Roster_Day,  
--------  TimeStart = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.EarlyInBy,'')),  
--------  A.FirstIn TimeEnd  
--------  ,CoTimeStart = CASE WHEN A.RosterType = 'FLEXIBLE' THEN CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.InTime,'')) Else null End  
--------  ,CoTimeEnd = CASE WHEN A.RosterType = 'FLEXIBLE' THEN CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.InTime,'')) Else null End,A.FirstIn, A.LastOut,  
--------  CONVERT(CHAR(5), CONVERT (DATETIME, A.FirstIn, 105), 108) InShortTime,   
--------  CONVERT(CHAR(5), CONVERT (DATETIME, A.LastOut, 105), 108) OutShortTime,  
--------  TodayPH = dbo.Isholiday(@compid, CONVERT (DATETIME, A.TSDate, 103)), 0 TomorrowPH, A.Time_Card_No,  
--------  A.Sub_project_ID,S.ID SubProjectID, S.Sub_Project_Name,   
--------  RD.Intime,RD.Outtime,RD.EarlyInBy,RD.LateInBy,RD.EarlyOutBy,RD.LateOutBy,RD.ClockInBefore,RD.ClockInAfter,RD.ClockOutBefore,  
--------  RD.ClockOutAfter,RD.BreakTimeNHHr,RD.BreakTimeOThr,RD.BreakTimeNH,RD.BreakTimeOT,RD.NightShift,  
--------  TimeLateInBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.LateInBy,'')),  
--------  TimeEarlyOutBy = CONVERT(DATETIME, CONVERT(VARCHAR, RD.Roster_Date, 101) + ' ' + isnull(RD.EarlyOutBy,'')),  
--------  null TimeBreakTimeNHAfter,null TimeBreakTimeOTAfter,  
--------  BreakTimeNHInMin = CASE WHEN A.RosterType = 'FLEXIBLE' THEN RD.BreakTimeNH  Else 0 End,  
--------  BreakTimeOTInMin = CASE WHEN A.RosterType = 'FLEXIBLE' THEN RD.BreakTimeOT  Else 0 End,  
--------  RD.RosterType,RD.FlexibleWorkinghr,  
--------  RD.PullWorkTimein,  
--------  0 HoursWorkedMin, 0 NHMin, 0 OT1Min, 0 OT2Min  
--------  ,'' Remarks,0 TSSup,E.Email MyEmail,'' EmailSuper,Isnull(B.SETNO, 0) SETPASS  
--------        FROM   #ActLogsNexFinal A  
--------               LEFT OUTER JOIN (SELECT Emp_Code,Time_Card_No,Roster_ID,TSDate,COUNT(*) SETNO  
--------                                FROM   #ActLogsNexFinal  
--------                                WHERE  ([FirstIn] IS NULL  
--------                                         OR [LastOut] IS NULL)  
--------                                   AND RosterType = 'FLEXIBLE'  
--------                                GROUP  BY Emp_Code, Time_Card_No, Roster_ID, TSDate) B ON A.Emp_Code = B.Emp_Code  
--------                                                                                       AND A.Time_Card_No = B.Time_Card_No  
--------                                                                                       AND A.Roster_ID = B.Roster_ID  
--------                                                                                       AND A.TSDate = B.TSDate  
--------           LEFT OUTER JOIN Employee E ON E.Time_Card_No = A.Time_Card_No  
--------           LEFT OUTER JOIN SubProject S ON S.Sub_Project_ID = A.Sub_Project_ID  
--------           LEFT OUTER JOIN Roster R ON R.ID = A.Roster_ID  
--------           LEFT OUTER JOIN RosterDetail RD ON A.Roster_ID = RD.Roster_ID  
--------                                              AND A.TSDate = CONVERT(VARCHAR(10), CONVERT(DATETIME, RD.Roster_Date, 103), 103)  
--------        ORDER  BY A.Emp_Code,A.Sub_Project_ID,CONVERT(DATETIME, A.TSDate, 103)  
--------  
--------        DROP TABLE #ActLogsTempDisInProj  
--------  
--------        DROP TABLE #ActLogsTemp  
--------  
--------        --DROP TABLE #ActLogsTempIn    
--------        --DROP TABLE #ActLogsTempOut    
--------        DROP TABLE #LoopActatek  
--------  
--------        DROP TABLE #ActLogsPreFinal  
--------  
--------        DROP TABLE #ActLogsNexFinal  
--------    END  
----------Select * From Actatek_Logs Where USERID='1016' and year(CONVERT(DATETIME, timeentry, 103))=2010 and month(CONVERT(DATETIME, timeentry, 103))=9    
--------GO
 --Exec sp_genledger 2, 153, 2010, 2  
--------CREATE PROC [dbo].[Sp_genledger]  @company_id INT,    
--------          @month  INT,    
--------          @year  INT,    
--------          @UserID  INT    
-------- AS      
--------  DECLARE @DRTOTAL AS FLOAT    
--------  DECLARE @CRTOTAL AS FLOAT    
--------  DECLARE @Salary  AS FLOAT    
--------  DECLARE @EmpCPF  AS FLOAT    
--------  DECLARE @EmployerCPF AS FLOAT    
--------  DECLARE @UnpaidAmount AS FLOAT    
--------  DECLARE @FundAmount AS FLOAT    
--------  DECLARE @SDL   AS FLOAT    
--------  DECLARE @CoCode  AS Varchar(10)    
--------  DECLARE @LastDayMonth AS int  
--------  DECLARE @LastDateMonth AS varchar(10)  
--------  Declare @SalaryGLCode  AS Varchar(20)    
--------  Declare @EmployeeCPFGLCode  AS Varchar(20)    
--------  Declare @UnpaidGLCode  AS Varchar(20)    
--------  Declare @EmployerCPFGLCode  AS Varchar(20)    
--------  Declare @FundAmtGLCode  AS Varchar(20)    
--------  Declare @SDLAmtGLCode  AS Varchar(20)    
--------  Declare @AccountGLCode  AS Varchar(20)    
--------  Declare @PaySubStartDate AS Datetime    
--------    
--------   DECLARE @ID AS INT      
--------   DECLARE @WorkFlowID AS INT      
--------   DECLARE @RowID AS INT      
--------   DECLARE @DATEINYEAR TABLE (      
--------    ROWID           INT,      
--------    Emp_Code        INT,      
--------    [Year]          INT,      
--------    [Month]         INT,      
--------    [MonthName]     VARCHAR(100),      
--------    PayStartDate    DATETIME,      
--------    PayEndDate      DATETIME,      
--------    PaySubStartDate DATETIME,      
--------    PaySubEndDate   DATETIME,      
--------    PayStartDay     INT,      
--------    PayEndDay       INT,      
--------    PaySubStartDay  INT,      
--------    PaySubEndDay    INT,      
--------    ISEOM           VARCHAR(3))      
--------         
--------         
--------   INSERT @DATEINYEAR      
--------    (ROWID,Emp_Code,[Year],[Month],[MonthName],PayStartDate,PayEndDate,PaySubStartDate,PaySubEndDate,PayStartDay,PayEndDay,PaySubStartDay,PaySubEndDay,ISEOM)      
--------   EXEC Sp_getpayrollmonth @month,0,0      
--------    
-------- Select @LastDayMonth = PayEndDay, @LastDateMonth = Convert(varchar(10),PayEndDate,103) From @DATEINYEAR    
--------    
-------- SELECT --pd.trx_id,pd.emp_id,REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '') emp_name,    
--------   em.Pay_supervisor,    
-------- CONVERT(NUMERIC(10, 2), CONVERT(VARCHAR(20), Decryptbyasymkey(Asymkey_id('AsymKey'), basic_pay))) AS basic_pay,    
-------- CONVERT(NUMERIC(18, 2), NH_e) NH_e,    
-------- CONVERT(NUMERIC(18, 2), pd.Ot1_e) Ot1_e,    
-------- CONVERT(NUMERIC(18, 2), pd.OT2_e) OT2_e,    
-------- EmpCPF, EmployerCPF, Fund_Amount,SDL, unpaid_leaves_amount    
--------   INTO   #EmployeeTemp    
--------   FROM   prepare_payroll_hdr ph    
--------    INNER JOIN prepare_payroll_detail pd ON ph.trx_id = pd.trx_id      
--------    INNER JOIN Employee em ON pd.emp_id = em.emp_code      
--------    LEFT OUTER JOIN Department de ON em.dept_id = de.id      
--------   WHERE  pd.status = 'G'     
--------   AND (CONVERT(DATETIME, ph.start_period, 103) >= (SELECT PaySubStartDate      
--------                FROM   @DATEINYEAR)      
--------     AND CONVERT(DATETIME, ph.end_period, 103) <= (SELECT PaySubEndDate      
--------               FROM   @DATEINYEAR))      
--------   AND em.company_id = @company_id      
--------   ORDER  BY REPLACE(Isnull(em.emp_name, '') + ' ' + Isnull(em.emp_lname, ''), '/', '')      
--------         
--------   Select     
--------  @CoCode = Company_Code,     
--------  @SalaryGLCode=SalaryGLCode,    
--------  @EmployeeCPFGLCode=EmployeeCPFGLCode,    
--------  @EmployerCPFGLCode=EmployerCPFGLCode,    
--------  @FundAmtGLCode=FundAmtGLCode,    
--------  @SDLAmtGLCode=SDLAmtGLCode,    
--------  @AccountGLCode=AccountGLCode,  
--------  @UnpaidGLCode= UnpaidLeaGLCode   
--------  From Company Where Company_ID = @company_id    
--------    
--------  SELECT @PaySubStartDate=PaySubStartDate  FROM   @DATEINYEAR    
--------    
--------   SELECT @Salary=(Sum(Basic_Pay) + Sum(NH_E) + Sum(OT1_E) + Sum(OT2_E)), @EmpCPF=Sum(EmpCPF) , @EmployerCPF=Sum(EmployerCPF), @FundAmount=Sum(Fund_Amount), @SDL=Sum(SDL), @UnpaidAmount = Sum(Unpaid_Leaves_Amount)  
--------   FROM   #EmployeeTemp      
--------    
--------    
--------   Select * Into #DRTable From     
--------  (    
--------    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'DR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @SalaryGLCode Acctnum, round(@Salary,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@Salary,2) AmtLocal, 'Salary' [Description], '' PrjCode    
--------   UNION ALL    
--------     Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'DR' DrCr, 'n' Offsetyn, '' OffsetInvNum, AT.AccountCode Acctnum, SUM(round(isnull(trx_amount,0),2)) AmtForex, 'SGD' CCY, 1 CCYRT, SUM(round(isnull(trx_amount,0),2)) AmtLocal, AT.[Desc] [Description], '' PrjCode    
--------     FROM   emp_additions EA      
--------      INNER JOIN Additions_types AT ON EA.Trx_Type = AT.ID      
--------     WHERE      
--------     (year(trx_period) = year(@PaySubStartDate) And month(trx_period) = month(@PaySubStartDate))    
--------     AND (EA.ClaimStatus = 'Approved'  
--------     OR EA.ClaimStatus IS NULL)  
--------     Group By EA.Trx_Type, AT.AccountCode,AT.[Desc]  
--------   UNION ALL  
--------    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'DR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @EmployeeCPFGLCode Acctnum, round(@EmpCPF,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@EmpCPF,2)  AmtLocal, 'Employee CPF' [Description], '' PrjCode    
--------  )  E    
--------    
--------   Select * Into #CRTable From     
--------  (    
--------    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @UnpaidGLCode Acctnum, round(@UnpaidAmount,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@UnpaidAmount,2) AmtLocal, 'Unpaid Leaves' [Description], '' PrjCode    
--------   UNION ALL    
--------    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @EmployerCPFGLCode Acctnum, round(@EmployerCPF,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@EmployerCPF,2) AmtLocal, 'Employer CPF' [Description], '' PrjCode    
--------   UNION ALL    
--------    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @FundAmtGLCode Acctnum, round(@FundAmount,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@FundAmount,2) AmtLocal, 'Fund Amount' [Description], '' PrjCode    
--------   UNION ALL    
--------    Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, @SDLAmtGLCode Acctnum, round(@SDL,2) AmtForex, 'SGD' CCY, 1 CCYRT, round(@SDL,2) AmtLocal, 'SDL Amount' [Description], '' PrjCode    
--------   UNION ALL    
--------     Select '1' SetNum, @CoCode CoCode, 'sub_jour' TransType, '' BUCode, '' StaffCode, (CONVERT(VARCHAR(8), GETDATE(), 112)+'01') Docnum, '' ChqNum, '' MasNum, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') TradeDate, (CONVERT(VARCHAR(8), @LastDateMonth, 112)+'01') DueDate, @LastDateMonth DocmDate,'GL' PartyCode, '' PartyName, 'x' Taxableynx, '' VATCode, 'CR' DrCr, 'n' Offsetyn, '' OffsetInvNum, DT.AccountCode Acctnum, SUM(round(isnull(trx_amount,0),2)) AmtForex, 'SGD' CCY, 1 CCYRT, SUM(round(isnull(trx_amount,0),2)) AmtLocal, DT.[Desc] [Description], '' PrjCode    
--------     FROM   Emp_Deductions ED      
--------      INNER JOIN Deductions_Types DT ON ED.Trx_Type = DT.ID      
--------     WHERE    
--------     (year(trx_period) = year(@PaySubStartDate) And month(trx_period)=month(@PaySubStartDate))    
--------     Group By ED.Trx_Type,DT.AccountCode,DT.[Desc]  
--------  ) D    
--------    
--------  Select @DRTOTAL=isnull(Sum(AmtForex),0) From #DRTable    
--------  Select @CRTOTAL=isnull(Sum(AmtForex),0) From #CRTable    
--------      
--------    
--------  Select * From #DRTable    
--------  Union All    
--------  Select * From #CRTable    
--------  Union All    
--------    Select '' SetNum, '' CoCode, '' TransType, '' BUCode, '' StaffCode, '' Docnum, '' ChqNum, '' MasNum, '' TradeDate, '' DueDate, '' DocmDate,'' PartyCode, '' PartyName, '' Taxableynx, '' VATCode, '' DrCr, '' Offsetyn, '' OffsetInvNum, @AccountGLCode Acctnum, (@DRTOTAL-@CRTOTAL) AmtForex, '' CCY, '' CCYRT, 0 AmtLocal, @AccountGLCode  [Description], '' PrjCode    
--------    
--------   DROP TABLE #EmployeeTemp      
--------    
--------   DROP TABLE #DRTable    
--------    
--------   DROP TABLE #CRTable    
--------  
--------GO
--------Merging 9.0
--------CREATE PROC [dbo].[sp_payroll_Update]-- 1114,'2009-03-17 11:14:39.000','G'                                  
--------       (  
--------        @trx_id VARCHAR(50) ,  
--------        @trxdate VARCHAR(50) ,  
--------        @status VARCHAR(5)  
--------       )  
--------AS   
--------       BEGIN                         
--------             DECLARE @fwl FLOAT                          
--------             DECLARE @emp_code INT                          
--------             DECLARE @gross FLOAT                          
--------             DECLARE @emp_type VARCHAR(50)
--------
--------
--------			DECLARE @startst DATETIME
--------			DECLARE @enddt DATETIME
--------			DECLARE @startdtsub DATETIME
--------			DECLARE @enddtsub DATETIME
--------			Declare @fundgross as float
--------			Declare @empcode as int
--------			Declare @CalcFundFH as varchar(1)
--------			Declare @INTendatesubmonth as int
--------
--------
--------             IF (@status = 'G')
--------			BEGIN
--------				Select @startst=Convert(Datetime,Start_Period,103),@enddt=Convert(Datetime,End_Period,103) From Prepare_Payroll_hdr Where trx_id = @trx_id         
--------
--------				SELECT @startdtsub = CONVERT(DATETIME, PaySubStartDate, 103),@enddtsub = CONVERT(DATETIME, PaySubEndDate, 103),@INTendatesubmonth=PayEndDay
--------				FROM   payrollmonthlydetail Where CONVERT(DATETIME, PaySubStartDate, 103)=@startst And  CONVERT(DATETIME, PaySubEndDate, 103)=@enddt
--------
--------				Select @CalcFundFH=CASE
--------				WHEN @INTendatesubmonth = 15 AND ComputeFundFH = 1 THEN 'Y'
--------				WHEN @INTendatesubmonth = 15 AND ComputeFundFH = 0 THEN 'N'
--------				ELSE 'Y'
--------				END
--------				From Employee 
--------
--------				Select @fundgross=isnull(Total_Gross,0),@empcode=emp_id From prepare_payroll_detail Where Trx_ID = @trx_id
--------
--------				SELECT ED.Trx_ID,FundType = Case
--------				When ED.FundType=1 Then 'CDAC'  
--------				When ED.FundType=2 Then 'ECF'  
--------				When ED.FundType=3 Then 'MBMF'  
--------				When ED.FundType=4 Then 'SINDA'  
--------				END
--------				INTO   #FundPerc  
--------				FROM   Emp_Deductions ED  
--------				INNER JOIN Deductions_Types DT ON ED.trx_type = DT.ID  
--------				INNER JOIN Employee EM On EM.Emp_Code = ED.Emp_Code
--------				WHERE  ((trx_period >= @startdtsub  
--------				AND trx_period <= @enddtsub)  
--------				AND YEAR(trx_period) = Year(@startdtsub))  
--------				And (ED.FundType is not null And (ED.FundType >=1 And ED.FundType <=4))  
--------				And EM.Emp_Code=@empcode
--------				AND @CalcFundFH = 'Y'  
--------				GROUP  BY ED.Emp_Code, ED.trx_id, ED.FundType 
--------
--------
--------				UPDATE ED  
--------				SET    ED.trx_amount = cast (dbo.Getempfundcontribution(@fundgross, Isnull(EM.FundType, '')) AS DECIMAL(9, 2))
--------				FROM   Emp_Deductions ED
--------				INNER JOIN #FundPerc EM ON ED.Trx_ID = EM.Trx_ID  
--------
--------				Drop Table #FundPerc
--------
--------			END
--------                          
--------             SELECT @emp_code = emp_id, @gross = ISNULL(total_gross, 0)  
--------             FROM   prepare_payroll_detail  
--------             WHERE  trx_id = @trx_id                          
--------  
--------                      
--------             SELECT @fwl = ISNULL(fw_levy, 0), @emp_type = emp_type  
--------             FROM   employee  
--------             WHERE  emp_code = @emp_code          
--------  
--------                                               
--------             IF (@emp_type = 'WP') OR  
--------                (@emp_type = 'SP') --FWL is only for work permit and spass                          
--------                SET @fwl = @fwl                          
--------             ELSE   
--------                SET @fwl = 0                          
--------                              
--------             UPDATE prepare_payroll_detail  
--------             SET    status = @status, FWL = @fwl  
--------             WHERE  trx_id = @trx_id                              
--------             UPDATE prepare_payroll_hdr  
--------             SET    trx_date = @trxdate  
--------             WHERE  trx_id = @trx_id                    
--------                  
--------/* UNLOCKING AGAIN WHEN PAYROLL IS REJECTED. */                  
--------             IF @status = 'R'   
--------                BEGIN                  
--------                      DECLARE @month INT                  
--------                      DECLARE @year INT                  
--------                      SELECT    @month = MONTH(start_period), @year = YEAR(start_period)  
--------                      FROM      prepare_payroll_hdr  
--------                      WHERE     trx_id = @trx_id                    
--------                      UPDATE    emp_additions  
--------                      SET       status = 'U'  
--------                      WHERE     emp_code = @emp_code AND  
--------                                MONTH(trx_period) = @month AND  
--------                                YEAR(trx_period) = @year                                            
--------                                             
--------                      UPDATE    emp_deductions  
--------                      SET       status = 'U'  
--------                      WHERE     emp_code = @emp_code AND  
--------                                MONTH(trx_period) = @month AND  
--------                                YEAR(trx_period) = @year                                            
--------                      UPDATE    emp_leaves  
--------                      SET       payrollStatus = 'U'  
--------                      WHERE     ((MONTH(start_date) = @month AND  
--------                                  YEAR(start_date) = @year  
--------                                 ) OR  
--------                                 (MONTH(end_date) = @month AND  
--------                                  YEAR(end_date) = @year  
--------                                 )  
--------                                ) AND  
--------                                emp_id = @emp_code                                          
--------                                         
--------                      UPDATE    timesheet  
--------                      SET       payrollstatus = 'U'  
--------                      WHERE     MONTH(timesheet_date) = @month AND  
--------                                YEAR(timesheet_date) = @year AND  
--------                                emp_id = @emp_code                         
--------                END                  
--------       END  
--------GO
--------Merging 9.0
--------CREATE PROCEDURE [dbo].[sp_empdeduc_update]  
--------       (  
--------        @trx_id [int] ,  
--------        @trx_type [varchar](50) ,  
--------        @trx_period VARCHAR(25) ,  
--------        @trx_amount [money]  
--------       )  
--------AS   
--------       BEGIN  
--------			DECLARE @trx_period1 DATETIME  
--------			DEclare @fundtype as int  
--------				Select @fundtype=Case
--------				When [Desc] = 'CDAC -A' Then 1
--------				When [Desc] = 'ECF  -A' Then 2
--------				When [Desc] = 'MBMF -A' Then 3
--------				When [Desc] = 'SINDA-A' Then 4
--------				When [Desc] = 'CDAC -M' Then 5
--------				When [Desc] = 'ECF  -M' Then 6
--------				When [Desc] = 'MBMF -M' Then 7
--------				When [Desc] = 'SINDA-M' Then 8 Else 0  
--------				END   
--------			From Deductions_Types Where ID = @trx_type  
--------  
--------             --SELECT @trx_period1 = CONVERT(DATETIME, @trx_period)
--------  
--------             UPDATE [emp_deductions]  
--------             SET    [trx_type] = @trx_type, [trx_amount] = @trx_amount, FundType = @fundtype 
--------             WHERE  [trx_id] = @trx_id  
--------       END  
--------GO
--------Merging 9.0
--------CREATE PROCEDURE [dbo].[sp_empdeduc_add]        
--------       (        
--------        @emp_code INT ,        
--------        @trx_type [varchar](50) ,        
--------        @trx_period1 VARCHAR(25) ,        
--------        @trx_period2 VARCHAR(25) ,        
--------        @trx_amount [money] ,        
--------        @compid INT        
--------       )        
--------AS         
--------       BEGIN    
--------		DEclare @fundtype as int  
--------		Select @fundtype=Case  
--------			When [Desc] = 'CDAC -A' Then 1   
--------			When [Desc] = 'ECF  -A' Then 2   
--------			When [Desc] = 'MBMF -A' Then 3   
--------			When [Desc] = 'SINDA-A' Then 4   
--------			When [Desc] = 'CDAC -M' Then 5   
--------			When [Desc] = 'ECF  -M' Then 6   
--------			When [Desc] = 'MBMF -M' Then 7   
--------			When [Desc] = 'SINDA-M' Then 8 Else 0  
--------			END   
--------		From Deductions_Types Where ID = @trx_type  
--------  
--------  
--------          
--------             DECLARE @trx_period3 DATETIME            
--------             DECLARE @trx_period4 DATETIME            
--------             DECLARE @month1 AS INT            
--------             DECLARE @month2 AS INT            
--------             DECLARE @year AS INT            
--------            
--------             SELECT @trx_period3 = CONVERT(DATETIME, @trx_period1), @trx_period4 = CONVERT(DATETIME, @trx_period2)            
--------             --SELECT @trx_period3 = DATEADD(dd, DATEPART(dd, @trx_period3) * -1 + 1, @trx_period3)            
--------             --SELECT @trx_period4 = DATEADD(dd, DATEPART(dd, @trx_period4) * -1 + 1, @trx_period4)            
--------        
--------             SELECT @month1 = DATEPART(yy, @trx_period3) * 100 + DATEPART(mm, @trx_period3)            
--------             SELECT @month2 = DATEPART(yy, @trx_period4) * 100 + DATEPART(mm, @trx_period4)            
--------            
--------            
--------             WHILE (@trx_period3 <= @trx_period4)         
--------                   BEGIN            
--------                         SELECT @trx_period3            
--------                         IF @emp_code = '-1'         
--------                            BEGIN            
--------   --print '1'            
--------                                  INSERT    INTO [emp_deductions] ([emp_code], [trx_type], [trx_period], [trx_amount])        
--------                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount        
--------                                            FROM    employee        
--------                                            WHERE   Company_ID = @compid        
--------                            END            
--------                         ELSE         
--------                            BEGIN            
--------   --print '2'            
--------                                  INSERT    INTO [emp_deductions] ([emp_code], [trx_type], [trx_period], [trx_amount],FundType)        
--------                                            SELECT  emp_code, @trx_type, @trx_period3, @trx_amount,@fundtype        
--------                                            FROM    employee        
--------                                            WHERE   emp_code = @emp_code AND        
--------                                                    Company_Id = @compid        
--------                            END            
--------                         SELECT @trx_period3 = DATEADD(mm, 1, @trx_period3)            
--------                   END                
--------       END 
--------GO
--------Merging 9.0
--------CREATE PROCEDURE [dbo].[sp_BulkInsert_Holidays]
--------(
--------	@filePath VARCHAR(1000),  		
--------	@compid   INT	
--------)
--------	AS  
--------	BEGIN 
--------		--Create Temporary Table AND Insert data 
--------
--------		CREATE TABLE #public_holidays_temp
--------		(
--------			[holiday_date] [datetime] NOT NULL,
--------			[holiday_name] [varchar](50)NULL	
--------		)		
--------		DECLARE @sqlStatement  varchar(1000)
--------		--SET @filePath ='C:\NATIONAL_HOLIDAYS.csv'
--------		SET @sqlStatement ='BULK INSERT #public_holidays_temp FROM ' 
--------		+ '''' + @filePath + '''' + ' WITH ( FIRSTROW = 2, FIELDTERMINATOR =''' + ',' + '''' +  ',ROWTERMINATOR= ''' + '\n'  + '''' + ')'
--------		EXEC (@sqlStatement)
--------
--------		CREATE TABLE #TempCourse
--------		(
--------			[holiday_date] [datetime] NOT NULL,
--------			[holiday_name] [varchar](50)NULL,
--------			[companyid]	int NULL
--------		)
--------
--------		Insert into #TempCourse (holiday_date,holiday_name)
--------		SELECT Temp.holiday_date,Temp.holiday_name FROM
--------		(SELECT * FROM #public_holidays_temp WHERE #public_holidays_temp.holiday_date 
--------		NOT IN (SELECT public_holidays.holiday_date FROM  public_holidays))As Temp
--------
--------		UPDATE #TempCourse SET companyid=-1
--------		--- INSERT VALUES in public_holiday final database table
--------		INSERT INTO public_holidays
--------		SELECT * FROM  #TempCourse
--------
--------		DROP TABLE #public_holidays_temp
--------		DROP TABLE #TempCourse
--------	END
--------GO
--------Merging 9.0
------CREATE PROCEDURE sp_GetLastDatbaseLogDay
------AS  
------BEGIN  
------ -- SET NOCOUNT ON added to prevent extra result sets from  
------ -- interfering with SELECT statements.  
------ SET NOCOUNT ON;  
------ DECLARE @Last_Log_Date As DateTime  
------ SET @Last_Log_Date = (SELECT TOP 1 LogTime FROM VIEW_GET_DATABASE_LOG_DETAILS)  
------ SELECT DATEDIFF(day,@Last_Log_Date, getdate()) AS no_of_days
------END  
------GO
------Merging 9.0
--------Create PROCEDURE [dbo].[sp_emppay_addAll]              
--------       (              
--------        @empcode INT ,              
--------        @empmonth INT ,              
--------        @empyear VARCHAR(50)              
--------       )              
--------AS               
--------       BEGIN                                  
--------             IF (@empmonth <> 13)               
--------                BEGIN                                  
--------                      SELECT    e.[trx_id], a.[id], a.[desc], a.[cpf], e.[trx_amount],              
--------                                convert(varchar(10),trx_period,103) trx_period,              
--------                                e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name', ISNULL(e.recpath, '') recpath,              
--------                                e.basis_arriving_payment, e.service_length, e.iras_approval,              
--------                                CONVERT(VARCHAR(10), CONVERT(DATETIME, e.iras_approval_date, 105), 103) [iras_approval_date],              
--------                                additionsforyear, a.optionselection , RecStatus = CASE WHEN e.status = 'L' THEN 'Locked'              
--------                                                                                      ELSE ''              
--------                                                                                 END,      
--------        convert(varchar(10),trx_period,101) trx_period_copy      
--------                      FROM      [emp_additions] e ,              
--------                                additions_types a ,              
--------                                employee b              
--------                      WHERE     e.[emp_code] = @empcode AND              
--------                                e.trx_type = a.id AND              
--------                                e.emp_code = b.emp_code AND              
--------                                DATEPART(mm, trx_period) = @empmonth AND              
--------                                (e.claimstatus = 'Approved' OR e.claimstatus = 'Open' OR e.claimstatus IS NULL
--------                                ) AND              
--------                                CONVERT(CHAR(4), DATEPART(yyyy, trx_period)) = @empyear              
--------                      ORDER BY  b.emp_name                                 
--------                END                                  
--------             ELSE               
--------                BEGIN                                  
--------                      SELECT    e.[trx_id], a.[id], a.[desc], a.[cpf], e.[trx_amount],              
--------                                convert(varchar(10),trx_period,103) trx_period,              
--------                                e.[emp_code], b.emp_name + ' ' + b.emp_lname 'emp_name', e.basis_arriving_payment,              
--------                                e.service_length, e.iras_approval,              
--------                                CONVERT(VARCHAR(10), CONVERT(DATETIME, e.iras_approval_date, 105), 103) [iras_approval_date],              
--------                                additionsforyear, a.optionselection, RecStatus = CASE WHEN e.status = 'L' THEN 'Locked'              
--------                                                                                      ELSE ''              
--------                                                                                 END,      
--------        convert(varchar(10),trx_period,101) trx_period_copy              
--------                      FROM      [emp_additions] e ,              
--------                                additions_types a ,              
--------                                employee b              
--------                      WHERE     e.[emp_code] = @empcode AND              
--------                                e.trx_type = a.id AND              
--------                                e.emp_code = b.emp_code AND              
--------                                (e.claimstatus = 'Approved' OR     
--------         e.claimstatus = 'Open' OR           
--------                                 e.claimstatus IS NULL              
--------                                ) AND              
--------                                CONVERT(CHAR(4), DATEPART(yyyy, trx_period)) = @empyear              
--------                      ORDER BY  b.emp_name, CONVERT(DATETIME, e.trx_period, 103), a.optionselection, a.[desc]                
--------                END                                  
--------                                  
--------       END 
--------GO
--------Merging 9.0

----------CREATE PROCEDURE sp_InsertDataBaseBackupLog
----------(
----------			@LogDetails NVARCHAR(250),
----------			@Log_Type  NVARCHAR(50)	
----------)
----------As
----------BEGIN
----------	SET NOCOUNT ON;
----------	DECLARE @Log_Date As DateTime
----------	SET @Log_Date = getdate()
----------
----------	INSERT INTO DataBaseBackupLog
----------	VALUES
----------	(@LogDetails,@Log_Date,@Log_Type )
----------
----------END
----------GO
----------Merging 9.0


------SET ANSI_NULLS ON
------GO
------SET QUOTED_IDENTIFIER ON
------GO
------CREATE PROCEDURE sp_GetROLLBackLeaves  
------(		
------	@Groupid    INT,      
------	@year       INT  
------)     
------AS  
------ DECLARE @leave_type DECIMAL(8,2)  
------ DECLARE @year_last DECIMAL(8,2)  
------ DECLARE @cnt3 DECIMAL(8,2)  
------ SET @leave_type=8   
------ SET @year_last=@year-1   
------  
------ SELECT @cnt3 =  COUNT(*) FROM leaves_forefited  WHERE leave_year=@year_last AND emp_id IN  
------ (  
------  SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid   
------ )  
------  
------ CREATE TABLE  #LeavesRB  
------ (     
------   emp_code            varchar(250),    
------   emp_name            VARCHAR(50),      
------   leaves_allowed_CY   DECIMAL(8,2),   
------   leaves_allowed_LY   DECIMAL(8,2),
------   
------ )   
------ IF @cnt3 >0  
------  
------  BEGIN  
------    
------   SELECT A.emp_code,A.emp_name,A.leaves_allowed,A.leave_year INTO ##temp1  
------   FROM  
------    (SELECT emp_code,emp_name,leaves_allowed,L.leave_year  
------     FROM Employee E INNER JOIN leaves_allowed L   
------     ON E.emp_group_id=L.group_id where  L.group_id=@Groupid and L.leave_type=@leave_type And L.leave_year IN (@year_last ,@year)     
------     AND E.Termination_Date IS NULL AND E.emp_code IN (SELECT emp_id FROM leaves_forefited WHERE leave_year=@year_last and emp_id  IN 
------		(SELECT emp_code FROM employee WHERE emp_group_id=@Groupid)))A
------
------   INSERT INTO #LeavesRB  
------   SELECT * FROM ##temp1 WHERE leave_year=@year 
------
------   	 --select * from #LeavesRB
------     
------   DECLARE @cnt DECIMAL  
------   SELECT @cnt =count(*) FROM #LeavesRB   
------     
------   DECLARE @emp_name varchar(250)  
------     SELECT @emp_name = emp_name FROM ##temp1   
------  
------   DECLARE @cnt2 DECIMAL  
------   SELECT @cnt2 =count(*) FROM ##temp1   
------  
------   DECLARE @leaves DECIMAL(8,2)  
------   --SET @cnt=0  
------   IF @cnt>0  
------    BEGIN  
------		-- print '1' 
------     SELECT  @leaves = leaves_allowed  FROM ##temp1 WHERE leave_year=@year_last  	 
------	
------     UPDATE #LeavesRB SET leaves_allowed_LY=@leaves FROM #LeavesRB INNER JOIN ##temp1 ON 
------		#LeavesRB.emp_code=##temp1.emp_code   -- WHERE emp_name=@emp_name   
------	 
------    END  
------   ELSE   
------    BEGIN  
------     IF @cnt2>0  
------		 --print '2' 
------      BEGIN   
------       --SELECT * FROM ##temp1 WHERE leave_year=2010  
------       INSERT INTO #LeavesRB  
------       SELECT emp_code,emp_name,NULL,leaves_allowed FROM ##temp1 WHERE leave_year=@year_last  
------      END     
------    END  
------    DROP TABLE ##temp1  
------   END   
------  
------
------	SELECT  A.LY_Leaves_Bal,A.Emp_ID INTO ##temp7 
------	FROM
------	(
------		SELECT  LY_Leaves_Bal,Emp_ID  FROM LeavesAllowedInYears  where emp_id IN 
------		(
------			SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid AND Termination_Date IS NULL
------		)and YEARS=@year_last   And LeaveType=1 	
------	)A
------	
------
------	--select *  FROM LeavesAllowedInYears WHERE YEARS='2010' and emp_id='1036' and YEARS='2010' And LeaveType=1 
------	--SELECT * FROM leaves_forefited  WHERE emp_id=1036 and leave_year=2010
------	--	SELECT * FROM 
------	SELECT A.leave_forward,A.emp_id	INTO ##temp8
------	FROM
------	(
------		SELECT leave_forward,emp_id FROM leaves_forefited  WHERE emp_id IN 
------		(
------			SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid  AND Termination_Date IS NULL
------			and leave_year=@year_last  
------		)
------	)A
------
------
------CREATE TABLE  #LeavesRB1 
------(     
------	emp_code            varchar(250),		
------	emp_name            VARCHAR(50),      
------	leaves_allowed_CY   DECIMAL(8,2),   
------	leaves_allowed_LY   DECIMAL(8,2),  
------	leaves_CF_LY		DECIMAL(8,2),  
------	leaves_CF_LY1		DECIMAL(8,2),
------	leaves_elapsed		DECIMAL(8,2) 
------)   
------	
------INSERT INTO #LeavesRB1 
------SELECT emp_code,emp_name,leaves_allowed_CY,leaves_allowed_LY,0,0,0 FROM #LeavesRB
------
--------SELECT * from #LeavesRB1 
------
------DECLARE	@leaves_CF_LY		DECIMAL(8,2)  
------DECLARE	@leaves_CF_LY1		DECIMAL(8,2)
------
------UPDATE #LeavesRB1  SET #LeavesRB1.leaves_CF_LY=##temp7.LY_Leaves_Bal FROM ##temp7
--------INNER JOIN  ##temp7 ON (#LeavesRB1.emp_code =##temp7.emp_id) 
------
------UPDATE #LeavesRB1  SET #LeavesRB1.leaves_CF_LY1=##temp8.leave_forward FROM ##temp8
--------INNER JOIN  ##temp8 ON (#LeavesRB1.emp_code =##temp8.emp_id)
------
------
------SELECT A.emp_id,A.leave_forefited  INTO #tempLF FROM 
------	(
------		SELECT emp_id,leave_forefited FROM leaves_forefited 
------		WHERE emp_id IN(SELECT emp_code FROM Employee WHERE emp_group_id=@Groupid AND Termination_Date IS NULL
------		and leave_year=@year_last)  and leave_year=@year_last
------	)A
------
------UPDATE #LeavesRB1  SET #LeavesRB1.leaves_elapsed=#tempLF.leave_forefited FROM #tempLF
------INNER JOIN #LeavesRB1 ON (#LeavesRB1.emp_code=#tempLF.emp_id)
------
--------SELECT * FROM ##temp1  
------SELECT *
------from #LeavesRB1  
------
------DROP TABLE #LeavesRB 
------DROP TABLE ##temp7 
------DROP TABLE ##temp8
------DROP TABLE #LeavesRB1 
------DROP TABLE #tempLF
------GO
------
-------Merging 9.0